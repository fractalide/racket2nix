#hash(("compose-app" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "compose-app" "doc/compose-app@compose-app/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/compose-app.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/compose-app.txt"))) (checksum . "b1ca7838740c3cc84e392ea17f9e57f0595c111f") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "fancy-app" "racket-doc" ("scribble-lib" #:version "1.16") "scribble-text-lib" "rackunit-lib")) (description . "#%app syntax for function composition, (a .. b .. c) => (lambda (v) (a (b (c v))))") (implies . ()) (last-checked . 1522414366) (last-edit . 1500074194) (last-updated . 1502815866) (modules . ((lib "compose-app/test.rkt") (lib "compose-app/main.rkt") (lib "compose-app/main.scrbl") (lib "compose-app/fancy-app.rkt"))) (name . "compose-app") (nix-sha256 . "1pp5mg0fk3c2k358cr5isvd7mdd73plk2pg12vrnp9wlsmnnabm0") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (app-syntax . #t) (author:jackhfirth@gmail.com . #t) (functional . #t) (ring:1 . #t) (sugar . #t))) (source . "git://github.com/jackfirth/compose-app") (tags . ("app-syntax" "functional" "sugar")) (versions . #hash((default . #hasheq((checksum . "b1ca7838740c3cc84e392ea17f9e57f0595c111f") (source . "git://github.com/jackfirth/compose-app") (source_url . "http://github.com/jackfirth/compose-app/tree/master"))))))) ("markparam" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/markparam.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/markparam.txt"))) (checksum . "f6393494334318ef497606001f2e83bab2c8c15d") (checksum-error . #f) (conflicts . ()) (dependencies . ("markparam-lib" "markparam-doc")) (description . "a convenience library for continuation marks like parameters") (implies . ("markparam-lib" "markparam-doc")) (last-checked . 1522414427) (last-edit . 1438288079) (last-updated . 1502816163) (modules . ()) (name . "markparam") (nix-sha256 . "1fj9xn8s5b1n3qz881qibj29dhzbyjgkj2g0yxaav02580qgvxs0") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (continuation-marks . #t) (ring:1 . #t) (utility . #t))) (source . "git://github.com/jeapostrophe/markparam/?path=markparam") (tags . ("continuation-marks" "utility")) (versions . #hash((default . #hasheq((checksum . "f6393494334318ef497606001f2e83bab2c8c15d") (source . "git://github.com/jeapostrophe/markparam/?path=markparam") (source_url . "git://github.com/jeapostrophe/markparam/?path=markparam"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("cur-doc" . #hasheq((author . "wjb@williamjbowman.com") (authors . ("wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cur" "doc/cur@cur-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cur-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cur-doc.txt"))) (checksum . "c3e03ec6a017fcbaed9dcf1917e014f3cec345b9") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "sandbox-lib" "cur-lib")) (description . "") (implies . ()) (last-checked . 1522414371) (last-edit . 1510768130) (last-updated . 1510758069) (modules . ((lib "cur/scribblings/curnel.scrbl") (lib "cur/scribblings/stdlib/nat.scrbl") (lib "cur/scribblings/olly.scrbl") (lib "cur/cur.scrbl") (lib "cur/scribblings/stdlib/list.scrbl") (lib "cur/scribblings/defs.rkt") (lib "cur/scribblings/stdlib/typeclass.scrbl") (lib "cur/scribblings/stdlib.scrbl") (lib "cur/scribblings/reflection.scrbl") (lib "cur/scribblings/stdlib/sigma.scrbl") (lib "cur/scribblings/stdlib/maybe.scrbl") (lib "cur/scribblings/stdlib/bool.scrbl") (lib "cur/scribblings/ntac.scrbl") (lib "cur/scribblings/stdlib/sugar.scrbl"))) (name . "cur-doc") (nix-sha256 . "0ym25g3m8jryrbbm9rmm1ii5wkaar88zyy3c400ljxh25i0c7az8") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:wjb@williamjbowman.com . #t) (ring:1 . #t))) (source . "https://github.com/wilbowma/cur.git?path=cur-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c3e03ec6a017fcbaed9dcf1917e014f3cec345b9") (source . "https://github.com/wilbowma/cur.git?path=cur-doc") (source_url . "https://github.com/wilbowma/cur.git?path=cur-doc"))))))) ("drracket-material" . #hasheq((author . "oeplse@gmail.com") (authors . ("oeplse@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-material.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-material.txt"))) (checksum . "560b77fffe55bfc06b3cce6416cbbdda759dd16f") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "This package adds a Material colorscheme to DrRacket.") (implies . ()) (last-checked . 1522414393) (last-edit . 1521907708) (last-updated . 1521911795) (modules . ()) (name . "drracket-material") (nix-sha256 . "011kwkz1dhszjzi15s56cxdzjyngj5j2hmym4gyqxx6dmqf0wjgj") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (author:oeplse@gmail.com . #t) (colorscheme . #t) (material . #t) (ring:2 . #t))) (source . "https://github.com/turbinenreiter/drracket-material.git") (tags . ("colorscheme" "material")) (versions . #hash((default . #hasheq((checksum . "560b77fffe55bfc06b3cce6416cbbdda759dd16f") (source . "https://github.com/turbinenreiter/drracket-material.git") (source_url . "https://github.com/turbinenreiter/drracket-material.git"))))))) ("slideshow-plugin" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (checksum . "f2ee76768297f390d7aa7454d4d77688858f3489") (dependencies . ("base" "slideshow-lib" "pict-lib" "string-constants-lib" "compatibility-lib" "drracket-plugin-lib" "gui-lib")) (description . "mflatt@racket-lang.org robby@racket-lang.org") (modules . ()) (name . "slideshow-plugin") (source . "https://download.racket-lang.org/releases/6.12/pkgs/slideshow-plugin.zip") (tags . ()))) ("temp-c-lib" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/temp-c-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/temp-c-lib.txt"))) (checksum . "43f7f2141c81a301aa229ef4105f458eee070653") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.2.900.4") "automata-lib")) (description . "temporal contracts") (implies . ()) (last-checked . 1522414690) (last-edit . 1504535573) (last-updated . 1502816475) (modules . ((lib "temp-c/dsl.rkt") (lib "temp-c/monitor.rkt"))) (name . "temp-c-lib") (nix-sha256 . "0wfidwr35dwx2hp22q0gp2cw5phnb72mczm68jbhfwzfxiiryd1b") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (contracts . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/temp-c?path=temp-c-lib") (tags . ("contracts")) (versions . #hash((default . #hasheq((checksum . "43f7f2141c81a301aa229ef4105f458eee070653") (source . "git://github.com/jeapostrophe/temp-c?path=temp-c-lib") (source_url . "http://github.com/jeapostrophe/temp-c/tree/master?path=temp-c-lib"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("multimethod-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "multimethod" "doc/multimethod@multimethod-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/multimethod-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/multimethod-doc.txt"))) (checksum . "8a0903ebaedd919971c382eeb785f05080c7a8d6") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "multimethod-lib" "racket-doc" "scribble-lib")) (description . "") (implies . ()) (last-checked . 1522414437) (last-edit . 1461048601) (last-updated . 1502816188) (modules . ((lib "scribblings/multimethod.scrbl"))) (name . "multimethod-doc") (nix-sha256 . "0jbmvs6q14f58hfi9qvz8g4ndq13ybyy80y375w7455s7y3w3af0") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-multimethod?path=multimethod-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8a0903ebaedd919971c382eeb785f05080c7a8d6") (source . "git://github.com/lexi-lambda/racket-multimethod?path=multimethod-doc") (source_url . "http://github.com/lexi-lambda/racket-multimethod/tree/master?path=multimethod-doc"))))))) ("reactor" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "reactor" "doc/reactor@reactor/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/reactor.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/reactor.txt"))) (checksum . "e2fd8865ad9c313605640199b3db79fc313cdcee") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.12") "rackunit-lib" "racket-doc" "scribble-lib" "rackunit")) (description . "An embedded synchronous reactive language, a la reactiveML") (implies . ()) (last-checked . 1522414666) (last-edit . 1514903500) (last-updated . 1520620827) (modules . ((lib "reactor/control.rkt") (lib "reactor/tests/control.rkt") (lib "reactor/data.rkt") (lib "reactor/runtime.rkt") (lib "reactor/main.rkt") (lib "reactor/tests/basics.rkt") (lib "reactor/compiler.rkt") (lib "reactor/tests/values.rkt") (lib "reactor/tests/marks.rkt") (lib "reactor/tests/with-handlers.rkt") (lib "reactor/scribblings/reactor.scrbl"))) (name . "reactor") (nix-sha256 . "05vrriibbnacwwf0cqlc55viqvr9pqda49mby7x70q21skrrzkhc") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:spencer@florence.io . #t) (concurrency . #t) (language . #t) (programming-languages . #t) (reactive . #t) (ring:2 . #t))) (source . "https://github.com/florence/reactor.git") (tags . ("concurrency" "language" "programming-languages" "reactive")) (versions . #hash((default . #hasheq((checksum . "e2fd8865ad9c313605640199b3db79fc313cdcee") (source . "https://github.com/florence/reactor.git") (source_url . "https://github.com/florence/reactor.git"))))))) ("raart" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/raart.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "1b5c2b541f0150c049e20e8bb00fe4b1bf07c6e8") (checksum-error . #f) (conflicts . ()) (dependencies . ("lux" "unix-signals" "reprovide-lang" "ansi" "struct-define" "base")) (description . "racket ansi art") (implies . ()) (last-checked . 1522414539) (last-edit . 1514852717) (last-updated . 1517692689) (modules . ((lib "raart/main.rkt") (lib "raart/buffer.rkt") (lib "raart/draw.rkt") (lib "raart/t/draw.rkt") (lib "raart/lux-chaos.rkt") (lib "raart/size.rkt"))) (name . "raart") (nix-sha256 . "1v7ii89cplx9bfvn3lwn8mibqxjjfs9flr7z56h423ndlji9k67x") (ring . 2) (search-terms . #hasheq((:build-fail: . #t) (ansi . #t) (art . #t) (author:jay.mccarthy@gmail.com . #t) (graphics . #t) (ring:2 . #t) (terminal . #t) (ui . #t))) (source . "https://github.com/jeapostrophe/raart.git") (tags . ("ansi" "art" "graphics" "terminal" "ui")) (versions . #hash((default . #hasheq((checksum . "1b5c2b541f0150c049e20e8bb00fe4b1bf07c6e8") (source . "https://github.com/jeapostrophe/raart.git") (source_url . "https://github.com/jeapostrophe/raart.git"))))))) ("math-x86_64-macosx" . #hash((author . "mflatt@racket-lang.org") (checksum . "977d4fc7d2c937371acd73bfd4d33056ca106cf3") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "math-x86_64-macosx") (source . "https://download.racket-lang.org/releases/6.12/pkgs/math-x86_64-macosx.zip") (tags . ()))) ("phc-adt" . #hasheq((author . "georges.duperon@gmail.com") (authors . ("georges.duperon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/phc-adt.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/phc-adt.txt"))) (checksum . "e2fe727b4ff84f0bb0212a6c103f0e0e2c955a4c") (checksum-error . #f) (conflicts . ()) (dependencies . ("phc-adt-lib" "phc-adt-doc" "phc-adt-test")) (description . "Algebraic Data Types for Typed/Racket, with features tailored to compiler writing. The data types do not have to be declared before they are used, like prefab structs and symbols. Behind the scenes, this library remembers all the data types in a file, and uses it to implicitly pre-declare them. Mostly stable, although some things may change a bit in the future.") (implies . ("phc-adt-lib" "phc-adt-doc" "phc-adt-test")) (last-checked . 1522414511) (last-edit . 1485472285) (last-updated . 1502816247) (modules . ()) (name . "phc-adt") (nix-sha256 . "18md2hanbx8812b2b3678zg5pblci409j2h6nkk8nhjkmvny1hzp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:georges.duperon@gmail.com . #t) (data . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt") (tags . ("data" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "e2fe727b4ff84f0bb0212a6c103f0e0e2c955a4c") (source . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt") (source_url . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt"))))))) ("fector" . #hasheq((author . "dvanhorn@racket-lang.org") (authors . ("dvanhorn@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fector.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fector.txt"))) (checksum . "269812d67549fbd77273f5025a4144214d790081") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "Persistent Functional Vectors") (implies . ()) (last-checked . 1522414400) (last-edit . 1354604413) (last-updated . 1502815960) (modules . ((lib "data/fector.rkt") (lib "data/fector/fast.rkt"))) (name . "fector") (nix-sha256 . "0v07ignzw06dmx2fzdi8rkz92z51ynlbmvd1j3dgjpyxlgzjg5g9") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:dvanhorn@racket-lang.org . #t) (data . #t) (ring:1 . #t))) (source . "github://github.com/dvanhorn/fector/master") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "269812d67549fbd77273f5025a4144214d790081") (source . "github://github.com/dvanhorn/fector/master") (source_url . "http://github.com/dvanhorn/fector/tree/master"))))))) ("crypto-lib" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/crypto-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/crypto-lib.txt"))) (checksum . "07610cabe6c318809b3b9022d88cfe1cc386852e") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "asn1-lib" "binaryio-lib" ("gmp-lib" #:version "1.1"))) (description . "Cryptography library") (implies . ()) (last-checked . 1522414369) (last-edit . 1519093582) (last-updated . 1519100633) (modules . ((lib "crypto/private/common/ufp.rkt") (lib "crypto/main.rkt") (lib "crypto/private/gcrypt/ffi.rkt") (lib "crypto/private/common/pk-common.rkt") (lib "crypto/private/common/base256.rkt") (lib "crypto/private/nettle/pkey.rkt") (lib "crypto/private/libcrypto/ffi.rkt") (lib "crypto/private/b2/ffi.rkt") (lib "crypto/private/libcrypto/factory.rkt") (lib "crypto/private/common/pkey.rkt") (lib "crypto/private/rkt/pk-asn1.rkt") (lib "crypto/private/sodium/factory.rkt") (lib "crypto/private/argon2/ffi.rkt") (lib "crypto/private/common/catalog.rkt") (lib "crypto/gcrypt.rkt") (lib "crypto/private/nettle/ffi.rkt") (lib "crypto/private/nettle/factory.rkt") (lib "crypto/private/common/error.rkt") (lib "crypto/private/nettle/kdf.rkt") (lib "crypto/b2.rkt") (lib "crypto/private/libcrypto/cipher.rkt") (lib "crypto/private/sodium/digest.rkt") (lib "crypto/private/common/interfaces.rkt") (lib "crypto/private/common/common.rkt") (lib "crypto/private/libcrypto/kdf.rkt") (lib "crypto/private/gcrypt/cipher.rkt") (lib "crypto/sodium.rkt") (lib "crypto/private/gcrypt/factory.rkt") (lib "crypto/private/gcrypt/digest.rkt") (lib "crypto/private/gcrypt/pkey.rkt") (lib "crypto/private/common/util.rkt") (lib "crypto/private/common/factory.rkt") (lib "crypto/all.rkt") (lib "crypto/private/b2/factory.rkt") (lib "crypto/private/libcrypto/digest.rkt") (lib "crypto/private/common/cipher.rkt") (lib "crypto/libcrypto.rkt") (lib "crypto/private/common/digest.rkt") (lib "crypto/private/b2/digest.rkt") (lib "crypto/nettle.rkt") (lib "crypto/private/sodium/cipher.rkt") (lib "crypto/private/gcrypt/kdf.rkt") (lib "crypto/private/nettle/cipher.rkt") (lib "crypto/private/argon2/factory.rkt") (lib "crypto/private/rkt/padding.rkt") (lib "crypto/private/common/kdf.rkt") (lib "crypto/private/libcrypto/pkey.rkt") (lib "crypto/private/nettle/digest.rkt") (lib "crypto/argon2.rkt") (lib "crypto/private/rkt/hmac.rkt") (lib "crypto/private/sodium/ffi.rkt"))) (name . "crypto-lib") (nix-sha256 . "08wdlzgz7grhyfzx9yk69nby2fams7y1vjdhdcrwddw9xmxvflxm") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (crypto . #t) (ring:2 . #t))) (source . "https://github.com/rmculpepper/crypto.git?path=crypto-lib") (tags . ("crypto")) (versions . #hash((default . #hasheq((checksum . "07610cabe6c318809b3b9022d88cfe1cc386852e") (source . "https://github.com/rmculpepper/crypto.git?path=crypto-lib") (source_url . "https://github.com/rmculpepper/crypto.git?path=crypto-lib"))))))) ("collections-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "collections" "doc/collections@collections-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/collections-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/collections-doc.txt"))) (checksum . "5b3ec9b3ea3ca493f3fcda4994b81bc804f29870") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "collections-lib" "functional-doc" "racket-doc" "scribble-lib")) (description . "") (implies . ()) (last-checked . 1522414314) (last-edit . 1475261219) (last-updated . 1502812297) (modules . ((lib "scribblings/data/collection/collection/reference.scrbl") (lib "scribblings/data/collection/collections.scrbl") (lib "scribblings/data/collection/collection/experimental.scrbl") (lib "scribblings/data/collection/collection/examples.scrbl") (lib "scribblings/data/collection/private/utils.rkt") (lib "scribblings/data/collection/collection/introduction.scrbl"))) (name . "collections-doc") (nix-sha256 . "0vh781q0iw0wv1a741qp7s9havc030p5wahz6vcdhfn9azv00znp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-collections?path=collections-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "5b3ec9b3ea3ca493f3fcda4994b81bc804f29870") (source . "git://github.com/lexi-lambda/racket-collections?path=collections-doc") (source_url . "http://github.com/lexi-lambda/racket-collections/tree/master?path=collections-doc"))))))) ("binutils" . #hasheq((author . "leo@lwh.jp") (authors . ("leo@lwh.jp")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "binutils" "doc/binutils@binutils/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/binutils.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/binutils.txt"))) (checksum . "0023f772c58fb89d8a29f7880f8d2e855faa58a0") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "binary-class" "racket-doc" "scribble-lib")) (description . "Utilities for manipulating machine code object files") (implies . ()) (last-checked . 1522414311) (last-edit . 1507000575) (last-updated . 1507109329) (modules . ((lib "binutils/elf/private/elf.rkt") (lib "binutils/base.rkt") (lib "binutils/elf/main.rkt") (lib "binutils/link.rkt") (lib "binutils/main.rkt") (lib "binutils/elf/private/system.rkt") (lib "binutils/elf/private/types.rkt") (lib "binutils/scribblings/binutils.scrbl") (lib "binutils/dynamic.rkt") (lib "binutils/elf/private/convert.rkt") (lib "binutils/private/object.rkt") (lib "binutils/elf/private/params.rkt") (lib "binutils/elf.rkt"))) (name . "binutils") (nix-sha256 . "0wsi5lsysmyryavj6a3wbklk1vh03x2lpsx7rfadvbkm858yxm2v") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:leo@lwh.jp . #t) (binary . #t) (executable . #t) (ring:2 . #t) (unstable . #t))) (source . "git://github.com/lwhjp/racket-binutils") (tags . ("binary" "executable" "unstable")) (versions . #hash((default . #hasheq((checksum . "0023f772c58fb89d8a29f7880f8d2e855faa58a0") (source . "git://github.com/lwhjp/racket-binutils") (source_url . "http://github.com/lwhjp/racket-binutils/tree/master"))))))) ("parenlog" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/parenlog.txt") (docs . (("main" "parenlog" "doc/parenlog@parenlog/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parenlog.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/parenlog.txt"))) (checksum . "b02b9960c18b3c238b08a68d334f7ac2641e785c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "chk-lib" "racket-doc" "scribble-lib")) (description . "A language that is like Prolog, but parenthetical.") (implies . ()) (last-checked . 1522414509) (last-edit . 1375448743) (last-updated . 1513635359) (modules . ((lib "parenlog/examples/type.rkt") (lib "parenlog/examples/family-tree.rkt") (lib "parenlog/examples/linear.rkt") (lib "parenlog/parenlog.rkt") (lib "parenlog/core.rkt") (lib "parenlog/examples/short.rkt") (lib "parenlog/lang/reader.rkt") (lib "parenlog/main.rkt") (lib "parenlog/stx.rkt") (lib "parenlog/parenlog.scrbl") (lib "parenlog/lang.rkt") (lib "parenlog/examples/type-class.rkt"))) (name . "parenlog") (nix-sha256 . "1514rvhdc2j1hmkb6701ps36f6538am0a90k8l40k3nlm44dm5p8") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (language . #t) (logic . #t) (ring:1 . #t))) (source . "github://github.com/jeapostrophe/parenlog/master") (tags . ("language" "logic")) (versions . #hash(("5.3.4.11" . #hasheq((checksum . "8b4167b95636f2fdd86ef6b6df68a0c6f11abcd5") (source . "github://github.com/jeapostrophe/parenlog/old") (source_url . "http://github.com/jeapostrophe/parenlog/tree/old"))) (default . #hasheq((checksum . "b02b9960c18b3c238b08a68d334f7ac2641e785c") (source . "github://github.com/jeapostrophe/parenlog/master") (source_url . "http://github.com/jeapostrophe/parenlog/tree/master"))))))) ("redex-abbrevs" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "redex-abbrevs" "doc/redex-abbrevs@redex-abbrevs/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/redex-abbrevs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/redex-abbrevs.txt"))) (checksum . "f9df570bdabe28115fc0258a1bac172c9702546b") (checksum-error . #f) (conflicts . ()) (dependencies . ("redex-lib" "base" "rackunit-lib" "scribble-lib" "racket-doc" "rackunit-lib" "rackunit-doc" "redex-doc")) (description . "Macros for PLT Redex") (implies . ()) (last-checked . 1522414667) (last-edit . 1499659477) (last-updated . 1516774714) (modules . ((lib "redex-abbrevs/private/redex-abbrevs.rkt") (lib "redex-abbrevs/main.rkt") (lib "redex-abbrevs/docs/redex-abbrevs.scrbl") (lib "redex-abbrevs/unstable.rkt"))) (name . "redex-abbrevs") (nix-sha256 . "0p3mjvs0nh774vkm0m2qjnl9py2ghgq1gnid866vn6b6lkhhr340") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (macro . #t) (redex . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/bennn/redex-abbrevs") (tags . ("macro" "redex" "testing")) (versions . #hash((default . #hasheq((checksum . "f9df570bdabe28115fc0258a1bac172c9702546b") (source . "git://github.com/bennn/redex-abbrevs") (source_url . "http://github.com/bennn/redex-abbrevs/tree/master"))))))) ("heresy" . #hasheq((author . "jarcane@gmail.com") (authors . ("jarcane@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "heresy" "doc/heresy@heresy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/heresy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/heresy.txt"))) (checksum . "0553503730623870bf3364014c45ace8ec6f6043") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "unstable-lib" "racket-doc" "rackunit-lib" "sandbox-lib" "scribble-lib")) (description . "A functional Lisp dialect with BASIC-inspired syntax") (implies . ()) (last-checked . 1522414415) (last-edit . 1420033563) (last-updated . 1504083180) (modules . ((lib "heresy/lib/require-stuff.rkt") (lib "heresy/examples/99bottles.rkt") (lib "heresy/docs/heresy.scrbl") (lib "heresy/lib/maybe.rkt") (lib "heresy/lib/things.rkt") (lib "heresy/examples/pipeland.rkt") (lib "heresy/examples/id-do.rkt") (lib "heresy/lib/list.rkt") (lib "heresy/tests/things.rkt") (lib "heresy/examples/cons-things.rkt") (lib "heresy/examples/do-action.rkt") (lib "heresy/examples/fact.rkt") (lib "heresy/examples/collatz.rkt") (lib "heresy/examples/cards.rkt") (lib "heresy/lib/monadology.rkt") (lib "heresy/tests/infix-math.rkt") (lib "heresy/examples/fizzbuzz.rkt") (lib "heresy/examples/hole-test.rkt") (lib "heresy/tests/Y.rkt") (lib "heresy/lib/hole.rkt") (lib "heresy/lib/pipes.rkt") (lib "heresy/examples/celebrate.rkt") (lib "heresy/lib/math.rkt") (lib "heresy/lib/infix-math.rkt") (lib "heresy/examples/option-type.rkt") (lib "heresy/main.rkt") (lib "heresy/tests/app.rkt") (lib "heresy/private/base.rkt") (lib "heresy/private/random.rkt") (lib "heresy/examples/brainfuck.rkt") (lib "heresy/lib/theory.rkt") (lib "heresy/examples/list-do.rkt") (lib "heresy/private/io.rkt") (lib "heresy/lib/identity.rkt") (lib "heresy/lib/string.rkt") (lib "heresy/lang/reader.rkt"))) (name . "heresy") (nix-sha256 . "0acj8zsvxgaagvxjgwk1jcw15jxjqf6gdm0hcmd039vij7kd0sl6") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jarcane@gmail.com . #t) (language . #t) (ring:1 . #t))) (source . "git://github.com/jarcane/heresy") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "0553503730623870bf3364014c45ace8ec6f6043") (source . "git://github.com/jarcane/heresy") (source_url . "http://github.com/jarcane/heresy/tree/master"))))))) ("megaparsack-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "megaparsack" "doc/megaparsack@megaparsack-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/megaparsack-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/megaparsack-doc.txt"))) (checksum . "56cbda3e43c6b54c963a138330a55dcd1fb9b2d7") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "functional-doc" "functional-lib" ("megaparsack-lib" #:version "0.2") "megaparsack-parser-tools" "parser-tools-doc" "parser-tools-lib" "racket-doc" "scribble-lib")) (description . "documentation (no implementation) for “megaparsack”") (implies . ()) (last-checked . 1522414434) (last-edit . 1462746765) (last-updated . 1517249846) (modules . ((lib "scribblings/megaparsack/differences-from-parsack.scrbl") (lib "scribblings/megaparsack/syntax.scrbl") (lib "scribblings/megaparsack/util.rkt") (lib "scribblings/megaparsack.scrbl") (lib "scribblings/megaparsack/basics.scrbl") (lib "scribblings/megaparsack/reference.scrbl") (lib "scribblings/megaparsack/choice.scrbl"))) (name . "megaparsack-doc") (nix-sha256 . "0d9iylx1q420pk5p0abhwp7zmr7fd8a7kj100rqnfy8dvajlx0g7") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/megaparsack?path=megaparsack-doc") (tags . ("parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "56cbda3e43c6b54c963a138330a55dcd1fb9b2d7") (source . "git://github.com/lexi-lambda/megaparsack?path=megaparsack-doc") (source_url . "http://github.com/lexi-lambda/megaparsack/tree/master?path=megaparsack-doc"))))))) ("pconvert-lib" . #hash((author . "robby@racket-lang.org") (checksum . "863c9189d46e03fd41d8216c431bdc0984ae3a0a") (dependencies . ("base" "compatibility-lib")) (description . "robby@racket-lang.org") (modules . ()) (name . "pconvert-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/pconvert-lib.zip") (tags . ()))) ("drracket-zenburn" . #hasheq((author . "andrei.formiga@gmail.com") (authors . ("andrei.formiga@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-zenburn.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-zenburn.txt"))) (checksum . "baec7d09cf9dad88303f123d30626fc466b32c81") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "The Zenburn colorscheme for DrRacket.") (implies . ()) (last-checked . 1522414395) (last-edit . 1494609821) (last-updated . 1502815948) (modules . ()) (name . "drracket-zenburn") (nix-sha256 . "02916zapsydi13hv2p4bz1j817gqmvnd5v92xynzcv3wwz4c6qxz") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (DrRacket . #t) (author:andrei.formiga@gmail.com . #t) (colorscheme . #t) (ring:1 . #t))) (source . "git://github.com/tautologico/drracket-zenburn") (tags . ("colorscheme" "DrRacket")) (versions . #hash((default . #hasheq((checksum . "baec7d09cf9dad88303f123d30626fc466b32c81") (source . "git://github.com/tautologico/drracket-zenburn") (source_url . "http://github.com/tautologico/drracket-zenburn/tree/master"))))))) ("scribble" . #hash((author . "mflatt@racket-lang.org eli@racket-lang.org") (checksum . "6e82a86093cb7ca9ea1b07d3a381937904c7dc92") (dependencies . ("scribble-lib" "scribble-doc")) (description . "mflatt@racket-lang.org eli@racket-lang.org") (modules . ()) (name . "scribble") (source . "https://download.racket-lang.org/releases/6.12/pkgs/scribble.zip") (tags . ()))) ("sqlite-table" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sqlite-table" "doc/sqlite-table@sqlite-table/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sqlite-table.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sqlite-table.txt"))) (checksum . "d1b892fe91a9413efd42da9ca75b5e1db5333993") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "db-lib" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "A quick way to create and query sqlite tables. Basically a simplified wrapper for a subset of the db library.") (implies . ()) (last-checked . 1522414681) (last-edit . 1478813742) (last-updated . 1512457711) (modules . ((lib "sqlite-table/main.rkt") (lib "sqlite-table/sqlite-table.scrbl"))) (name . "sqlite-table") (nix-sha256 . "0a0g2r11q9vwzhf3md7hndy9rdq45s0anzd34jxl3vh37qfhvav4") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (db . #t) (ring:1 . #t))) (source . "git://github.com/jbclements/sqlite-table") (tags . ("db")) (versions . #hash((default . #hasheq((checksum . "d1b892fe91a9413efd42da9ca75b5e1db5333993") (source . "git://github.com/jbclements/sqlite-table") (source_url . "http://github.com/jbclements/sqlite-table/tree/master"))))))) ("gui" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (checksum . "902f0cb01de31665e02dc6c64397d8de95ebde6b") (dependencies . ("gui-lib" "gui-doc")) (description . "mflatt@racket-lang.org robby@racket-lang.org") (modules . ()) (name . "gui") (source . "https://download.racket-lang.org/releases/6.12/pkgs/gui.zip") (tags . ()))) ("persistent-union-find" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/persistent-union-find.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/persistent-union-find.txt"))) (checksum . "f95278e362550a59dae327bd15f9f609009de6d0") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "persistent-array" "r6rs-lib")) (description . "A persistent implementation of the union-find data structure") (implies . ()) (last-checked . 1522414511) (last-edit . 1410271570) (last-updated . 1502816246) (modules . ((lib "data/p-union-find.rkt"))) (name . "persistent-union-find") (nix-sha256 . "1dv855lmdimasaanbd2i2py1mv957s6brjgf6ac840zy0xhv7j73") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (data . #t) (ring:1 . #t))) (source . "git://github.com/samth/persistent-union-find") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "f95278e362550a59dae327bd15f9f609009de6d0") (source . "git://github.com/samth/persistent-union-find") (source_url . "http://github.com/samth/persistent-union-find/tree/master"))))))) ("j" . #hasheq((author . "leo@lwh.jp") (authors . ("leo@lwh.jp")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "j" "doc/j@j/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/j.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/j.txt"))) (checksum . "021c40382f95d1a6dc0b329a152a171465b9bc75") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "data-lib" "math-lib" "parser-tools-lib" "math-doc" "racket-doc" "rackunit-lib" "sandbox-lib" "scribble-lib")) (description . "Racket implementation of J language and related concepts") (implies . ()) (last-checked . 1522414421) (last-edit . 1505821211) (last-updated . 1506918580) (modules . ((lib "j/private/sentence.rkt") (lib "j/rank/private/frame.rkt") (lib "j/private/eval.rkt") (lib "j/scribblings/main.scrbl") (lib "j/private/bindings.rkt") (lib "j/rank/item.rkt") (lib "j/private/read.rkt") (lib "j/private/vocab/verbs.rkt") (lib "j/main.rkt") (lib "j/private/module.rkt") (lib "j/rank/private/verb.rkt") (lib "j/private/vocab/nouns.rkt") (lib "j/rank.rkt") (lib "j/private/lex.rkt") (lib "j/console.rkt") (lib "j/private/parameters.rkt") (lib "j/private/word.rkt") (lib "j/scribblings/j.scrbl") (lib "j/rank/main.rkt") (lib "j/private/locale.rkt") (lib "j/private/vocabulary.rkt") (lib "j/lib/nouns.rkt") (lib "j/private/parse.rkt") (lib "j/private/type.rkt") (lib "j/private/vocab/conjunctions.rkt") (lib "j/scribblings/number.scrbl") (lib "j/obverse.rkt") (lib "j/lib/conjunctions.rkt") (lib "j/lang/reader.rkt") (lib "j/lib/verbs.rkt") (lib "j/private/coupla.rkt") (lib "j/private/verb.rkt") (lib "j/scribblings/rank.scrbl") (lib "j/rank/private/noun.rkt") (lib "j/rank/base.rkt") (lib "j/scribblings/lib.scrbl") (lib "j/lib/adverbs.rkt") (lib "j/private/vocab/adverbs.rkt") (lib "j/customize.rkt") (lib "j/private/executor.rkt") (lib "j/number.rkt"))) (name . "j") (nix-sha256 . "09k3qma019a7w2awspbbrg2rxdiamvh8bz8hjm4r7bgksmrny5g0") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (array . #t) (author:leo@lwh.jp . #t) (j . #t) (language . #t) (math . #t) (ring:1 . #t) (unstable . #t))) (source . "git://github.com/lwhjp/racket-jlang") (tags . ("array" "j" "language" "math" "unstable")) (versions . #hash((default . #hasheq((checksum . "021c40382f95d1a6dc0b329a152a171465b9bc75") (source . "git://github.com/lwhjp/racket-jlang") (source_url . "http://github.com/lwhjp/racket-jlang/tree/master"))))))) ("parser-tools-doc" . #hash((author . "mflatt@racket-lang.org") (checksum . "49f722387bebd7991f10b7129979488bc62070b3") (dependencies . ("base" "scheme-lib" "racket-doc" "syntax-color-doc" "parser-tools-lib" "scribble-lib")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "parser-tools-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/parser-tools-doc.zip") (tags . ()))) ("turn-based-game" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "turn-based-game" "doc/turn-based-game@turn-based-game/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/turn-based-game.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/turn-based-game.txt"))) (checksum . "f9ed9a26d9d49d124ffe4820cfd1676cfb297c31") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "agile" "collections-lib" "htdp-lib" "rackunit-lib" "scribble-lib" "racket-doc" "htdp-doc" "collections-doc")) (description . "interfaces and tools for defining and playing turn-based games") (implies . ()) (last-checked . 1522414694) (last-edit . 1498674875) (last-updated . 1502816489) (modules . ((lib "turn-based-game/examples/checkers.rkt") (lib "turn-based-game/controller/computer-player-gui-controller.rkt") (lib "turn-based-game/demo/checkers.rkt") (lib "turn-based-game/scribblings/turn-based-game.scrbl") (lib "turn-based-game/turn-based-game-gui.rkt") (lib "turn-based-game/demo/connect-four.rkt") (lib "turn-based-game/controller/human-player-gui-controller.rkt") (lib "turn-based-game/examples/tic-tac-toe-gui.rkt") (lib "turn-based-game/computer-player/n-ahead.rkt") (lib "turn-based-game/demo/tic-tac-toe.rkt") (lib "turn-based-game/examples/connect-four.rkt") (lib "turn-based-game/computer-player/score-explore-random.rkt") (lib "turn-based-game/examples/checkers-gui.rkt") (lib "turn-based-game/turn-based-game.rkt") (lib "turn-based-game/examples/tic-tac-toe.rkt") (lib "turn-based-game/examples/connect-four-gui.rkt") (lib "turn-based-game/computer-player.rkt"))) (name . "turn-based-game") (nix-sha256 . "1mf53inmg2b73fxfscmwg8jggssbnx7sc57y7rvr005y01a9w6x9") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (games . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/turn-based-game") (tags . ("games")) (versions . #hash((default . #hasheq((checksum . "f9ed9a26d9d49d124ffe4820cfd1676cfb297c31") (source . "git://github.com/AlexKnauth/turn-based-game") (source_url . "http://github.com/AlexKnauth/turn-based-game/tree/master"))))))) ("set-extras" . #hasheq((author . "pcn@cs.umd.edu") (authors . ("pcn@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/set-extras.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/set-extras.txt"))) (checksum . "1a715cc4dccc7a98182130d79920216d4144970f") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more")) (description . "Some conveniences for set, including fancy unicode aliases and more comprehension forms") (implies . ()) (last-checked . 1522414678) (last-edit . 1492836289) (last-updated . 1522094001) (modules . ((lib "set-extras/main.rkt") (lib "set-extras/tests.rkt"))) (name . "set-extras") (nix-sha256 . "041w2c4vsxxyczl4q50v7cwli93n4qlhsray99wswxivrqsqplx9") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:pcn@cs.umd.edu . #t) (ring:1 . #t) (set . #t) (typed-racket . #t) (unicode . #t))) (source . "git://github.com/philnguyen/set-extras?path=set-extras") (tags . ("set" "typed-racket" "unicode")) (versions . #hash((default . #hasheq((checksum . "1a715cc4dccc7a98182130d79920216d4144970f") (source . "git://github.com/philnguyen/set-extras?path=set-extras") (source_url . "http://github.com/philnguyen/set-extras/tree/master?path=set-extras"))))))) ("racket-win32-x86_64" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for \"base\" package") (implies . ()) (last-checked . 1522414658) (last-edit . 1452304685) (last-updated . 1502816358) (modules . ()) (name . "racket-win32-x86_64") (ring . 0) (search-terms . #hasheq((:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ()) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) (default . #hasheq((checksum . "1026e430bb077a696084e702f5e8889f5b7dd55e") (source . "https://pkg-sources.racket-lang.org/pkgs/1026e430bb077a696084e702f5e8889f5b7dd55e/racket-win32-x86_64.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/1026e430bb077a696084e702f5e8889f5b7dd55e/racket-win32-x86_64.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("net-cookies-doc" . #hash((author . "jay.mccarthy@gmail.com jmj@fellowhuman.com") (checksum . "551ba741dc65dda3d0cb4819c3d2438e3c893d6b") (dependencies . ("base" "net-cookies-lib" "racket-doc" "web-server-lib" "web-server-doc" "net-doc" "scribble-lib")) (description . "jay.mccarthy@gmail.com jmj@fellowhuman.com") (modules . ()) (name . "net-cookies-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/net-cookies-doc.zip") (tags . ()))) ("xfunctions-lib" . #hasheq((author . "wesley.bitomski@gmail.com") (authors . ("wesley.bitomski@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xfunctions-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/xfunctions-lib.txt"))) (checksum . "a8c545d55ee1d9df715ccc44fb22eec463e0f206") (checksum-error . #f) (conflicts . ()) (dependencies . (("base") ("racket") ("rackunit-lib"))) (description . "Functional bits of XFunctions") (implies . ()) (last-checked . 1522414703) (last-edit . 1515107554) (last-updated . 1515417539) (modules . ((lib "xfunctions-lib/xfunctions.rkt"))) (name . "xfunctions-lib") (nix-sha256 . "03h570a9dzlz0hb0vhlqhbr6lbgcjq3v4s9ydk53ba7wgxw3jyz3") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:wesley.bitomski@gmail.com . #t) (ring:2 . #t))) (source . "https://github.com/wesleybits/xfunctions.git?path=xfunctions-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a8c545d55ee1d9df715ccc44fb22eec463e0f206") (source . "https://github.com/wesleybits/xfunctions.git?path=xfunctions-lib") (source_url . "https://github.com/wesleybits/xfunctions.git?path=xfunctions-lib"))))))) ("unreachable" . #hasheq((author . "pcn@cs.umd.edu") (authors . ("pcn@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/unreachable.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unreachable.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unreachable.txt"))) (checksum . "215a54b7e36c5cf2b84bbca95b4d865628359060") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "Utilities for expressing supposedly unreachable code") (implies . ()) (last-checked . 1522414697) (last-edit . 1513906987) (last-updated . 1516997944) (modules . ((lib "unreachable/test.rkt") (lib "unreachable/main.rkt"))) (name . "unreachable") (nix-sha256 . "136xw5mg3f4x6pz3ak1h6kvbagq5mrssfk5mqm9s9i8rl4py658q") (ring . 2) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (absurd . #t) (author:pcn@cs.umd.edu . #t) (case . #t) (cond . #t) (dead-code . #t) (ring:2 . #t) (unreachable . #t))) (source . "https://github.com/philnguyen/unreachable.git?path=unreachable") (tags . ("absurd" "case" "cond" "dead-code" "unreachable")) (versions . #hash((default . #hasheq((checksum . "215a54b7e36c5cf2b84bbca95b4d865628359060") (source . "https://github.com/philnguyen/unreachable.git?path=unreachable") (source_url . "https://github.com/philnguyen/unreachable.git?path=unreachable"))))))) ("rackunit-abbrevs" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rackunit-abbrevs" "doc/rackunit-abbrevs@rackunit-abbrevs/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackunit-abbrevs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rackunit-abbrevs.txt"))) (checksum . "372269639786eec2abcc962c83af6f8c9d4cd28c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Iterated RackUnit tests") (implies . ()) (last-checked . 1522414663) (last-edit . 1443686446) (last-updated . 1516774709) (modules . ((lib "rackunit-abbrevs/private/test-syntax-error.rkt") (lib "rackunit-abbrevs/private/test-typed-rackunit-abbrevs.rkt") (lib "rackunit-abbrevs/private/typed-rackunit-abbrevs.rkt") (lib "rackunit-abbrevs/private/error-reporting.rkt") (lib "rackunit-abbrevs/main.rkt") (lib "rackunit-abbrevs/error-reporting.rkt") (lib "rackunit-abbrevs/private/test-rackunit-abbrevs.rkt") (lib "rackunit-abbrevs/private/rackunit-abbrevs.rkt") (lib "rackunit-abbrevs/typed.rkt") (lib "rackunit-abbrevs/scribblings/rackunit-abbrevs.scrbl"))) (name . "rackunit-abbrevs") (nix-sha256 . "1y9kdny65ysib5shikpzqwan6qk0i0gl4zak5x3az4amz8l8wb51") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (rackunit . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/bennn/rackunit-abbrevs") (tags . ("rackunit" "testing")) (versions . #hash((default . #hasheq((checksum . "372269639786eec2abcc962c83af6f8c9d4cd28c") (source . "git://github.com/bennn/rackunit-abbrevs") (source_url . "http://github.com/bennn/rackunit-abbrevs/tree/master"))))))) ("db-doc" . #hash((author . "ryanc@racket-lang.org") (checksum . "b0ff08cde75ffd9f31bd9c0cc922664de75901a9") (dependencies . ("base" "data-doc" "srfi-lite-lib" "web-server-doc" "base" "scribble-lib" "sandbox-lib" "web-server-lib" ("db-lib" "1.2") "racket-doc")) (description . "ryanc@racket-lang.org") (modules . ()) (name . "db-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/db-doc.zip") (tags . ()))) ("disassemble" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/disassemble.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/disassemble.txt"))) (checksum . "00d2980ae1f2bdb09c74c1a069c3812b1e9ad0e5") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "r6rs-lib" "srfi-lib" "srfi-lite-lib")) (description . "Disassembler for JIT-compiled functions.") (implies . ()) (last-checked . 1522414380) (last-edit . 1353013870) (last-updated . 1509141738) (modules . ((lib "disassemble/test2.rkt") (lib "disassemble/x86-opcodes.rkt") (lib "disassemble/main.rkt") (lib "disassemble/fcdisasm.rkt") (lib "disassemble/nasm.rkt") (lib "disassemble/x86.rkt") (lib "disassemble/private.rkt") (lib "disassemble/test.rkt"))) (name . "disassemble") (nix-sha256 . "0i2ks3x1lmawdwnqbxk6fiimknh95p0x4hr62x5byn7hnzhcg049") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (dev . #t) (performance . #t) (ring:1 . #t))) (source . "github://github.com/samth/disassemble/master") (tags . ("dev" "performance")) (versions . #hash((default . #hasheq((checksum . "00d2980ae1f2bdb09c74c1a069c3812b1e9ad0e5") (source . "github://github.com/samth/disassemble/master") (source_url . "http://github.com/samth/disassemble/tree/master"))))))) ("slideshow-lib" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (checksum . "81f9308acfe781305bf51926d22fb086ed65395c") (dependencies . ("scheme-lib" "base" "compatibility-lib" "draw-lib" "pict-lib" "gui-lib")) (description . "mflatt@racket-lang.org robby@racket-lang.org") (modules . ()) (name . "slideshow-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/slideshow-lib.zip") (tags . ()))) ("dset" . #hasheq((author . "pnwamk@gmail.com") (authors . ("pnwamk@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dset" "doc/dset@dset/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dset.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dset.txt"))) (checksum . "ce3581c73c42a3c8bbb6b4498325109fdf221c12") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "rackunit-lib")) (description . "Deterministic Sets") (implies . ()) (last-checked . 1522414396) (last-edit . 1485368839) (last-updated . 1503081511) (modules . ((lib "data/dset.rkt") (lib "tests/data/dset.rkt") (lib "data/dset/dset.scrbl"))) (name . "dset") (nix-sha256 . "0cvkn9yl7r54dhdcqr88ywkjnr6p6jkgzyc44apdc8n9wkj5g69k") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:pnwamk@gmail.com . #t) (data . #t) (ring:1 . #t))) (source . "git://github.com/pnwamk/dset.git") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "ce3581c73c42a3c8bbb6b4498325109fdf221c12") (source . "git://github.com/pnwamk/dset.git") (source_url . "http://github.com/pnwamk/dset.git/tree/master"))))))) ("megaparsack-parser" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/megaparsack-parser.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/megaparsack-parser.txt"))) (checksum . "56cbda3e43c6b54c963a138330a55dcd1fb9b2d7") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "collections-lib" "curly-fn-lib" "functional-lib" "megaparsack-lib")) (description . "built-in parsers implemented using megaparsack") (implies . ()) (last-checked . 1522414434) (last-edit . 1462746808) (last-updated . 1517249847) (modules . ((lib "megaparsack/parser/json.rkt"))) (name . "megaparsack-parser") (nix-sha256 . "0d9iylx1q420pk5p0abhwp7zmr7fd8a7kj100rqnfy8dvajlx0g7") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:lexi.lambda@gmail.com . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/megaparsack?path=megaparsack-parser") (tags . ("parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "56cbda3e43c6b54c963a138330a55dcd1fb9b2d7") (source . "git://github.com/lexi-lambda/megaparsack?path=megaparsack-parser") (source_url . "http://github.com/lexi-lambda/megaparsack/tree/master?path=megaparsack-parser"))))))) ("class-iop" . #hash((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/class-iop.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/class-iop.txt"))) (checksum . "a4fd4beea6d9c8786a108ac12c997097b90191a9") (checksum-error . #f) (conflicts . ()) (dependencies . ("class-iop-lib" "class-iop-doc")) (description . "Interface-oriented programming for classes") (implies . ()) (last-checked . 1522414313) (last-edit . 1438195663) (last-updated . 1502812290) (modules . ()) (name . "class-iop") (nix-sha256 . "105xjqhv6hiidlgp7f2bjqbkzn7h2q11plmhx3x6s8b8whjsgxa0") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "git://github.com/racket/class-iop?path=class-iop") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "a4fd4beea6d9c8786a108ac12c997097b90191a9") (source . "git://github.com/racket/class-iop?path=class-iop") (source_url . "http://github.com/racket/class-iop/tree/master?path=class-iop"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("admiral-edu-server" . #hasheq((author . "clements@racket-lang.org josephmcollard@gmail.com") (authors . ("clements@racket-lang.org" "josephmcollard@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/admiral-edu-server.txt") (test-failure-log . "server/built/test-fail/admiral-edu-server.txt") (test-success-log . #f))) (checksum . "79c2778dd43d07e92ab02fb75955ec6060ed6861") (checksum-error . #f) (conflicts . ()) (dependencies . ("aws" "base" "db-lib" "net-lib" "typed-racket-lib" "web-server-lib" "yaml" "rackunit-lib" "typed-racket-more")) (description . "The Racket code associated with the Captain Teach server") (implies . ()) (last-checked . 1522417868) (last-edit . 1466969603) (last-updated . 1502812266) (modules . ((lib "admiral-edu/pages/file-container-helpers.rkt") (lib "admiral-edu/storage/local-storage.rkt") (lib "admiral-edu/pages/errors.rkt") (lib "admiral-edu/database/mysql/migrate-1-2.rkt") (lib "admiral-edu/pages/assignments/dashboard.rkt") (lib "admiral-edu/authoring/assignment-structs.rkt") (lib "admiral-edu/database/mysql/migrate-2-3.rkt") (lib "admiral-edu/database/mysql/assignment.rkt") (lib "admiral-edu/pages/path-xexprs.rkt") (lib "admiral-edu/dispatch.rkt") (lib "admiral-edu/ct-session.rkt") (lib "admiral-edu/base.rkt") (lib "admiral-edu/storage/cloud-storage.rkt") (lib "admiral-edu/pages/feedback.rkt") (lib "admiral-edu/storage/storage.rkt") (lib "admiral-edu/database/mysql/class.rkt") (lib "admiral-edu/database/mysql.rkt") (lib "admiral-edu/logging.rkt") (lib "admiral-edu/auth/google-openidc.rkt") (lib "admiral-edu/email/email.rkt") (lib "admiral-edu/util/file-extension-type.rkt") (lib "admiral-edu/database/mysql/common.rkt") (lib "admiral-edu/database/mysql/system.rkt") (lib "admiral-edu/pages/assignments/action.rkt") (lib "admiral-edu/authoring/hold-for-review-handler.rkt") (lib "admiral-edu/paths.rkt") (lib "admiral-edu/util/basic-types.rkt") (lib "admiral-edu/database/mysql/review.rkt") (lib "admiral-edu/dispatch-typed.rkt") (lib "admiral-edu/pages/assignments/status.rkt") (lib "admiral-edu/pages/roster.rkt") (lib "admiral-edu/pages/submit.rkt") (lib "admiral-edu/authoring/assignment-parser.rkt") (lib "admiral-edu/pages/browse.rkt") (lib "admiral-edu/pages/assignments.rkt") (lib "admiral-edu/pages/author.rkt") (lib "admiral-edu/pages/export.rkt") (lib "admiral-edu/database/mysql/migrate.rkt") (lib "admiral-edu/authoring/typed-yaml.rkt") (lib "admiral-edu/util/failure.rkt") (lib "admiral-edu/database/mysql/role.rkt") (lib "admiral-edu/database/mysql/migrate-0-1.rkt") (lib "admiral-edu/pages/index.rkt") (lib "admiral-edu/database/mysql/submission.rkt") (lib "admiral-edu/pages/responses.rkt") (lib "admiral-edu/pages/dependencies.rkt") (lib "admiral-edu/database/mysql/typed-db.rkt") (lib "admiral-edu/util/roster.rkt") (lib "admiral-edu/authoring/util.rkt") (lib "admiral-edu/pages/next.rkt") (lib "admiral-edu/util/authorized.rkt") (lib "admiral-edu/util/common.rkt") (lib "admiral-edu/util/failure-untyped.rkt") (lib "admiral-edu/database/mysql/roles.rkt") (lib "admiral-edu/database/mysql/untyped-db.rkt") (lib "admiral-edu/temporary-hacks.rkt") (lib "admiral-edu/database/mysql/user.rkt") (lib "admiral-edu/pages/review.rkt") (lib "admiral-edu/tests/test-configuration.rkt") (lib "admiral-edu/configuration.rkt") (lib "admiral-edu/pages/assignments/list.rkt") (lib "admiral-edu/authoring/three-condition-study.rkt") (lib "admiral-edu/util/config-file-reader.rkt") (lib "admiral-edu/pages/templates.rkt") (lib "admiral-edu/pages/assignments/student-view.rkt") (lib "admiral-edu/pages/typed-xml.rkt") (lib "admiral-edu/pages/download.rkt") (lib "admiral-edu/authoring/assignment.rkt") (lib "admiral-edu/storage/storage-basic-tr.rkt") (lib "admiral-edu/captain-teach.rkt") (lib "admiral-edu/authoring/next-action.rkt"))) (name . "admiral-edu-server") (nix-sha256 . "14d5wh3d8z4lbny34bs6mbk3ghw735mrxbxnv42d44cz2hyfba15") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:clements@racket-lang.org . #t) (author:josephmcollard@gmail.com . #t) (captain-teach . #t) (ring:1 . #t))) (source . "git://github.com/jbclements/admiral-edu-server") (tags . ("captain-teach")) (versions . #hash((default . #hasheq((checksum . "79c2778dd43d07e92ab02fb75955ec6060ed6861") (source . "git://github.com/jbclements/admiral-edu-server") (source_url . "http://github.com/jbclements/admiral-edu-server/tree/master"))))))) ("stxparse-info" . #hasheq((author . "georges.duperon@gmail.com") (authors . ("georges.duperon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "stxparse-info" "doc/stxparse-info@stxparse-info/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/stxparse-info.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/stxparse-info.txt"))) (checksum . "a57fd490d9abfab55dd6ed40831ac0d9f1279174") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.7.0.900") "rackunit-lib" "version-case" "subtemplate" "auto-syntax-e" "compatibility-lib" "scribble-lib" "racket-doc" "at-exp-lib")) (description . "Patched version of syntax/parse which tracks which syntax pattern variables are bound. Use (current-pvars) to access that list.") (implies . ()) (last-checked . 1522414685) (last-edit . 1522049206) (last-updated . 1522091216) (modules . ((lib "stxparse-info/case/stxloc.rkt") (lib "stxparse-info/parse/experimental/template.rkt") (lib "stxparse-info/test/test-compatibility1.rkt") (lib "stxparse-info/parse/experimental/splicing.rkt") (lib "stxparse-info/parse/private/runtime-progress.rkt") (lib "stxparse-info/my-include.rkt") (lib "stxparse-info/test/test-current-pvars.rkt") (lib "stxparse-info/parse/private/residual.rkt") (lib "stxparse-info/parse/experimental/provide.rkt") (lib "stxparse-info/parse/define.rkt") (lib "stxparse-info/parse/private/runtime.rkt") (lib "stxparse-info/test/test-check-variable-visible.rkt") (lib "stxparse-info/case/syntax.rkt") (lib "stxparse-info/parse/experimental/specialize.rkt") (lib "stxparse-info/parse/private/txlift.rkt") (lib "stxparse-info/case/with-stx.rkt") (lib "stxparse-info/parse/private/parse.rkt") (lib "stxparse-info/parse/private/litconv.rkt") (lib "stxparse-info/parse/private/runtime-reflect.rkt") (lib "stxparse-info/case/stxcase-scheme.rkt") (lib "stxparse-info/parse/debug.rkt") (lib "stxparse-info/test/test-expansion-order.rkt") (lib "stxparse-info/parse/private/make.rkt") (lib "stxparse-info/parse/experimental/eh.rkt") (lib "stxparse-info/case/stxcase.rkt") (lib "stxparse-info/parse.rkt") (lib "stxparse-info/parse/private/3d-stx.rkt") (lib "stxparse-info/parse/experimental/private/substitute.rkt") (lib "stxparse-info/scribblings/stxparse-info.scrbl") (lib "stxparse-info/parse/pre.rkt") (lib "stxparse-info/parse/lib/function-header.rkt") (lib "stxparse-info/parse/experimental/contract.rkt") (lib "stxparse-info/current-pvars.rkt") (lib "stxparse-info/parse/experimental/reflect.rkt") (lib "stxparse-info/scribblings/ovl.rkt") (lib "stxparse-info/parse/private/opt.rkt") (lib "stxparse-info/parse/private/lib.rkt") (lib "stxparse-info/test/test-compatibility2.rkt") (lib "stxparse-info/parse/private/runtime-report.rkt") (lib "stxparse-info/main.rkt") (lib "stxparse-info/case.rkt") (lib "stxparse-info/parse/private/rep.rkt") (lib "stxparse-info/parse/private/sc.rkt") (lib "stxparse-info/parse/private/parse-aux.rkt") (lib "stxparse-info/parse/experimental/dset.rkt"))) (name . "stxparse-info") (nix-sha256 . "1wv9lh0shij6ka1dvdcdrbh27cd50ckyb4vrgls834n2n320gaak") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:georges.duperon@gmail.com . #t) (ring:1 . #t) (syntax . #t) (syntax-parse . #t))) (source . "https://github.com/jsmaniac/stxparse-info.git") (tags . ("syntax" "syntax-parse")) (versions . #hash((default . #hasheq((checksum . "a57fd490d9abfab55dd6ed40831ac0d9f1279174") (source . "https://github.com/jsmaniac/stxparse-info.git") (source_url . "https://github.com/jsmaniac/stxparse-info.git"))))))) ("struct-update" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/struct-update.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/struct-update.txt"))) (checksum . "8ce456cde8764ae27c348123ec9e01e76826d536") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "struct-update-lib" "struct-update-doc")) (description . "") (implies . ("struct-update-lib" "struct-update-doc")) (last-checked . 1522414685) (last-edit . 1469648515) (last-updated . 1502816459) (modules . ()) (name . "struct-update") (nix-sha256 . "14bmg0lchqy198wmbx05a8w5rpgk4rqagfg9izyj4dgkii9wrgzh") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/struct-update.git?path=struct-update") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8ce456cde8764ae27c348123ec9e01e76826d536") (source . "git://github.com/lexi-lambda/struct-update.git?path=struct-update") (source_url . "http://github.com/lexi-lambda/struct-update.git/tree/master?path=struct-update"))))))) ("ratel" . #hasheq((author . "john@nineteeneightd.com") (authors . ("john@nineteeneightd.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/ratel.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ratel.txt") (test-failure-log . "server/built/test-fail/ratel.txt") (test-success-log . #f))) (checksum . "c28e0d56e9f1babad8293ab50c1f30cb3fd4df67") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "threading")) (description . "") (implies . ()) (last-checked . 1522414666) (last-edit . 1478358706) (last-updated . 1502816382) (modules . ((lib "ratel/web/dispatcher.rkt") (lib "ratel/config.rkt") (lib "ratel/commands/suid-helper/mount.rkt") (lib "ratel/commands/suid-helper/unshare.rkt") (lib "ratel/commands/suid-helper/umount.rkt") (lib "ratel/ffi/libecryptfs.rkt") (lib "ratel/ffi/libkeyutils.rkt") (lib "ratel/commands/main.rkt") (lib "ratel/commands/show.rkt") (lib "ratel/suid-helper.rkt") (lib "ratel/commands/umount.rkt") (lib "ratel/ffi/libc.rkt") (lib "ratel/web/actions.rkt") (lib "ratel/commands/suid-helper/main.rkt") (lib "ratel/web/http.rkt") (lib "ratel/commands/mount.rkt") (lib "ratel/commands/web.rkt") (lib "ratel/passphrase.rkt") (lib "ratel/system.rkt") (lib "ratel/commands/register.rkt"))) (name . "ratel") (nix-sha256 . "0rifc07milr5jc5h0d8n8m110zqc5bbvyhmysa7vnl08z2p2ps9h") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:john@nineteeneightd.com . #t) (ring:1 . #t))) (source . "git://github.com/198d/ratel") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c28e0d56e9f1babad8293ab50c1f30cb3fd4df67") (source . "git://github.com/198d/ratel") (source_url . "http://github.com/198d/ratel/tree/master"))))))) ("draw-win32-i386" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for \"draw\" package") (implies . ()) (last-checked . 1522414386) (last-edit . 1452304685) (last-updated . 1502815919) (modules . ()) (name . "draw-win32-i386") (ring . 0) (search-terms . #hasheq((:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ()) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) (default . #hasheq((checksum . "915598defe21a2213c2833b45ace0c62fa31b39e") (source . "https://pkg-sources.racket-lang.org/pkgs/915598defe21a2213c2833b45ace0c62fa31b39e/draw-win32-i386.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/915598defe21a2213c2833b45ace0c62fa31b39e/draw-win32-i386.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("lwc2016" . #hasheq((author . "daniel.feltey@eecs.northwestern.edu") (authors . ("daniel.feltey@eecs.northwestern.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lwc2016.txt") (test-failure-log . "server/built/test-fail/lwc2016.txt") (test-success-log . #f))) (checksum . "8b8b98a9d9a8a16538176a561a5ebf3c3df84087") (checksum-error . #f) (conflicts . ()) (dependencies . (("2d-lib" #:version "1.1") "base" "data-lib" "drracket-plugin-lib" "drracket-tool-lib" "gui-lib" "parser-tools-lib" "pict-lib" "rackunit-lib" "scribble-lib" "syntax-color-lib" "draw-lib" "ppict" "slideshow-lib" "unstable-lib" "at-exp-lib")) (description . "PLT submision to the 2016 language workbench challenge") (implies . ()) (last-checked . 1522414425) (last-edit . 1470110494) (last-updated . 1502816160) (modules . ((lib "examples/even-odd/even-odd-prefix.rkt") (lib "mini-java/parser-sig.rkt") (lib "paper/check-fonts.rkt") (lib "paper/racket.scrbl") (lib "mini-java/parser-unit.rkt") (lib "test/parser-test.rkt") (lib "examples/programs/fact.rkt") (lib "examples/programs/ParityMachine.rkt") (lib "mini-java/infix-mini-java.rkt") (lib "paper/bib.rkt") (lib "examples/programs/receiver-machine.rkt") (lib "talk/slides.rkt") (lib "paper/evolution.scrbl") (lib "test/test-examples.rkt") (lib "paper/mj-examples.rkt") (lib "paper/minijava.scrbl") (lib "examples/programs/typecheck-test.rkt") (lib "editing/syntax-info.rkt") (lib "paper/setup.rkt") (lib "mini-java/tokens.rkt") (lib "editing/property.rkt") (lib "mini-java/lexer-sig.rkt") (lib "examples/programs/state-machine-example.rkt") (lib "editing/context-table.rkt") (lib "examples/even-odd/expanded-even-odd.rkt") (lib "paper/paper.scrbl") (lib "talk/langs.rkt") (lib "talk/util.rkt") (lib "talk/mj-code.rkt") (lib "mini-java/prefix-mini-java.rkt") (lib "talk/racket-lwc-pict.rkt") (lib "paper/intro.scrbl") (lib "examples/programs/inheritance.rkt") (lib "examples/programs/inheritance2.rkt") (lib "examples/even-odd/even-odd.rkt") (lib "editing/refactor-tool.rkt") (lib "mini-java/main.rkt") (lib "examples/programs/break-example.rkt") (lib "editing/if-refactor.rkt") (lib "paper/notation.scrbl") (lib "examples/programs/even-odd.rkt") (lib "mini-java/error.rkt") (lib "mini-java/typecheck.rkt") (lib "mini-java/state-machine-classes.rkt") (lib "mini-java/lexer-unit.rkt") (lib "paper/conclusion.scrbl") (lib "test/test.rkt") (lib "paper/editing.scrbl") (lib "examples/programs/inheritance3.rkt"))) (name . "lwc2016") (nix-sha256 . "1i1zqkxi872cq3ig7n61qi9qh1caip2fj7h18g8hylzav0nvf8bi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:daniel.feltey@eecs.northwestern.edu . #t) (ring:1 . #t))) (source . "git://github.com/dfeltey/lwc2016") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8b8b98a9d9a8a16538176a561a5ebf3c3df84087") (source . "git://github.com/dfeltey/lwc2016") (source_url . "http://github.com/dfeltey/lwc2016/tree/master"))))))) ("mosquitto-ffi" . #hasheq((author . "bartbes+racket@gmail.com") (authors . ("bartbes+racket@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mosquitto-ffi.txt") (test-failure-log . "server/built/test-fail/mosquitto-ffi.txt") (test-success-log . #f))) (checksum . "03b969b3f8806f7cfeb31b281981628fe8e2ca8b") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "An FFI binding of libmosquitto for racket") (implies . ()) (last-checked . 1522414436) (last-edit . 1425477234) (last-updated . 1502816185) (modules . ((lib "mosquitto/api.rkt") (lib "mosquitto/main.rkt"))) (name . "mosquitto-ffi") (nix-sha256 . "1cxa8vw9wm3dq5f3zs9fwl9qqsm433xxw75s5pnjg79q4ypbqchj") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bartbes+racket@gmail.com . #t) (ffi . #t) (mosquitto . #t) (ring:1 . #t))) (source . "git://github.com/bartbes/mosquitto-racket") (tags . ("ffi" "mosquitto")) (versions . #hash((default . #hasheq((checksum . "03b969b3f8806f7cfeb31b281981628fe8e2ca8b") (source . "git://github.com/bartbes/mosquitto-racket") (source_url . "http://github.com/bartbes/mosquitto-racket/tree/master"))))))) ("github-api" . #hasheq((author . "euler90h@gmail.com") (authors . ("euler90h@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "github-api" "doc/github-api@github-api/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/github-api.txt") (test-failure-log . "server/built/test-fail/github-api.txt") (test-success-log . #f))) (checksum . "fd542d77acd8ead86a2fd38449ed51a0b72bee08") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Bindings for the GitHub API") (implies . ()) (last-checked . 1522414404) (last-edit . 1442099017) (last-updated . 1502816082) (modules . ((lib "github-api/functional_tests/webhooks.rkt") (lib "github-api/utils.rkt") (lib "github-api/functional_tests/events.rkt") (lib "github-api/main.rkt") (lib "github-api/git.rkt") (lib "github-api/events.rkt") (lib "github-api/scribblings/github-api.scrbl") (lib "github-api/functional_tests/gists.rkt") (lib "github-api/issues.rkt") (lib "github-api/users.rkt") (lib "github-api/pull.rkt") (lib "github-api/gists.rkt") (lib "github-api/functional_tests/identity.rkt") (lib "github-api/functional_tests/utils.rkt") (lib "github-api/orgs.rkt") (lib "github-api/functional_tests/issues.rkt") (lib "github-api/webhooks.rkt"))) (name . "github-api") (nix-sha256 . "08xkg9cp4kcbp50wjxcsl0r4nja9jj1zc5sbbh848nkxcpzhnkwd") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:euler90h@gmail.com . #t) (github . #t) (ring:1 . #t))) (source . "git://github.com/eu90h/racket-github-api") (tags . ("github")) (versions . #hash((default . #hasheq((checksum . "fd542d77acd8ead86a2fd38449ed51a0b72bee08") (source . "git://github.com/eu90h/racket-github-api") (source_url . "http://github.com/eu90h/racket-github-api/tree/master"))))))) ("drracket-tool" . #hash((author . "robby@racket-lang.org") (checksum . "5d93d32d8378be1c06c5f455f8fd24aad6f6eaf4") (dependencies . ("drracket-tool-lib" "drracket-tool-doc")) (description . "robby@racket-lang.org") (modules . ()) (name . "drracket-tool") (source . "https://download.racket-lang.org/releases/6.12/pkgs/drracket-tool.zip") (tags . ()))) ("racketmq" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racketmq.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racketmq.txt"))) (checksum . "ac4f15325fed55e944bbb7daa0a4642ed0cbf843") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "syndicate" "web-server-lib" "rackunit-lib")) (description . "An implementation of W3C WebSub.") (implies . ()) (last-checked . 1522414662) (last-edit . 1482796420) (last-updated . 1502816370) (modules . ((lib "racketmq/hub/remote-topic.rkt") (lib "racketmq/protocol.rkt") (lib "racketmq/poke.rkt") (lib "racketmq/private/util.rkt") (lib "racketmq/hub/subscription.rkt") (lib "racketmq/hub/topic-demand.rkt") (lib "racketmq/hub/local-topic.rkt") (lib "racketmq/template.rkt") (lib "racketmq/hub/static-content.rkt") (lib "racketmq/hub/websocket.rkt") (lib "racketmq/hub.rkt"))) (name . "racketmq") (nix-sha256 . "1pvfd6iqrdi38dbxiz1b1kpnflqrrs94wkwrj19iliba44xdygg1") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:tonygarnockjones@gmail.com . #t) (net . #t) (ring:1 . #t) (web . #t))) (source . "git://github.com/tonyg/racketmq") (tags . ("net" "web")) (versions . #hash((default . #hasheq((checksum . "ac4f15325fed55e944bbb7daa0a4642ed0cbf843") (source . "git://github.com/tonyg/racketmq") (source_url . "http://github.com/tonyg/racketmq/tree/master"))))))) ("remote-shell-doc" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "remote-shell" "doc/remote-shell@remote-shell-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/remote-shell-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/remote-shell-doc.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "remote-shell-lib" "scribble-lib")) (description . "documentation part of \"remote-shell\"") (implies . ()) (last-checked . 1522414670) (last-edit . 1417307461) (last-updated . 1515435510) (modules . ((lib "remote-shell/remote-shell.scrbl"))) (name . "remote-shell-doc") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ()) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) (default . #hasheq((checksum . "4829323916d295d4d11faa9af9b60303b599e872") (source . "git://github.com/racket/remote-shell/?path=remote-shell-doc") (source_url . "git://github.com/racket/remote-shell/?path=remote-shell-doc"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("uu-cs5510" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/uu-cs5510.txt") (test-failure-log . "server/built/test-fail/uu-cs5510.txt") (test-success-log . #f))) (checksum . "d6736f807b31f637e141ae97d28d65e8e10465aa") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "drracket" "drracket-plugin-lib" "gui-lib" "net-lib" ("plai-typed" #:version "1.2") "plai-typed-s-exp-match" "plai-lazy")) (description . "Utah CS 5510 homework submission plugin for DrRacket") (implies . ()) (last-checked . 1522414700) (last-edit . 1438618864) (last-updated . 1502816517) (modules . ((lib "uu-cs5510/handin-multi.rkt") (lib "uu-cs5510/client.rkt") (lib "uu-cs5510/this-collection.rkt") (lib "uu-cs5510/updater.rkt") (lib "uu-cs5510/client-gui.rkt"))) (name . "uu-cs5510") (nix-sha256 . "1rlx1z410260pp9546j0r3q1bbngi8hjawk07ll3wqkr7yanj56b") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@cs.utah.edu . #t) (ring:1 . #t))) (source . "git://github.com/mflatt/uu-cs5510") (tags . ()) (versions . #hash((default . #hasheq((checksum . "d6736f807b31f637e141ae97d28d65e8e10465aa") (source . "git://github.com/mflatt/uu-cs5510") (source_url . "http://github.com/mflatt/uu-cs5510/tree/master"))))))) ("rsound" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rsound" "doc/rsound@rsound/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rsound.txt") (test-failure-log . "server/built/test-fail/rsound.txt") (test-success-log . #f))) (checksum . "39580725993288d4f8495fd988f3d99e8db60613") (checksum-error . #f) (conflicts . ()) (dependencies . (("portaudio" "0.1") "base" "data-lib" "gui-lib" "htdp-lib" "math-lib" "plot-lib" "plot-gui-lib" "rackunit-lib" "typed-racket-lib" "drracket-plugin-lib" "memoize" "pict-lib" "wxme-lib" "snip-lib" "scribble-lib" "racket-doc" "wxme-lib")) (description . "A framework for manipulating and playing sounds using the portaudio library. Runs on Windows, Mac OS X, and linux.") (implies . ()) (last-checked . 1522414672) (last-edit . 1384111813) (last-updated . 1509685375) (modules . ((lib "rsound/test/manual-test-latency.rkt") (lib "rsound/test/check-recording.rkt") (lib "rsound/rsound-snip.rkt") (lib "rsound/examples/gogo.rkt") (lib "rsound/test/test-sequencer.rkt") (lib "rsound/main.rkt") (lib "rsound/examples/bach-notes.rkt") (lib "rsound/contrib/crush.rkt") (lib "rsound/examples/katy-sliders.rkt") (lib "rsound/test/test-read-wav.rkt") (lib "rsound/contrib/drum-machine.rkt") (lib "rsound/test/manual-draw-test.rkt") (lib "rsound/test/manual-play-stream-latency-test.rkt") (lib "rsound/test/check-math-fft-speed.rkt") (lib "rsound/test/test-filter.rkt") (lib "rsound/test/manual-stream-play-test.rkt") (lib "rsound/looper.rkt") (lib "rsound/contrib/cs4hs-lab.scrbl") (lib "rsound/private/s16vector-add.rkt") (lib "rsound/test/test-single-cycle.rkt") (lib "rsound/rsound-commander.rkt") (lib "rsound/test/plot-signal.rkt") (lib "rsound/test/test-fsound.rkt") (lib "rsound/contrib/bassdrum.rkt") (lib "rsound/test/test-envelope.rkt") (lib "rsound/sequencer.rkt") (lib "rsound/test/check-signal-speed.rkt") (lib "rsound/common.rkt") (lib "rsound/examples/test-audio-filtering.rkt") (lib "rsound/test/check-resample-speed.rkt") (lib "rsound/contrib/cs4hs-lib.rkt") (lib "rsound/wavetable.rkt") (lib "rsound/reverb.rkt") (lib "rsound/test/test-write-wav.rkt") (lib "rsound/draw.rkt") (lib "rsound/util.rkt") (lib "rsound/drum-samples.rkt") (lib "rsound/signals.scrbl") (lib "rsound/test/interactive-drr-frequency-response.rkt") (lib "rsound/examples/harmonic-overlay.rkt") (lib "rsound/examples/random-tone-example.rkt") (lib "rsound/examples/markov-model.rkt") (lib "rsound/wxme-rsound-snip.rkt") (lib "rsound/test/test-rsound-commander.rkt") (lib "rsound/paste-util.rkt") (lib "rsound/filter-typed.rkt") (lib "rsound/envelope.rkt") (lib "rsound/examples/quantize-looper.rkt") (lib "rsound/test/test-util.rkt") (lib "rsound/write-wav.rkt") (lib "rsound/rsound.rkt") (lib "rsound/test/manual-playing-test.rkt") (lib "rsound/single-cycle.rkt") (lib "rsound/contrib/cs4hs-lab.rkt") (lib "rsound/rsound.scrbl") (lib "rsound/define-argcheck.rkt") (lib "rsound/examples/sequencer-playing-example.rkt") (lib "rsound/examples/sub-sampling.rkt") (lib "rsound/diagnose.rkt") (lib "rsound/prefs.rkt") (lib "rsound/contrib/adventure-kid-waveforms.rkt") (lib "rsound/examples/piano-samples.rkt") (lib "rsound/test/manual-playing-signal-block-test.rkt") (lib "rsound/tool.rkt") (lib "rsound/test/test-paste-util.rkt") (lib "rsound/test/test-network.rkt") (lib "rsound/read-wav.rkt") (lib "rsound/test/test-rsound.rkt") (lib "rsound/test/test-make-tone.rkt") (lib "rsound/test/manual-test-big-draw.rkt") (lib "rsound/stream-play.rkt") (lib "rsound/test/check-timing.rkt") (lib "rsound/test/test-s16vector-add.rkt") (lib "rsound/integral-cycles.rkt") (lib "rsound/piano-tones.rkt") (lib "rsound/fsound.rkt") (lib "rsound/test/check-c-lib-speedup.rkt") (lib "rsound/test/manual-test-fft.rkt") (lib "rsound/frequency-response.rkt") (lib "rsound/network.rkt") (lib "rsound/filter.rkt") (lib "rsound/test/test-reverb.rkt"))) (name . "rsound") (nix-sha256 . "03q03s60lj365k9nwiglnzdyxmn8j4rq2y7nf4k8z432cym0vv33") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audio . #t) (author:clements@racket-lang.org . #t) (ffi . #t) (io . #t) (ring:1 . #t))) (source . "github://github.com/jbclements/RSound/pre-6/") (tags . ("audio" "ffi" "io")) (versions . #hash(("5.92" . #hasheq((checksum . "39580725993288d4f8495fd988f3d99e8db60613") (source . "github://github.com/jbclements/RSound/pre-6/") (source_url . "http://github.com/jbclements/RSound/tree/pre-6/"))) ("5.3.4" . #hasheq((checksum . "39580725993288d4f8495fd988f3d99e8db60613") (source . "github://github.com/jbclements/RSound/pre-6/") (source_url . "http://github.com/jbclements/RSound/tree/pre-6/"))) (default . #hasheq((checksum . "f21ce268bca7aabbebc70f9fb10703351cbcf02b") (source . "github://github.com/jbclements/RSound/master/") (source_url . "http://github.com/jbclements/RSound/tree/master/"))) ("5.3.6" . #hasheq((checksum . "39580725993288d4f8495fd988f3d99e8db60613") (source . "github://github.com/jbclements/RSound/pre-6/") (source_url . "http://github.com/jbclements/RSound/tree/pre-6/"))) ("5.3.2" . #hasheq((checksum . "39580725993288d4f8495fd988f3d99e8db60613") (source . "github://github.com/jbclements/RSound/pre-6/") (source_url . "http://github.com/jbclements/RSound/tree/pre-6/"))) ("5.3.3" . #hasheq((checksum . "39580725993288d4f8495fd988f3d99e8db60613") (source . "github://github.com/jbclements/RSound/pre-6/") (source_url . "http://github.com/jbclements/RSound/tree/pre-6/"))) ("5.3.5" . #hasheq((checksum . "39580725993288d4f8495fd988f3d99e8db60613") (source . "github://github.com/jbclements/RSound/pre-6/") (source_url . "http://github.com/jbclements/RSound/tree/pre-6/"))) ("5.93" . #hasheq((checksum . "39580725993288d4f8495fd988f3d99e8db60613") (source . "github://github.com/jbclements/RSound/pre-6/") (source_url . "http://github.com/jbclements/RSound/tree/pre-6/"))))))) ("string-constants-doc" . #hash((author . "robby@racket-lang.org") (checksum . "45ecf1e0dd8adbd2256e6151b7a5aec535d1b3f1") (dependencies . ("string-constants-lib" "base" "racket-doc" "scribble-lib")) (description . "robby@racket-lang.org") (modules . ()) (name . "string-constants-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/string-constants-doc.zip") (tags . ()))) ("generic-bind" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "generic-bind" "doc/generic-bind@generic-bind/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/generic-bind.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/generic-bind.txt"))) (checksum . "77e6dd7c87bd1e9ee9bd083a1c47d400ad79c6d1") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "5.90.0.9") "rackunit-lib" "racket-doc" "scribble-lib" "math-lib" "compatibility-lib")) (description . "Generic binding forms.") (implies . ()) (last-checked . 1522414404) (last-edit . 1377753498) (last-updated . 1502816077) (modules . ((lib "generic-bind/stx-utils.rkt") (lib "generic-bind/as-rkt-names.rkt") (lib "generic-bind/tests/generic-bind-tests.rkt") (lib "generic-bind/syntax-parse-utils.rkt") (lib "generic-bind/generic-bind.rkt") (lib "generic-bind/tests/for-tests/run-for-tests.rkt") (lib "generic-bind/nested-binds-helper.rkt") (lib "generic-bind/generic-bind.scrbl") (lib "generic-bind/main.rkt") (lib "generic-bind/tests/maze.rkt") (lib "generic-bind/tests/for-tests/for-util.rkt"))) (name . "generic-bind") (nix-sha256 . "1mb9xg573hv0bcjz9rm557057iw1dv2z2pxv2bgddwzn7xfnl3s4") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:stchang@racket-lang.org . #t) (ring:1 . #t))) (source . "github://github.com/stchang/generic-bind/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "77e6dd7c87bd1e9ee9bd083a1c47d400ad79c6d1") (source . "github://github.com/stchang/generic-bind/master") (source_url . "http://github.com/stchang/generic-bind/tree/master"))))))) ("tex-table" . #hash((author . "robby@racket-lang.org") (checksum . "4f46ed56204b7ef6b01e22c4e032c665d65deab2") (dependencies . ("base")) (description . "robby@racket-lang.org") (modules . ()) (name . "tex-table") (source . "https://download.racket-lang.org/releases/6.12/pkgs/tex-table.zip") (tags . ()))) ("while-loop" . #hasheq((author . "clements@racket-lang.org dyoo@hashcollision.org") (authors . ("clements@racket-lang.org" "dyoo@hashcollision.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dyoo-while-loop" "doc/dyoo-while-loop@while-loop/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/while-loop.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/while-loop.txt"))) (checksum . "69e33eef851c8db79536dcdb86bbfe113f7dcdda") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "parser-tools-doc" "racket-doc" "scribble-lib")) (description . "Danny Yoo's while-loop package") (implies . ()) (last-checked . 1522414702) (last-edit . 1399596155) (last-updated . 1502816528) (modules . ((lib "dyoo-while-loop/dyoo-while-loop.scrbl") (lib "dyoo-while-loop/main.rkt"))) (name . "while-loop") (nix-sha256 . "0ski4r26brlxjfz7pr68822p7bamm6xa6vz7rdv77h5scnq6jh1p") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:clements@racket-lang.org . #t) (author:dyoo@hashcollision.org . #t) (ring:1 . #t))) (source . "github://github.com/jbclements/while-loop/master/") (tags . ()) (versions . #hash((default . #hasheq((checksum . "69e33eef851c8db79536dcdb86bbfe113f7dcdda") (source . "github://github.com/jbclements/while-loop/master/") (source_url . "http://github.com/jbclements/while-loop/tree/master/"))))))) ("racket-quandl" . #hasheq((author . "malcolm.still@gmail.com") (authors . ("malcolm.still@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "racket-quandl" "doc/racket-quandl@racket-quandl/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-quandl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-quandl.txt"))) (checksum . "2bc231f7981dfcd663c87ce46b4ff0876723a7ef") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Grab data from Quandl with racket for fun and profit") (implies . ()) (last-checked . 1522414607) (last-edit . 1456769446) (last-updated . 1502816354) (modules . ((lib "racket-quandl/scribblings/racket-quandl.scrbl") (lib "racket-quandl/main.rkt"))) (name . "racket-quandl") (nix-sha256 . "1jhm0almw4b2q3bn1wq49hqr5b8b11v6jp4kq9n92wr75wpnqp1h") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:malcolm.still@gmail.com . #t) (finance . #t) (ring:1 . #t))) (source . "git://github.com/malcolmstill/racket-quandl") (tags . ("finance")) (versions . #hash((default . #hasheq((checksum . "2bc231f7981dfcd663c87ce46b4ff0876723a7ef") (source . "git://github.com/malcolmstill/racket-quandl") (source_url . "http://github.com/malcolmstill/racket-quandl/tree/master"))))))) ("derpy" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "derpy" "doc/derpy@derpy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/derpy.txt") (test-failure-log . "server/built/test-fail/derpy.txt") (test-success-log . #f))) (checksum . "179ec02668cdb0beda40022ef9b45909795c7c09") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "typed-racket-lib" "typed-racket-more" "mordae" "zmq" "tesira" "libserialport" "esc-vp21" "pex" "cuecore" "racket-doc" "typed-racket-lib" "typed-racket-doc")) (description . "Presentation Room Control") (implies . ()) (last-checked . 1522414379) (last-edit . 1439459915) (last-updated . 1502815898) (modules . ((lib "derpy/bin/tesira-driver.rkt") (lib "derpy/pex-driver.scrbl") (lib "derpy/util/zmq.rkt") (lib "derpy/util/error.rkt") (lib "derpy/tesira-driver.scrbl") (lib "derpy/atlona-driver.scrbl") (lib "derpy/bin/epson-driver.rkt") (lib "derpy/bin/atlona-driver.rkt") (lib "derpy/bin/atlona-ir-driver.rkt") (lib "derpy/bin/lighting-driver.rkt") (lib "derpy/derpy.scrbl") (lib "derpy/bin/pex-driver.rkt") (lib "derpy/epson-driver.scrbl") (lib "derpy/util/reply.rkt"))) (name . "derpy") (nix-sha256 . "1zjxglr7ymn43ir8za625zrviw853v3g4spw94ci8vpg72q85xzj") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t))) (source . "git://github.com/mordae/racket-derpy") (tags . ()) (versions . #hash((default . #hasheq((checksum . "179ec02668cdb0beda40022ef9b45909795c7c09") (source . "git://github.com/mordae/racket-derpy") (source_url . "http://github.com/mordae/racket-derpy/tree/master"))))))) ("pict-snip-lib" . #hash((author . "robby@racket-lang.org") (checksum . "02f1c7645acc61eae2017735855235fcf1de8202") (dependencies . ("draw-lib" "snip-lib" "pict-lib" "wxme-lib" "base" "rackunit-lib" "gui-lib")) (description . "robby@racket-lang.org") (modules . ()) (name . "pict-snip-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/pict-snip-lib.zip") (tags . ()))) ("java-processing" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/java-processing.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/java-processing.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/java-processing.txt"))) (checksum . "8a232dac0405edf13067397364c9dbd702addca6") (checksum-error . #f) (conflicts . ()) (dependencies . ("racket-to")) (description . "The minimal amount of code necessary to write processing code in DrRacket (so I don't have to switch students to a different IDE in my classes).") (implies . ()) (last-checked . 1522414421) (last-edit . 1515359369) (last-updated . 1515359369) (modules . ((lib "java-processing/processing-module.rkt") (lib "java-processing/main.rkt"))) (name . "java-processing") (nix-sha256 . "10264j04p1jc9ga1rpzr9x338rxbyn53kpknn48nsf5vlqi9s9a2") (ring . 2) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:2 . #t))) (source . "https://github.com/thoughtstem/java-processing.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8a232dac0405edf13067397364c9dbd702addca6") (source . "https://github.com/thoughtstem/java-processing.git") (source_url . "https://github.com/thoughtstem/java-processing.git"))))))) ("xrepl-test" . #hash((author . "eli@racket-lang.org") (checksum . "dcc40b522fe60b88c344aed79d3b00a92dca0f85") (dependencies . ("at-exp-lib" "base" "eli-tester" "xrepl-lib")) (description . "eli@racket-lang.org") (modules . ()) (name . "xrepl-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/xrepl-test.zip") (tags . ()))) ("_" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "_" "doc/_@_/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/_.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/_.txt"))) (checksum . "e687a8eaf4ef62b97ad5d37f6fd09cb684c7d101") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (last-checked . 1522417868) (last-edit . 1469570302) (last-updated . 1502812264) (modules . ((lib "_/scribblings/_.scrbl") (lib "_/main.rkt"))) (name . "_") (nix-sha256 . "0dkyj3np4w5wxyv940lv26myra3fw94dzvyp0v5265qlspmfpsjj") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t))) (source . "git://github.com/LeifAndersen/racket-_") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e687a8eaf4ef62b97ad5d37f6fd09cb684c7d101") (source . "git://github.com/LeifAndersen/racket-_") (source_url . "http://github.com/LeifAndersen/racket-_/tree/master"))))))) ("xdgbasedir0" . #hasheq((author . "lwoodman@vlifesystems.com") (authors . ("lwoodman@vlifesystems.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "xdgbasedir"))) (failure-log . "server/built/fail/xdgbasedir0.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "ab6df3c5307b776547a9904625b2081a760e3045") (checksum-error . #f) (conflicts . ()) (dependencies . ()) (description . "Functions to simplify access to the XDG Base Directory Specification.") (implies . ()) (last-checked . 1522414702) (last-edit . 1380522697) (last-updated . 1502816532) (modules . ((lib "xdgbasedir0/xdgbasedir/xdgbasedir.rkt") (lib "xdgbasedir0/xdgbasedir/main.rkt") (lib "xdgbasedir0/xdgbasedir/scribblings/licence.scrbl") (lib "xdgbasedir0/xdgbasedir/scribblings/development.scrbl") (lib "xdgbasedir0/xdgbasedir/tests/xdgbasedir-test.rkt") (lib "xdgbasedir0/xdgbasedir/scribblings/xdgbasedir.scrbl") (lib "xdgbasedir0/xdgbasedir/scribblings/changelog.scrbl") (lib "xdgbasedir0/xdgbasedir/tests/test-helpers.rkt") (lib "xdgbasedir0/xdgbasedir/scribblings/exported-functions.scrbl"))) (name . "xdgbasedir0") (nix-sha256 . "08h8h3ii6cc9pqssj5sn101n8f5v48rksj7km9h5n0bl1bavd30b") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:lwoodman@vlifesystems.com . #t) (ring:1 . #t) (unix . #t))) (source . "github://github.com/lawrencewoodman/xdgbasedir_rkt/v0.3") (tags . ("unix")) (versions . #hash((default . #hasheq((checksum . "ab6df3c5307b776547a9904625b2081a760e3045") (source . "github://github.com/lawrencewoodman/xdgbasedir_rkt/v0.3") (source_url . "http://github.com/lawrencewoodman/xdgbasedir_rkt/tree/v0.3"))))))) ("c" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (("extract" "c" "doc/c@c/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/c.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/c.txt"))) (checksum . "c2efa315c13e420e6cf77ba8d5ce1f7eb9dbdc2c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "parser-tools-doc" "racket-doc" "scribble-doc")) (description . "A language level for writing C code in DrRacket.") (implies . ()) (last-checked . 1522414312) (last-edit . 1352332568) (last-updated . 1502812286) (modules . ((lib "c/lang/runtime.rkt") (lib "c/lang/main.rkt") (lib "tests/c/lang/order.rkt") (lib "c/lang/reader.rkt") (lib "c/lang/c.scrbl") (lib "c/lang/read.rkt"))) (name . "c") (nix-sha256 . "1ff014lnj5bx060fz6dbfwpyvjlvla3frmiachf356qj4blnhjq9") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:docs-error: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (c . #t) (language . #t) (ring:1 . #t))) (source . "github://github.com/jeapostrophe/c/master") (tags . ("c" "language")) (versions . #hash((default . #hasheq((checksum . "c2efa315c13e420e6cf77ba8d5ce1f7eb9dbdc2c") (source . "github://github.com/jeapostrophe/c/master") (source_url . "http://github.com/jeapostrophe/c/tree/master"))))))) ("describe" . #hasheq((author . "mb@mbtype.com doug@cognidrome.org") (authors . ("mb@mbtype.com" "doug@cognidrome.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "describe" "doc/describe@describe/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/describe.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/describe.txt"))) (checksum . "be266809f5b331e12bf18bdeee2495119060b0d4") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "scribble-lib" "racket-doc")) (description . "Doug Williams's 'describe' package from PLaneT") (implies . ()) (last-checked . 1522414379) (last-edit . 1432528156) (last-updated . 1502815898) (modules . ((lib "describe/float-test-single.rkt") (lib "describe/float-test-double.rkt") (lib "describe/scribblings/describe.scrbl") (lib "describe/float-test-extended.rkt") (lib "describe/describe-test.rkt") (lib "describe/main.rkt"))) (name . "describe") (nix-sha256 . "0dqs9cdk5ifzazjayndb79ppwdcwcvzcf555wybd341k1f591ksg") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:doug@cognidrome.org . #t) (author:mb@mbtype.com . #t) (ring:1 . #t))) (source . "github://github.com/mbutterick/describe/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "be266809f5b331e12bf18bdeee2495119060b0d4") (source . "github://github.com/mbutterick/describe/master") (source_url . "http://github.com/mbutterick/describe/tree/master"))))))) ("mediafile" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mediafile" "doc/mediafile@mediafile/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mediafile.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mediafile.txt"))) (checksum . "3d87ac5b4e35a527d7f9263af40e014d1400edb7") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "canonicalize-path" "racket-doc" "scribble-lib" "overeasy")) (description . "Media File Metadata Utilities") (implies . ()) (last-checked . 1522414434) (last-edit . 1456618671) (last-updated . 1502816175) (modules . ((lib "mediafile/mediafile.rkt") (lib "mediafile/mediafile.scrbl") (lib "mediafile/mediafile-exif.rkt") (lib "mediafile/mediafile-misc.rkt") (lib "mediafile/main.rkt") (lib "mediafile/mediafile-ogg.rkt"))) (name . "mediafile") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (jpeg . #t) (media . #t) (ogg . #t) (ring:1 . #t) (tiff . #t))) (source . "http://www.neilvandyke.org/racket/mediafile.zip") (tags . ("jpeg" "media" "ogg" "tiff")) (versions . #hash((default . #hasheq((checksum . "3d87ac5b4e35a527d7f9263af40e014d1400edb7") (source . "http://www.neilvandyke.org/racket/mediafile.zip") (source_url . "http://www.neilvandyke.org/racket/mediafile.zip"))))))) ("syntax-color-lib" . #hash((author . "mflatt@racket-lang.org") (checksum . "dbd9fd13014af5a4f12ce9bfea4fcbf79b564840") (dependencies . ("scheme-lib" "base" "compatibility-lib" "parser-tools-lib" "option-contract-lib")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "syntax-color-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/syntax-color-lib.zip") (tags . ()))) ("colon-match" . #hasheq((author . "alexander@knauth.org jensaxel@soegaard.net") (authors . ("alexander@knauth.org" "jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "colon-match" "doc/colon-match@colon-match/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/colon-match.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/colon-match.txt"))) (checksum . "7cccb5fdb4e5301ec2b2d38c553ad3050f7d542d") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "sandbox-lib" "racket-doc")) (description . "match with colon notation, based on discussion with Jens Axel Søgaard on users list ") (implies . ()) (last-checked . 1522414314) (last-edit . 1424704309) (last-updated . 1510210861) (modules . ((lib "colon-match/main.rkt") (lib "colon-match/docs/colon-match.scrbl"))) (name . "colon-match") (nix-sha256 . "1y4axbcwf7lal2b2s6zdp6qal9nlqnm463rzyzjfasiywxkim6zh") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (author:jensaxel@soegaard.net . #t) (match . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/colon-match") (tags . ("match")) (versions . #hash((default . #hasheq((checksum . "7cccb5fdb4e5301ec2b2d38c553ad3050f7d542d") (source . "git://github.com/AlexKnauth/colon-match") (source_url . "http://github.com/AlexKnauth/colon-match/tree/master"))))))) ("libgit2-x86_64-linux-natipkg" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libgit2-x86_64-linux-natipkg.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libgit2-x86_64-linux-natipkg.txt"))) (checksum . "800f798d74af301135f6921bbc914097778b8a20") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "This package contains the x86_64 linux build of the libgit2 library, for use by the libgit2 package.") (implies . ()) (last-checked . 1522414424) (last-edit . 1514333423) (last-updated . 1514333423) (modules . ()) (name . "libgit2-x86_64-linux-natipkg") (nix-sha256 . "1wx8f8ng6jmgk4mrp6p0d47h4l4f98pwbf0z1vm81ry3nvld44b4") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (author:clements@racket-lang.org . #t) (git . #t) (ring:2 . #t))) (source . "https://github.com/jbclements/libgit2-x86_64-linux-natipkg.git?path=libgit2-x86_64-linux") (tags . ("git")) (versions . #hash((default . #hasheq((checksum . "800f798d74af301135f6921bbc914097778b8a20") (source . "https://github.com/jbclements/libgit2-x86_64-linux-natipkg.git?path=libgit2-x86_64-linux") (source_url . "https://github.com/jbclements/libgit2-x86_64-linux-natipkg.git?path=libgit2-x86_64-linux"))))))) ("agile" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "agile" "doc/agile@agile/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/agile.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/agile.txt"))) (checksum . "2b6a27323b0b4533c8ba1dcc3c3652bb4b811048") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "#lang agile ;; == (require (for-syntax racket/base syntax/parse))") (implies . ()) (last-checked . 1522417869) (last-edit . 1461953087) (last-updated . 1516770971) (modules . ((lib "agile/main.rkt") (lib "agile/scribblings/agile.scrbl") (lib "agile/lang/reader.rkt"))) (name . "agile") (nix-sha256 . "097fsj64jk91imqpxr0v68q6095xzwq5z0pg11rgvgaqbdxphjzd") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (agile . #t) (author:types@ccs.neu.edu . #t) (ring:1 . #t))) (source . "https://github.com/bennn/agile.git") (tags . ("agile")) (versions . #hash((default . #hasheq((checksum . "2b6a27323b0b4533c8ba1dcc3c3652bb4b811048") (source . "https://github.com/bennn/agile.git") (source_url . "https://github.com/bennn/agile.git"))))))) ("eli-tester" . #hash((author . "eli@racket-lang.org") (checksum . "2d2a692d6bbb7cafd56da054aee10126956d149b") (dependencies . ("base" "rackunit-lib")) (description . "eli@racket-lang.org") (modules . ()) (name . "eli-tester") (source . "https://download.racket-lang.org/releases/6.12/pkgs/eli-tester.zip") (tags . ()))) ("realm" . #hash((author . "matthias@racket-lang.org") (checksum . "538c20cfa9d6bccf15f559fc79d27e7a876960b7") (dependencies . ("base" "htdp-lib" "rackunit-lib")) (description . "matthias@racket-lang.org") (modules . ()) (name . "realm") (source . "https://download.racket-lang.org/releases/6.12/pkgs/realm.zip") (tags . ()))) ("unstable-test" . #hash((author . "jay@racket-lang.org samth@racket-lang.org cce@racket-lang.org ryanc@racket-lang.org robby@racket-lang.org") (authors . ("jay@racket-lang.org" "samth@racket-lang.org" "cce@racket-lang.org" "ryanc@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-test.txt") (test-failure-log . "server/built/test-fail/unstable-test.txt") (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-index" "scheme-lib" "at-exp-lib" "compatibility-lib" "eli-tester" "gui-lib" "planet-lib" "racket-test" "rackunit-lib" "srfi-lib" "syntax-color-lib" "typed-racket-lib" "unstable-contract-lib" "unstable-debug-lib" "unstable-lib" "unstable-list-lib" "unstable-options-lib" "unstable-parameter-group-lib" "unstable-2d")) (description . "tests for \"unstable\"") (implies . ()) (last-checked . 1522414699) (last-edit . 1445382797) (last-updated . 1502816516) (modules . ((lib "tests/test-docs-complete.rkt") (lib "tests/unstable/match.rkt") (lib "tests/unstable/logging.rkt") (lib "tests/unstable/parameter-group.rkt") (lib "tests/unstable/syntax.rkt") (lib "tests/unstable/contract.rkt") (lib "tests/unstable/planet-syntax.rkt") (lib "tests/unstable/list.rkt") (lib "tests/unstable/debug.rkt") (lib "tests/unstable/sequence.rkt") (lib "tests/unstable/helpers.rkt") (lib "tests/unstable/set.rkt"))) (name . "unstable-test") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:cce@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (author:ryanc@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("unstable")) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) (default . #hasheq((checksum . "6d2564bf725be9d56320cfa5bf438e8d3dafdb6e") (source . "git://github.com/racket/unstable/?path=unstable-test") (source_url . "git://github.com/racket/unstable/?path=unstable-test"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("faster-minikanren" . #hasheq((author . "michael.ballantyne@gmail.com") (authors . ("michael.ballantyne@gmail.com")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/faster-minikanren.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/faster-minikanren.txt"))) (checksum . "10abd1142603b55e4d6de7ccdebf77639b84a274") (checksum-error . #f) (conflicts . ("minikanren")) (dependencies . ("base")) (description . "A fast implementation of miniKanren with disequality and absento.") (implies . ()) (last-checked . 1522414400) (last-edit . 1474776335) (last-updated . 1517843812) (modules . ((lib "minikanren/matche.rkt") (lib "minikanren/full-interp.rkt") (lib "minikanren/simple-interp.rkt") (lib "minikanren/numbers.rkt") (lib "minikanren/mk.rkt") (lib "minikanren/main.rkt"))) (name . "faster-minikanren") (nix-sha256 . "012s3kf08ga2c5bwxx9xhpmng745m47vl9mx9xhcgf3h3yakvn4r") (ring . 2) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:conflicts: . #t) (:no-tag: . #t) (author:michael.ballantyne@gmail.com . #t) (ring:2 . #t))) (source . "git://github.com/michaelballantyne/faster-miniKanren") (tags . ()) (versions . #hash((default . #hasheq((checksum . "10abd1142603b55e4d6de7ccdebf77639b84a274") (source . "git://github.com/michaelballantyne/faster-miniKanren") (source_url . "http://github.com/michaelballantyne/faster-miniKanren/tree/master"))))))) ("simple-qr" . #hasheq((author . "chenxiao770117@gmail.com") (authors . ("chenxiao770117@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "simple-qr" "doc/simple-qr@simple-qr/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/simple-qr.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/simple-qr.txt"))) (checksum . "1de900eda93bd985a47f9cfb73d1bdbc7a9c0538") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "draw-lib" "racket-doc" "scribble-lib")) (description . "a Qr code reader and writer") (implies . ()) (last-checked . 1522414679) (last-edit . 1492064465) (last-updated . 1502816429) (modules . ((lib "simple-qr/share/mask-data.rkt") (lib "simple-qr/write/lib/func/code-log/transform-code-log.rkt") (lib "simple-qr/tests/write/mask-data-test.rkt") (lib "simple-qr/read/qr-read.rkt") (lib "simple-qr/write/lib/func/capacity/capacity-dic.rkt") (lib "simple-qr/example/example.rkt") (lib "simple-qr/read/lib/lib.rkt") (lib "simple-qr/tests/read/lib-test.rkt") (lib "simple-qr/write/qr-write.rkt") (lib "simple-qr/tests/write/func/code-info-func-test.rkt") (lib "simple-qr/tests/write/func/poly-dic-func-test.rkt") (lib "simple-qr/share/func.rkt") (lib "simple-qr/write/lib/func/character-count/character-bit-width.rkt") (lib "simple-qr/tests/write/error-correct-code-test.rkt") (lib "simple-qr/share/data-group.rkt") (lib "simple-qr/tests/write/func/character-bit-width-test.rkt") (lib "simple-qr/tests/write/poly-func-test.rkt") (lib "simple-qr/tests/read/qr-read-test.rkt") (lib "simple-qr/write/lib/func/remainder-bits/remainder-bits-func.rkt") (lib "simple-qr/share/dark-module.rkt") (lib "simple-qr/share/version-information.rkt") (lib "simple-qr/share/timing-pattern.rkt") (lib "simple-qr/write/lib/version-information/version-information.rkt") (lib "simple-qr/share/separator.rkt") (lib "simple-qr/write/lib/format-information/format-information.rkt") (lib "simple-qr/write/lib/func/poly/poly-dic-func.rkt") (lib "simple-qr/write/lib/func/remainder-bits/remainder-bits-dic.rkt") (lib "simple-qr/share/finder-pattern.rkt") (lib "simple-qr/write/lib/mask-data/mask-data.rkt") (lib "simple-qr/write/lib/fill-data/fill-data.rkt") (lib "simple-qr/write/lib/lib.rkt") (lib "simple-qr/share/error_level.rkt") (lib "simple-qr/write/lib/func/code-info/code-info-dic.rkt") (lib "simple-qr/write/lib/error-correct-code/error-correct-code.rkt") (lib "simple-qr/tests/write/func/remainder-bits-func-test.rkt") (lib "simple-qr/share/alignment-pattern.rkt") (lib "simple-qr/tests/write/func/capacity-dic-test.rkt") (lib "simple-qr/write/lib/dark-module/dark-module.rkt") (lib "simple-qr/share/format-information.rkt") (lib "simple-qr/write/lib/func/code-log/code-log-func.rkt") (lib "simple-qr/tests/share/func-test.rkt") (lib "simple-qr/tests/write/func/capacity-func-test.rkt") (lib "simple-qr/tests/share/data-group-test.rkt") (lib "simple-qr/write/lib/func/capacity/transform.rkt") (lib "simple-qr/tests/write/func/func-test.rkt") (lib "simple-qr/scribble/simple-qr.scrbl") (lib "simple-qr/write/lib/func/capacity/capacity-func.rkt") (lib "simple-qr/write/lib/error-correct-code/poly-func.rkt") (lib "simple-qr/write/lib/func/code-log/code-log-dic.rkt") (lib "simple-qr/write/lib/data-encoding/alphanumeric.rkt") (lib "simple-qr/main.rkt") (lib "simple-qr/tests/read/matrix-rotate-test.rkt") (lib "simple-qr/tests/share/fill-data-test.rkt") (lib "simple-qr/write/lib/separator/separator.rkt") (lib "simple-qr/write/lib/timing-pattern/timing-pattern.rkt") (lib "simple-qr/share/fill-data.rkt") (lib "simple-qr/write/lib/data-encoding/data-encoding.rkt") (lib "simple-qr/tests/write/func/code-log-func-test.rkt") (lib "simple-qr/tests/write/data-encoding-test.rkt") (lib "simple-qr/write/lib/func/func.rkt") (lib "simple-qr/tests/share/timing-pattern-test.rkt") (lib "simple-qr/share/data-encoding.rkt") (lib "simple-qr/write/lib/alignment-pattern/alignment-pattern.rkt") (lib "simple-qr/tests/write/lib-test.rkt") (lib "simple-qr/write/lib/finder-pattern/finder-pattern.rkt") (lib "simple-qr/write/lib/func/code-info/code-info-func.rkt") (lib "simple-qr/read/matrix-rotate/lib.rkt") (lib "simple-qr/tests/share/alignment-pattern-test.rkt"))) (name . "simple-qr") (nix-sha256 . "00nwvf0wf4v0fhrrrv66g0274xp9j31rnqnff983rqfbjn913jv4") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:chenxiao770117@gmail.com . #t) (qr . #t) (ring:1 . #t))) (source . "git://github.com/simmone/racket-simple-qr") (tags . ("qr")) (versions . #hash((default . #hasheq((checksum . "1de900eda93bd985a47f9cfb73d1bdbc7a9c0538") (source . "git://github.com/simmone/racket-simple-qr") (source_url . "http://github.com/simmone/racket-simple-qr/tree/master"))))))) ("plt-web-doc" . #hash((author . "eli@racket-lang.org mflatt@racket-lang.org samth@racket-lang.org") (authors . ("eli@racket-lang.org" "mflatt@racket-lang.org" "samth@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "plt-web" "doc/plt-web@plt-web-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plt-web-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plt-web-doc.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "plt-web-lib" "racket-doc" "scribble-doc" "scribble-lib")) (description . "documentation part of \"plt-web\"") (implies . ()) (last-checked . 1522414532) (last-edit . 1417307461) (last-updated . 1502816287) (modules . ((lib "plt-web/plt-web.scrbl"))) (name . "plt-web-doc") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:eli@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ()) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) (default . #hasheq((checksum . "5697a81d84117f9341686783b02299f74656918a") (source . "git://github.com/racket/plt-web/?path=plt-web-doc") (source_url . "git://github.com/racket/plt-web/?path=plt-web-doc"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("s3-sync" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "s3-sync" "doc/s3-sync@s3-sync/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/s3-sync.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/s3-sync.txt"))) (checksum . "f47a76fc116d14088604aab70fb60b370315147b") (checksum-error . #f) (conflicts . ()) (dependencies . (("aws" #:version "1.8") ("http" #:version "0.2") ("base" #:version "6.0.0.4") "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Sync filesystem with an S3 bucket") (implies . ()) (last-checked . 1522414673) (last-edit . 1394587384) (last-updated . 1502816416) (modules . ((lib "s3-sync/routing-rule.rkt") (lib "s3-sync/s3-sync.scrbl") (lib "s3-sync/main.rkt") (lib "s3-sync/tests/main.rkt") (lib "s3-sync/web-config.rkt") (lib "s3-sync/web.rkt") (lib "s3-sync/gzip.rkt"))) (name . "s3-sync") (nix-sha256 . "0szjgvyhdqiy4230vysngprvl1qmrwmsm7asqssxdf85gdpml4hx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (AWS . #t) (author:mflatt@cs.utah.edu . #t) (ring:1 . #t))) (source . "git://github.com/mflatt/s3-sync") (tags . ("AWS")) (versions . #hash((default . #hasheq((checksum . "f47a76fc116d14088604aab70fb60b370315147b") (source . "git://github.com/mflatt/s3-sync") (source_url . "http://github.com/mflatt/s3-sync/tree/master"))))))) ("sxml" . #hasheq((author . "clements@brinckerhoff.org") (authors . ("clements@brinckerhoff.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sxml" "doc/sxml@sxml/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sxml.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sxml.txt"))) (checksum . "d400916e3c1506b12b5edf4bba2e5249503de296") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "srfi-lib" "racket-doc" "scribble-lib")) (description . "SXML family of tools (including SXPath)") (implies . ()) (last-checked . 1522414686) (last-edit . 1356565820) (last-updated . 1518921022) (modules . ((lib "sxml/serializer.rkt") (lib "sxml/sxpath-ext.rkt") (lib "sxml/ssax/ssax.rkt") (lib "sxml/xpath-parser.rkt") (lib "sxml/tests/vSXML-tree-trans.rkt") (lib "sxml/tests/ssax-tests.rkt") (lib "sxml/ddo-txpath.rkt") (lib "sxml/ssax/ssax-prim.rkt") (lib "sxml/scribblings/sxslt.scrbl") (lib "sxml/main.rkt") (lib "sxml/sxml-tools.rkt") (lib "sxml/scribblings/sxpath.scrbl") (lib "sxml/tests/tests.rkt") (lib "sxml/modif.rkt") (lib "sxml/ssax/parse-error.rkt") (lib "sxml/scribblings/serialization.scrbl") (lib "sxml/ssax/xlink-parser.rkt") (lib "sxml/ssax/util.rkt") (lib "sxml/scribblings/sxml-rep.scrbl") (lib "sxml/xpath-context_xlink.rkt") (lib "sxml/lazy-xpath.rkt") (lib "sxml/ssax/SSAX-code.rkt") (lib "sxml/ssax/myenv.rkt") (lib "sxml/ssax/multi-parser.rkt") (lib "sxml/ssax/access-remote.rkt") (lib "sxml/scribblings/extract-provides.rkt") (lib "sxml/ddo-axes.rkt") (lib "sxml/scribblings/extracted-sperber.scrbl") (lib "sxml/ssax/sxpathlib.rkt") (lib "sxml/scribblings/sax-parsing.scrbl") (lib "sxml/sxpath.rkt") (lib "sxml/ssax/SXML-tree-trans.rkt") (lib "sxml/txpath.rkt") (lib "sxml/ssax/input-parse.rkt") (lib "sxml/lazy-ssax.rkt") (lib "sxml/ssax/errors-and-warnings.rkt") (lib "sxml/scribblings/util.rkt") (lib "sxml/scribblings/sxml.scrbl") (lib "sxml/ssax/id.rkt") (lib "sxml/xpath-ast.rkt") (lib "sxml/tests/vSXML-to-HTML.rkt") (lib "sxml/scribblings/all-exported.scrbl"))) (name . "sxml") (nix-sha256 . "1xr3a1p72mbx1v8z5nb3k5adf4h7xhhzajydwavk6dbvrfv302br") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@brinckerhoff.org . #t) (ring:1 . #t) (sxml . #t) (web . #t) (xml . #t))) (source . "github://github.com/jbclements/sxml/master") (tags . ("sxml" "web" "xml")) (versions . #hash((default . #hasheq((checksum . "d400916e3c1506b12b5edf4bba2e5249503de296") (source . "github://github.com/jbclements/sxml/master") (source_url . "http://github.com/jbclements/sxml/tree/master"))))))) ("namespaced-transformer-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "namespaced-transformer" "doc/namespaced-transformer@namespaced-transformer-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/namespaced-transformer-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/namespaced-transformer-doc.txt"))) (checksum . "4cdc1bdae09a07b78f23665267f2c7df4be5a7f6") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "namespaced-transformer-lib" "racket-doc" "scribble-lib")) (description . "") (implies . ()) (last-checked . 1522414438) (last-edit . 1473370424) (last-updated . 1502816193) (modules . ((lib "scribblings/namespaced-transformer.scrbl"))) (name . "namespaced-transformer-doc") (nix-sha256 . "0lfcxyb76iadqh7vhxqzg5fdgd3pyx6nsjqdibgam10dlppck45y") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/namespaced-transformer?path=namespaced-transformer-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4cdc1bdae09a07b78f23665267f2c7df4be5a7f6") (source . "git://github.com/lexi-lambda/namespaced-transformer?path=namespaced-transformer-doc") (source_url . "http://github.com/lexi-lambda/namespaced-transformer/tree/master?path=namespaced-transformer-doc"))))))) ("pict" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (checksum . "d5eb9846050b0a83a10ab5a4f229ad34aa14792b") (dependencies . ("pict-lib" "pict-doc")) (description . "mflatt@racket-lang.org robby@racket-lang.org") (modules . ()) (name . "pict") (source . "https://download.racket-lang.org/releases/6.12/pkgs/pict.zip") (tags . ()))) ("aoc-racket" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "aoc-racket" "doc/aoc-racket@aoc-racket/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/aoc-racket.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/aoc-racket.txt"))) (checksum . "0470b75be47f38711e1722b6467269a05cf3f0b1") (checksum-error . #f) (conflicts . ()) (dependencies . ("graph" "base" "scribble-lib" ("sugar" #:version "0.3") "rackunit-lib" "math-lib" "beautiful-racket-lib" "rackunit-lib" "racket-doc" "scribble-doc" "rackunit-doc" "at-exp-lib" "math-doc")) (description . "Solutions & explanations — in Racket, of course — for the Advent of Code puzzles") (implies . ()) (last-checked . 1522417871) (last-edit . 1451613352) (last-updated . 1514735980) (modules . ((lib "aoc-racket/day23.rkt") (lib "aoc-racket/2016/day08/input.rkt") (lib "aoc-racket/2017/d20/main.rkt") (lib "aoc-racket/2017/d03/star2.rkt") (lib "aoc-racket/2016/day06/input.rkt") (lib "aoc-racket/2017/d04/star1.rkt") (lib "aoc-racket/2017/d21/test1.rkt") (lib "aoc-racket/2016/day07/input.rkt") (lib "aoc-racket/2016/day17/input.rkt") (lib "aoc-racket/2017/d01/test2.rkt") (lib "aoc-racket/2017/d20/star2.rkt") (lib "aoc-racket/2017/d24/main.rkt") (lib "aoc-racket/day01.rkt") (lib "aoc-racket/2017/helper.rkt") (lib "aoc-racket/2017/d13/star1.rkt") (lib "aoc-racket/2016/day25/lang.rkt") (lib "aoc-racket/2016/day14/input.rkt") (lib "aoc-racket/2017/d09/star2.rkt") (lib "aoc-racket/2017/d03/main.rkt") (lib "aoc-racket/2017/d07/star2.rkt") (lib "aoc-racket/2016/day08/test.rkt") (lib "aoc-racket/2016/day23/lang.rkt") (lib "aoc-racket/2017/d14/main.rkt") (lib "aoc-racket/2016/day03/lang.rkt") (lib "aoc-racket/2016/day22/lang.rkt") (lib "aoc-racket/2017/d21/main.rkt") (lib "aoc-racket/2016/day15/test.rkt") (lib "aoc-racket/2017/d06/test2.rkt") (lib "aoc-racket/2016/day22/test.rkt") (lib "aoc-racket/2016/day01/lang.rkt") (lib "aoc-racket/2017/d05/test2.rkt") (lib "aoc-racket/2017/d16/test2.rkt") (lib "aoc-racket/2017/d22/test1.rkt") (lib "aoc-racket/2016/day04/test.rkt") (lib "aoc-racket/2016/day03/lang-b.rkt") (lib "aoc-racket/2016/day05/lang.rkt") (lib "aoc-racket/2017/d08/star1.rkt") (lib "aoc-racket/2017/d01/main.rkt") (lib "aoc-racket/2017/d19/star2.rkt") (lib "aoc-racket/2016/day07/test.rkt") (lib "aoc-racket/2017/d09/test2.rkt") (lib "aoc-racket/day03.rkt") (lib "aoc-racket/2017/d21/star1.rkt") (lib "aoc-racket/2016/day02/test.rkt") (lib "aoc-racket/2016/day06/test.rkt") (lib "aoc-racket/day25.rkt") (lib "aoc-racket/day04.rkt") (lib "aoc-racket/day19.rkt") (lib "aoc-racket/2017/d11/star1.rkt") (lib "aoc-racket/2016/day14/lang.rkt") (lib "aoc-racket/2016/day02/test-b.rkt") (lib "aoc-racket/2017/d23/star2.rkt") (lib "aoc-racket/main.rkt") (lib "aoc-racket/2017/d05/star1.rkt") (lib "aoc-racket/2017/d25/main.rkt") (lib "aoc-racket/2017/d15/star1.rkt") (lib "aoc-racket/2017/d12/test1.rkt") (lib "aoc-racket/day09.rkt") (lib "aoc-racket/day07.rkt") (lib "aoc-racket/2016/day16/lang.rkt") (lib "aoc-racket/2016/day09/test.rkt") (lib "aoc-racket/2016/day18/test.rkt") (lib "aoc-racket/2017/d08/test2.rkt") (lib "aoc-racket/2016/day19/lang.rkt") (lib "aoc-racket/2016/day12/test.rkt") (lib "aoc-racket/2017/d15/test2.rkt") (lib "aoc-racket/2016/day24/lang.rkt") (lib "aoc-racket/2016/day21/input.rkt") (lib "aoc-racket/2017/d11/main.rkt") (lib "aoc-racket/2017/d04/main.rkt") (lib "aoc-racket/2017/d08/main.rkt") (lib "aoc-racket/2017/d17/test1.rkt") (lib "aoc-racket/2016/day17/test.rkt") (lib "aoc-racket/2016/day05/input.rkt") (lib "aoc-racket/2017/d16/main.rkt") (lib "aoc-racket/2017/d25/star1.rkt") (lib "aoc-racket/2017/d18/star2.rkt") (lib "aoc-racket/2017/d13/star2.rkt") (lib "aoc-racket/2016/day16/test-b.rkt") (lib "aoc-racket/2017/d16/star1.rkt") (lib "aoc-racket/2016/day07/lang.rkt") (lib "aoc-racket/2017/d07/main.rkt") (lib "aoc-racket/2016/day22/input.rkt") (lib "aoc-racket/day11.rkt") (lib "aoc-racket/2017/d18/test1.rkt") (lib "aoc-racket/2016/day20/test.rkt") (lib "aoc-racket/2016/day12/lang.rkt") (lib "aoc-racket/2017/d23/star1.rkt") (lib "aoc-racket/2017/d22/test2.rkt") (lib "aoc-racket/2016/day15/lang.rkt") (lib "aoc-racket/2017/d07/star1.rkt") (lib "aoc-racket/2017/d14/star2.rkt") (lib "aoc-racket/2017/d08/test1.rkt") (lib "aoc-racket/2017/d24/star2.rkt") (lib "aoc-racket/2017/d16/star2.rkt") (lib "aoc-racket/2017/d25/test1.rkt") (lib "aoc-racket/2017/d24/star1.rkt") (lib "aoc-racket/2017/d18/test2.rkt") (lib "aoc-racket/2016/day16/input.rkt") (lib "aoc-racket/2016/day16/input-b.rkt") (lib "aoc-racket/2016/day16/test.rkt") (lib "aoc-racket/2016/day17/lang.rkt") (lib "aoc-racket/2017/d02/main.rkt") (lib "aoc-racket/2017/d12/star2.rkt") (lib "aoc-racket/2017/d09/test1.rkt") (lib "aoc-racket/2016/day20/input.rkt") (lib "aoc-racket/2017/d14/star1.rkt") (lib "aoc-racket/2017/d02/test1.rkt") (lib "aoc-racket/2016/day03/test-b.rkt") (lib "aoc-racket/2017/d03/star1.rkt") (lib "aoc-racket/2016/day21/lang.rkt") (lib "aoc-racket/2017/d02/test2.rkt") (lib "aoc-racket/day12.rkt") (lib "aoc-racket/2017/d03/test1.rkt") (lib "aoc-racket/2017/d11/star2.rkt") (lib "aoc-racket/2017/d15/main.rkt") (lib "aoc-racket/2017/d19/main.rkt") (lib "aoc-racket/day05.rkt") (lib "aoc-racket/2016/day02/lang-b.rkt") (lib "aoc-racket/day16.rkt") (lib "aoc-racket/2017/d05/star2.rkt") (lib "aoc-racket/2017/d10/test1.rkt") (lib "aoc-racket/2017/d20/star1.rkt") (lib "aoc-racket/day18.rkt") (lib "aoc-racket/2016/day20/lang.rkt") (lib "aoc-racket/2017/d04/test2.rkt") (lib "aoc-racket/2017/d18/main2.rkt") (lib "aoc-racket/2016/day24/test.rkt") (lib "aoc-racket/2016/day09/input.rkt") (lib "aoc-racket/2016/day12/input.rkt") (lib "aoc-racket/2017/d06/star1.rkt") (lib "aoc-racket/2017/d06/main.rkt") (lib "aoc-racket/day17.rkt") (lib "aoc-racket/day08.rkt") (lib "aoc-racket/2017/d01/star1.rkt") (lib "aoc-racket/2017/d04/test1.rkt") (lib "aoc-racket/2017/d05/main.rkt") (lib "aoc-racket/2017/d11/test2.rkt") (lib "aoc-racket/aoc-racket.scrbl") (lib "aoc-racket/2016/day14/test.rkt") (lib "aoc-racket/2016/day18/lang.rkt") (lib "aoc-racket/2017/d20/test1.rkt") (lib "aoc-racket/2016/day04/lang.rkt") (lib "aoc-racket/2016/day25/input.rkt") (lib "aoc-racket/2016/day04/input.rkt") (lib "aoc-racket/2017/d23/main.rkt") (lib "aoc-racket/day10.rkt") (lib "aoc-racket/2016/day24/input.rkt") (lib "aoc-racket/day21.rkt") (lib "aoc-racket/2016/day03/test.rkt") (lib "aoc-racket/2017/d12/test2.rkt") (lib "aoc-racket/2017/d19/star1.rkt") (lib "aoc-racket/2017/d17/main.rkt") (lib "aoc-racket/2017/d04/star2.rkt") (lib "aoc-racket/2017/d24/test1.rkt") (lib "aoc-racket/2017/d10/main.rkt") (lib "aoc-racket/2016/day19/input.rkt") (lib "aoc-racket/2016/day19/test.rkt") (lib "aoc-racket/2017/d01/test1.rkt") (lib "aoc-racket/2017/d14/test2.rkt") (lib "aoc-racket/2017/d15/star2.rkt") (lib "aoc-racket/day13.rkt") (lib "aoc-racket/2017/d19/test1.rkt") (lib "aoc-racket/2017/d09/star1.rkt") (lib "aoc-racket/2017/d03/test2.rkt") (lib "aoc-racket/2016/day10/test.rkt") (lib "aoc-racket/2017/d13/test1.rkt") (lib "aoc-racket/helper.rkt") (lib "aoc-racket/2017/d07/test1.rkt") (lib "aoc-racket/2016/day13/lang.rkt") (lib "aoc-racket/2016/day18/input.rkt") (lib "aoc-racket/day02.rkt") (lib "aoc-racket/2016/day02/lang.rkt") (lib "aoc-racket/2017/d07/test2.rkt") (lib "aoc-racket/2016/day15/input-b.rkt") (lib "aoc-racket/2017/d10/star1.rkt") (lib "aoc-racket/2017/d11/test1.rkt") (lib "aoc-racket/2016/day06/lang.rkt") (lib "aoc-racket/2017/d22/star1.rkt") (lib "aoc-racket/2016/day15/input.rkt") (lib "aoc-racket/2017/d01/star2.rkt") (lib "aoc-racket/2017/d10/star2.rkt") (lib "aoc-racket/2016/day10/lang.rkt") (lib "aoc-racket/2017/d15/test1.rkt") (lib "aoc-racket/day06.rkt") (lib "aoc-racket/2017/d17/star2.rkt") (lib "aoc-racket/day15.rkt") (lib "aoc-racket/2017/d18/star1.rkt") (lib "aoc-racket/2017/d12/star1.rkt") (lib "aoc-racket/day24.rkt") (lib "aoc-racket/2016/day21/test.rkt") (lib "aoc-racket/2016/day13/test.rkt") (lib "aoc-racket/day22.rkt") (lib "aoc-racket/2017/d12/main.rkt") (lib "aoc-racket/2017/d10/test2.rkt") (lib "aoc-racket/2016/day10/input.rkt") (lib "aoc-racket/2017/d16/test1.rkt") (lib "aoc-racket/2016/day13/input.rkt") (lib "aoc-racket/2017/d05/test1.rkt") (lib "aoc-racket/2017/d20/test2.rkt") (lib "aoc-racket/2017/d06/star2.rkt") (lib "aoc-racket/2017/d13/test2.rkt") (lib "aoc-racket/2017/d18/main.rkt") (lib "aoc-racket/2016/day09/lang.rkt") (lib "aoc-racket/day20.rkt") (lib "aoc-racket/2017/d21/star2.rkt") (lib "aoc-racket/2017/d02/star1.rkt") (lib "aoc-racket/2017/d22/star2.rkt") (lib "aoc-racket/2017/d06/test1.rkt") (lib "aoc-racket/2016/day23/input.rkt") (lib "aoc-racket/2017/d02/star2.rkt") (lib "aoc-racket/2017/d13/main.rkt") (lib "aoc-racket/2017/d09/main.rkt") (lib "aoc-racket/2016/day01/test.rkt") (lib "aoc-racket/2017/d08/star2.rkt") (lib "aoc-racket/2016/day08/lang.rkt") (lib "aoc-racket/2017/d17/star1.rkt") (lib "aoc-racket/day14.rkt") (lib "aoc-racket/2016/day23/test.rkt") (lib "aoc-racket/2017/d24/test2.rkt") (lib "aoc-racket/2017/d19/test2.rkt") (lib "aoc-racket/2017/d22/main.rkt") (lib "aoc-racket/2017/d14/test1.rkt") (lib "aoc-racket/2017/aoc-lang.rkt"))) (name . "aoc-racket") (nix-sha256 . "0cl5zrp6a0k3p8n089ksjwlxav5xfpypa3ffmbpli58id459gbd3") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mb@mbtype.com . #t) (ring:1 . #t))) (source . "git://github.com/mbutterick/aoc-racket") (tags . ()) (versions . #hash((default . #hasheq((checksum . "0470b75be47f38711e1722b6467269a05cf3f0b1") (source . "git://github.com/mbutterick/aoc-racket") (source_url . "http://github.com/mbutterick/aoc-racket/tree/master"))))))) ("libgit2" . #hasheq((author . "bradley.busching@gmail.com") (authors . ("bradley.busching@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "libgit2" "doc/libgit2@libgit2/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libgit2.txt") (test-failure-log . "server/built/test-fail/libgit2.txt") (test-success-log . #f))) (checksum . "7b70fdd9970245505229ef2127586350aaa8ad38") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" ("libgit2-x86_64-linux-natipkg" #:platform "x86_64-linux-natipkg") "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Racket bindings for the Libgit2 library.") (implies . ()) (last-checked . 1522414424) (last-edit . 1497401430) (last-updated . 1521940636) (modules . ((lib "libgit2/scribblings/message.scrbl") (lib "libgit2/include/oidarray.rkt") (lib "libgit2/include/filter.rkt") (lib "libgit2/scribblings/signature.scrbl") (lib "libgit2/include/buffer.rkt") (lib "libgit2/include/trace.rkt") (lib "libgit2/include/blame.rkt") (lib "libgit2/scribblings/treebuilder.scrbl") (lib "libgit2/scribblings/stash.scrbl") (lib "libgit2/include/errors.rkt") (lib "libgit2/scribblings/fetch.scrbl") (lib "libgit2/include/checkout.rkt") (lib "libgit2/include/transaction.rkt") (lib "libgit2/scribblings/revert.scrbl") (lib "libgit2/include/branch.rkt") (lib "libgit2/scribblings/errors.scrbl") (lib "libgit2/scribblings/merge.scrbl") (lib "libgit2/scribblings/libgit2.scrbl") (lib "libgit2/scribblings/filter.scrbl") (lib "libgit2/include/net.rkt") (lib "libgit2/test/test-libgit2.rkt") (lib "libgit2/include/pack.rkt") (lib "libgit2/include/indexer.rkt") (lib "libgit2/scribblings/odb.scrbl") (lib "libgit2/include/revert.rkt") (lib "libgit2/scribblings/describe.scrbl") (lib "libgit2/include/describe.rkt") (lib "libgit2/include/strarray.rkt") (lib "libgit2/scribblings/note.scrbl") (lib "libgit2/include/refspec.rkt") (lib "libgit2/scribblings/ignore.scrbl") (lib "libgit2/scribblings/oid_array.scrbl") (lib "libgit2/include/cred_helpers.rkt") (lib "libgit2/scribblings/reset.scrbl") (lib "libgit2/include/revwalk.rkt") (lib "libgit2/scribblings/clone.scrbl") (lib "libgit2/include/odb_backend.rkt") (lib "libgit2/scribblings/patch.scrbl") (lib "libgit2/include/cherrypick.rkt") (lib "libgit2/scribblings/proxy.scrbl") (lib "libgit2/scribblings/commit.scrbl") (lib "libgit2/include/status.rkt") (lib "libgit2/scribblings/tree.scrbl") (lib "libgit2/scribblings/repository.scrbl") (lib "libgit2/include/submodule.rkt") (lib "libgit2/scribblings/tag.scrbl") (lib "libgit2/scribblings/remote.scrbl") (lib "libgit2/scribblings/object.scrbl") (lib "libgit2/scribblings/revparse.scrbl") (lib "libgit2/scribblings/cherrypick.scrbl") (lib "libgit2/scribblings/oid.scrbl") (lib "libgit2/include/reflog.rkt") (lib "libgit2/include/reset.rkt") (lib "libgit2/scribblings/refdb.scrbl") (lib "libgit2/scribblings/global.scrbl") (lib "libgit2/include/index.rkt") (lib "libgit2/scribblings/config.scrbl") (lib "libgit2/scribblings/diff.scrbl") (lib "libgit2/include/define.rkt") (lib "libgit2/include/ignore.rkt") (lib "libgit2/include/types.rkt") (lib "libgit2/include/oid.rkt") (lib "libgit2/include/clone.rkt") (lib "libgit2/scribblings/refs.scrbl") (lib "libgit2/scribblings/refspec.scrbl") (lib "libgit2/scribblings/cherrpick.scrbl") (lib "libgit2/scribblings/indexer.scrbl") (lib "libgit2/scribblings/buffer.scrbl") (lib "libgit2/include/rebase.rkt") (lib "libgit2/scribblings/pathspec.scrbl") (lib "libgit2/include/pathspec.rkt") (lib "libgit2/include/graph.rkt") (lib "libgit2/scribblings/cred.scrbl") (lib "libgit2/include/remote.rkt") (lib "libgit2/include/stash.rkt") (lib "libgit2/scribblings/blob.scrbl") (lib "libgit2/include/merge.rkt") (lib "libgit2/scribblings/push.scrbl") (lib "libgit2/include/signature.rkt") (lib "libgit2/scribblings/branch.scrbl") (lib "libgit2/scribblings/index.scrbl") (lib "libgit2/scribblings/packbuilder.scrbl") (lib "libgit2/scribblings/revwalk.scrbl") (lib "libgit2/include/config.rkt") (lib "libgit2/include/blob.rkt") (lib "libgit2/main.rkt") (lib "libgit2/include/patch.rkt") (lib "libgit2/scribblings/status.scrbl") (lib "libgit2/include/diff.rkt") (lib "libgit2/include/odb.rkt") (lib "libgit2/include/refs.rkt") (lib "libgit2/scribblings/trace.scrbl") (lib "libgit2/include/proxy.rkt") (lib "libgit2/scribblings/rebase.scrbl") (lib "libgit2/include/notes.rkt") (lib "libgit2/include/tag.rkt") (lib "libgit2/include/transport.rkt") (lib "libgit2/include/refdb.rkt") (lib "libgit2/include/utils.rkt") (lib "libgit2/scribblings/submodule.scrbl") (lib "libgit2/scribblings/annotated_commit.scrbl") (lib "libgit2/include/tree.rkt") (lib "libgit2/scribblings/checkout.scrbl") (lib "libgit2/scribblings/strarray.scrbl") (lib "libgit2/scribblings/functions.scrbl") (lib "libgit2/include/repository.rkt") (lib "libgit2/include/revparse.rkt") (lib "libgit2/scribblings/graph.scrbl") (lib "libgit2/include/message.rkt") (lib "libgit2/scribblings/blame.scrbl") (lib "libgit2/scribblings/reflog.scrbl") (lib "libgit2/include/commit.rkt") (lib "libgit2/include/global.rkt") (lib "libgit2/include/object.rkt") (lib "libgit2/include/annotated_commit.rkt"))) (name . "libgit2") (nix-sha256 . "18149z1c65k4mzx8aswfr96s44lk4m745v1zw2xypa6ry9qjxckr") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bradley.busching@gmail.com . #t) (ffi . #t) (git . #t) (ring:1 . #t))) (source . "git://github.com/bbusching/libgit2") (tags . ("ffi" "git")) (versions . #hash((default . #hasheq((checksum . "7b70fdd9970245505229ef2127586350aaa8ad38") (source . "git://github.com/bbusching/libgit2") (source_url . "http://github.com/bbusching/libgit2/tree/master"))))))) ("benchmark-ips" . #hasheq((author . "zenspider@gmail.com") (authors . ("zenspider@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/benchmark-ips.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/benchmark-ips.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/benchmark-ips.txt"))) (checksum . "54b5560c4ca0f0100fe60fb965c23254e3e47e9c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib" "racket-doc")) (description . "This is my port of @evanphx's benchmark-ips for ruby to racket. Provides a very simple and clean way to do performance comparisons.") (implies . ()) (last-checked . 1522414305) (last-edit . 1502757581) (last-updated . 1502757581) (modules . ((lib "benchmark-ips/main.rkt") (lib "benchmark-ips/benchmark-ips.rkt"))) (name . "benchmark-ips") (nix-sha256 . "0n4ql43gpwkh5bh9cisqrjrv3ryaynwibly2bw9sl3jvxrbpj5b8") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:zenspider@gmail.com . #t) (benchmarking . #t) (performance . #t) (ring:1 . #t))) (source . "git://github.com/zenspider/benchmark-ips-racket") (tags . ("benchmarking" "performance")) (versions . #hash((default . #hasheq((checksum . "54b5560c4ca0f0100fe60fb965c23254e3e47e9c") (source . "git://github.com/zenspider/benchmark-ips-racket") (source_url . "http://github.com/zenspider/benchmark-ips-racket/tree/master"))))))) ("rackunit" . #hash((author . "ryanc@racket-lang.org noel@racket-lang.org") (checksum . "feea8898ebaa461c55e9cdb4c5ab4f90e8f21e2d") (dependencies . ("rackunit-lib" "rackunit-doc" "rackunit-gui" "rackunit-plugin-lib")) (description . "ryanc@racket-lang.org noel@racket-lang.org") (modules . ()) (name . "rackunit") (source . "https://download.racket-lang.org/releases/6.12/pkgs/rackunit.zip") (tags . ()))) ("lens-data" . #hasheq((author . "jackhfirth@gmail.com alexander@knauth.org") (authors . ("jackhfirth@gmail.com" "alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lens-data.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lens-data.txt"))) (checksum . "376c286a68ed34ee723cf5c5a76dcba9828db0c1") (checksum-error . #f) (conflicts . ()) (dependencies . (("racket" #:version "6.3") "base" "lens-common" "rackunit-lib" "fancy-app" "syntax-classes-lib" "struct-update-lib" "kw-make-struct" "reprovide-lang" "sweet-exp-lib")) (description . "Lens constructors for various Racket data structures") (implies . ()) (last-checked . 1522414423) (last-edit . 1500075017) (last-updated . 1514736112) (modules . ((lib "lens/private/struct/struct-list.rkt") (lib "lens/private/hash/join-hash.rkt") (lib "lens/private/vector/ref.rkt") (lib "lens/private/set/set-filterer.rkt") (lib "lens/private/struct/main.rkt") (lib "lens/private/list/main.rkt") (lib "lens/private/struct/struct-nested.rkt") (lib "lens/private/syntax/syntax.rkt") (lib "lens/private/struct/struct.rkt") (lib "lens/private/string/main.rkt") (lib "lens/private/hash/pick.rkt") (lib "lens/private/util/functional-dict.rkt") (lib "lens/private/vector/nested.rkt") (lib "lens/private/vector/pick.rkt") (lib "lens/private/string/substring.rkt") (lib "lens/private/struct/field.rkt") (lib "lens/private/dict/dict.rkt") (lib "lens/private/syntax/stx.rkt") (lib "lens/private/stream/stream.rkt") (lib "lens/private/dict/dict-nested.rkt") (lib "lens/private/list/map.rkt") (lib "lens/private/syntax/main.rkt") (lib "lens/data/dict.rkt") (lib "lens/private/list/sublist.rkt") (lib "lens/private/hash/hash-filterer.rkt") (lib "lens/private/list/append.rkt") (lib "lens/private/tests/gen-lens-fallback-loop.rkt") (lib "lens/data/string.rkt") (lib "lens/data.rkt") (lib "lens/private/list/cadr-etc.rkt") (lib "lens/private/string/join-string.rkt") (lib "lens/private/hash/main.rkt") (lib "lens/private/util/immutable.rkt") (lib "lens/private/syntax/syntax-keyword.rkt") (lib "lens/private/list/join-list.rkt") (lib "lens/private/string/string.rkt") (lib "lens/private/list/multi.rkt") (lib "lens/data/hash.rkt") (lib "lens/private/list/list-ref-take-drop.rkt") (lib "lens/private/match.rkt") (lib "lens/private/list/join-assoc.rkt") (lib "lens/data/stream.rkt") (lib "lens/private/hash/nested.rkt") (lib "lens/private/util/functional-set.rkt") (lib "lens/private/list/assoc.rkt") (lib "lens/private/list/reverse.rkt") (lib "lens/private/hash/ref.rkt") (lib "lens/private/util/improper-list-length.rkt") (lib "lens/private/util/alternating-list.rkt") (lib "lens/private/string/string-split.rkt") (lib "lens/data/vector.rkt") (lib "lens/private/vector/main.rkt") (lib "lens/private/struct/struct-join.rkt") (lib "lens/data/list.rkt") (lib "lens/private/view-set/set-all.rkt") (lib "lens/private/vector/join-vector.rkt") (lib "lens/private/isomorphism/data.rkt") (lib "lens/data/struct.rkt") (lib "lens/private/set/set-member.rkt") (lib "lens/private/list/flatten.rkt") (lib "lens/private/list/car-cdr.rkt") (lib "lens/private/isomorphism/main.rkt") (lib "lens/private/syntax/srcloc.rkt"))) (name . "lens-data") (nix-sha256 . "0x4v6pd5l15wqppxmd2k8jg6g151rbvv7qmyyzr4vsl399mlyljz") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (author:jackhfirth@gmail.com . #t) (data . #t) (functional . #t) (lens . #t) (ring:1 . #t))) (source . "git://github.com/jackfirth/lens?path=lens-data") (tags . ("data" "functional" "lens")) (versions . #hash((default . #hasheq((checksum . "376c286a68ed34ee723cf5c5a76dcba9828db0c1") (source . "git://github.com/jackfirth/lens?path=lens-data") (source_url . "http://github.com/jackfirth/lens/tree/master?path=lens-data"))))))) ("typed-struct-props" . #hasheq((author . "georges.duperon@gmail.com") (authors . ("georges.duperon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "typed-struct-props" "doc/typed-struct-props@typed-struct-props/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-struct-props.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-struct-props.txt"))) (checksum . "8df5a5ce1ac2f2107896c5fbf91e8fbb18d92795") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "type-expander" "scribble-lib" "racket-doc" "typed-racket-doc")) (description . "Some struct type properties in Typed/Racket, in a more type-safe way.\r\n\r\nThe API should hopefully stay backward-compatible when Typed/Racket officially supports (or rejects) structure type properties.") (implies . ()) (last-checked . 1522414696) (last-edit . 1473027055) (last-updated . 1517062739) (modules . ((lib "typed-struct-props/test/test-after.rkt") (lib "typed-struct-props/scribblings/typed-struct-props.scrbl") (lib "typed-struct-props/test/test-none.rkt") (lib "typed-struct-props/test/test-write+equal+hash-poly.rkt") (lib "typed-struct-props/test/test-write.rkt") (lib "typed-struct-props/test/test-parent.rkt") (lib "typed-struct-props/test/test-child.rkt") (lib "typed-struct-props/test/test-write+equal+hash.rkt") (lib "typed-struct-props/test/test-equal+hash.rkt") (lib "typed-struct-props/test/test-equal+hash-poly.rkt") (lib "typed-struct-props/test/test-none-poly.rkt") (lib "typed-struct-props/test/test-write-poly.rkt") (lib "typed-struct-props/main.rkt") (lib "typed-struct-props/test/test-poly.rkt"))) (name . "typed-struct-props") (nix-sha256 . "06ym7q3garvyyzjx5i3pw7hiy9675x66qq6slmq7y70n7yvhccnm") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:georges.duperon@gmail.com . #t) (ring:1 . #t) (structs . #t) (typed-racket . #t))) (source . "https://github.com/jsmaniac/typed-struct-props.git") (tags . ("structs" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "8df5a5ce1ac2f2107896c5fbf91e8fbb18d92795") (source . "https://github.com/jsmaniac/typed-struct-props.git") (source_url . "https://github.com/jsmaniac/typed-struct-props.git"))))))) ("cover" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cover" "doc/cover@cover/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cover.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cover.txt"))) (checksum . "e2072a4f18253798bad33a83397285d433572ff0") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.5.0.4") ("errortrace-lib" #:version "1.1") "rackunit-lib" "syntax-color-lib" "compiler-lib" "custom-load" "data-lib" "racket-doc" "scribble-lib" "typed-racket-doc" "htdp-lib" "net-doc" "scribble-doc" "at-exp-lib" "scheme-lib" "typed-racket-lib" "macro-debugger")) (description . "A code coverage tool") (implies . ()) (last-checked . 1522414367) (last-edit . 1485992906) (last-updated . 1503531493) (modules . ((lib "cover/tests/syntax.rkt") (lib "cover/scribblings/base.rkt") (lib "cover/main.rkt") (lib "cover/cover.rkt") (lib "cover/tests/eval.rkt") (lib "cover/scribblings/api.scrbl") (lib "cover/tests/multibyte-coverage/submod.rkt") (lib "cover/tests/bfs.rkt") (lib "cover/strace.rkt") (lib "cover/tests/at-exp/at-exp.rkt") (lib "cover/private/html/html.rkt") (lib "cover/tests/do-exit.rkt") (lib "cover/tests/use-provide.rkt") (lib "cover/tests/provide.rkt") (lib "cover/private/contracts.rkt") (lib "cover/tests/do-bfs+module.rkt") (lib "cover/tests/eval/do-eval.rkt") (lib "cover/tests/error.rkt") (lib "cover/raco.rkt") (lib "cover/tests/lazy-require.rkt") (lib "cover/tests/multiple-modules.rkt") (lib "cover/private/raw.rkt") (lib "cover/scribblings/cover.scrbl") (lib "cover/tests/multibyte-coverage/arrow.rkt") (lib "cover/tests/do-multiple-modules.rkt") (lib "cover/tests/module.rkt") (lib "cover/tests/dont-run.rkt") (lib "cover/tests/bfs+module.rkt") (lib "cover/tests/simple-multi/2.rkt") (lib "cover/tests/arg.rkt") (lib "cover/tests/error-file.rkt") (lib "cover/tests/test-cross-phase-persist.rkt") (lib "cover/tests/prog.rkt") (lib "cover/tests/main.rkt") (lib "cover/tests/do-arg.rkt") (lib "cover/tests/eval/eval-call.rkt") (lib "cover/tests/submods/prog.rkt") (lib "cover/tests/basic/no-expressions.rkt") (lib "cover/tests/do-eval.rkt") (lib "cover/tests/new-logger.rkt") (lib "cover/tests/simple-multi/1.rkt") (lib "cover/tests/do-syntax.rkt") (lib "cover/tests/reader.rkt") (lib "cover/tests/nested.rkt") (lib "cover/scribblings/basics.scrbl") (lib "cover/tests/basic/prog.rkt") (lib "cover/tests/eval/eval.rkt") (lib "cover/tests/bfs+define-syntax.rkt") (lib "cover/private/format-utils.rkt") (lib "cover/tests/basic/raise.rkt") (lib "cover/tests/bfs+module-nolex.rkt") (lib "cover/tests/basic/not-run.rkt") (lib "cover/tests/syntax/syntax.rkt") (lib "cover/scribblings/plugins.scrbl") (lib "cover/tests/cross-phase-persist.rkt") (lib "cover/tests/do-reader.rkt") (lib "cover/tests/exit.rkt") (lib "cover/format.rkt") (lib "cover/private/file-utils.rkt") (lib "cover/tests/do-dont-run.rkt") (lib "cover/private/shared.rkt") (lib "cover/tests/provide-define-syntax/prog.rkt"))) (name . "cover") (nix-sha256 . "01zcczhnql5qx4kl3g9jyziq4kcms4a9q0q71ran7jf59m66b828") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:spencer@florence.io . #t) (ring:1 . #t) (testing . #t) (tools . #t))) (source . "git://github.com/florence/cover#release") (tags . ("testing" "tools")) (versions . #hash(("6.1.1" . #hasheq((checksum . "578f4ebd0dee8b62e2e9325fbd7632c4b73499fe") (source . "git://github.com/florence/cover#v3.0.3") (source_url . "http://github.com/florence/cover/tree/master#v3.0.3"))) ("6.3" . #hasheq((checksum . "578f4ebd0dee8b62e2e9325fbd7632c4b73499fe") (source . "git://github.com/florence/cover#v3.0.3") (source_url . "http://github.com/florence/cover/tree/master#v3.0.3"))) ("6.2.1" . #hasheq((checksum . "578f4ebd0dee8b62e2e9325fbd7632c4b73499fe") (source . "git://github.com/florence/cover#v3.0.3") (source_url . "http://github.com/florence/cover/tree/master#v3.0.3"))) (default . #hasheq((checksum . "e2072a4f18253798bad33a83397285d433572ff0") (source . "git://github.com/florence/cover#release") (source_url . "http://github.com/florence/cover/tree/master#release"))) ("6.4" . #hasheq((checksum . "578f4ebd0dee8b62e2e9325fbd7632c4b73499fe") (source . "git://github.com/florence/cover#v3.0.3") (source_url . "http://github.com/florence/cover/tree/master#v3.0.3"))) ("6.5" . #hasheq((checksum . "578f4ebd0dee8b62e2e9325fbd7632c4b73499fe") (source . "git://github.com/florence/cover#v3.0.3") (source_url . "http://github.com/florence/cover/tree/master#v3.0.3"))) ("6.6" . #hasheq((checksum . "694844a7009ff04523e136bf5c0c4ba487767552") (source . "git://github.com/florence/cover#v3.1.2") (source_url . "http://github.com/florence/cover/tree/master#v3.1.2"))) ("6.2" . #hasheq((checksum . "578f4ebd0dee8b62e2e9325fbd7632c4b73499fe") (source . "git://github.com/florence/cover#v3.0.3") (source_url . "http://github.com/florence/cover/tree/master#v3.0.3"))) ("6.1" . #hasheq((checksum . "578f4ebd0dee8b62e2e9325fbd7632c4b73499fe") (source . "git://github.com/florence/cover#v3.0.3") (source_url . "http://github.com/florence/cover/tree/master#v3.0.3"))))))) ("sparse" . #hasheq((author . "esco.ricky@gmail.com") (authors . ("esco.ricky@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/sparse.txt") (docs . (("main" "sparse" "doc/sparse@sparse/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sparse.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sparse.txt"))) (checksum . "c8ac77ade5aeb030b7cce678e27f82f781c6cdac") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "A tool for generating test cases for parsers for simple S-expression languages. It is intended primarily for use by instructors of Programming Languages classes in which students implement a simple S-expression-based programming language. It takes as input a description of the grammar of the language to be implemented and produces test cases for the students' parsers.") (implies . ()) (last-checked . 1522414681) (last-edit . 1496892090) (last-updated . 1510340602) (modules . ((lib "sparse/minimization.rkt") (lib "sparse/sparse.scrbl") (lib "sparse/main.rkt") (lib "sparse/generator.rkt") (lib "sparse/parse-grammar-spec.rkt") (lib "sparse/example-grammars.rkt"))) (name . "sparse") (nix-sha256 . "0fmp74cq5x8wzmha15bnzp9y648krp9cj9cmwjjhpi5fshz2djm6") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:esco.ricky@gmail.com . #t) (grammar . #t) (instructors . #t) (parser . #t) (programming-languages . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/ricky-escobar/sparse") (tags . ("grammar" "instructors" "parser" "programming-languages" "testing")) (versions . #hash((default . #hasheq((checksum . "c8ac77ade5aeb030b7cce678e27f82f781c6cdac") (source . "git://github.com/ricky-escobar/sparse") (source_url . "http://github.com/ricky-escobar/sparse/tree/master"))))))) ("ss-rpc-server" . #hasheq((author . "sekk1e@yandex.ru") (authors . ("sekk1e@yandex.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ss-rpc-server" "doc/ss-rpc-server@ss-rpc-server/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ss-rpc-server.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ss-rpc-server.txt"))) (checksum . "50f281f251f06ea0b56955a275750aa170a94254") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "srfi-lite-lib" "web-server-lib" "scribble-lib" "racket-doc")) (description . "RPC for using Racket as GNU Emacs extension language") (implies . ()) (last-checked . 1522414683) (last-edit . 1473528355) (last-updated . 1502816454) (modules . ((lib "ss-rpc-server/examples/echo.rkt") (lib "ss-rpc-server/main.rkt") (lib "ss-rpc-server/ss-rpc-server.scrbl"))) (name . "ss-rpc-server") (nix-sha256 . "1xy9hrrawcrqaj1515cyq1qq5162qz75pazimdx521939chasm6l") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sekk1e@yandex.ru . #t) (emacs . #t) (ring:1 . #t) (rpc . #t))) (source . "git://github.com/sk1e/ss-rpc-server") (tags . ("emacs" "rpc")) (versions . #hash((default . #hasheq((checksum . "50f281f251f06ea0b56955a275750aa170a94254") (source . "git://github.com/sk1e/ss-rpc-server") (source_url . "http://github.com/sk1e/ss-rpc-server/tree/master"))))))) ("alexis-multicast" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "alexis-multicast" "doc/alexis-multicast@alexis-multicast/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/alexis-multicast.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/alexis-multicast.txt"))) (checksum . "0268afb688231e0d6d76ded3291538dd5d3db37c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "alexis-util" "rackunit-lib" "cover" "cover-coveralls" "racket-doc" "scribble-lib")) (description . "One-to-many buffered  asynchronous channels") (implies . ()) (last-checked . 1522417869) (last-edit . 1462746919) (last-updated . 1502812268) (modules . ((lib "alexis/scribblings/alexis-multicast.scrbl") (lib "alexis/private/test/multicast.rkt") (lib "alexis/multicast.rkt"))) (name . "alexis-multicast") (nix-sha256 . "076bpg6fxd914wjnb6dym729gcmysxxhrriy3fw6z54n55hmc3nl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-alexis.git?path=alexis-multicast") (tags . ()) (versions . #hash(("6.1.1" . #hasheq((checksum . "947a07993c7927376e858bb6e573795aa5633007") (source . "git://github.com/lexi-lambda/racket-alexis.git?path=alexis-multicast#multicast-v6.1.1") (source_url . "http://github.com/lexi-lambda/racket-alexis.git/tree/master?path=alexis-multicast#multicast-v6.1.1"))) (default . #hasheq((checksum . "0268afb688231e0d6d76ded3291538dd5d3db37c") (source . "git://github.com/lexi-lambda/racket-alexis.git?path=alexis-multicast") (source_url . "http://github.com/lexi-lambda/racket-alexis.git/tree/master?path=alexis-multicast"))) ("6.2" . #hasheq((checksum . "f5e3cbad14ba951a302bc45d1b0e1c554a13b523") (source . "git://github.com/lexi-lambda/racket-alexis.git?path=alexis-multicast#v6.2") (source_url . "http://github.com/lexi-lambda/racket-alexis.git/tree/master?path=alexis-multicast#v6.2"))))))) ("chk-lib" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/chk-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/chk-lib.txt"))) (checksum . "613dad8bf51d1b9d83bdbd99ca3fe52c18e62ff7") (checksum-error . #f) (conflicts . ()) (dependencies . ("testing-util-lib" "base")) (description . "a minimal tester") (implies . ()) (last-checked . 1522414313) (last-edit . 1505750918) (last-updated . 1505750918) (modules . ((lib "chk/main.rkt"))) (name . "chk-lib") (nix-sha256 . "0kw3xb8316ygcczjpf90p9bpdfkgaddiwk4kr6jchnhgsh1ana46") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/jeapostrophe/chk?path=chk-lib") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "613dad8bf51d1b9d83bdbd99ca3fe52c18e62ff7") (source . "git://github.com/jeapostrophe/chk?path=chk-lib") (source_url . "http://github.com/jeapostrophe/chk/tree/master?path=chk-lib"))))))) ("ocelot" . #hasheq((author . "bornholt@cs.washington.edu") (authors . ("bornholt@cs.washington.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ocelot" "doc/ocelot@ocelot/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ocelot.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ocelot.txt"))) (checksum . "58b687cdf22f6c1db4b3322fdbc5b82e9d1bce2b") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "sandbox-lib" "rosette" "scribble-lib" "racket-doc")) (description . "A solver-aided relational logic DSL") (implies . ()) (last-checked . 1522414507) (last-edit . 1491969739) (last-updated . 1505334600) (modules . ((lib "ocelot/lib/simplify.rkt") (lib "ocelot/test/util.rkt") (lib "ocelot/engine/matrix-ops.rkt") (lib "ocelot/test/symbolic/alloy/ceilingsandfloors.rkt") (lib "ocelot/lang/sketch.rkt") (lib "ocelot/lib/simplify-solve.rkt") (lib "ocelot/test/symbolic/symmetry-test.rkt") (lib "ocelot/test/symbolic/alloy/basic.rkt") (lib "ocelot/engine/tuple.rkt") (lib "ocelot/test/symbolic/symbolic-test.rkt") (lib "ocelot/lang/universe.rkt") (lib "ocelot/engine/engine.rkt") (lib "ocelot/lib/alloy.rkt") (lib "ocelot/lang/ast.rkt") (lib "ocelot/lang/bounds.rkt") (lib "ocelot/test/symbolic/simplify-solve-test.rkt") (lib "ocelot/engine/interpretation.rkt") (lib "ocelot/test/symbolic/alloy/test.rkt") (lib "ocelot/lib/print.rkt") (lib "ocelot/ocelot.rkt") (lib "ocelot/test/symbolic/simplify-test.rkt") (lib "ocelot/scribblings/ocelot.scrbl") (lib "ocelot/scribblings/log.rkt") (lib "ocelot/engine/matrix.rkt") (lib "ocelot/test/concrete/concrete-test.rkt") (lib "ocelot/engine/symmetry.rkt") (lib "ocelot/main.rkt"))) (name . "ocelot") (nix-sha256 . "115c4xppapwv7yldhacingrx2klks3vbqrjrsdyrpfqqgvr3g7pf") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (alloy . #t) (author:bornholt@cs.washington.edu . #t) (relational . #t) (ring:1 . #t) (rosette . #t))) (source . "git://github.com/jamesbornholt/ocelot") (tags . ("alloy" "relational" "rosette")) (versions . #hash((default . #hasheq((checksum . "58b687cdf22f6c1db4b3322fdbc5b82e9d1bce2b") (source . "git://github.com/jamesbornholt/ocelot") (source_url . "http://github.com/jamesbornholt/ocelot/tree/master"))))))) ("future-visualizer" . #hash((author . "jamesswaine@racket-lang.org") (checksum . "95a21d5a999ca2a8456a4bf5358baf8ebb33642a") (dependencies . ("base" "data-lib" "draw-lib" "pict-lib" "gui-lib" "scheme-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "jamesswaine@racket-lang.org") (modules . ()) (name . "future-visualizer") (source . "https://download.racket-lang.org/releases/6.12/pkgs/future-visualizer.zip") (tags . ()))) ("racketscript" . #hasheq((author . "vishesh3y@gmail.com") (authors . ("vishesh3y@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racketscript.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racketscript.txt"))) (checksum . "bf2fac484b1066475730d92479470f6a29287a0e") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racketscript-compiler" "racketscript-extras")) (description . "A lightweight Racket to JavaScript compiler with some batteries included") (implies . ("racketscript-compiler" "racketscript-extras")) (last-checked . 1522414662) (last-edit . 1481731943) (last-updated . 1507573837) (modules . ()) (name . "racketscript") (nix-sha256 . "0x0rfpzva49lrqh3ji65w0iv0qn5b443md05pwn4cx3x0vgawmhy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:vishesh3y@gmail.com . #t) (compiler . #t) (javascript . #t) (ring:1 . #t) (web . #t))) (source . "git://github.com/vishesh/racketscript?path=racketscript") (tags . ("compiler" "javascript" "web")) (versions . #hash((default . #hasheq((checksum . "bf2fac484b1066475730d92479470f6a29287a0e") (source . "git://github.com/vishesh/racketscript?path=racketscript") (source_url . "http://github.com/vishesh/racketscript/tree/master?path=racketscript"))))))) ("opencpu" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "opencpu" "doc/opencpu@opencpu/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/opencpu.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/opencpu.txt"))) (checksum . "acf0861cc77cee7b461b35f0ceb650393eef0c99") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "adjutor" "scribble-lib" "racket-doc" "net-doc")) (description . "A Racket library for calling R functions through the OpenCPU API.") (implies . ()) (last-checked . 1522414507) (last-edit . 1501019293) (last-updated . 1502816199) (modules . ((lib "opencpu/main.rkt") (lib "opencpu/scribblings/opencpu.scrbl"))) (name . "opencpu") (nix-sha256 . "1ri2dxb036jwf9p3y0rz01836gpvickrx2vq48sqxjvj1wzb1m3z") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (API . #t) (R . #t) (api . #t) (author:philip@philipmcgrath.com . #t) (net . #t) (ring:1 . #t) (web . #t))) (source . "git://github.com/LiberalArtist/opencpu") (tags . ("API" "api" "net" "R" "web")) (versions . #hash((default . #hasheq((checksum . "acf0861cc77cee7b461b35f0ceb650393eef0c99") (source . "git://github.com/LiberalArtist/opencpu") (source_url . "http://github.com/LiberalArtist/opencpu/tree/master"))))))) ("net-test" . #hash((author . "mflatt@racket-lang.org") (checksum . "be760109c3f923eb15172fc9dd33412b8dbb7b06") (dependencies . ("base" "at-exp-lib" "compatibility-lib" "eli-tester" "net-lib" "racket-test" "rackunit-lib" "sandbox-lib" "web-server-lib")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "net-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/net-test.zip") (tags . ()))) ("multimethod-test" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/multimethod-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/multimethod-test.txt"))) (checksum . "8a0903ebaedd919971c382eeb785f05080c7a8d6") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "multimethod-lib" "rackunit-lib")) (description . "") (implies . ()) (last-checked . 1522414437) (last-edit . 1460257049) (last-updated . 1502816189) (modules . ((lib "tests/multimethod/multimethod.rkt") (lib "tests/multimethod/ignored-params.rkt"))) (name . "multimethod-test") (nix-sha256 . "0jbmvs6q14f58hfi9qvz8g4ndq13ybyy80y375w7455s7y3w3af0") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-multimethod?path=multimethod-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8a0903ebaedd919971c382eeb785f05080c7a8d6") (source . "git://github.com/lexi-lambda/racket-multimethod?path=multimethod-test") (source_url . "http://github.com/lexi-lambda/racket-multimethod/tree/master?path=multimethod-test"))))))) ("neologia" . #hasheq((author . "gamecodeshark@gmail.com") (authors . ("gamecodeshark@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "neologia" "doc/neologia@neologia/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/neologia.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/neologia.txt"))) (checksum . "92d6ccde9041dc07b5c0db1849b4e1c65cb3cf2d") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "brag" "beautiful-racket" "beautiful-racket-lib" "br-parser-tools-lib" "scribble-lib" "racket-doc")) (description . "A language for creating and managing dictionaries and lexicons") (implies . ()) (last-checked . 1522414439) (last-edit . 1509944026) (last-updated . 1510027329) (modules . ((lib "neologia/lexer.rkt") (lib "neologia/parser.rkt") (lib "neologia/tokenizer.rkt") (lib "neologia/tokenize-only.rkt") (lib "neologia/scribblings/neologia.scrbl") (lib "neologia/colorer.rkt") (lib "neologia/examples/test.rkt") (lib "neologia/main.rkt") (lib "neologia/parser-only.rkt") (lib "neologia/generator.rkt"))) (name . "neologia") (nix-sha256 . "15hw5xigknxg08pg0p9hwg7kmwm6j04dny0lfzipkh2gnwg69nzn") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:gamecodeshark@gmail.com . #t) (dictionaries . #t) (lang . #t) (lang-extension . #t) (lexicon . #t) (ring:2 . #t))) (source . "https://github.com/robertkleffner/neologia.git") (tags . ("dictionaries" "lang" "lang-extension" "lexicon")) (versions . #hash((default . #hasheq((checksum . "92d6ccde9041dc07b5c0db1849b4e1c65cb3cf2d") (source . "https://github.com/robertkleffner/neologia.git") (source_url . "https://github.com/robertkleffner/neologia.git"))))))) ("honu" . #hash((author . "mflatt@racket-lang.org rafkind@racket-lang.org") (authors . ("mflatt@racket-lang.org" "rafkind@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "honu" "doc/honu@honu/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/honu.txt") (test-failure-log . "server/built/test-fail/honu.txt") (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . ("scheme-lib" "macro-debugger" "base" "parser-tools-lib" "rackunit-lib" "racket-index" "scribble-lib" "at-exp-lib" "sandbox-lib" "racket-doc")) (description . "The implementation of the Honu language") (implies . ()) (last-checked . 1522414416) (last-edit . 1417659583) (last-updated . 1502816119) (modules . ((lib "honu-parse/arithmetic.rkt") (lib "honu/tests/check.rkt") (lib "honu/tests/macros.rkt") (lib "honu/core/private/literals.rkt") (lib "honu/core/private/util.rkt") (lib "honu/main.rkt") (lib "honu-parse/unparsed-begin.rkt") (lib "honu/core/private/honu-top.rkt") (lib "honu/tests/xml.rkt") (lib "honu/scribblings/honu.scrbl") (lib "honu/debug.rkt") (lib "honu-parse/template.rkt") (lib "honu-parse/wrap.rkt") (lib "honu/core/lang/reader.rkt") (lib "honu-parse/compile.rkt") (lib "honu-parse/syntax.rkt") (lib "honu/core/private/operator.rkt") (lib "honu/core/runtime.rkt") (lib "honu-parse/define.rkt") (lib "honu-parse/transformer.rkt") (lib "honu/syntax-parse.rkt") (lib "honu/lang/reader.rkt") (lib "honu/tests/test-docs-complete.rkt") (lib "honu/core/private/class.rkt") (lib "honu/private/main.rkt") (lib "honu/core/private/honu.rkt") (lib "honu/core/api.rkt") (lib "honu/core/private/struct.rkt") (lib "honu-parse/operator.rkt") (lib "honu-parse/literals.rkt") (lib "honu/core/private/macro.rkt") (lib "honu/core/read.rkt") (lib "honu-parse/debug.rkt") (lib "honu/syntax.rkt") (lib "honu-parse/main.rkt") (lib "honu/private/lang/reader.rkt") (lib "honu/core/language.rkt") (lib "honu/core/main.rkt") (lib "honu-parse/parse.rkt") (lib "honu-parse/macro.rkt") (lib "honu-parse/old-literals.rkt") (lib "honu/private/common.rkt") (lib "honu/tests/linq.rkt"))) (name . "honu") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (author:rafkind@racket-lang.org . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ()) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) (default . #hasheq((checksum . "7348c61d2aaebbfba36f00405a4e8cb847129dba") (source . "git://github.com/racket/honu") (source_url . "http://github.com/racket/honu/tree/master"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("curly-fn-test" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/curly-fn-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/curly-fn-test.txt"))) (checksum . "d64cd71d5b386be85f5979edae6f6b6469a4df86") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "curly-fn-lib" "rackunit-lib")) (description . "") (implies . ()) (last-checked . 1522414372) (last-edit . 1473377672) (last-updated . 1502815878) (modules . ((lib "tests/curly-fn.rkt"))) (name . "curly-fn-test") (nix-sha256 . "1llxaykp1sbbqnm89ay6lcswfwjn594xsx491hw70l9g83yyivl1") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-curly-fn?path=curly-fn-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "d64cd71d5b386be85f5979edae6f6b6469a4df86") (source . "git://github.com/lexi-lambda/racket-curly-fn?path=curly-fn-test") (source_url . "http://github.com/lexi-lambda/racket-curly-fn/tree/master?path=curly-fn-test"))))))) ("cc4101-handin" . #hasheq((author . "ifigueroap@gmail.com etanter@dcc.uchile.cl") (authors . ("ifigueroap@gmail.com" "etanter@dcc.uchile.cl")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cc4101-handin.txt") (test-failure-log . "server/built/test-fail/cc4101-handin.txt") (test-success-log . #f))) (checksum . "4baadf45f07a1d79d1d2213356e1e60a72092242") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "drracket" "drracket-plugin-lib" "gui-lib" "net-lib")) (description . "Handin client for the CC4101 - Programming Languages course at University of Chile") (implies . ()) (last-checked . 1522414312) (last-edit . 1394810873) (last-updated . 1502812287) (modules . ((lib "cc4101-handin/updater.rkt") (lib "cc4101-handin/handin-multi.rkt") (lib "cc4101-handin/client.rkt") (lib "cc4101-handin/this-collection.rkt") (lib "cc4101-handin/client-gui.rkt"))) (name . "cc4101-handin") (nix-sha256 . "0j6jmy8bhxyx8xv0ampd2ckic7h908i9h44y64i164fi3m9xxbra") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:etanter@dcc.uchile.cl . #t) (author:ifigueroap@gmail.com . #t) (ring:1 . #t))) (source . "github://github.com/pleiad/cc4101-handin-client/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4baadf45f07a1d79d1d2213356e1e60a72092242") (source . "github://github.com/pleiad/cc4101-handin-client/master") (source_url . "http://github.com/pleiad/cc4101-handin-client/tree/master"))))))) ("net-doc" . #hash((author . "mflatt@racket-lang.org") (checksum . "9a96802fba64cd15a7aba46d4c57ccba47b11069") (dependencies . ("base" "compatibility-lib" "net-lib" "racket-doc" "scribble-lib" "web-server-doc" "web-server-lib")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "net-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/net-doc.zip") (tags . ()))) ("arroy" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/arroy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/arroy.txt"))) (checksum . "487b8cbacc5f1f9a4600f55b8c0f7f148f7c2747") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "web-server-lib")) (description . "A little library for modeling labeled transition systems with a collaborative Web stepper.") (implies . ()) (last-checked . 1522417871) (last-edit . 1385589159) (last-updated . 1502812272) (modules . ((lib "arroy/main.rkt") (lib "arroy/lts.rkt") (lib "arroy/games/ttt.rkt") (lib "arroy/games/ghost.rkt") (lib "arroy/games/guess.rkt"))) (name . "arroy") (nix-sha256 . "0spb6km181d9lkn0qzv1iwwahwg9wgdwx73ims32makq8mb4f1y6") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (app . #t) (author:jay.mccarthy@gmail.com . #t) (games . #t) (ring:1 . #t) (web . #t))) (source . "github://github.com/jeapostrophe/arroy/master") (tags . ("app" "games" "web")) (versions . #hash((default . #hasheq((checksum . "487b8cbacc5f1f9a4600f55b8c0f7f148f7c2747") (source . "github://github.com/jeapostrophe/arroy/master") (source_url . "http://github.com/jeapostrophe/arroy/tree/master"))))))) ("drracket-vim-tool" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-vim-tool.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-vim-tool.txt"))) (checksum . "d452f6c08f49a055dcc3d423ac1884a34a6c0cca") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "gui-lib" "data-lib" "drracket-plugin-lib" "rackunit-lib" "at-exp-lib")) (description . "DrRacket plugin that simulates vim keybindings") (implies . ()) (last-checked . 1522414395) (last-edit . 1438046359) (last-updated . 1520100312) (modules . ((lib "drracket-vim-tool/tests/utils.rkt") (lib "drracket-vim-tool/tool.rkt") (lib "drracket-vim-tool/tests/unit-tests.rkt") (lib "drracket-vim-tool/private/text.rkt") (lib "drracket-vim-tool/private/utils.rkt") (lib "drracket-vim-tool/private/commands.rkt"))) (name . "drracket-vim-tool") (nix-sha256 . "1d9c581ikscm9lcsj5h9g2n8fq8sscrrcrjnrh65jblribwyl9rq") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:asumu@ccs.neu.edu . #t) (drracket . #t) (editor . #t) (ring:1 . #t) (vim . #t))) (source . "git://github.com/takikawa/drracket-vim-tool") (tags . ("drracket" "editor" "vim")) (versions . #hash(("6.0" . #hasheq((checksum . "0d6725c85d732e7a6b92e3dc6f1f5d98b92ebd2c") (source . "git://github.com/takikawa/drracket-vim-tool#6.2") (source_url . "http://github.com/takikawa/drracket-vim-tool/tree/master#6.2"))) ("6.2.1" . #hasheq((checksum . "0d6725c85d732e7a6b92e3dc6f1f5d98b92ebd2c") (source . "git://github.com/takikawa/drracket-vim-tool#6.2") (source_url . "http://github.com/takikawa/drracket-vim-tool/tree/master#6.2"))) (default . #hasheq((checksum . "d452f6c08f49a055dcc3d423ac1884a34a6c0cca") (source . "git://github.com/takikawa/drracket-vim-tool") (source_url . "http://github.com/takikawa/drracket-vim-tool/tree/master"))) ("6.0.1" . #hasheq((checksum . "0d6725c85d732e7a6b92e3dc6f1f5d98b92ebd2c") (source . "git://github.com/takikawa/drracket-vim-tool#6.2") (source_url . "http://github.com/takikawa/drracket-vim-tool/tree/master#6.2"))) ("6.2" . #hasheq((checksum . "0d6725c85d732e7a6b92e3dc6f1f5d98b92ebd2c") (source . "git://github.com/takikawa/drracket-vim-tool#6.2") (source_url . "http://github.com/takikawa/drracket-vim-tool/tree/master#6.2"))) ("6.1" . #hasheq((checksum . "0d6725c85d732e7a6b92e3dc6f1f5d98b92ebd2c") (source . "git://github.com/takikawa/drracket-vim-tool#6.2") (source_url . "http://github.com/takikawa/drracket-vim-tool/tree/master#6.2"))))))) ("pict3d" . #hasheq((author . "neil.toronto@gmail.com jay.mccarthy@gmail.com mflatt@racket-lang.org alexander@knauth.org") (authors . ("neil.toronto@gmail.com" "jay.mccarthy@gmail.com" "mflatt@racket-lang.org" "alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pict3d" "doc/pict3d@pict3d/index.html") ("main" "typed-opengl" "doc/typed-opengl@pict3d/index.html"))) (failure-log . #f) (min-failure-log . "server/built/min-fail/pict3d.txt") (success-log . "server/built/install/pict3d.txt") (test-failure-log . "server/built/test-fail/pict3d.txt") (test-success-log . #f))) (checksum . "b73e77c66461081934eaeeb17f079841a0118387") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.3") "draw-lib" "srfi-lite-lib" "typed-racket-lib" "typed-racket-more" "math-lib" "scribble-lib" "gui-lib" "pconvert-lib" "pict-lib" "profile-lib" "pfds" "unstable-lib" "draw-doc" "gui-doc" "gui-lib" "racket-doc" "plot-doc" "plot-lib" "plot-gui-lib" "images-doc" "images-lib" "htdp-doc" "htdp-lib" "pict-doc" "typed-racket-doc")) (description . "Modern 3D engine with a purely functional interface") (implies . ()) (last-checked . 1522414512) (last-edit . 1450551203) (last-updated . 1506098094) (modules . ((lib "pict3d/scribblings/sniplike-bitmap.rkt") (lib "pict3d/private/math/flprojective3.rkt") (lib "pict3d/private/math/flv3-merge.rkt") (lib "pict3d/private/shape.rkt") (lib "pict3d/private/shape/sphere/ge_32.rkt") (lib "pict3d/tests/pr/33.rkt") (lib "pict3d/tests/opengl/planet.rkt") (lib "pict3d/private/engine/types.rkt") (lib "pict3d/private/math/fl.rkt") (lib "pict3d/private/math/fls3.rkt") (lib "pict3d/private/shape/triangle-mesh.rkt") (lib "pict3d/tests/opengl/vbotest.rkt") (lib "pict3d/tests/math/flv3-tests.rkt") (lib "pict3d/private/math/flaffine3.rkt") (lib "pict3d/private/gui/pict3d-bitmap.rkt") (lib "pict3d/private/gui/utils/format.rkt") (lib "pict3d/private/gui/typed-pict3d-combinators.rkt") (lib "pict3d/private/gl/cached-vector.rkt") (lib "pict3d/tests/triangle-surface.rkt") (lib "pict3d/private/gui/typed-pict3d-bitmap.rkt") (lib "pict3d/private/shape/disk.rkt") (lib "pict3d/private/gui/pict3d-struct.rkt") (lib "pict3d/private/math/maybe-flrect3.rkt") (lib "pict3d/tests/spinny-cube/player.rkt") (lib "pict3d/private/gui/utils/scales.rkt") (lib "pict3d/private/utils.rkt") (lib "pict3d/tests/opengl/gltest.rkt") (lib "pict3d/private/shape/directional-light.rkt") (lib "pict3d/private/soup/deform.rkt") (lib "pict3d/private/engine/draw.rkt") (lib "typed/opengl/typed-types.rkt") (lib "pict3d/private/shape/rectangle.rkt") (lib "pict3d/tests/depth-range.rkt") (lib "pict3d/private/math/flt3.rkt") (lib "pict3d/tests/fractal-trees.rkt") (lib "pict3d/scribblings/utils.rkt") (lib "pict3d/tests/spinny-cube/player-state.rkt") (lib "pict3d/tests/gen-world-state.rkt") (lib "pict3d/private/engine/shader.rkt") (lib "pict3d/private/gl/context.rkt") (lib "pict3d/private/engine/draw/draw-pass.rkt") (lib "pict3d/private/ffi-types.rkt") (lib "pict3d/private/math/flplane3.rkt") (lib "pict3d/private/soup/types.rkt") (lib "pict3d/private/engine/utils.rkt") (lib "pict3d/private/shape/sphere.rkt") (lib "pict3d/tests/adaptive-deform.rkt") (lib "pict3d/private/engine/scene.rkt") (lib "pict3d/private/engine/shader/shader-code.rkt") (lib "pict3d/private/soup/mesh.rkt") (lib "pict3d/private/gl/program.rkt") (lib "pict3d/private/math/flt3-data.rkt") (lib "pict3d/private/gui/typed-user-types.rkt") (lib "pict3d/private/shape/types.rkt") (lib "pict3d/tests/deform-groups.rkt") (lib "typed/opengl/ffi.rkt") (lib "pict3d/private/gui/pict3d-draw.rkt") (lib "pict3d/private/untyped-utils.rkt") (lib "typed/opengl/readspec.rkt") (lib "pict3d/private/gl/face.rkt") (lib "pict3d/private/gui/master-context.rkt") (lib "pict3d/private/math/flv3.rkt") (lib "pict3d/private/gui/untyped-pict3d-bitmap.rkt") (lib "typed/opengl/ffi-types.rkt") (lib "pict3d/tests/spinny-cube/player-state-test.rkt") (lib "pict3d/private/shape/cylinder.rkt") (lib "pict3d/tests/opengl/viewer.rkt") (lib "pict3d/private/shape/sphere/sphere-type.rkt") (lib "pict3d/private/pos/pos-dir.rkt") (lib "pict3d/private/shape/polygon.rkt") (lib "pict3d/private/gui/utils/timeout-timer.rkt") (lib "pict3d/private/gui/untyped-master-context.rkt") (lib "pict3d/private/engine/scene/scene.rkt") (lib "pict3d/scribblings/serializable-bitmap.rkt") (lib "pict3d/tests/opengl/shadertest.rkt") (lib "pict3d/private/pos/linear-affine-smooth.rkt") (lib "pict3d/private/math.rkt") (lib "pict3d/tests/triangle-vertex.rkt") (lib "typed/opengl/typed-opengl.scrbl") (lib "typed/opengl/untyped.rkt") (lib "pict3d/private/math/flt3-unboxed-ops.rkt") (lib "pict3d/private/gui/pict3d-combinators.rkt") (lib "pict3d/private/gui/pict3d-snip.rkt") (lib "pict3d/private/engine/scene/types.rkt") (lib "pict3d/private/gl/framebuffer.rkt") (lib "pict3d/private/gui/untyped-pict3d-canvas.rkt") (lib "pict3d/tests/debug-passes.rkt") (lib "pict3d/tests/spaceship.rkt") (lib "pict3d/main.rkt") (lib "pict3d/private/math/flv4.rkt") (lib "pict3d/private/gui/parameters.rkt") (lib "pict3d/private/gui/shape/light-grid.rkt") (lib "pict3d/tests/trace.rkt") (lib "pict3d/private/gui/utils/camera.rkt") (lib "pict3d/tests/cull.rkt") (lib "pict3d/private/gui/typed-pict3d-canvas.rkt") (lib "pict3d/private/shape/frozen-scene.rkt") (lib "pict3d/private/math/fl2.rkt") (lib "pict3d/private/soup/query.rkt") (lib "pict3d/private/universe/big-bang.rkt") (lib "pict3d/private/gl/buffer.rkt") (lib "typed/opengl/utils.rkt") (lib "pict3d/private/gui/pict3d-canvas.rkt") (lib "pict3d/private/engine/shader/serialize-vertices.rkt") (lib "pict3d/tests/docs-complete.rkt") (lib "pict3d/private/gui/indicators.rkt") (lib "pict3d/private/engine/scene/scene-query.rkt") (lib "pict3d/universe.rkt") (lib "pict3d/tests/spinny-cube/debug-picts.rkt") (lib "pict3d/engine.rkt") (lib "pict3d/private/lazy-gui.rkt") (lib "pict3d/private/engine/draw/draw-passes.rkt") (lib "typed/opengl.rkt") (lib "pict3d/private/gl/typed-context.rkt") (lib "pict3d/private/gl/texture.rkt") (lib "pict3d/private/soup/geometry.rkt") (lib "pict3d/private/pos/affine-combinators.rkt") (lib "pict3d/private/gl/renderbuffer.rkt") (lib "pict3d/private/memo.rkt") (lib "pict3d/private/shape/sphere/ge_30.rkt") (lib "pict3d/scribblings/pict3d.scrbl") (lib "pict3d/tests/spheres-on-canvas.rkt") (lib "pict3d/private/math/flrect3.rkt") (lib "pict3d/tests/randomized/check-ray-trace-vs-opengl.rkt") (lib "pict3d/tests/opengl/gears.rkt") (lib "pict3d/private/gl/untyped-context.rkt") (lib "pict3d/private/math/fl4.rkt") (lib "pict3d/private/gl/object.rkt") (lib "pict3d/private/shape/composite.rkt") (lib "pict3d/private/math/fl3.rkt") (lib "pict3d/private/engine/draw/types.rkt") (lib "pict3d/private/gui/user-types.rkt") (lib "pict3d/private/gui/utils/center-pointer.rkt") (lib "pict3d/tests/randomized/randomized-tests.rkt") (lib "pict3d/tests/shaders.rkt") (lib "pict3d/private/gui/shape/point-light-shell.rkt") (lib "pict3d/private/engine.rkt") (lib "pict3d/private/math/fllinear3.rkt") (lib "pict3d/private/soup.rkt") (lib "pict3d/tests/snowman.rkt") (lib "pict3d/tests/randomized/regression-tests.rkt") (lib "pict3d/private/engine/scene/tags.rkt") (lib "pict3d/tests/nuclear-sausage-plant.rkt") (lib "pict3d/private/shape/triangle-outline.rkt") (lib "pict3d/private/gui/invisible-context.rkt") (lib "pict3d/private/soup/group.rkt") (lib "typed/opengl/typed.rkt") (lib "pict3d/tests/camera-ray-trace.rkt") (lib "pict3d/private/engine/draw/merge-passes.rkt") (lib "pict3d/private/shape/point-light.rkt") (lib "pict3d/tests/randomized/check-tessellate-vs-orig.rkt") (lib "pict3d/private/gl.rkt") (lib "pict3d/private/ffi.rkt") (lib "pict3d/private/gl/vertex-array.rkt") (lib "pict3d/tests/opengl/bitmaptest.rkt"))) (name . "pict3d") (nix-sha256 . "13x6agc9yjbqdg5bw3vld8ivfgpab5cpf4zy9sqvjsvld4qq851r") (ring . 1) (search-terms . #hasheq((3d . #t) (:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (author:jay.mccarthy@gmail.com . #t) (author:mflatt@racket-lang.org . #t) (author:neil.toronto@gmail.com . #t) (games . #t) (graphics . #t) (gui . #t) (opengl . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/pict3d") (tags . ("3d" "games" "graphics" "gui" "opengl")) (versions . #hash(("6.1.1" . #hasheq((checksum . "da3d9b084909b643415e6d51cd269c82fd50feb3") (source . "git://github.com/jeapostrophe/pict3d#for-racket-v6.2.1") (source_url . "http://github.com/jeapostrophe/pict3d/tree/master#for-racket-v6.2.1"))) ("6.2.1" . #hasheq((checksum . "da3d9b084909b643415e6d51cd269c82fd50feb3") (source . "git://github.com/jeapostrophe/pict3d#for-racket-v6.2.1") (source_url . "http://github.com/jeapostrophe/pict3d/tree/master#for-racket-v6.2.1"))) (default . #hasheq((checksum . "b73e77c66461081934eaeeb17f079841a0118387") (source . "git://github.com/jeapostrophe/pict3d") (source_url . "http://github.com/jeapostrophe/pict3d/tree/master"))) ("6.2" . #hasheq((checksum . "da3d9b084909b643415e6d51cd269c82fd50feb3") (source . "git://github.com/jeapostrophe/pict3d#for-racket-v6.2.1") (source_url . "http://github.com/jeapostrophe/pict3d/tree/master#for-racket-v6.2.1"))))))) ("cover-codecov" . #hasheq((author . "spencer@florence.io plessner.ryan@gmail.com") (authors . ("spencer@florence.io" "plessner.ryan@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cover-codecov.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cover-codecov.txt"))) (checksum . "c84a011a676b553341d7293493498f2b95eaa186") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.1.1") "cover" "rackunit-lib")) (description . "") (implies . ()) (last-checked . 1522414368) (last-edit . 1455306454) (last-updated . 1502815870) (modules . ((lib "cover/private/travis-service.rkt") (lib "cover/private/tests/test-not-run.rkt") (lib "cover/codecov.rkt") (lib "cover/private/codecov.rkt") (lib "cover/private/ci-service.rkt"))) (name . "cover-codecov") (nix-sha256 . "19qzfw08rbjqgrv5pg979mcmllj16ar5x7816yf5s5kx2nvan3mm") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:plessner.ryan@gmail.com . #t) (author:spencer@florence.io . #t) (ring:1 . #t) (testing . #t) (tools . #t))) (source . "git://github.com/codecov/codecov-racket#release") (tags . ("testing" "tools")) (versions . #hash((default . #hasheq((checksum . "c84a011a676b553341d7293493498f2b95eaa186") (source . "git://github.com/codecov/codecov-racket#release") (source_url . "http://github.com/codecov/codecov-racket/tree/master#release"))))))) ("deinprogramm" . #hash((author . "sperber@racket-lang.org") (checksum . "83c4a67ce98b8fa29e23eb3ad505d382de992e18") (dependencies . ("base" "compatibility-lib" "deinprogramm-signature" "drracket" "drracket-plugin-lib" "errortrace-lib" "gui-lib" "htdp-lib" "pconvert-lib" "scheme-lib" "string-constants-lib" "trace" "wxme-lib" "at-exp-lib" "htdp-doc" "racket-doc" "racket-index" "rackunit-lib" "scribble-lib")) (description . "sperber@racket-lang.org") (modules . ()) (name . "deinprogramm") (source . "https://download.racket-lang.org/releases/6.12/pkgs/deinprogramm.zip") (tags . ()))) ("xexpr-path" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "xexpr-path" "doc/xexpr-path@xexpr-path/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xexpr-path.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/xexpr-path.txt"))) (checksum . "59f07164a5735441953c411a78d7dbe2f8ebcdc0") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "XML Expression Path Lookup") (implies . ()) (last-checked . 1522414703) (last-edit . 1385537382) (last-updated . 1502816532) (modules . ((lib "xexpr-path/xexpr-path.scrbl") (lib "xexpr-path/main.rkt"))) (name . "xexpr-path") (nix-sha256 . "02z1clh91fhmfbfdc4d689b24jb88292685kixwy89b2j03fihjp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t) (xml . #t))) (source . "github://github.com/mordae/racket-xexpr-path/master") (tags . ("xml")) (versions . #hash((default . #hasheq((checksum . "59f07164a5735441953c411a78d7dbe2f8ebcdc0") (source . "github://github.com/mordae/racket-xexpr-path/master") (source_url . "http://github.com/mordae/racket-xexpr-path/tree/master"))))))) ("libvid-x86_64-macosx" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libvid-x86_64-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libvid-x86_64-macosx.txt"))) (checksum . "e8fb290d38e90800ffa1d105dbb540d28f931807") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "An optional helper library for Video, to enable ffmpeg level logging.") (implies . ()) (last-checked . 1522414425) (last-edit . 1503584840) (last-updated . 1521584381) (modules . ()) (name . "libvid-x86_64-macosx") (nix-sha256 . "1h5nrhdlb9z89vx4irrzxcpc7zgpyjk1vy6yc598yfq1hskmwjvl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:leif@leifandersen.net . #t) (libvid . #t) (ring:1 . #t) (video . #t))) (source . "git://github.com/videolang/native-pkgs?path=libvid-x86_64-macosx") (tags . ("libvid" "video")) (versions . #hash((default . #hasheq((checksum . "e8fb290d38e90800ffa1d105dbb540d28f931807") (source . "git://github.com/videolang/native-pkgs?path=libvid-x86_64-macosx") (source_url . "http://github.com/videolang/native-pkgs/tree/master?path=libvid-x86_64-macosx"))))))) ("net-jwt" . #hasheq((author . "jmj@fellowhuman.com") (authors . ("jmj@fellowhuman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "jwt" "doc/jwt@net-jwt/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/net-jwt.txt") (test-failure-log . "server/built/test-fail/net-jwt.txt") (test-success-log . #f))) (checksum . "46ce306e5b779318c5c5b8201cdd7ad7e9df820c") (checksum-error . #f) (conflicts . ()) (dependencies . ("srfi-lite-lib" "base" "typed-racket-lib" "typed-racket-more" "grommet" "rackunit-lib" "web-server-lib" "racket-doc" "scribble-lib" "typed-racket-lib" "typed-racket-more" "typed-racket-doc" "option-bind")) (description . "JSON Web Token / JSON Web Signature codec, verification, signing") (implies . ()) (last-checked . 1522414472) (last-edit . 1439185700) (last-updated . 1502816195) (modules . ((lib "net/jwt.rkt") (lib "tests/net/jwt/base64.rkt") (lib "tests/net/jwt/encode-decode.rkt") (lib "net/jwt/encode-decode.rkt") (lib "net/jwt/misc.rkt") (lib "net/jwt/structs.rkt") (lib "net/jwt/base64.rkt") (lib "net/jwt/algorithms.rkt") (lib "net/jwt/jwt.scrbl") (lib "tests/net/jwt/algorithms.rkt"))) (name . "net-jwt") (nix-sha256 . "17hnd7z64dx2hxr1y2q8dihvw3vn1vpzjzislka055spfr3z0vr0") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jmj@fellowhuman.com . #t) (json . #t) (net . #t) (ring:1 . #t) (web . #t))) (source . "git://github.com/RenaissanceBug/racket-jwt") (tags . ("json" "net" "web")) (versions . #hash((default . #hasheq((checksum . "46ce306e5b779318c5c5b8201cdd7ad7e9df820c") (source . "git://github.com/RenaissanceBug/racket-jwt") (source_url . "http://github.com/RenaissanceBug/racket-jwt/tree/master"))))))) ("jack-posn" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "posn" "doc/posn@jack-posn/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/jack-posn.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/jack-posn.txt"))) (checksum . "402ca7d3d5db28b04d82ff825a684c4995dcf355") (checksum-error . #f) (conflicts . ()) (dependencies . ("scribble-lib" "base" "sweet-exp" "fancy-app" "cover" "rackunit-lib" "racket-doc" "scribble-lib" "doc-coverage")) (description . "Library for working with points in 2d space") (implies . ()) (last-checked . 1522414421) (last-edit . 1500074814) (last-updated . 1502816141) (modules . ((lib "posn/private/relative.rkt") (lib "posn/private/rotate.scrbl") (lib "posn/private/add.rkt") (lib "posn/private/main.rkt") (lib "posn/private/util/scribble-include-no-subsection.rkt") (lib "posn/private/util/doc.rkt") (lib "posn/private/degrees.rkt") (lib "posn/private/multiply.scrbl") (lib "posn/private/scale.rkt") (lib "posn/private/scale.scrbl") (lib "posn/private/multiply.rkt") (lib "posn/private/rotate.rkt") (lib "posn/private/add.scrbl") (lib "posn/tests/doc-coverage.rkt") (lib "posn/main.scrbl") (lib "posn/main.rkt") (lib "posn/private/base.rkt") (lib "posn/private/base.scrbl") (lib "posn/private/relative.scrbl"))) (name . "jack-posn") (nix-sha256 . "19npmcxj0ab5kv8f0n9cj8lnkvkxrsj17rpcrcia98ni0xbf3mc8") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (data . #t) (experimental . #t) (graphics . #t) (personal . #t) (ring:1 . #t))) (source . "git://github.com/jackfirth/racket-posn") (tags . ("data" "experimental" "graphics" "personal")) (versions . #hash((default . #hasheq((checksum . "402ca7d3d5db28b04d82ff825a684c4995dcf355") (source . "git://github.com/jackfirth/racket-posn") (source_url . "http://github.com/jackfirth/racket-posn/tree/master"))))))) ("r6rs-lib" . #hash((author . "mflatt@racket-lang.org") (checksum . "01f97065f1ae56d58630a62ccd805f4898cb1cfe") (dependencies . ("scheme-lib" "base" "r5rs-lib" "compatibility-lib")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "r6rs-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/r6rs-lib.zip") (tags . ()))) ("math-lib" . #hash((author . "ntoronto@racket-lang.org") (checksum . "e2f578e4bd7cf1ae4106976a3ff1fdeb84a04ca6") (dependencies . (("base" #:version "6.11.0.6") "r6rs-lib" "typed-racket-lib" "typed-racket-more" ("math-i386-macosx" #:platform "i386-macosx") ("math-x86_64-macosx" #:platform "x86_64-macosx") ("math-ppc-macosx" #:platform "ppc-macosx") ("math-win32-i386" #:platform "win32\\i386") ("math-win32-x86_64" #:platform "win32\\x86_64") ("math-x86_64-linux-natipkg" #:platform "x86_64-linux-natipkg"))) (description . "ntoronto@racket-lang.org") (modules . ()) (name . "math-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/math-lib.zip") (tags . ()))) ("alexis-pvector" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "alexis-pvector" "doc/alexis-pvector@alexis-pvector/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/alexis-pvector.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/alexis-pvector.txt"))) (checksum . "f03b60714a0fd35ca61dd41307701074a2253d87") (checksum-error . #f) (conflicts . ()) (dependencies . ("alexis-collections" "base" "pvector" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Deprecated. Use the pvector package instead.") (implies . ("pvector")) (last-checked . 1522417870) (last-edit . 1449355974) (last-updated . 1502812268) (modules . ((lib "alexis/pvector.rkt") (lib "alexis/scribblings/alexis-pvector.scrbl") (lib "alexis/private/test/main.rkt"))) (name . "alexis-pvector") (nix-sha256 . "1ghjx2pwzhbnh24xdcazipr7bh731z730iar21vz6lvqy30m1mnk") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (deprecated . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-alexis-pvector") (tags . ("deprecated")) (versions . #hash(("6.1.1" . #hasheq((checksum . "10301802ae13956a1163b4b3ee5436680d796dc8") (source . "git://github.com/lexi-lambda/racket-alexis-pvector#v6.1.1") (source_url . "http://github.com/lexi-lambda/racket-alexis-pvector/tree/master#v6.1.1"))) (default . #hasheq((checksum . "f03b60714a0fd35ca61dd41307701074a2253d87") (source . "git://github.com/lexi-lambda/racket-alexis-pvector") (source_url . "http://github.com/lexi-lambda/racket-alexis-pvector/tree/master"))))))) ("pprint" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pprint" "doc/pprint@pprint/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pprint.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pprint.txt"))) (checksum . "c85b4adcf26d3afc5b812d21b3a8f31d1fc6f853") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "dherman-struct" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "A universal pretty printing library") (implies . ()) (last-checked . 1522414536) (last-edit . 1504809561) (last-updated . 1513883775) (modules . ((lib "pprint/tests.rkt") (lib "pprint/pprint.scrbl") (lib "pprint/main.rkt") (lib "pprint/haskell.rkt"))) (name . "pprint") (nix-sha256 . "0s4vzzp0a83dc3bh9gqss9l7d0k65yrgzaq40j79rfjln89flhp7") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (io . #t) (printing . #t) (ring:1 . #t))) (source . "git://github.com/takikawa/pprint.plt") (tags . ("io" "printing")) (versions . #hash((default . #hasheq((checksum . "c85b4adcf26d3afc5b812d21b3a8f31d1fc6f853") (source . "git://github.com/takikawa/pprint.plt") (source_url . "http://github.com/takikawa/pprint.plt/tree/master"))))))) ("postnet" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "postnet" "doc/postnet@postnet/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/postnet.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/postnet.txt"))) (checksum . "b8a714b8cedd168925c6e1de8dd7cb80fd5391da") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "overeasy")) (description . "USPS POSTNET Barcode Encoding") (implies . ()) (last-checked . 1522414535) (last-edit . 1456651795) (last-updated . 1502816325) (modules . ((lib "postnet/main.rkt") (lib "postnet/postnet.scrbl"))) (name . "postnet") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:neil@neilvandyke.org . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/postnet.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b8a714b8cedd168925c6e1de8dd7cb80fd5391da") (source . "http://www.neilvandyke.org/racket/postnet.zip") (source_url . "http://www.neilvandyke.org/racket/postnet.zip"))))))) ("typed-worklist" . #hasheq((author . "georges.duperon@gmail.com") (authors . ("georges.duperon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "typed-worklist" "doc/typed-worklist@typed-worklist/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-worklist.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-worklist.txt"))) (checksum . "99a326667431723cd5f530ecbad6b7250ece29e3") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "type-expander" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc")) (description . "A Typed Racket implementation of a general-purpose worklist, with multiple worklists of different types.") (implies . ()) (last-checked . 1522414696) (last-edit . 1492714040) (last-updated . 1517062739) (modules . ((lib "typed-worklist/main.rkt") (lib "typed-worklist/scribblings/typed-worklist.scrbl") (lib "typed-worklist/test/test-experiment.rkt"))) (name . "typed-worklist") (nix-sha256 . "0pcl9i2zs71mjv5izq839jcxrila2570qa80423gp86ssa344hv5") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:georges.duperon@gmail.com . #t) (ring:1 . #t) (typed-racket . #t) (utility . #t))) (source . "https://github.com/jsmaniac/typed-worklist.git") (tags . ("typed-racket" "utility")) (versions . #hash((default . #hasheq((checksum . "99a326667431723cd5f530ecbad6b7250ece29e3") (source . "https://github.com/jsmaniac/typed-worklist.git") (source_url . "https://github.com/jsmaniac/typed-worklist.git"))))))) ("db-ppc-macosx" . #hash((author . "mflatt@racket-lang.org") (checksum . "e296e6939298b01379997ba2abaebaf2978fc639") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "db-ppc-macosx") (source . "https://download.racket-lang.org/releases/6.12/pkgs/db-ppc-macosx.zip") (tags . ()))) ("plai" . #hash((author . "jay@racket-lang.org") (checksum . "54c151044f2e38f28009f1b969498c4bfb0f17a9") (dependencies . ("plai-doc" "plai-lib" "base")) (description . "jay@racket-lang.org") (modules . ()) (name . "plai") (source . "https://download.racket-lang.org/releases/6.12/pkgs/plai.zip") (tags . ()))) ("raco-macro-step" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raco-macro-step.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raco-macro-step.txt"))) (checksum . "efbc4ba9ebfda38624050e9cfa0452da823decf0") (checksum-error . #f) (conflicts . ()) (dependencies . ("macro-debugger" "base")) (description . "Run the macro stepper from the command line") (implies . ()) (last-checked . 1522414664) (last-edit . 1503521840) (last-updated . 1502816378) (modules . ((lib "raco-macro-step/main.rkt"))) (name . "raco-macro-step") (nix-sha256 . "02pgax64qd0hl1f7q4bpr6kjy4qzsirrbin1rzl4phjshs1ar540") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (macro . #t) (raco . #t) (ring:1 . #t))) (source . "git://github.com/samth/raco-macro-step") (tags . ("macro" "raco")) (versions . #hash((default . #hasheq((checksum . "efbc4ba9ebfda38624050e9cfa0452da823decf0") (source . "git://github.com/samth/raco-macro-step") (source_url . "http://github.com/samth/raco-macro-step/tree/master"))))))) ("plai-lib" . #hash((author . "jay@racket-lang.org") (checksum . "597fc0a37d16d2f1b8785e3d3f0de35d2eee7e7f") (dependencies . ("scheme-lib" "srfi-lite-lib" "base" "gui-lib" "sandbox-lib" "web-server-lib" "at-exp-lib" "eli-tester" "pconvert-lib" "rackunit-lib" "drracket-tool-lib")) (description . "jay@racket-lang.org") (modules . ()) (name . "plai-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/plai-lib.zip") (tags . ()))) ("static-rename-test" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/static-rename-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/static-rename-test.txt"))) (checksum . "50f1ff9866a3ef116471eb1a483c1992480dcd45") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "rackunit-spec" "static-rename-lib")) (description . "") (implies . ()) (last-checked . 1522414684) (last-edit . 1490649803) (last-updated . 1502816455) (modules . ((lib "tests/static-rename/main.rkt"))) (name . "static-rename-test") (nix-sha256 . "09gzqnlilws5hm7ayg1cc82maz72syxa52p0r89ayazxhw0yfmyx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-static-rename?path=static-rename-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "50f1ff9866a3ef116471eb1a483c1992480dcd45") (source . "git://github.com/lexi-lambda/racket-static-rename?path=static-rename-test") (source_url . "http://github.com/lexi-lambda/racket-static-rename/tree/master?path=static-rename-test"))))))) ("pop-pl" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pop-pl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pop-pl.txt"))) (checksum . "758f7bff0b5e2810f85cda0b6305c4699ed4fce5") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.3") "gui-lib" "pict-lib" "rackunit-lib" "cover-coveralls")) (description . "A Patient-Oriented Prescription Programming Language") (implies . ()) (last-checked . 1522414534) (last-edit . 1426520796) (last-updated . 1516727894) (modules . ((lib "pop-pl/examples/insulin/simulation.rkt") (lib "pop-pl/lang/reader.rkt") (lib "pop-pl/private/shared.rkt") (lib "pop-pl/tests/insulin.rkt") (lib "pop-pl/examples/heparin/simulation.rkt") (lib "pop-pl/tests/harness.rkt") (lib "pop-pl/main.rkt") (lib "pop-pl/lang/parse.rkt") (lib "pop-pl/constants.rkt") (lib "pop-pl/prescription-sig.rkt") (lib "pop-pl/system-unit.rkt") (lib "pop-pl/packrat.rkt") (lib "pop-pl/tests/popa.rkt") (lib "pop-pl/system-sig.rkt") (lib "pop-pl/examples/heparin/sim-gui.rkt") (lib "pop-pl/tests/heparin.rkt") (lib "pop-pl/examples/insulin/sim-gui.rkt") (lib "pop-pl/sexp/lang/reader.rkt") (lib "pop-pl/examples/lurie-heparin/heparin.rkt"))) (name . "pop-pl") (nix-sha256 . "0z8b7rs6aqhdbbg8vyfzq2vgs10zfxmk5liyj82qny3wfb9dpcb4") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:spencer@florence.io . #t) (ring:1 . #t))) (source . "git://github.com/florence/pop-pl") (tags . ()) (versions . #hash(("6.1.1" . #hasheq((checksum . "b11be20b04ec61ea080588cd228bd26195fdb5cc") (source . "git://github.com/florence/pop-pl#old") (source_url . "http://github.com/florence/pop-pl/tree/master#old"))) ("6.2.1" . #hasheq((checksum . "b11be20b04ec61ea080588cd228bd26195fdb5cc") (source . "git://github.com/florence/pop-pl#old") (source_url . "http://github.com/florence/pop-pl/tree/master#old"))) (default . #hasheq((checksum . "758f7bff0b5e2810f85cda0b6305c4699ed4fce5") (source . "git://github.com/florence/pop-pl") (source_url . "http://github.com/florence/pop-pl/tree/master"))) ("6.2" . #hasheq((checksum . "b11be20b04ec61ea080588cd228bd26195fdb5cc") (source . "git://github.com/florence/pop-pl#old") (source_url . "http://github.com/florence/pop-pl/tree/master#old"))))))) ("tesseract" . #hasheq((author . "lasfter@gmail.com") (authors . ("lasfter@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tesseract.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tesseract.txt"))) (checksum . "ef1da2619bf4814ff75a840b8a3e42eaf10cfb01") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "Bindings for Google's Tesseract-OCR") (implies . ()) (last-checked . 1522414690) (last-edit . 1429408989) (last-updated . 1502816476) (modules . ((lib "main/tesseracket.rkt"))) (name . "tesseract") (nix-sha256 . "0haadixjsb6nrq4pkw0pp4agimvpimgfn9dk0a5178ilh7l6mb2a") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:lasfter@gmail.com . #t) (google . #t) (ocr . #t) (ring:1 . #t) (tesseract . #t))) (source . "git://github.com/lasfter/tesseracket") (tags . ("google" "ocr" "tesseract")) (versions . #hash((default . #hasheq((checksum . "ef1da2619bf4814ff75a840b8a3e42eaf10cfb01") (source . "git://github.com/lasfter/tesseracket") (source_url . "http://github.com/lasfter/tesseracket/tree/master"))))))) ("crypto-test" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/crypto-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/crypto-test.txt"))) (checksum . "07610cabe6c318809b3b9022d88cfe1cc386852e") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "asn1-lib" "crypto-lib")) (description . "Cryptography library") (implies . ()) (last-checked . 1522414369) (last-edit . 1519093658) (last-updated . 1519100634) (modules . ((lib "crypto/tests/util.rkt") (lib "crypto/tests/pkey.rkt") (lib "crypto/tests/cipher.rkt") (lib "crypto/tests/padding.rkt") (lib "crypto/tests/test.rkt") (lib "crypto/tests/digest.rkt"))) (name . "crypto-test") (nix-sha256 . "08wdlzgz7grhyfzx9yk69nby2fams7y1vjdhdcrwddw9xmxvflxm") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (crypto . #t) (ring:2 . #t))) (source . "https://github.com/rmculpepper/crypto.git?path=crypto-test") (tags . ("crypto")) (versions . #hash((default . #hasheq((checksum . "07610cabe6c318809b3b9022d88cfe1cc386852e") (source . "https://github.com/rmculpepper/crypto.git?path=crypto-test") (source_url . "https://github.com/rmculpepper/crypto.git?path=crypto-test"))))))) ("remember" . #hasheq((author . "georges.duperon@gmail.com") (authors . ("georges.duperon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "remember" "doc/remember@remember/index.html") ("main" "remember-implementation.hl" "doc/remember-implementation.hl@remember/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/remember.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/remember.txt"))) (checksum . "dfa5f226277fc9cafc4418c27455693cbc59380c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "compatibility-lib" "scribble-lib" "typed-racket-lib" "phc-toolkit" "hyper-literate" "scribble-lib" "racket-doc" "typed-racket-doc" "scribble-enhanced")) (description . "Compile-time memoize across compilations. Writes values to a file, so that they will be remembered during the next compilation.") (implies . ()) (last-checked . 1522414670) (last-edit . 1470945478) (last-updated . 1502816398) (modules . ((lib "remember/main.rkt") (lib "remember/test/test2.rkt") (lib "remember/test/input1.rkt") (lib "remember/test/test-error.rkt") (lib "remember/test/io2.rkt") (lib "remember/test/test3.rkt") (lib "remember/scribblings/remember.scrbl") (lib "remember/test/input-error.rkt") (lib "remember/remember-implementation.hl.rkt") (lib "remember/test/input3.rkt") (lib "remember/test/test1.rkt"))) (name . "remember") (nix-sha256 . "1vcb8xb07105nphjflaz2klzjphcna50i9qr4sk7ki4hwc1a8ql2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:georges.duperon@gmail.com . #t) (memoization . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/jsmaniac/remember.git") (tags . ("memoization" "syntax")) (versions . #hash((default . #hasheq((checksum . "dfa5f226277fc9cafc4418c27455693cbc59380c") (source . "https://github.com/jsmaniac/remember.git") (source_url . "https://github.com/jsmaniac/remember.git"))))))) ("effection-lib" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/effection-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/effection-lib.txt"))) (checksum . "617e5b4c76eab09a2cd2b4f47bca8d908f51d619") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "lathe-lib" "parendown-lib")) (description . "A library for deterministic concurrency and custom side effects. (lib)") (implies . ()) (last-checked . 1522414396) (last-edit . 1520307387) (last-updated . 1520513655) (modules . ((lib "effection/private/util.rkt") (lib "effection/order/base.rkt") (lib "effection/effects/base.rkt") (lib "effection/order.rkt") (lib "effection/maybe.rkt") (lib "effection/maybe/base.rkt") (lib "effection/main.rkt"))) (name . "effection-lib") (nix-sha256 . "1y75812hyfyv67nlcw2mdax6rb3rvzy4pma3wjp9v6qixhpvm76z") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (concurrency . #t) (effects . #t) (language . #t) (ring:2 . #t) (unstable . #t))) (source . "https://github.com/rocketnia/effection.git?path=effection-lib") (tags . ("concurrency" "effects" "language" "unstable")) (versions . #hash((default . #hasheq((checksum . "617e5b4c76eab09a2cd2b4f47bca8d908f51d619") (source . "https://github.com/rocketnia/effection.git?path=effection-lib") (source_url . "https://github.com/rocketnia/effection.git?path=effection-lib"))))))) ("data-doc" . #hash((author . "ryanc@racket-lang.org") (checksum . "9af9050723579436c25320abd06b70b8a181812f") (dependencies . ("base" "data-lib" "data-enumerate-lib" "racket-doc" "scribble-lib" "plot-lib" "math-doc" "math-lib" "pict-doc" "pict-lib")) (description . "ryanc@racket-lang.org") (modules . ()) (name . "data-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/data-doc.zip") (tags . ()))) ("asyncunit" . #hasheq((author . "schuster@ccs.neu.edu") (authors . ("schuster@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "asyncunit" "doc/asyncunit@asyncunit/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/asyncunit.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/asyncunit.txt"))) (checksum . "ef9e5c45e83a6f44539d45c8ac52935a463a9659") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib")) (description . "RackUnit helper functions for asynchronous channels") (implies . ()) (last-checked . 1522417872) (last-edit . 1418836111) (last-updated . 1502812273) (modules . ((lib "asyncunit/main.rkt") (lib "asyncunit/tests.rkt") (lib "asyncunit/asyncunit.scrbl"))) (name . "asyncunit") (nix-sha256 . "1s038g6sjy4f9abk5pafczbjrh2bhhp32xhiz197va705p8hcivr") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:schuster@ccs.neu.edu . #t) (concurrency . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/schuster/asyncunit") (tags . ("concurrency" "testing")) (versions . #hash((default . #hasheq((checksum . "ef9e5c45e83a6f44539d45c8ac52935a463a9659") (source . "git://github.com/schuster/asyncunit") (source_url . "http://github.com/schuster/asyncunit/tree/master"))))))) ("auto-syntax-e" . #hasheq((author . "georges.duperon@gmail.com") (authors . ("georges.duperon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "auto-syntax-e" "doc/auto-syntax-e@auto-syntax-e/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/auto-syntax-e.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/auto-syntax-e.txt"))) (checksum . "19033049e1b03da10345c2f5974c06f79a31fc4d") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "For syntax pattern variables: instead of raising an error, x is roughly equivalent to (syntax->datum #'x).") (implies . ()) (last-checked . 1522414287) (last-edit . 1476919818) (last-updated . 1517062577) (modules . ((lib "auto-syntax-e/test/test-meta.rkt") (lib "auto-syntax-e/scribblings/auto-syntax-e.scrbl") (lib "auto-syntax-e/utils.rkt") (lib "auto-syntax-e/main.rkt") (lib "auto-syntax-e/test/test-auto-syntax-e.rkt"))) (name . "auto-syntax-e") (nix-sha256 . "0rpxp0ba3alj9yyfzh1kdywhwwrw9f3gnrb7ksb234silv0svh9a") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:georges.duperon@gmail.com . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/jsmaniac/auto-syntax-e.git") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "19033049e1b03da10345c2f5974c06f79a31fc4d") (source . "https://github.com/jsmaniac/auto-syntax-e.git") (source_url . "https://github.com/jsmaniac/auto-syntax-e.git"))))))) ("binary-class-exif" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/binary-class-exif.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/binary-class-exif.txt"))) (checksum . "8d475c4dd72de90decedeb3fc0acd53d9cf6f60d") (checksum-error . #f) (conflicts . ()) (dependencies . ("binary-class" "base")) (description . "Class for reading and writing Exif in JPEG or TIFF") (implies . ()) (last-checked . 1522414311) (last-edit . 1404281488) (last-updated . 1502812282) (modules . ((lib "binary-class/exif.rkt"))) (name . "binary-class-exif") (nix-sha256 . "13r62npg6j82zzdc6zs45a9hfmnirnjkmv26qvqfzjkij17gzcfp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:kalimehtar@mail.ru . #t) (io . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "git://github.com/Kalimehtar/binary-class-exif") (tags . ("io" "parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "8d475c4dd72de90decedeb3fc0acd53d9cf6f60d") (source . "git://github.com/Kalimehtar/binary-class-exif") (source_url . "http://github.com/Kalimehtar/binary-class-exif/tree/master"))))))) ("csp" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/csp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/csp.txt"))) (checksum . "48f4f3cca9d2616a83cfb9439efb7eb25572d8c2") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.0") "sugar" "rackunit-lib")) (description . "solve constraint-satisfaction problems") (implies . ()) (last-checked . 1522414370) (last-edit . 1414430290) (last-updated . 1502815872) (modules . ((lib "csp/constraint.rkt") (lib "csp/test-einstein.rkt") (lib "csp/problem.rkt") (lib "csp/domain.rkt") (lib "csp/test-problems.rkt") (lib "csp/solver.rkt") (lib "csp/main.rkt") (lib "csp/variable.rkt") (lib "csp/helper.rkt") (lib "csp/test-classes.rkt"))) (name . "csp") (nix-sha256 . "0xw9p7chqp6pk5gwx4fcxsc7xhy2a9j5z5sf46s6637ds6im1rlq") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mb@mbtype.com . #t) (ring:1 . #t))) (source . "git://github.com/mbutterick/csp") (tags . ()) (versions . #hash((default . #hasheq((checksum . "48f4f3cca9d2616a83cfb9439efb7eb25572d8c2") (source . "git://github.com/mbutterick/csp") (source_url . "http://github.com/mbutterick/csp/tree/master"))))))) ("aws-cloudformation-template" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/aws-cloudformation-template.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "00f52274a5bfc03f23c9dd511db0c87e35cf80e5") (checksum-error . #f) (conflicts . ()) (dependencies . ("aws-cloudformation-template-doc" "aws-cloudformation-template-lib")) (description . "statically typed DSL for writing AWS CloudFormation templates") (implies . ("aws-cloudformation-template-doc" "aws-cloudformation-template-lib")) (last-checked . 1522414288) (last-edit . 1485193291) (last-updated . 1502812276) (modules . ()) (name . "aws-cloudformation-template") (nix-sha256 . "0ndzv098xfx10a9dc1mp10kqwlhfngxj2i44nyrs0y4myz14wh0v") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/aws-cloudformation-template?path=aws-cloudformation-template") (tags . ()) (versions . #hash((default . #hasheq((checksum . "00f52274a5bfc03f23c9dd511db0c87e35cf80e5") (source . "git://github.com/lexi-lambda/aws-cloudformation-template?path=aws-cloudformation-template") (source_url . "http://github.com/lexi-lambda/aws-cloudformation-template/tree/master?path=aws-cloudformation-template"))))))) ("java" . #hasheq((author . "clements@racket-lang.org dherman@mozilla.com") (authors . ("clements@racket-lang.org" "dherman@mozilla.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "java" "doc/java@java/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/java.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/java.txt"))) (checksum . "c2d1359b05567fb9352178cedeba2dfc30ddc9ca") (checksum-error . #f) (conflicts . ()) (dependencies . ("dherman-struct" "io" "base" "compatibility-lib" "parser-tools-lib" "srfi-lite-lib" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "A port of David Herman's java.plt PLaneT package, without the PLaneT dependencies.") (implies . ()) (last-checked . 1522414421) (last-edit . 1394568871) (last-updated . 1502816142) (modules . ((lib "java/path-params.rkt") (lib "java/syntax/ast.rkt") (lib "java/contract-utils.rkt") (lib "java/syntax/lexer.rkt") (lib "java/semantics/semantic-object.rkt") (lib "java/main.rkt") (lib "java/inspector/inspector.rkt") (lib "java/syntax/parser.rkt") (lib "java/tools/javap.rkt") (lib "java/tests/tests.rkt") (lib "java/semantics/resolve-binary.rkt") (lib "java/semantics/standard-resolver.rkt") (lib "java/semantics/utils.rkt") (lib "java/syntax/class-file.rkt") (lib "java/semantics/resolve-source.rkt") (lib "java/semantics/class-resolver.rkt") (lib "java/java.scrbl"))) (name . "java") (nix-sha256 . "0vldbmhzc3zjv6gbhbcqdrllan21dp59vjz1hk5xq85dgy0d9f67") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (author:dherman@mozilla.com . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "git://github.com/jbclements/java") (tags . ("parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "c2d1359b05567fb9352178cedeba2dfc30ddc9ca") (source . "git://github.com/jbclements/java") (source_url . "http://github.com/jbclements/java/tree/master"))))))) ("sfont" . #hasheq((author . "capo.daniele@gmail.com") (authors . ("capo.daniele@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sfont" "doc/sfont@sfont/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sfont.txt") (test-failure-log . "server/built/test-fail/sfont.txt") (test-success-log . #f))) (checksum . "18b842c24164b4cda04cd042e2a9ce608445a14d") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "draw-lib" "gui-lib" "slideshow-lib" "pict-doc" "racket-doc" "scribble-lib")) (description . "A package for manipulating and creating fonts in Racket.") (implies . ()) (last-checked . 1522414678) (last-edit . 1384683843) (last-updated . 1502816426) (modules . ((lib "sfont/scribblings/sfont.scrbl") (lib "sfont/navigator.rkt") (lib "sfont/space.rkt") (lib "sfont/utilities.rkt") (lib "sfont-examples/fontwrite-random.rkt") (lib "sfont/export/writepfa.rkt") (lib "sfont/private/geom/bounding-box.rkt") (lib "sfont/private/fontmath/info-kern-math.rkt") (lib "sfont/main.rkt") (lib "sfont/private/geom/vec.rkt") (lib "sfont/private/ufo/ufo-def.rkt") (lib "sfont/private/gui/simple-frames.rkt") (lib "sfont/export/ufopfa.rkt") (lib "sfont/private/fontpict.rkt") (lib "sfont/private/fontmath/math.rkt") (lib "sfont/private/ufo/plists.rkt") (lib "sfont/private/geom/geometric-generic.rkt") (lib "sfont/private/geom/bezier.rkt") (lib "sfont/private/ufo/names.rkt") (lib "sfont-examples/fontwrite-contours.rkt") (lib "sfont-examples/fontwrite-gradient.rkt") (lib "sfont-examples/fontwrite-chart.rkt") (lib "sfont/private/parametric/path.rkt") (lib "sfont/private/gui/draw-property.rkt") (lib "sfont/private/spacing/space.rkt") (lib "sfont-examples/fontwrite-equalizer.rkt") (lib "sfont/geometry.rkt") (lib "sfont/glyphlist.rkt") (lib "sfont/private/fontmath/interpolables.rkt") (lib "sfont/windows.rkt") (lib "sfont/parametric.rkt") (lib "sfont/math.rkt") (lib "sfont/private/parametric/fontwriter.rkt") (lib "sfont/properties.rkt") (lib "sfont/export/type1.rkt") (lib "sfont/private/ufo/ufo-read-write.rkt") (lib "sfont/private/spacing/kern.rkt") (lib "sfont-examples/fontwrite-square.rkt"))) (name . "sfont") (nix-sha256 . "19hscm196dv0aqgmcxxqgfr1p583a1qa3zsq62rd6fk9177jzvq6") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:capo.daniele@gmail.com . #t) (fonts . #t) (graphics . #t) (ring:1 . #t))) (source . "github://github.com/danielecapo/sfont/master") (tags . ("fonts" "graphics")) (versions . #hash((default . #hasheq((checksum . "18b842c24164b4cda04cd042e2a9ce608445a14d") (source . "github://github.com/danielecapo/sfont/master") (source_url . "http://github.com/danielecapo/sfont/tree/master"))))))) ("spvector" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "spvector" "doc/spvector@spvector/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/spvector.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/spvector.txt"))) (checksum . "aba0ba4f4d8df27dc17252b984eca2f76f4ae414") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "eli-tester" "racket-doc" "scribble-lib")) (description . "Semi-persistent vectors that provide O(1) performance for linear use, but O(n) performance for non-linear accesses") (implies . ()) (last-checked . 1522414681) (last-edit . 1354037662) (last-updated . 1502816445) (modules . ((lib "data/spvector/spvector.scrbl") (lib "tests/data/spvector.rkt") (lib "data/spvector.rkt"))) (name . "spvector") (nix-sha256 . "1znrwa38m9g5j97siv794br3abm4wh0gljjxp98p7lwsj0vsqwq2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (data . #t) (ring:1 . #t))) (source . "github://github.com/jeapostrophe/spvector/master") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "aba0ba4f4d8df27dc17252b984eca2f76f4ae414") (source . "github://github.com/jeapostrophe/spvector/master") (source_url . "http://github.com/jeapostrophe/spvector/tree/master"))))))) ("plai-doc" . #hash((author . "jay@racket-lang.org") (checksum . "53572f6435c1ec46cf364476d2cea9d09460e7b3") (dependencies . ("scheme-lib" "srfi-lite-lib" "base" "gui-lib" "sandbox-lib" "web-server-lib" "plai-lib" "at-exp-lib" "eli-tester" "pconvert-lib" "rackunit-lib" "racket-doc" "web-server-doc" "scribble-lib" "drracket-tool-lib")) (description . "jay@racket-lang.org") (modules . ()) (name . "plai-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/plai-doc.zip") (tags . ()))) ("scripty-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scripty-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scripty-lib.txt"))) (checksum . "09a0e2fd24dfcd5942177d4a328821534ee60ded") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1522414677) (last-edit . 1476917222) (last-updated . 1502816422) (modules . ((lib "scripty/main.rkt"))) (name . "scripty-lib") (nix-sha256 . "0ib233dr7vlm6vwkxzb24vpgj5f9my894dd2ja0ry5ykl75cvzia") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t) (scripting . #t))) (source . "git://github.com/lexi-lambda/scripty.git?path=scripty-lib") (tags . ("scripting")) (versions . #hash((default . #hasheq((checksum . "09a0e2fd24dfcd5942177d4a328821534ee60ded") (source . "git://github.com/lexi-lambda/scripty.git?path=scripty-lib") (source_url . "http://github.com/lexi-lambda/scripty.git/tree/master?path=scripty-lib"))))))) ("automata-lib" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/automata-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/automata-lib.txt"))) (checksum . "a82d4d3c94f55c6560ec14f76300811658ed05a6") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.2.900.6"))) (description . "a library for defining efficient automata using match patterns") (implies . ()) (last-checked . 1522414288) (last-edit . 1504535500) (last-updated . 1502812274) (modules . ((lib "automata/nfa-star.rkt") (lib "automata/machine.rkt") (lib "automata/dfa.rkt") (lib "automata/nfa.rkt") (lib "automata/re-ext.rkt") (lib "automata/re.rkt") (lib "automata/re-help.rkt") (lib "automata/re-compile.rkt") (lib "automata/nfa-ep.rkt"))) (name . "automata-lib") (nix-sha256 . "06gwyy6zyz3p3rcq6vl893pg0ksz2pyn6a1la67d5an3hmkikj04") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (automata . #t) (match . #t) (regex . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/automata?path=automata-lib") (tags . ("automata" "match" "regex")) (versions . #hash((default . #hasheq((checksum . "a82d4d3c94f55c6560ec14f76300811658ed05a6") (source . "git://github.com/jeapostrophe/automata?path=automata-lib") (source_url . "http://github.com/jeapostrophe/automata/tree/master?path=automata-lib"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("racketscript-extras" . #hasheq((author . "vishesh3y@gmail.com") (authors . ("vishesh3y@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racketscript-extras.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racketscript-extras.txt"))) (checksum . "bf2fac484b1066475730d92479470f6a29287a0e") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" ("racket" "6.4") "racketscript-compiler" "rackunit-lib")) (description . "Goodies for RacketScript") (implies . ()) (last-checked . 1522414662) (last-edit . 1481617675) (last-updated . 1507573838) (modules . ((lib "racketscript/private/jscommon.rkt") (lib "racketscript/htdp/image.rkt") (lib "racketscript/htdp/universe.rkt") (lib "racketscript/htdp/private/color.rkt"))) (name . "racketscript-extras") (nix-sha256 . "0x0rfpzva49lrqh3ji65w0iv0qn5b443md05pwn4cx3x0vgawmhy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:vishesh3y@gmail.com . #t) (big-bang . #t) (javascript . #t) (ring:1 . #t) (web . #t))) (source . "git://github.com/vishesh/racketscript?path=racketscript-extras") (tags . ("big-bang" "javascript" "web")) (versions . #hash((default . #hasheq((checksum . "bf2fac484b1066475730d92479470f6a29287a0e") (source . "git://github.com/vishesh/racketscript?path=racketscript-extras") (source_url . "http://github.com/vishesh/racketscript/tree/master?path=racketscript-extras"))))))) ("cext-lib" . #hash((author . "mflatt@racket-lang.org") (checksum . "55d25f6eef9800d10066418a6dc49dc97c05aa3d") (dependencies . ("base" "compiler-lib" "dynext-lib" "scheme-lib")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "cext-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/cext-lib.zip") (tags . ()))) ("gnal-lang" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/gnal-lang.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gnal-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gnal-lang.txt"))) (checksum . "9ce8615c21ae6e9768d2e5c88609466492a4ac80") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "a #lang that allows relative module paths for reader languages") (implies . ()) (last-checked . 1522414405) (last-edit . 1469581130) (last-updated . 1502816084) (modules . ((lib "gnal/tests/case-insensitive.rkt") (lib "gnal/tests/test-turtle-rel.rkt") (lib "gnal/lang/reader.rkt") (lib "gnal/tests/test-turtle.rkt") (lib "gnal/tests/test-case-insensitive.rkt") (lib "gnal/tests/test-fish.rkt") (lib "gnal/tests/test-fish-rel.rkt"))) (name . "gnal-lang") (nix-sha256 . "1i5w5r29v3xw9y58kv97k90wixzw2zlzbb9p20h8krg735vgw7yd") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:alexander@knauth.org . #t) (lang . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/gnal-lang") (tags . ("lang")) (versions . #hash((default . #hasheq((checksum . "9ce8615c21ae6e9768d2e5c88609466492a4ac80") (source . "git://github.com/AlexKnauth/gnal-lang") (source_url . "http://github.com/AlexKnauth/gnal-lang/tree/master"))))))) ("lux-charterm" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "lux-charterm" "doc/lux-charterm@lux-charterm/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lux-charterm.txt") (test-failure-log . "server/built/test-fail/lux-charterm.txt") (test-success-log . #f))) (checksum . "8d3d7c39c4cf2160f3912fea34996fe0177c78d7") (checksum-error . #f) (conflicts . ()) (dependencies . ("lux" "base" "racket-doc" "scribble-lib")) (description . "a lux chaos for terminal programs") (implies . ()) (last-checked . 1522414425) (last-edit . 1416789148) (last-updated . 1512418034) (modules . ((lib "charterm-fork/charterm.rkt") (lib "charterm-fork/test-charterm.rkt") (lib "charterm-fork/main.rkt") (lib "lux/chaos/charterm.rkt") (lib "lux/chaos/lux-charterm.scrbl") (lib "lux/examples/charterm.rkt"))) (name . "lux-charterm") (nix-sha256 . "0zpdcpb16lb48phyznxavnk2mscxxn39h83gm219fkzgr793w4lm") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (ring:1 . #t) (terminal . #t))) (source . "git://github.com/jeapostrophe/lux-charterm") (tags . ("terminal")) (versions . #hash((default . #hasheq((checksum . "8d3d7c39c4cf2160f3912fea34996fe0177c78d7") (source . "git://github.com/jeapostrophe/lux-charterm") (source_url . "http://github.com/jeapostrophe/lux-charterm/tree/master"))))))) ("tzdata" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tzdata.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tzdata.txt"))) (checksum . "a5c5dce744daf0429f2d3f38b99963398f672a17") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "zoneinfo data mainly for Windows systems using tzinfo") (implies . ()) (last-checked . 1522414696) (last-edit . 1426995763) (last-updated . 1502816508) (modules . ()) (name . "tzdata") (nix-sha256 . "0g2r6gjxv9mn5l7n4r5xfyj8gv0ryi2cj6ayb3wn7brp7kff7ws1") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:zeppieri@gmail.com . #t) (ring:1 . #t) (timezone . #t))) (source . "git://github.com/97jaz/tzdata") (tags . ("timezone")) (versions . #hash((default . #hasheq((checksum . "a5c5dce744daf0429f2d3f38b99963398f672a17") (source . "git://github.com/97jaz/tzdata") (source_url . "http://github.com/97jaz/tzdata/tree/master"))))))) ("bzip2" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "bzip2" "doc/bzip2@bzip2/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bzip2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bzip2.txt"))) (checksum . "7ceadc95e6221fd9a46f2b009cfc302117fe7f02") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "bzip2 compression and decompression") (implies . ()) (last-checked . 1522414312) (last-edit . 1456032954) (last-updated . 1502812285) (modules . ((lib "file/bzip2/private/structs.rkt") (lib "file/bzip2.rkt") (lib "file/bzip2/private/compress.rkt") (lib "file/bzip2/private/crc.rkt") (lib "file/bzip2/private/util.rkt") (lib "file/bzip2/private/io.rkt") (lib "file/scribblings/bzip2.scrbl") (lib "file/bzip2/private/huffman.rkt") (lib "file/bzip2/private/decompress.rkt") (lib "file/bzip2/private/sort.rkt"))) (name . "bzip2") (nix-sha256 . "15xm4ws53702gbpsrb6133l9991hzpzycwgzksbm4197kbfngjhs") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:zeppieri@gmail.com . #t) (bzip2 . #t) (compression . #t) (decompression . #t) (ring:1 . #t))) (source . "git://github.com/97jaz/racket-bzip2") (tags . ("bzip2" "compression" "decompression")) (versions . #hash((default . #hasheq((checksum . "7ceadc95e6221fd9a46f2b009cfc302117fe7f02") (source . "git://github.com/97jaz/racket-bzip2") (source_url . "http://github.com/97jaz/racket-bzip2/tree/master"))))))) ("srfi-lib" . #hash((author . "mflatt@racket-lang.org noel@racket-lang.org chongkai@racket-lang.org jay@racket-lang.org") (checksum . "573b4d717d42ecdf9a60ddf0502dfcce80414f42") (dependencies . ("scheme-lib" "base" "srfi-lite-lib" "r6rs-lib" "compatibility-lib")) (description . "mflatt@racket-lang.org noel@racket-lang.org chongkai@racket-lang.org jay@racket-lang.org") (modules . ()) (name . "srfi-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/srfi-lib.zip") (tags . ()))) ("unstable-debug-lib" . #hash((author . "samth@racket-lang.org") (authors . ("samth@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-debug-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-debug-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.2.900.15"))) (description . "Experimental libraries for debugging") (implies . ()) (last-checked . 1522414697) (last-edit . 1445382797) (last-updated . 1502816513) (modules . ((lib "unstable/debug.rkt"))) (name . "unstable-debug-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:samth@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("unstable")) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) (default . #hasheq((checksum . "f72727898e9a59429eeb419752f5c55926d1a6c4") (source . "git://github.com/racket/unstable-debug-lib") (source_url . "http://github.com/racket/unstable-debug-lib/tree/master"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("gui-doc" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (checksum . "6cb3b25490f0a1f1d912ad90baa39899d5328b81") (dependencies . ("base" "scheme-lib" "syntax-color-doc" "at-exp-lib" "draw-doc" "draw-lib" "scribble-lib" "snip-lib" "string-constants-lib" "syntax-color-lib" "wxme-lib" "gui-lib" "pict-lib" "racket-doc" "string-constants-doc" "xrepl-doc")) (description . "mflatt@racket-lang.org robby@racket-lang.org") (modules . ()) (name . "gui-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/gui-doc.zip") (tags . ()))) ("esc-vp21" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "esc-vp21" "doc/esc-vp21@esc-vp21/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/esc-vp21.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/esc-vp21.txt"))) (checksum . "01bc89268f4f051d55885f64d4a0fac671a762b9") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "typed-racket-lib" "mordae" "racket-doc" "typed-racket-doc" "typed-racket-lib")) (description . "Epson ESC/VP21 Projector Control") (implies . ()) (last-checked . 1522414399) (last-edit . 1440345277) (last-updated . 1502815956) (modules . ((lib "esc/vp-net.rkt") (lib "esc/vp21.rkt") (lib "esc/esc-vp21.scrbl"))) (name . "esc-vp21") (nix-sha256 . "062rlx7qhzgsb12jc5pkgc6rjr31h0warwplk5pr5pl7c0s3xkd3") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t))) (source . "git://github.com/mordae/racket-esc-vp21") (tags . ()) (versions . #hash((default . #hasheq((checksum . "01bc89268f4f051d55885f64d4a0fac671a762b9") (source . "git://github.com/mordae/racket-esc-vp21") (source_url . "http://github.com/mordae/racket-esc-vp21/tree/master"))))))) ("css-tools" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "css-tools" "doc/css-tools@css-tools/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/css-tools.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/css-tools.txt"))) (checksum . "fb4e781ac9821d54720990e4f2c5e4617dd7775f") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.0") "sugar" "scribble-lib" "rackunit-lib")) (description . "Tools for generating & manipulating CSS (unstable)") (implies . ()) (last-checked . 1522414371) (last-edit . 1420571131) (last-updated . 1514051995) (modules . ((lib "css-tools/named-colors.rkt") (lib "css-tools/core.rkt") (lib "css-tools/font-face.rkt") (lib "css-tools/typography.rkt") (lib "css-tools/misc.rkt") (lib "css-tools/html.rkt") (lib "css-tools/scribblings/css-tools.scrbl") (lib "css-tools/colors.rkt") (lib "css-tools/column.rkt") (lib "css-tools/main.rkt") (lib "css-tools/transition.rkt") (lib "css-tools/math.rkt"))) (name . "css-tools") (nix-sha256 . "1r3rvyll6f11xfa480i5gw90s5r4zcqpj430hvfq6hx1ba8nj4wq") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mb@mbtype.com . #t) (ring:1 . #t))) (source . "git://github.com/mbutterick/css-tools") (tags . ()) (versions . #hash((default . #hasheq((checksum . "fb4e781ac9821d54720990e4f2c5e4617dd7775f") (source . "git://github.com/mbutterick/css-tools") (source_url . "http://github.com/mbutterick/css-tools/tree/master"))))))) ("math-i386-macosx" . #hash((author . "mflatt@racket-lang.org") (checksum . "41afb26a717f43bcc44d2e1a20dbacc9b7129970") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "math-i386-macosx") (source . "https://download.racket-lang.org/releases/6.12/pkgs/math-i386-macosx.zip") (tags . ()))) ("drracket-test" . #hash((author . "robby@racket-lang.org") (checksum . "76d1aae4ad44df4820f070386d1e2a05aba7677e") (dependencies . ("base" "htdp" "drracket" "racket-index" "scheme-lib" "at-exp-lib" "rackunit-lib" "compatibility-lib" "gui-lib" "htdp" "compiler-lib" "cext-lib" "string-constants-lib")) (description . "robby@racket-lang.org") (modules . ()) (name . "drracket-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/drracket-test.zip") (tags . ()))) ("unstable-contract-lib" . #hash((author . "robby@racket-lang.org ryanc@racket-lang.org") (authors . ("robby@racket-lang.org" "ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-contract-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-contract-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "Experimental libraries for working with contracts") (implies . ()) (last-checked . 1522414697) (last-edit . 1445382797) (last-updated . 1502816512) (modules . ((lib "unstable/contract.rkt"))) (name . "unstable-contract-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:robby@racket-lang.org . #t) (author:ryanc@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("unstable")) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) (default . #hasheq((checksum . "36f4e320c574cef6630ec34ac73f69a2911b86b0") (source . "git://github.com/racket/unstable-contract-lib") (source_url . "http://github.com/racket/unstable-contract-lib/tree/master"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("automata" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/automata.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/automata.txt"))) (checksum . "a82d4d3c94f55c6560ec14f76300811658ed05a6") (checksum-error . #f) (conflicts . ()) (dependencies . ("automata-lib" "automata-doc")) (description . "a library for defining efficient automata using match patterns") (implies . ("automata-lib" "automata-doc")) (last-checked . 1522414287) (last-edit . 1438288079) (last-updated . 1502812274) (modules . ()) (name . "automata") (nix-sha256 . "06gwyy6zyz3p3rcq6vl893pg0ksz2pyn6a1la67d5an3hmkikj04") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (automata . #t) (match . #t) (regex . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/automata/?path=automata") (tags . ("automata" "match" "regex")) (versions . #hash((default . #hasheq((checksum . "a82d4d3c94f55c6560ec14f76300811658ed05a6") (source . "git://github.com/jeapostrophe/automata/?path=automata") (source_url . "git://github.com/jeapostrophe/automata/?path=automata"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("scribble-html-lib" . #hash((author . "mflatt@racket-lang.org eli@racket-lang.org") (checksum . "5416ad005d64366a5f85911d03155932a34edbaf") (dependencies . ("scheme-lib" "base" "at-exp-lib" "scribble-text-lib")) (description . "mflatt@racket-lang.org eli@racket-lang.org") (modules . ()) (name . "scribble-html-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/scribble-html-lib.zip") (tags . ()))) ("draw-x86_64-macosx" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for \"draw\" package") (implies . ()) (last-checked . 1522414391) (last-edit . 1452304685) (last-updated . 1502815928) (modules . ()) (name . "draw-x86_64-macosx") (ring . 0) (search-terms . #hasheq((:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ()) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) (default . #hasheq((checksum . "d47568a60e3e12793f2c49b322ad49c2a8ec8d26") (source . "https://pkg-sources.racket-lang.org/pkgs/d47568a60e3e12793f2c49b322ad49c2a8ec8d26/draw-x86_64-macosx.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/d47568a60e3e12793f2c49b322ad49c2a8ec8d26/draw-x86_64-macosx.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("html" . #hash((author . "jay@racket-lang.org mflatt@racket-lang.org") (checksum . "87576922d1edd1278962bb47802114d995149ea4") (dependencies . ("html-lib" "html-doc")) (description . "jay@racket-lang.org mflatt@racket-lang.org") (modules . ()) (name . "html") (source . "https://download.racket-lang.org/releases/6.12/pkgs/html.zip") (tags . ()))) ("distributed-places-doc" . #hash((author . "tewk@racket-lang.org") (checksum . "d50595d33c6dba95def8e40c4ea0ec9ae8734647") (dependencies . ("base" "distributed-places-lib" "racket-doc" "sandbox-lib" "scribble-lib")) (description . "tewk@racket-lang.org") (modules . ()) (name . "distributed-places-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/distributed-places-doc.zip") (tags . ()))) ("curly-fn-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "curly-fn" "doc/curly-fn@curly-fn-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/curly-fn-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/curly-fn-doc.txt"))) (checksum . "d64cd71d5b386be85f5979edae6f6b6469a4df86") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "curly-fn-lib" "namespaced-transformer-doc" "namespaced-transformer-lib" "racket-doc" "scribble-code-examples" "scribble-lib")) (description . "") (implies . ()) (last-checked . 1522414372) (last-edit . 1473377651) (last-updated . 1502815877) (modules . ((lib "scribblings/curly-fn.scrbl"))) (name . "curly-fn-doc") (nix-sha256 . "1llxaykp1sbbqnm89ay6lcswfwjn594xsx491hw70l9g83yyivl1") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-curly-fn?path=curly-fn-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "d64cd71d5b386be85f5979edae6f6b6469a4df86") (source . "git://github.com/lexi-lambda/racket-curly-fn?path=curly-fn-doc") (source_url . "http://github.com/lexi-lambda/racket-curly-fn/tree/master?path=curly-fn-doc"))))))) ("racr" . #hasheq((author . "eeide@cs.utah.edu") (authors . ("eeide@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "racr" "doc/racr@racr/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racr.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racr.txt"))) (checksum . "bee5a520ec663aa58673367a453c5d2a97e8d79c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "A Racket port of RACR, a library for reference attribute grammar controlled rewriting.") (implies . ()) (last-checked . 1522414664) (last-edit . 1497499354) (last-updated . 1502816379) (modules . ((lib "racr/main.rkt") (lib "racr/core.rkt") (lib "racr/testing.rkt") (lib "racr/scribblings/racr.scrbl"))) (name . "racr") (nix-sha256 . "0x23sz889rpn5cvy23pqd254q9si5l2m4vnj6l9i0mhvy236cq1n") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:eeide@cs.utah.edu . #t) (ring:1 . #t))) (source . "git://github.com/eeide/racr") (tags . ()) (versions . #hash((default . #hasheq((checksum . "bee5a520ec663aa58673367a453c5d2a97e8d79c") (source . "git://github.com/eeide/racr") (source_url . "http://github.com/eeide/racr/tree/master"))))))) ("riff" . #hasheq((author . "lehi@tosk.in") (authors . ("lehi@tosk.in")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (("extract" "manual" "doc/manual@riff/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/riff.txt") (test-failure-log . "server/built/test-fail/riff.txt") (test-success-log . #f))) (checksum . "459efecc4168cf922660f95b6195935d66cb6a2b") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "riff is a racket wrapper for FLIF") (implies . ()) (last-checked . 1522414671) (last-edit . 1486938836) (last-updated . 1502816402) (modules . ((lib "riff/main.rkt") (lib "riff/doc/manual.scrbl") (lib "riff/dec.rkt") (lib "riff/flif.rkt") (lib "riff/doc/flif.scrbl") (lib "riff/doc/enc.scrbl") (lib "riff/doc/dec.scrbl") (lib "riff/enc.rkt"))) (name . "riff") (nix-sha256 . "0il8m7ap5hmavzkp2l56kjdwnns0ligzk5i675xpzk24k9vf6b9z") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:docs-error: . #t) (:docs: . #t) (author:lehi@tosk.in . #t) (compression . #t) (decompression . #t) (ffi . #t) (flif . #t) (images . #t) (ring:1 . #t) (wrapper . #t))) (source . "git://github.com/lehitoskin/riff") (tags . ("compression" "decompression" "ffi" "flif" "images" "wrapper")) (versions . #hash((default . #hasheq((checksum . "459efecc4168cf922660f95b6195935d66cb6a2b") (source . "git://github.com/lehitoskin/riff") (source_url . "http://github.com/lehitoskin/riff/tree/master"))))))) ("minikanren" . #hasheq((author . "asumu@ccs.neu.edu jhemann@umail.iu.edu") (authors . ("asumu@ccs.neu.edu" "jhemann@umail.iu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "minikanren" "doc/minikanren@minikanren/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/minikanren.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/minikanren.txt"))) (checksum . "659404d009e9cec9695805f4d4465447796a663a") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "A Planet 2 package for minikanren") (implies . ()) (last-checked . 1522414435) (last-edit . 1358887007) (last-updated . 1502816180) (modules . ((lib "minikanren/main.rkt") (lib "minikanren/minikanren.scrbl") (lib "minikanren/minikanren.rkt"))) (name . "minikanren") (nix-sha256 . "1bjv0adc9clfw97r3rpav5jmfjlbjj13nv4psfrvsl7inhw5pdf0") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (author:jhemann@umail.iu.edu . #t) (logic . #t) (ring:1 . #t))) (source . "github://github.com/takikawa/minikanren/master") (tags . ("logic")) (versions . #hash((default . #hasheq((checksum . "659404d009e9cec9695805f4d4465447796a663a") (source . "github://github.com/takikawa/minikanren/master") (source_url . "http://github.com/takikawa/minikanren/tree/master"))))))) ("br-parser-tools-doc" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "br-parser-tools" "doc/br-parser-tools@br-parser-tools-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/br-parser-tools-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/br-parser-tools-doc.txt"))) (checksum . "747c760eb56eaddd9c5aca1ab2a93bd1da4b5713") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scheme-lib" "racket-doc" "syntax-color-doc" "br-parser-tools-lib" "scribble-lib")) (description . "") (implies . ()) (last-checked . 1522414311) (last-edit . 1487700442) (last-updated . 1521839802) (modules . ((lib "br-parser-tools/br-parser-tools.scrbl"))) (name . "br-parser-tools-doc") (nix-sha256 . "05mh65bmx86181jlf376nnz85xs20si3nrapn71hh4v370iwrgi7") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:mb@mbtype.com . #t) (ring:1 . #t))) (source . "git://github.com/mbutterick/brag/?path=br-parser-tools/br-parser-tools-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "747c760eb56eaddd9c5aca1ab2a93bd1da4b5713") (source . "git://github.com/mbutterick/brag/?path=br-parser-tools/br-parser-tools-doc") (source_url . "git://github.com/mbutterick/brag/?path=br-parser-tools/br-parser-tools-doc"))))))) ("uri-old" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "uri-old" "doc/uri-old@uri-old/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/uri-old.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/uri-old.txt"))) (checksum . "27851ba27c8bf7770d2c308d403a85d179bc62b1") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "overeasy" "racket-doc" "scribble-lib")) (description . "Web URI and URL") (implies . ()) (last-checked . 1522414699) (last-edit . 1457323021) (last-updated . 1502816516) (modules . ((lib "uri-old/main.rkt") (lib "uri-old/uri-old.scrbl"))) (name . "uri-old") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (ring:1 . #t) (web . #t))) (source . "http://www.neilvandyke.org/racket/uri-old.zip") (tags . ("web")) (versions . #hash((default . #hasheq((checksum . "27851ba27c8bf7770d2c308d403a85d179bc62b1") (source . "http://www.neilvandyke.org/racket/uri-old.zip") (source_url . "http://www.neilvandyke.org/racket/uri-old.zip"))))))) ("soundex" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "soundex" "doc/soundex@soundex/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/soundex.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/soundex.txt"))) (checksum . "b870344d2cae67642346fa919f46aded96624703") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "overeasy")) (description . "Soundex Index Keying") (implies . ()) (last-checked . 1522414680) (last-edit . 1456465125) (last-updated . 1502816442) (modules . ((lib "soundex/soundex.scrbl") (lib "soundex/main.rkt"))) (name . "soundex") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (ring:1 . #t) (soundex . #t))) (source . "http://www.neilvandyke.org/racket/soundex.zip") (tags . ("soundex")) (versions . #hash((default . #hasheq((checksum . "b870344d2cae67642346fa919f46aded96624703") (source . "http://www.neilvandyke.org/racket/soundex.zip") (source_url . "http://www.neilvandyke.org/racket/soundex.zip"))))))) ("postfix-dot-notation" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "postfix-dot-notation" "doc/postfix-dot-notation@postfix-dot-notation/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/postfix-dot-notation.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/postfix-dot-notation.txt"))) (checksum . "584ed69de73775e261ecdb7607fc14d9790500ef") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "sweet-exp" "hygienic-reader-extension" "rackunit-lib" "scribble-lib" "racket-doc" "scribble-doc")) (description . "a lang-extension for postfix dot notation") (implies . ()) (last-checked . 1522414535) (last-edit . 1466340964) (last-updated . 1502816324) (modules . ((lib "postfix-dot-notation/main.rkt") (lib "postfix-dot-notation/lang/language-info.rkt") (lib "postfix-dot-notation/docs/postfix-dot-notation.scrbl") (lib "postfix-dot-notation/lang/runtime-config.rkt") (lib "postfix-dot-notation/minsec.rkt") (lib "postfix-dot-notation/tests/test-lang.rkt") (lib "postfix-dot-notation/reader.rkt") (lib "postfix-dot-notation/lang/reader.rkt") (lib "postfix-dot-notation/top-utils.rkt"))) (name . "postfix-dot-notation") (nix-sha256 . "00klrvih15mnhcnpwjs99jg6i672f4bgisx0jypi8qc2anwd415s") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (lang-extension . #t) (ring:1 . #t) (syntax . #t))) (source . "git://github.com/AlexKnauth/postfix-dot-notation") (tags . ("lang-extension" "syntax")) (versions . #hash((default . #hasheq((checksum . "584ed69de73775e261ecdb7607fc14d9790500ef") (source . "git://github.com/AlexKnauth/postfix-dot-notation") (source_url . "http://github.com/AlexKnauth/postfix-dot-notation/tree/master"))))))) ("ds-store-doc" . #hash((author . "mflatt@racket-lang.org") (checksum . "c61ead19419ca262c7ec91e8d35594799dbf441d") (dependencies . ("base" "scribble-lib" "racket-doc" "ds-store-lib")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "ds-store-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/ds-store-doc.zip") (tags . ()))) ("string-constants-lib" . #hash((author . "robby@racket-lang.org") (checksum . "73af8313c79078c64bd69c79ae565695b8b03c49") (dependencies . ("base")) (description . "robby@racket-lang.org") (modules . ()) (name . "string-constants-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/string-constants-lib.zip") (tags . ()))) ("aws-cloudformation-template-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/aws-cloudformation-template-lib.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "00f52274a5bfc03f23c9dd511db0c87e35cf80e5") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "curly-fn-lib" "syntax-classes-lib" "threading-lib" "turnstile")) (description . "implementation (no documentation) for “aws-cloudformation-template”") (implies . ()) (last-checked . 1522414288) (last-edit . 1485193257) (last-updated . 1502812276) (modules . ((lib "aws/cloudformation/template.rkt") (lib "aws/cloudformation/template/resources.rkt") (lib "aws/cloudformation/template/base.rkt"))) (name . "aws-cloudformation-template-lib") (nix-sha256 . "0ndzv098xfx10a9dc1mp10kqwlhfngxj2i44nyrs0y4myz14wh0v") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/aws-cloudformation-template?path=aws-cloudformation-template-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "00f52274a5bfc03f23c9dd511db0c87e35cf80e5") (source . "git://github.com/lexi-lambda/aws-cloudformation-template?path=aws-cloudformation-template-lib") (source_url . "http://github.com/lexi-lambda/aws-cloudformation-template/tree/master?path=aws-cloudformation-template-lib"))))))) ("preprocessor" . #hash((author . "eli@racket-lang.org") (checksum . "0e46ea639603060447229afefcbdbd82e3e78461") (dependencies . ("scheme-lib" "base" "compatibility-lib" "racket-doc" "scribble-lib")) (description . "eli@racket-lang.org") (modules . ()) (name . "preprocessor") (source . "https://download.racket-lang.org/releases/6.12/pkgs/preprocessor.zip") (tags . ()))) ("racket-win32-x86_64-2" . #hash((author . "mflatt@racket-lang.org") (checksum . "0cdbb54b070ae381042e2c260cadcc4e7c0f0f5a") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "racket-win32-x86_64-2") (source . "https://download.racket-lang.org/releases/6.12/pkgs/racket-win32-x86_64-2.zip") (tags . ()))) ("slideshow-latex" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "slideshow-latex" "doc/slideshow-latex@slideshow-latex/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/slideshow-latex.txt") (test-failure-log . "server/built/test-fail/slideshow-latex.txt") (test-success-log . #f))) (checksum . "73aab49b3a14ea06afbfeb2e5ebd32f148c0196c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "draw-lib" "gui-lib" "slideshow-lib" "racket-doc" "scribble-lib" "slideshow-doc" "planet-doc")) (description . "Slideshow extensions to embed LaTeX and math, as well as other goodies") (implies . ()) (last-checked . 1522414679) (last-edit . 1354547872) (last-updated . 1502816433) (modules . ((lib "slideshow/latex/latex2bitmap.rkt") (lib "slideshow/latex/slideshow-latex.scrbl") (lib "slideshow/extras.rkt") (lib "tests/slideshow/latex/example.rkt") (lib "slideshow/latex.rkt"))) (name . "slideshow-latex") (nix-sha256 . "1mp45w7i0ajgm5iv5ayr0jyicsw4r7y4gqz3q39909gll7frgwfc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (ring:1 . #t) (slideshow . #t))) (source . "github://github.com/jeapostrophe/slideshow-latex/master") (tags . ("slideshow")) (versions . #hash((default . #hasheq((checksum . "73aab49b3a14ea06afbfeb2e5ebd32f148c0196c") (source . "github://github.com/jeapostrophe/slideshow-latex/master") (source_url . "http://github.com/jeapostrophe/slideshow-latex/tree/master"))))))) ("multimethod-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/multimethod-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/multimethod-lib.txt"))) (checksum . "8a0903ebaedd919971c382eeb785f05080c7a8d6") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.3") "rackunit-lib" "rackunit-spec")) (description . "") (implies . ()) (last-checked . 1522414437) (last-edit . 1460256973) (last-updated . 1502816188) (modules . ((lib "multimethod/multimethod.rkt") (lib "multimethod/privilege.rkt") (lib "multimethod/main.rkt"))) (name . "multimethod-lib") (nix-sha256 . "0jbmvs6q14f58hfi9qvz8g4ndq13ybyy80y375w7455s7y3w3af0") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-multimethod?path=multimethod-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8a0903ebaedd919971c382eeb785f05080c7a8d6") (source . "git://github.com/lexi-lambda/racket-multimethod?path=multimethod-lib") (source_url . "http://github.com/lexi-lambda/racket-multimethod/tree/master?path=multimethod-lib"))))))) ("lang-slide" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "lang-slide" "doc/lang-slide@lang-slide/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lang-slide.txt") (test-failure-log . "server/built/test-fail/lang-slide.txt") (test-success-log . #f))) (checksum . "ce654efbbd5615c4fbec66339564fb3ca7ac4c71") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "draw-lib" "gui-lib" "scheme-lib" "slideshow-lib" "unstable-lib" "scribble-lib" "racket-doc" "pict-doc")) (description . "A picture showing all the languages used to implement Racket.") (implies . ()) (last-checked . 1522414422) (last-edit . 1352762812) (last-updated . 1502816147) (modules . ((lib "lang-slide/scribblings/lang-slide.scrbl") (lib "lang-slide/hudak-quote.rkt") (lib "lang-slide/mk-img.rkt") (lib "lang-slide/find.rkt") (lib "lang-slide/pictures.rkt") (lib "lang-slide/main.rkt") (lib "lang-slide/orig-colors.rkt") (lib "lang-slide/draw-plain.rkt"))) (name . "lang-slide") (nix-sha256 . "1slm4z52rh6gymvqqbhhsr1kjykawgbb282ks4fki6m47wdmd366") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:samth@ccs.neu.edu . #t) (language . #t) (ring:1 . #t) (slideshow . #t))) (source . "github://github.com/samth/lang-slide/master") (tags . ("language" "slideshow")) (versions . #hash((default . #hasheq((checksum . "ce654efbbd5615c4fbec66339564fb3ca7ac4c71") (source . "github://github.com/samth/lang-slide/master") (source_url . "http://github.com/samth/lang-slide/tree/master"))))))) ("csv-reading" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "csv-reading" "doc/csv-reading@csv-reading/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/csv-reading.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/csv-reading.txt"))) (checksum . "217c1ee293ee246cba52fc91f2e897492d0b5101") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "overeasy")) (description . "Comma-Separated Value (CSV) Parsing") (implies . ()) (last-checked . 1522414371) (last-edit . 1456463140) (last-updated . 1502815875) (modules . ((lib "csv-reading/main.rkt") (lib "csv-reading/csv-reading.scrbl"))) (name . "csv-reading") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (csv . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/csv-reading.zip") (tags . ("csv")) (versions . #hash((default . #hasheq((checksum . "217c1ee293ee246cba52fc91f2e897492d0b5101") (source . "http://www.neilvandyke.org/racket/csv-reading.zip") (source_url . "http://www.neilvandyke.org/racket/csv-reading.zip"))))))) ("text-table" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "text-table" "doc/text-table@text-table/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/text-table.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/text-table.txt"))) (checksum . "a8648fdca9d93a69a6701238dc69d3240692309b") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A simple package to display text tables with utf-8 frames.") (implies . ()) (last-checked . 1522414691) (last-edit . 1506204348) (last-updated . 1507829468) (modules . ((lib "text-table/scribblings/text-table.scrbl") (lib "text-table/main.rkt"))) (name . "text-table") (nix-sha256 . "1aclpma2cdznby5pvdjgjhg9523dap6p61313na46fbq05anrn3r") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:laurent.orseau@gmail.com . #t) (format . #t) (ring:1 . #t) (tabular . #t) (text . #t))) (source . "git://github.com/Metaxal/text-table") (tags . ("format" "tabular" "text")) (versions . #hash((default . #hasheq((checksum . "a8648fdca9d93a69a6701238dc69d3240692309b") (source . "git://github.com/Metaxal/text-table") (source_url . "http://github.com/Metaxal/text-table/tree/master"))))))) ("c-utils" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "c-utils" "doc/c-utils@c-utils/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/c-utils.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/c-utils.txt"))) (checksum . "a7087828d18fee7268c51104783279d285076560") (checksum-error . #f) (conflicts . ()) (dependencies . ("abnf" "base" "parser-tools-lib" "at-exp-lib" "parser-tools-doc" "planet-doc" "racket-doc" "rackunit-lib" "scribble-doc" "scribble-lib" "srfi-lite-lib")) (description . "Utilities for manipulating C source code.") (implies . ()) (last-checked . 1522414312) (last-edit . 1367976778) (last-updated . 1513624465) (modules . ((lib "c/parse.rkt") (lib "c/scribblings/pc.scrbl") (lib "c/scribblings/internals.scrbl") (lib "c/scribblings/history.scrbl") (lib "c/main.rkt") (lib "c/private/parser.rkt") (lib "c/pc.rkt") (lib "c/private/unobtrusive-quote.rkt") (lib "c/scribblings/utils.rkt") (lib "c/private/lexer.rkt") (lib "c/scribblings/c-utils.scrbl") (lib "c/scribblings/syntax.scrbl") (lib "c/scribblings/intro.scrbl") (lib "c/scribblings/parse.scrbl") (lib "c/eval.rkt") (lib "c/private/tests/parser.rkt") (lib "c/scribblings/header.scrbl") (lib "c/header.rkt") (lib "c/scribblings/eval.scrbl") (lib "c/private/tests/header.rkt") (lib "c/ast.rkt") (lib "c/private/syntactic-context.rkt"))) (name . "c-utils") (nix-sha256 . "065kcddybw85gjmaxyknfks5jaj6mikzxz5nn2ry8z6ibkjypi7m") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (C . #t) (author:samth@ccs.neu.edu . #t) (language . #t) (ring:1 . #t))) (source . "github://github.com/samth/c.rkt/master") (tags . ("C" "language")) (versions . #hash((default . #hasheq((checksum . "a7087828d18fee7268c51104783279d285076560") (source . "github://github.com/samth/c.rkt/master") (source_url . "http://github.com/samth/c.rkt/tree/master"))))))) ("literify" . #hasheq((author . "kludev@gmail.com") (authors . ("kludev@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/literify.txt") (docs . (("main" "literify" "doc/literify@literify/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/literify.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/literify.txt"))) (checksum . "0c574bc88dc9de870063589cc49a7ad41899fc67") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "racket literate programming in scribble to enable simultaneously display and evaluate code chunks") (implies . ()) (last-checked . 1522414425) (last-edit . 1497765715) (last-updated . 1502816158) (modules . ((lib "literify/main.rkt") (lib "literify/demo/union-find.scrbl") (lib "literify/scribblings/literify.scrbl"))) (name . "literify") (nix-sha256 . "0qvw16civ9zcajhcg25mzw0v9bj17d4sdkx49k65g1nvjp65738v") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:kludev@gmail.com . #t) (documentation . #t) (literate-programming . #t) (ring:1 . #t) (scribble . #t))) (source . "git://github.com/kflu/literify") (tags . ("documentation" "literate-programming" "scribble")) (versions . #hash((default . #hasheq((checksum . "0c574bc88dc9de870063589cc49a7ad41899fc67") (source . "git://github.com/kflu/literify") (source_url . "http://github.com/kflu/literify/tree/master"))))))) ("plot-lib" . #hash((author . "ntoronto@racket-lang.org") (checksum . "e34c5cf5192d2cdc7f0bd8f6d4221de171a39182") (dependencies . ("base" "draw-lib" "pict-lib" "db-lib" "srfi-lite-lib" "typed-racket-lib" "typed-racket-more" "compatibility-lib" "math-lib")) (description . "ntoronto@racket-lang.org") (modules . ()) (name . "plot-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/plot-lib.zip") (tags . ()))) ("rosette" . #hasheq((author . "emina@cs.washington.edu") (authors . ("emina@cs.washington.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rosette-guide" "doc/rosette-guide@rosette/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rosette.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rosette.txt"))) (checksum . "8fa04ccfc939af9869abd1e98c3bbedac7fef207") (checksum-error . #f) (conflicts . ()) (dependencies . ("r6rs-lib" "rackunit-lib" "slideshow-lib" "base" "pict-doc" "scribble-lib" "racket-doc")) (description . "The Rosette Language") (implies . ()) (last-checked . 1522414672) (last-edit . 1458871007) (last-updated . 1520553672) (modules . ((lib "sdsl/websynth/test/imdb250_8.rkt") (lib "sdsl/synthcl/model/runtime.rkt") (lib "sdsl/synthcl/examples/toy/synth/kernel.rkt") (lib "sdsl/websynth/test/itunes100_8.rkt") (lib "sdsl/synthcl/lang/sugar.rkt") (lib "sdsl/synthcl/examples/sobelFilter/test.rkt") (lib "sdsl/websynth/test/alanon_arkansas_16.rkt") (lib "sdsl/synthcl/lang/env.rkt") (lib "sdsl/synthcl/lang/forms.rkt") (lib "rosette/base/core/term.rkt") (lib "test/all-sdsl-tests.rkt") (lib "sdsl/synthcl/examples/fastWalshTransform/verify/kernel.rkt") (lib "sdsl/ifc/basic.rkt") (lib "sdsl/fsm/query.rkt") (lib "sdsl/synthcl/examples/toy/synth/host.rkt") (lib "test/base/equality.rkt") (lib "rosette/base/adt/generic.rkt") (lib "rosette/doc/guide/scribble/forms/racket-forms.scrbl") (lib "rosette/doc/guide/scribble/datatypes/boxes.scrbl") (lib "rosette/base/core/lift.rkt") (lib "rosette/doc/guide/scribble/util/clean.rkt") (lib "rosette/private/install.rkt") (lib "rosette/solver/smt/z3.rkt") (lib "rosette/base/core/equality.rkt") (lib "sdsl/synthcl/lang/typecheck.rkt") (lib "sdsl/websynth/benchmarks/imdb250_8.rkt") (lib "sdsl/websynth/websynth.rkt") (lib "rosette/doc/guide/scribble/datatypes/defined-datatypes.scrbl") (lib "rosette/safe.rkt") (lib "sdsl/websynth/test/itunes100_16.rkt") (lib "sdsl/ifc/value.rkt") (lib "sdsl/bv/test/all-tests.rkt") (lib "test/base/uninterpreted.rkt") (lib "sdsl/synthcl/test/snippets.rkt") (lib "sdsl/ifc/indistinguishable.rkt") (lib "rosette/base/form/module.rkt") (lib "rosette/solver/smt/server.rkt") (lib "sdsl/websynth/test/alanon_arkansas_2.rkt") (lib "sdsl/bv/lang/log.rkt") (lib "sdsl/ifc/jump.rkt") (lib "sdsl/synthcl/model/flags.rkt") (lib "rosette/base/adt/vector.rkt") (lib "rosette/base/core/real.rkt") (lib "test/base/list.rkt") (lib "sdsl/synthcl/examples/sobelFilter/kernel.rkt") (lib "test/base/bitvector.rkt") (lib "test/base/distinct.rkt") (lib "rosette/doc/guide/scribble/datatypes/vectors.scrbl") (lib "test/base/common.rkt") (lib "sdsl/websynth/benchmarks/itunes100_4.rkt") (lib "rosette/solver/smt/env.rkt") (lib "sdsl/synthcl/model/program.rkt") (lib "sdsl/bv/lang/bvops.rkt") (lib "test/base/effects.rkt") (lib "rosette/query/core.rkt") (lib "test/base/forall.rkt") (lib "sdsl/fsm/viz.rkt") (lib "sdsl/bv/lang/form.rkt") (lib "test/base/solver.rkt") (lib "rosette/query/form.rkt") (lib "test/base/real.rkt") (lib "rosette/doc/guide/scribble/util/lifted.rkt") (lib "rosette/doc/guide/scribble/reflection/symbolic-reflection.scrbl") (lib "rosette/base/util/ord-dict.rkt") (lib "rosette/lib/synthax/core.rkt") (lib "sdsl/synthcl/examples/matrixMultiply/verify/test.rkt") (lib "rosette/base/core/polymorphic.rkt") (lib "rosette/safe/lang/reader.rkt") (lib "sdsl/synthcl/test/operators.rkt") (lib "sdsl/websynth/test/imdb250_2.rkt") (lib "sdsl/synthcl/test/typecheck.rkt") (lib "rosette/doc/guide/scribble/datatypes/bitvectors.scrbl") (lib "rosette/doc/guide/scribble/essentials/essentials.scrbl") (lib "test/base/exprs.rkt") (lib "rosette/base/core/distinct.rkt") (lib "rosette/solver/smt/dec.rkt") (lib "sdsl/synthcl/examples/matrixMultiply/verify/kernel.rkt") (lib "rosette/solver/smt/smtlib2.rkt") (lib "test/base/generics.rkt") (lib "sdsl/synthcl/model/pointers.rkt") (lib "sdsl/synthcl/model/context.rkt") (lib "rosette/query/eval.rkt") (lib "rosette/base/adt/list.rkt") (lib "test/base/finitize.rkt") (lib "sdsl/websynth/test/alanon_arkansas_8.rkt") (lib "sdsl/synthcl/test/reals.rkt") (lib "sdsl/synthcl/examples/fastWalshTransform/synth/kernel.rkt") (lib "rosette/lib/util/syntax.rkt") (lib "sdsl/synthcl/model/kernel.rkt") (lib "rosette/base/core/merge.rkt") (lib "rosette/base/util/array.rkt") (lib "sdsl/ifc/machine.rkt") (lib "sdsl/synthcl/lang/errors.rkt") (lib "sdsl/ifc/call.rkt") (lib "rosette/query/query.rkt") (lib "sdsl/websynth/test/alanon_arkansas_4.rkt") (lib "sdsl/synthcl/test/more-snippets.rkt") (lib "sdsl/bv/bv.rkt") (lib "sdsl/synthcl/examples/fastWalshTransform/synth/host.rkt") (lib "sdsl/ifc/instruction.rkt") (lib "rosette/doc/guide/scribble/reflection/value-reflection.scrbl") (lib "sdsl/bv/test/medium.rkt") (lib "sdsl/websynth/test/imdb250_4.rkt") (lib "rosette/base/base.rkt") (lib "test/query/solve+.rkt") (lib "sdsl/synthcl/examples/matrixMultiply/synth/test.rkt") (lib "rosette/lib/match.rkt") (lib "rosette/base/struct/generics.rkt") (lib "rosette/base/struct/struct-type.rkt") (lib "rosette/query/finitize.rkt") (lib "sdsl/websynth/test/itunes100_2.rkt") (lib "rosette/base/core/safe.rkt") (lib "sdsl/websynth/benchmarks/alanon_arkansas_16.rkt") (lib "sdsl/synthcl/lang/builtins.rkt") (lib "test/base/vector.rkt") (lib "rosette/doc/guide/scribble/datatypes/equality.scrbl") (lib "sdsl/synthcl/examples/sobelFilter/host.rkt") (lib "rosette/doc/guide/scribble/forms/forms.scrbl") (lib "rosette/doc/guide/scribble/libs/libraries.scrbl") (lib "sdsl/synthcl/examples/toy/verify/host.rkt") (lib "rosette/base/struct/struct.rkt") (lib "sdsl/synthcl/model/work.rkt") (lib "rosette/base/form/app.rkt") (lib "sdsl/synthcl/model/reals.rkt") (lib "test/base/quantified.rkt") (lib "sdsl/bv/test/easy.rkt") (lib "sdsl/ifc/test.rkt") (lib "test/query/synthax-external.rkt") (lib "rosette/base/adt/box.rkt") (lib "sdsl/synthcl/lang/operators.rkt") (lib "sdsl/fsm/automaton.rkt") (lib "rosette/base/core/function.rkt") (lib "rosette/doc/guide/scribble/essentials/poly.rkt") (lib "rosette/doc/guide/scribble/libs/racket-libs.scrbl") (lib "sdsl/ifc/verify.rkt") (lib "test/base/ord-dict.rkt") (lib "sdsl/fsm/lib.rkt") (lib "sdsl/websynth/benchmarks/imdb250_16.rkt") (lib "sdsl/websynth/benchmarks/itunes100_8.rkt") (lib "rosette/lib/lift.rkt") (lib "rosette/lib/angelic.rkt") (lib "sdsl/synthcl/examples/matrixMultiply/synth/kernel.rkt") (lib "rosette/base/core/procedure.rkt") (lib "sdsl/bv/examples/hard.rkt") (lib "sdsl/synthcl/examples/fastWalshTransform/verify/host.rkt") (lib "sdsl/synthcl/test/all-tests.rkt") (lib "rosette/solver/smt/cmd.rkt") (lib "test/query/push-pop.rkt") (lib "sdsl/websynth/benchmarks/alanon_arkansas_4.rkt") (lib "test/query/solve.rkt") (lib "rosette/base/core/union.rkt") (lib "test/all-rosette-tests.rkt") (lib "sdsl/websynth/benchmarks/imdb250_4.rkt") (lib "rosette/lib/render.rkt") (lib "rosette/base/form/define.rkt") (lib "rosette/doc/guide/scribble/datatypes/bools+ints+reals.scrbl") (lib "rosette/base/form/state.rkt") (lib "sdsl/websynth/test/all-tests.rkt") (lib "sdsl/websynth/benchmarks/imdb250_2.rkt") (lib "sdsl/websynth/benchmarks/itunes100_2.rkt") (lib "sdsl/bv/examples/medium.rkt") (lib "sdsl/bv/lang/fragment.rkt") (lib "sdsl/websynth/benchmarks/alanon_arkansas_8.rkt") (lib "sdsl/bv/lang/program.rkt") (lib "sdsl/bv/examples/reference.rkt") (lib "rosette/base/core/bool.rkt") (lib "sdsl/ifc/verify-EENI-demo.rkt") (lib "test/base/type.rkt") (lib "rosette/doc/guide/scribble/datatypes/procedures.scrbl") (lib "sdsl/synthcl/lang/types.rkt") (lib "rosette/lib/synthax/form.rkt") (lib "rosette/lib/roseunit.rkt") (lib "sdsl/fsm/fsm.rkt") (lib "test/base/term.rkt") (lib "rosette/doc/guide/scribble/libs/rosette-lib-test.rkt") (lib "rosette/doc/guide/scribble/reflection/state-reflection.scrbl") (lib "sdsl/websynth/test/imdb250_16.rkt") (lib "sdsl/synthcl/lang/queries.rkt") (lib "sdsl/synthcl/test/grammar.rkt") (lib "rosette/doc/guide/scribble/welcome/welcome.scrbl") (lib "rosette/doc/guide/scribble/rosette-guide.scrbl") (lib "rosette/lib/synthax.rkt") (lib "test/query/synthesize.rkt") (lib "rosette/main.rkt") (lib "test/query/synthax.rkt") (lib "sdsl/synthcl/lang/util.rkt") (lib "rosette/query/debug.rkt") (lib "rosette/solver/solver.rkt") (lib "sdsl/synthcl/model/errors.rkt") (lib "rosette/doc/guide/scribble/datatypes/test.rkt") (lib "test/base/merge.rkt") (lib "sdsl/websynth/dom.rkt") (lib "rosette/doc/guide/scribble/datatypes/solvers+solutions.scrbl") (lib "test/query/verify.rkt") (lib "sdsl/synthcl/examples/sobelFilter/reference.rkt") (lib "rosette/doc/guide/scribble/datatypes/pairs.scrbl") (lib "sdsl/synthcl/test/work.rkt") (lib "sdsl/bv/examples/easy.rkt") (lib "sdsl/synthcl/examples/fastWalshTransform/synth/test.rkt") (lib "rosette/solver/smt/enc.rkt") (lib "sdsl/synthcl/model/buffer.rkt") (lib "rosette/base/adt/seq.rkt") (lib "sdsl/synthcl/examples/matrixMultiply/verify/host.rkt") (lib "rosette/lang/reader.rkt") (lib "rosette/doc/guide/scribble/unsafe/unsafe.scrbl") (lib "sdsl/synthcl/examples/matrixMultiply/verify/host-buggy.rkt") (lib "rosette/doc/guide/scribble/reflection/test.rkt") (lib "sdsl/synthcl/test/memory.rkt") (lib "rosette/base/core/type.rkt") (lib "sdsl/fsm/demo.rkt") (lib "sdsl/websynth/benchmarks/itunes100_16.rkt") (lib "rosette/base/core/forall.rkt") (lib "test/query/debug.rkt") (lib "sdsl/synthcl/lang/main.rkt") (lib "rosette/doc/guide/scribble/datatypes/uninterpreted.scrbl") (lib "sdsl/synthcl/model/objects.rkt") (lib "sdsl/synthcl/model/operators.rkt") (lib "sdsl/synthcl/model/memory.rkt") (lib "sdsl/synthcl/model/queue.rkt") (lib "rosette/base/core/reflect.rkt") (lib "rosette/doc/guide/scribble/datatypes/builtin-datatypes.scrbl") (lib "rosette/doc/guide/scribble/libs/rosette-libs.scrbl") (lib "sdsl/synthcl/examples/fastWalshTransform/verify/test.rkt") (lib "sdsl/websynth/test/itunes100_4.rkt") (lib "sdsl/synthcl/examples/toy/verify/kernel.rkt") (lib "rosette/doc/guide/scribble/forms/rosette-forms.scrbl") (lib "rosette/base/core/bitvector.rkt") (lib "rosette/lib/util/syntax-properties.rkt") (lib "test/query/optimize.rkt") (lib "rosette/base/form/control.rkt") (lib "sdsl/bv/test/util.rkt") (lib "sdsl/websynth/benchmarks/alanon_arkansas_2.rkt") (lib "sdsl/synthcl/examples/matrixMultiply/synth/host.rkt") (lib "sdsl/synthcl/model/type.rkt") (lib "rosette/solver/solution.rkt") (lib "test/base/bool.rkt") (lib "rosette/base/core/numerics.rkt") (lib "sdsl/bv/lang/core.rkt") (lib "rosette/base/core/effects.rkt") (lib "sdsl/websynth/websynthlib.rkt") (lib "rosette/doc/guide/scribble/refs.scrbl"))) (name . "rosette") (nix-sha256 . "0f0679d930wxhgllacnahbg1j77p4q2x3r7fyaiqx8bn3453zd4f") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:emina@cs.washington.edu . #t) (ring:1 . #t))) (source . "git://github.com/emina/rosette") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8fa04ccfc939af9869abd1e98c3bbedac7fef207") (source . "git://github.com/emina/rosette") (source_url . "http://github.com/emina/rosette/tree/master"))))))) ("iracket" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/iracket.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/iracket.txt"))) (checksum . "20024ca85e1930a00e9a515c6fc9d599934fcbfb") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "zeromq-r-lib" "sandbox-lib" "libuuid" "sha" "racket-doc" "scribble-lib")) (description . "IPython/Jupyter kernel for Racket") (implies . ()) (last-checked . 1522414420) (last-edit . 1501792829) (last-updated . 1513876528) (modules . ((lib "iracket/private/ipython-message.rkt") (lib "iracket/private/iracket-connect.rkt") (lib "iracket/private/ipython.rkt") (lib "iracket/install.rkt") (lib "iracket/private/iracket-execute.rkt") (lib "iracket/iracket.rkt") (lib "iracket/private/ipython-services.rkt") (lib "iracket/private/iracket-kernel-info.rkt") (lib "iracket/private/iracket-complete.rkt"))) (name . "iracket") (nix-sha256 . "16r3caj953drcags7lxhk8l5pq4r83wby9m1m72695z03sh9xzlw") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:ryanc@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/rmculpepper/iracket") (tags . ()) (versions . #hash((default . #hasheq((checksum . "20024ca85e1930a00e9a515c6fc9d599934fcbfb") (source . "git://github.com/rmculpepper/iracket") (source_url . "http://github.com/rmculpepper/iracket/tree/master"))))))) ("pidec" . #hasheq((author . "luis.osa.gdc@gmail.com ") (authors . ("luis.osa.gdc@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pidec" "doc/pidec@pidec/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pidec.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pidec.txt"))) (checksum . "4ec0b094709d83d54cb1de69209ecfd6a642573d") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "math-lib" "typed-racket-lib" "while-loop" "scribble-lib" "racket-doc")) (description . "Computation of the n-th digit of π with low memory") (implies . ()) (last-checked . 1522414513) (last-edit . 1435507356) (last-updated . 1502816259) (modules . ((lib "pidec/scribblings/pidec.scrbl") (lib "pidec/test-main.rkt") (lib "pidec/main.rkt"))) (name . "pidec") (nix-sha256 . "0sh2mi3c2ds7drdapvznpgnaazb0fikgm46x6q16nqw3wziw2cmc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:luis.osa.gdc@gmail.com . #t) (numerical . #t) (ring:1 . #t))) (source . "git://github.com/logc/pidec.git") (tags . ("numerical")) (versions . #hash((default . #hasheq((checksum . "4ec0b094709d83d54cb1de69209ecfd6a642573d") (source . "git://github.com/logc/pidec.git") (source_url . "http://github.com/logc/pidec.git/tree/master"))))))) ("memoize" . #hasheq((author . "clements@racket-lang.org dherman@mozilla.com") (authors . ("clements@racket-lang.org" "dherman@mozilla.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "memoize" "doc/memoize@memoize/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/memoize.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/memoize.txt"))) (checksum . "9cdbf7512b8a531b1b26ffc02160aa9e8125f2ed") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Memoization for functions") (implies . ()) (last-checked . 1522414435) (last-edit . 1386376011) (last-updated . 1513624543) (modules . ((lib "memoize/main.rkt") (lib "memoize/memoize.scrbl") (lib "memoize/private/tests.rkt"))) (name . "memoize") (nix-sha256 . "07w8y0pfhikmj12raq12d7z8kmg9n6lp5npp0lvhlaanp1hffwhh") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:clements@racket-lang.org . #t) (author:dherman@mozilla.com . #t) (ring:1 . #t))) (source . "github://github.com/jbclements/memoize/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "9cdbf7512b8a531b1b26ffc02160aa9e8125f2ed") (source . "github://github.com/jbclements/memoize/master") (source_url . "http://github.com/jbclements/memoize/tree/master"))))))) ("misc1" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "misc1" "doc/misc1@misc1/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/misc1.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/misc1.txt"))) (checksum . "92d66c9c2c5fefe4762acc221b69c5e716a6873d") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "unstable-lib" "racket-doc" "unstable-lib" "unstable-doc" "scribble-lib")) (description . "Miscellaneous utilities collection.") (implies . ()) (last-checked . 1522414435) (last-edit . 1401802372) (last-updated . 1502816181) (modules . ((lib "misc1/list.scrbl") (lib "misc1/async.scrbl") (lib "misc1/async.rkt") (lib "misc1/list.rkt") (lib "misc1/syntax.rkt") (lib "misc1/match.rkt") (lib "misc1/throw.rkt") (lib "misc1/dict.scrbl") (lib "misc1/locking.rkt") (lib "misc1/evt.scrbl") (lib "misc1/match.scrbl") (lib "misc1/syntax.scrbl") (lib "misc1/evt.rkt") (lib "misc1/throw.scrbl") (lib "misc1/dict.rkt") (lib "misc1/locking.scrbl") (lib "misc1/fast-channel.rkt") (lib "misc1/misc1.scrbl") (lib "misc1/fast-channel.scrbl"))) (name . "misc1") (nix-sha256 . "0zk7afqsxcxgq223a4hb854nqqkf1mzclb3b8idsgmjcm2vryr8l") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t))) (source . "github://github.com/mordae/racket-misc1/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "92d66c9c2c5fefe4762acc221b69c5e716a6873d") (source . "github://github.com/mordae/racket-misc1/master") (source_url . "http://github.com/mordae/racket-misc1/tree/master"))))))) ("play" . #hasheq((author . "ifigueroap@gmail.com etanter@dcc.uchile.cl") (authors . ("ifigueroap@gmail.com" "etanter@dcc.uchile.cl")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/play.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/play.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/play.txt"))) (checksum . "3c2c1af69087e9190a711df1577cf0e842fecac2") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "plai" "redex" "rackunit" "parser-tools-lib" "scribble-lib" "racket-doc")) (description . "Variations on #lang plai, the language that accompanies Krishnamurthi's PLAI book.") (implies . ()) (last-checked . 1522414514) (last-edit . 1478208795) (last-updated . 1502816265) (modules . ((lib "scribblings/play.scrbl") (lib "play/parsers.rkt") (lib "scribblings/intl.rkt") (lib "play/redex.rkt") (lib "scribblings/main.scrbl") (lib "play/main.rkt") (lib "play/lang/reader.rkt"))) (name . "play") (nix-sha256 . "0g44dwx6yi1w2x34fm0irxm1h0qw354mnsd1cjglbklfsaxa17mi") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:etanter@dcc.uchile.cl . #t) (author:ifigueroap@gmail.com . #t) (language . #t) (ring:1 . #t))) (source . "github://github.com/pleiad/play/master") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "3c2c1af69087e9190a711df1577cf0e842fecac2") (source . "github://github.com/pleiad/play/master") (source_url . "http://github.com/pleiad/play/tree/master"))))))) ("rackonsole" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rackonsole" "doc/rackonsole@rackonsole/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackonsole.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rackonsole.txt"))) (checksum . "9cb037f857243bef20c19ee280af458659eca731") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "charterm" "gdbdump" "compatibility-lib" "racket-doc" "scribble-lib" "overeasy")) (description . "Lightweight Operator Console for Racket Server Processes") (implies . ()) (last-checked . 1522414662) (last-edit . 1456466728) (last-updated . 1502816373) (modules . ((lib "rackonsole/demo.rkt") (lib "rackonsole/main.rkt") (lib "rackonsole/rackonsole.scrbl"))) (name . "rackonsole") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (ring:1 . #t) (terminal . #t))) (source . "http://www.neilvandyke.org/racket/rackonsole.zip") (tags . ("terminal")) (versions . #hash((default . #hasheq((checksum . "9cb037f857243bef20c19ee280af458659eca731") (source . "http://www.neilvandyke.org/racket/rackonsole.zip") (source_url . "http://www.neilvandyke.org/racket/rackonsole.zip"))))))) ("ecmascript" . #hasheq((author . "leo@lwh.jp") (authors . ("leo@lwh.jp")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ecmascript" "doc/ecmascript@ecmascript/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ecmascript.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ecmascript.txt"))) (checksum . "38a9fb90c6cb137b7e0c121ecee7d46c16619598") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "math-lib" "parser-tools-lib" "ragg" "racket-doc" "scribble-lib")) (description . "Parser, runtime and #lang for ECMAScript") (implies . ()) (last-checked . 1522414396) (last-edit . 1413348069) (last-updated . 1502815951) (modules . ((lib "ecmascript/types.rkt") (lib "ecmascript/scribblings/syntax.scrbl") (lib "ecmascript/lang/reader.rkt") (lib "ecmascript/private/function.rkt") (lib "ecmascript/private/read.rkt") (lib "ecmascript/run.rkt") (lib "ecmascript/private/array.rkt") (lib "ecmascript/scribblings/lang.scrbl") (lib "ecmascript/private/global-object.rkt") (lib "ecmascript/lib/string.rkt") (lib "ecmascript/lang/runtime-config.rkt") (lib "ecmascript/private/helpers.rkt") (lib "ecmascript/private/error.rkt") (lib "ecmascript/private/literal.rkt") (lib "ecmascript/scribblings/sexpr.scrbl") (lib "ecmascript/lib/object.rkt") (lib "ecmascript/private/environment.rkt") (lib "ecmascript/object.rkt") (lib "ecmascript/private/operator.rkt") (lib "ecmascript/main.rkt") (lib "ecmascript/scribblings/ecmascript.scrbl") (lib "ecmascript/convert.rkt") (lib "ecmascript/function.rkt") (lib "ecmascript/lib/error.rkt") (lib "ecmascript/private/this.rkt") (lib "ecmascript/scribblings/lit-op.scrbl") (lib "ecmascript/private/grammar.rkt") (lib "ecmascript/lib/array.rkt") (lib "ecmascript/lib/function.rkt") (lib "ecmascript/scribblings/parsing.scrbl") (lib "ecmascript/scribblings/types.scrbl") (lib "ecmascript/lib/math.rkt") (lib "ecmascript/parse.rkt") (lib "ecmascript/private/object.rkt") (lib "ecmascript/lang/language-info.rkt") (lib "ecmascript/private/statement.rkt") (lib "ecmascript/scribblings/statements.scrbl") (lib "ecmascript/private/date.rkt") (lib "ecmascript/private/compile.rkt") (lib "ecmascript/private/builtin.rkt") (lib "ecmascript/lib/regexp.rkt") (lib "ecmascript/ast.rkt") (lib "ecmascript/init.rkt") (lib "ecmascript/private/lex.rkt") (lib "ecmascript/scribblings/functions.scrbl") (lib "ecmascript/lib/boolean.rkt") (lib "ecmascript/eval.rkt") (lib "ecmascript/lib/number.rkt"))) (name . "ecmascript") (nix-sha256 . "04iqhnm21f1dm4zzfqhnqwd2c51qi83clgnpms7mbrvjsshdrm2r") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:leo@lwh.jp . #t) (language . #t) (ring:1 . #t))) (source . "git://github.com/lwhjp/ecmascript") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "38a9fb90c6cb137b7e0c121ecee7d46c16619598") (source . "git://github.com/lwhjp/ecmascript") (source_url . "http://github.com/lwhjp/ecmascript/tree/master"))))))) ("brag" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "brag" "doc/brag@brag/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/brag.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/brag.txt"))) (checksum . "747c760eb56eaddd9c5aca1ab2a93bd1da4b5713") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "br-parser-tools-lib" "rackunit-lib" "at-exp-lib" "br-parser-tools-doc" "racket-doc" "scribble-lib")) (description . "Internal fork of `ragg` for Beautiful Racket") (implies . ()) (last-checked . 1522414311) (last-edit . 1520100680) (last-updated . 1521839803) (modules . ((lib "brag/test/test-errors.rkt") (lib "brag/examples/wordy.rkt") (lib "brag/examples/simple-line-drawing/lexer.rkt") (lib "brag/private/internal-support.rkt") (lib "brag/codegen/sexp-based-lang.rkt") (lib "brag/test/weird-grammar.rkt") (lib "brag/test/test-simple-line-drawing.rkt") (lib "brag/examples/bnf.rkt") (lib "brag/test/test-01-equal.rkt") (lib "brag/test/test-wordy.rkt") (lib "brag/test/test-flatten.rkt") (lib "brag/examples/simple-line-drawing/examples/letter-i.rkt") (lib "brag/support.rkt") (lib "brag/rules/runtime.rkt") (lib "brag/rules/rule-structs.rkt") (lib "brag/examples/simple-line-drawing/grammar.rkt") (lib "brag/cfg-parser/cfg-parser.rkt") (lib "brag/examples/baby-json.rkt") (lib "brag/rules/stx.rkt") (lib "brag/test/test-weird-grammar.rkt") (lib "brag/examples/simple-line-drawing/semantics.rkt") (lib "brag/examples/0n1n.rkt") (lib "brag/test/test-all.rkt") (lib "brag/test/test-lexer.rkt") (lib "brag/examples/nested-word-list.rkt") (lib "brag/examples/add-mult.rkt") (lib "brag/private/colorer.rkt") (lib "brag/test/test-simple-arithmetic-grammar.rkt") (lib "brag/rules/parser.rkt") (lib "brag/examples/baby-json-hider.rkt") (lib "brag/examples/0n1.rkt") (lib "brag/examples/simple-line-drawing/interpret.rkt") (lib "brag/main.rkt") (lib "brag/rules/lexer.rkt") (lib "brag/codegen/codegen.rkt") (lib "brag/test/test-baby-json-hider.rkt") (lib "brag/brag.scrbl") (lib "brag/examples/lua-parser.rkt") (lib "brag/test/test-cutter.rkt") (lib "brag/codegen/runtime.rkt") (lib "brag/examples/simple-line-drawing/lang/reader.rkt") (lib "brag/test/test-0n1n.rkt") (lib "brag/examples/statlist-grammar.rkt") (lib "brag/codegen/flatten.rkt") (lib "brag/examples/simple-arithmetic-grammar.rkt") (lib "brag/examples/simple-line-drawing.rkt") (lib "brag/test/test-parser.rkt") (lib "brag/test/test-0n1.rkt") (lib "brag/examples/whitespace.rkt") (lib "brag/examples/01-equal.rkt") (lib "brag/rules/stx-types.rkt") (lib "brag/codegen/reader.rkt") (lib "brag/examples/cutter.rkt") (lib "brag/test/test-whitespace.rkt") (lib "brag/test/test-old-token.rkt") (lib "brag/codegen/satisfaction.rkt") (lib "brag/test/test-baby-json.rkt"))) (name . "brag") (nix-sha256 . "05mh65bmx86181jlf376nnz85xs20si3nrapn71hh4v370iwrgi7") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mb@mbtype.com . #t) (ring:1 . #t))) (source . "https://github.com/mbutterick/brag.git?path=brag") (tags . ()) (versions . #hash((default . #hasheq((checksum . "747c760eb56eaddd9c5aca1ab2a93bd1da4b5713") (source . "https://github.com/mbutterick/brag.git?path=brag") (source_url . "https://github.com/mbutterick/brag.git?path=brag"))))))) ("libvid-i386-linux" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/libvid-i386-linux.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "e8fb290d38e90800ffa1d105dbb540d28f931807") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "Library for Video log messages") (implies . ()) (last-checked . 1522414424) (last-edit . 1504986160) (last-updated . 1521584262) (modules . ()) (name . "libvid-i386-linux") (nix-sha256 . "1h5nrhdlb9z89vx4irrzxcpc7zgpyjk1vy6yc598yfq1hskmwjvl") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:leif@leifandersen.net . #t) (libvid . #t) (ring:1 . #t) (video . #t))) (source . "git://github.com/videolang/native-pkgs?path=libvid-i386-linux") (tags . ("libvid" "video")) (versions . #hash((default . #hasheq((checksum . "e8fb290d38e90800ffa1d105dbb540d28f931807") (source . "git://github.com/videolang/native-pkgs?path=libvid-i386-linux") (source_url . "http://github.com/videolang/native-pkgs/tree/master?path=libvid-i386-linux"))))))) ("egal" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/egal.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/egal.txt"))) (checksum . "ea395262430ee0c5dffc264a92b0ad4d1a1a9bc8") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "Henry Baker's egal") (implies . ()) (last-checked . 1522414396) (last-edit . 1503512122) (last-updated . 1502815951) (modules . ((lib "egal/main.rkt"))) (name . "egal") (nix-sha256 . "0127zhyd4wjh3flpz6qs1wjifxqcqkrh79c57h6w6yaw9ihrqx7s") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (comparison . #t) (equality . #t) (ring:1 . #t))) (source . "git://github.com/samth/egal") (tags . ("comparison" "equality")) (versions . #hash((default . #hasheq((checksum . "ea395262430ee0c5dffc264a92b0ad4d1a1a9bc8") (source . "git://github.com/samth/egal") (source_url . "http://github.com/samth/egal/tree/master"))))))) ("snip-lib" . #hash((author . "mflatt@racket-lang.org") (checksum . "65d03919b8e4aa9a8aaa64171bc3ab4242083f05") (dependencies . ("base" "draw-lib")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "snip-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/snip-lib.zip") (tags . ()))) ("parameter" . #hasheq((author . "samth@racket-lang.org") (authors . ("samth@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/parameter.txt") (docs . (("main" "parameter" "doc/parameter@parameter/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parameter.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/parameter.txt"))) (checksum . "d084723e260a133e792317286fb05494aabc29ed") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scheme-lib" "scribble-lib")) (description . "Parameter utilities") (implies . ()) (last-checked . 1522414509) (last-edit . 1451684399) (last-updated . 1502816241) (modules . ((lib "parameter/main.rkt") (lib "parameter/parameter.scrbl"))) (name . "parameter") (nix-sha256 . "15i75ccjrq544qkwlwfyx4j4kfyxainfdvm3za62dq0sbmsm2g2n") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:samth@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/samth/parameter.plt") (tags . ()) (versions . #hash((default . #hasheq((checksum . "d084723e260a133e792317286fb05494aabc29ed") (source . "git://github.com/samth/parameter.plt") (source_url . "http://github.com/samth/parameter.plt/tree/master"))))))) ("pvector" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pvector" "doc/pvector@pvector/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pvector.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pvector.txt"))) (checksum . "c0beb5ae5e6fba3e1c701d85881dc04ec4c8b733") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "collections" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Fast, immutable, persistent vectors") (implies . ()) (last-checked . 1522414537) (last-edit . 1449354873) (last-updated . 1502816339) (modules . ((lib "data/private/test/main.rkt") (lib "data/pvector.rkt") (lib "data/scribblings/pvector.scrbl") (lib "data/pvector/for.rkt") (lib "data/pvector/base.rkt"))) (name . "pvector") (nix-sha256 . "0dk83sxsbkcs3v6dyy2hs7lwy979vf74xkhr5w6x2ls7gp4ysp5b") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (collections . #t) (data . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-pvector") (tags . ("collections" "data")) (versions . #hash((default . #hasheq((checksum . "c0beb5ae5e6fba3e1c701d85881dc04ec4c8b733") (source . "git://github.com/lexi-lambda/racket-pvector") (source_url . "http://github.com/lexi-lambda/racket-pvector/tree/master"))))))) ("sasl-test" . #hash((author . "ryanc@racket-lang.org") (checksum . "c9b8f0b02270dfcb50d2eea0dbfb19eb299b2edb") (dependencies . (("base" #:version "6.10"))) (description . "ryanc@racket-lang.org") (modules . ()) (name . "sasl-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/sasl-test.zip") (tags . ()))) ("kw-utils" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "kw-utils" "doc/kw-utils@kw-utils/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/kw-utils.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/kw-utils.txt"))) (checksum . "1acb6feff772064010574c0a68d464146cd7d29c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "sweet-exp-lib" "rackunit-lib" "scribble-lib" "racket-doc" "rackjure")) (description . "misc kw utils") (implies . ()) (last-checked . 1522414422) (last-edit . 1415761892) (last-updated . 1502816145) (modules . ((lib "kw-utils/partial.rkt") (lib "kw-utils/docs/arity+keywords.scrbl") (lib "kw-utils/docs/kw-utils.scrbl") (lib "kw-utils/arity+keywords.rkt") (lib "kw-utils/kw-map.rkt") (lib "kw-utils/docs/partial.scrbl") (lib "kw-utils/docs/kw-hash.scrbl") (lib "kw-utils/mapper.rkt") (lib "kw-utils/docs/keyword-lambda.scrbl") (lib "kw-utils/docs/mapper.scrbl") (lib "kw-utils/kw-hash/contract.rkt") (lib "kw-utils/docs/keyword-apply-sort.scrbl") (lib "kw-utils/docs/kw-lists-lambda.scrbl") (lib "kw-utils/kw-apply.rkt") (lib "kw-utils/kw-lists-lambda.rkt") (lib "kw-utils/kw-hash.rkt") (lib "kw-utils/docs/kw-map.scrbl") (lib "kw-utils/keyword-app.rkt") (lib "kw-utils/keyword-lambda.rkt") (lib "kw-utils/keyword-apply-sort.rkt") (lib "kw-utils/arity+keywords/syntax.rkt") (lib "kw-utils/kw-hash-lambda.rkt"))) (name . "kw-utils") (nix-sha256 . "1vg64zlsf8pmd307w9f7kybslagbza1dv95g7kkr74iwrgfbjwfs") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (keywords . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/kw-utils") (tags . ("keywords")) (versions . #hash((default . #hasheq((checksum . "1acb6feff772064010574c0a68d464146cd7d29c") (source . "git://github.com/AlexKnauth/kw-utils") (source_url . "http://github.com/AlexKnauth/kw-utils/tree/master"))))))) ("disposable" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "disposable" "doc/disposable@disposable/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/disposable.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/disposable.txt"))) (checksum . "843d3e224fd874b9c463b74cb5ef13d8a0b5766a") (checksum-error . #f) (conflicts . ()) (dependencies . (("arguments" #:version "1.2.1") "base" "reprovide-lang" "rackunit-lib" "racket-doc" ("scribble-lib" #:version "1.16") "scribble-text-lib")) (description . "Provides an abstraction for values associated with external resources that allows automatic resource pooling, per-thread virtual construction, and monadic composition") (implies . ()) (last-checked . 1522414380) (last-edit . 1502749749) (last-updated . 1509166856) (modules . ((lib "disposable/private/atomic-box.rkt") (lib "disposable/testing.rkt") (lib "disposable/scribblings/base.rkt") (lib "disposable/scribblings/util.rkt") (lib "disposable/scribblings/misc.scrbl") (lib "disposable/scribblings/main.scrbl") (lib "disposable/scribblings/pool.scrbl") (lib "disposable/private/syntax.rkt") (lib "disposable/example.rkt") (lib "disposable/file.rkt") (lib "disposable/private/pool.rkt") (lib "disposable/scribblings/lite.scrbl") (lib "disposable/main.rkt") (lib "disposable/scribblings/transient.scrbl") (lib "disposable/unsafe.rkt"))) (name . "disposable") (nix-sha256 . "1dbh2nrknlbq9cy9h3hhyc21xix33ck84zxw915y3yvmm7klxbk2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (concurrency . #t) (experimental . #t) (io . #t) (ring:1 . #t))) (source . "git://github.com/jackfirth/racket-disposable?path=disposable") (tags . ("concurrency" "experimental" "io")) (versions . #hash((default . #hasheq((checksum . "843d3e224fd874b9c463b74cb5ef13d8a0b5766a") (source . "git://github.com/jackfirth/racket-disposable?path=disposable") (source_url . "http://github.com/jackfirth/racket-disposable/tree/master?path=disposable"))))))) ("command-tree" . #hasheq((author . "jerome.martin.dev@gmail.com") (authors . ("jerome.martin.dev@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/command-tree.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/command-tree.txt"))) (checksum . "3a5dd35d43f3be52fb9743361adcb53eabcb8a3a") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "Handle tree-style (à la git) command line arguments ") (implies . ()) (last-checked . 1522414317) (last-edit . 1515169603) (last-updated . 1521553367) (modules . ((lib "command-tree/main.rkt"))) (name . "command-tree") (nix-sha256 . "0jcjmaykww0v0f8790yrgkbyfyfjbd5mayz1xj8bi859ck6b7akx") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (arguments . #t) (author:jerome.martin.dev@gmail.com . #t) (cli . #t) (parameters . #t) (ring:2 . #t) (terminal . #t) (tree . #t))) (source . "https://github.com/euhmeuh/command-tree.git") (tags . ("arguments" "cli" "parameters" "terminal" "tree")) (versions . #hash((default . #hasheq((checksum . "3a5dd35d43f3be52fb9743361adcb53eabcb8a3a") (source . "https://github.com/euhmeuh/command-tree.git") (source_url . "https://github.com/euhmeuh/command-tree.git"))))))) ("lathe-lib" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lathe-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lathe-lib.txt"))) (checksum . "36ce91fa11a41c3c12d586524228fc609e8ade8d") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "A personal collection of utilities. (lib)") (implies . ()) (last-checked . 1522414423) (last-edit . 1493588802) (last-updated . 1512000432) (modules . ((lib "lathe/private/utils-part-1.rkt") (lib "lathe/main.rkt") (lib "lathe/private/utils-part-2.rkt"))) (name . "lathe-lib") (nix-sha256 . "0sa741n2k99s9pwyc8dvj8ny1m0cazg06sp0pfcyspp4f1nwk3k3") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (ring:1 . #t) (unstable . #t) (util . #t) (utility . #t))) (source . "git://github.com/rocketnia/lathe?path=racket%2Flathe-lib") (tags . ("unstable" "util" "utility")) (versions . #hash((default . #hasheq((checksum . "36ce91fa11a41c3c12d586524228fc609e8ade8d") (source . "git://github.com/rocketnia/lathe?path=racket%2Flathe-lib") (source_url . "http://github.com/rocketnia/lathe/tree/master?path=racket%2Flathe-lib"))))))) ("infix-syntax" . #hasheq((author . "mrmyers.random.suffix@gmail.com") (authors . ("mrmyers.random.suffix@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "infix-syntax" "doc/infix-syntax@infix-syntax/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/infix-syntax.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/infix-syntax.txt"))) (checksum . "f2ee37351cd30841aa07dcb286b76a33ab364152") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Expansion-time parsing of infix expressions.") (implies . ()) (last-checked . 1522414420) (last-edit . 1505083871) (last-updated . 1520470481) (modules . ((lib "infix-syntax/private/operator/id-tools.rkt") (lib "infix-syntax/test/core/private/stx.rkt") (lib "infix-syntax/scribblings/infix-syntax.scrbl") (lib "infix-syntax/private/core.rkt") (lib "infix-syntax/private/core/parse.rkt") (lib "infix-syntax/test/operator/private/stx.rkt") (lib "infix-syntax/test/core/op-parse.rkt") (lib "infix-syntax/private/reprovide.rkt") (lib "infix-syntax/private/operator/make.rkt") (lib "infix-syntax/test/operator/private/macro.rkt") (lib "infix-syntax/main.rkt") (lib "infix-macro/main.rkt") (lib "infix-syntax/private/infix/token.rkt") (lib "infix-syntax/test/scratch/scratch-test.rkt") (lib "infix-syntax/private/core/scope.rkt") (lib "infix-syntax/private/operator.rkt") (lib "infix-syntax/test/check.rkt") (lib "infix-syntax/private/infix.rkt") (lib "infix-syntax/private/core/props.rkt") (lib "infix-syntax/private/infix/sugar.rkt") (lib "infix-syntax/test/operator/op-proc.rkt") (lib "infix-syntax/test/core/private/macro.rkt") (lib "infix-syntax/private/operator/sugar.rkt") (lib "infix-syntax/test/operator/parse.rkt") (lib "infix-syntax/test/operator/id-test.rkt") (lib "infix-syntax/test/core/props.rkt") (lib "infix-syntax/test/core/arith.rkt") (lib "infix-syntax/private/operator/util.rkt"))) (name . "infix-syntax") (nix-sha256 . "0k493502qd771z2v71f97nx2m87c74r2mpcld9w1006zv03ndqzd") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mrmyers.random.suffix@gmail.com . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/mromyers/infix-syntax.git") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "f2ee37351cd30841aa07dcb286b76a33ab364152") (source . "https://github.com/mromyers/infix-syntax.git") (source_url . "https://github.com/mromyers/infix-syntax.git"))))))) ("rackunit-lib" . #hash((author . "ryanc@racket-lang.org noel@racket-lang.org") (checksum . "14ea0d8bc1d3641f395a107584d44d37983d6601") (dependencies . ("base" "testing-util-lib")) (description . "ryanc@racket-lang.org noel@racket-lang.org") (modules . ()) (name . "rackunit-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/rackunit-lib.zip") (tags . ()))) ("graphics" . #hasheq((author . "juzhenliang@gmail.com") (authors . ("juzhenliang@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "bitmap" "doc/bitmap@graphics/index.html") ("salvage" "colorspace" "doc/colorspace@graphics/index.html"))) (failure-log . "server/built/fail/graphics.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "ec83b476a62a5d13aba108df7c636365d75e833d") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "math-lib" "draw-lib" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc")) (description . "Essential computer graphics for Typed Racket") (implies . ()) (last-checked . 1522414406) (last-edit . 1501825474) (last-updated . 1519923794) (modules . ((lib "bitmap/tamer/cairo/mesh.rkt") (lib "bitmap/digitama/unsafe/image.rkt") (lib "png/digitama/huffman.rkt") (lib "colorspace/misc.rkt") (lib "bitmap/digitama/parser/number.rkt") (lib "bitmap/tamer/cairo/clip.rkt") (lib "bitmap/composite.rkt") (lib "bitmap/tamer/polygon.rkt") (lib "bitmap/digitama/font.rkt") (lib "bitmap/digitama/unsafe/source.rkt") (lib "bitmap/tamer/cairo/text.rkt") (lib "bitmap/digitama/color.rkt") (lib "bitmap/base.rkt") (lib "bitmap/effect.rkt") (lib "bitmap/tamer/cairo/misc.rkt") (lib "bitmap/digitama/unsafe/pixman.rkt") (lib "bitmap/tamer/cairo/image.rkt") (lib "bitmap/tamer/cairo/curve.rkt") (lib "bitmap/tamer/cairo/rectangle.rkt") (lib "bitmap/font.rkt") (lib "bitmap/color.rkt") (lib "bitmap/digitama/unsafe/font.rkt") (lib "bitmap/digitama/misc.rkt") (lib "bitmap/digitama/parser/stream.rkt") (lib "bitmap/tamer/bitmap.scrbl") (lib "bitmap/digitama/unsafe/paint.rkt") (lib "bitmap/digitama/unsafe/pangocairo.rkt") (lib "bitmap/digitama/unsafe/shape.rkt") (lib "bitmap/digitama/unsafe/convert.rkt") (lib "bitmap/digitama/source.rkt") (lib "bitmap/constants.rkt") (lib "bitmap/digitama/composite.rkt") (lib "bitmap/constructor.rkt") (lib "bitmap/tamer/grayscale.rkt") (lib "bitmap/digitama/enumeration.rkt") (lib "colorspace/tamer/hsb.rkt") (lib "colorspace/tamer/colorspace.scrbl") (lib "bitmap/tamer/composite/table.rkt") (lib "bitmap/digitama/parser/exn.rkt") (lib "bitmap/digitama/resize.rkt") (lib "bitmap/main.rkt") (lib "bitmap/digitama/unsafe/require.rkt") (lib "bitmap/tamer/cellophane.rkt") (lib "bitmap/tamer/resize.rkt") (lib "bitmap/paint.rkt") (lib "bitmap/digitama/unsafe/resize.rkt") (lib "bitmap/digitama/unsafe/composite.rkt") (lib "bitmap/stdio.rkt") (lib "bitmap/tamer/font.rkt") (lib "bitmap/digitama/unsafe/constants.rkt") (lib "bitmap/tamer/composite/pin.rkt") (lib "bitmap/digitama/paint.rkt") (lib "bitmap/tamer/cairo/gradient.rkt") (lib "colorspace/hsb.rkt") (lib "png/tamer/huffman.rkt") (lib "colorspace/digitama/hsb.rkt") (lib "bitmap/digitama/stdio.rkt") (lib "bitmap/resize.rkt") (lib "bitmap/digitama/base.rkt") (lib "bitmap/misc.rkt") (lib "bitmap/digitama/unsafe/effect.rkt") (lib "bitmap/tamer/composite/composite.rkt") (lib "bitmap/tamer/zero.rkt") (lib "bitmap/tamer/density.rkt") (lib "bitmap/tamer/cairo/pango.rkt") (lib "colorspace/main.rkt") (lib "bitmap/digitama/unsafe/text.rkt"))) (name . "graphics") (nix-sha256 . "01nlv0qypllnbxiqhrain0ra4crypy10ns0yppxwilp0f5zi7w90") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (author:juzhenliang@gmail.com . #t) (colorspace . #t) (graphics . #t) (ring:1 . #t) (typed-racket . #t) (unstable . #t))) (source . "git://github.com/wargrey/graphics") (tags . ("colorspace" "graphics" "typed-racket" "unstable")) (versions . #hash((default . #hasheq((checksum . "ec83b476a62a5d13aba108df7c636365d75e833d") (source . "git://github.com/wargrey/graphics") (source_url . "http://github.com/wargrey/graphics/tree/master"))))))) ("datatype" . #hasheq((author . "sgtamk@gmail.com") (authors . ("sgtamk@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/datatype.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/datatype.txt"))) (checksum . "fda1df0f803fb7e4c33ea25697e1291edc9b6d3d") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib")) (description . "Algebraic(-like) Data Types") (implies . ()) (last-checked . 1522414373) (last-edit . 1476382356) (last-updated . 1502815881) (modules . ((lib "datatype/private/example.rkt") (lib "datatype/private/example-usage.rkt") (lib "datatype/private/type-case.rkt") (lib "datatype/main.rkt") (lib "datatype/experimental/example.rkt") (lib "datatype/experimental/datatype.rkt") (lib "datatype/private/example-type.rkt") (lib "datatype/private/parse-type.rkt"))) (name . "datatype") (nix-sha256 . "010sw6ljqk87z06rzic8p7wcjbii8rg2y7jvgxqsk5y3ash707da") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:sgtamk@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/pnwamk/datatype#master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "fda1df0f803fb7e4c33ea25697e1291edc9b6d3d") (source . "git://github.com/pnwamk/datatype#master") (source_url . "http://github.com/pnwamk/datatype/tree/master#master"))))))) ("debug" . #hasheq((author . "alexander@knauth.org mb@mbtype.com") (authors . ("alexander@knauth.org" "mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "debug" "doc/debug@debug/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/debug.txt") (test-failure-log . "server/built/test-fail/debug.txt") (test-success-log . #f))) (checksum . "3f11ced676b56786fd3d33d14a539963e15f43b2") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.6.0.3") "rackunit-lib" "typed-racket-lib" "pretty-format" "rackunit-lib" "rackunit-typed" "scribble-lib" "racket-doc" "scribble-doc")) (description . "a lang-extension for debugging, and a macro for inserting a debug-repl") (implies . ()) (last-checked . 1522414378) (last-edit . 1468642550) (last-updated . 1519514661) (modules . ((lib "debug/test/test-util.rkt") (lib "debug/test/debug-repl.rkt") (lib "typed/debug/test/typed-racket.rkt") (lib "typed/debug/report/helpers.rkt") (lib "debug/no-output/lang/reader.rkt") (lib "debug/private/make-variable-like-transformer.rkt") (lib "debug/report.rkt") (lib "debug/lang/reader.rkt") (lib "debug/test/test.rkt") (lib "debug/report/helpers.rkt") (lib "debug/repl.rkt") (lib "debug/test/debug-repl-macros.rkt") (lib "typed/debug/report.rkt") (lib "debug/scribblings/debug.scrbl"))) (name . "debug") (nix-sha256 . "0fzwlp5gak2kwvmi9mr0ixlxwapzj5y6jk8jf6f7xq1b3zyzwmpf") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (author:mb@mbtype.com . #t) (debug . #t) (debugging . #t) (lang-extension . #t) (repl . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/debug") (tags . ("debug" "debugging" "lang-extension" "repl")) (versions . #hash(("6.2.1" . #hasheq((checksum . "5d652d31fb906e2c64a769bf33091013c224f640") (source . "git://github.com/AlexKnauth/debug#for-v-up-to-6.2.1") (source_url . "http://github.com/AlexKnauth/debug/tree/master#for-v-up-to-6.2.1"))) (default . #hasheq((checksum . "3f11ced676b56786fd3d33d14a539963e15f43b2") (source . "git://github.com/AlexKnauth/debug") (source_url . "http://github.com/AlexKnauth/debug/tree/master"))) ("6.2" . #hasheq((checksum . "5d652d31fb906e2c64a769bf33091013c224f640") (source . "git://github.com/AlexKnauth/debug#for-v-up-to-6.2.1") (source_url . "http://github.com/AlexKnauth/debug/tree/master#for-v-up-to-6.2.1"))))))) ("scribble-text-lib" . #hash((author . "mflatt@racket-lang.org eli@racket-lang.org") (checksum . "5ae0d630771eea1494015b47564de6d06ac778a7") (dependencies . ("scheme-lib" "base" "at-exp-lib")) (description . "mflatt@racket-lang.org eli@racket-lang.org") (modules . ()) (name . "scribble-text-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/scribble-text-lib.zip") (tags . ()))) ("chk-test" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/chk-test.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/chk-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/chk-test.txt"))) (checksum . "613dad8bf51d1b9d83bdbd99ca3fe52c18e62ff7") (checksum-error . #f) (conflicts . ()) (dependencies . ("chk-lib" ("testing-util-lib" #:version "1.1") "base")) (description . "a minimal tester") (implies . ()) (last-checked . 1522414313) (last-edit . 1505750960) (last-updated . 1505750960) (modules . ((lib "chk/test-args.rkt") (lib "chk/test.rkt"))) (name . "chk-test") (nix-sha256 . "0kw3xb8316ygcczjpf90p9bpdfkgaddiwk4kr6jchnhgsh1ana46") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/jeapostrophe/chk?path=chk-test") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "613dad8bf51d1b9d83bdbd99ca3fe52c18e62ff7") (source . "git://github.com/jeapostrophe/chk?path=chk-test") (source_url . "http://github.com/jeapostrophe/chk/tree/master?path=chk-test"))))))) ("r6rs-doc" . #hash((author . "mflatt@racket-lang.org") (checksum . "fb49f53eaa30106c352a6f7bc8c865bbd3f16ce0") (dependencies . ("racket-index" "r5rs-doc" "base" "scribble-lib" "r6rs-lib" "racket-doc")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "r6rs-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/r6rs-doc.zip") (tags . ()))) ("echonest" . #hasheq((author . "greghendershott@gmail.com") (authors . ("greghendershott@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/echonest.txt") (test-failure-log . "server/built/test-fail/echonest.txt") (test-success-log . #f))) (checksum . "fd7d6511231bb4304cfd10260825e86ac33c3ddc") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "wffi" "rackjure" "rackunit-lib")) (description . "Wrapper for The Echo Nest web API.") (implies . ()) (last-checked . 1522414396) (last-edit . 1396443362) (last-updated . 1502815951) (modules . ((lib "echonest/main.rkt") (lib "echonest/test.rkt"))) (name . "echonest") (nix-sha256 . "0z4sh1gna22ab4jpwv3p4xmhrbchpiik3314pg9mzhddq4jlq2nr") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (audio . #t) (author:greghendershott@gmail.com . #t) (music . #t) (ring:1 . #t) (web . #t))) (source . "github://github.com/greghendershott/echonest/master") (tags . ("audio" "music" "web")) (versions . #hash((default . #hasheq((checksum . "fd7d6511231bb4304cfd10260825e86ac33c3ddc") (source . "github://github.com/greghendershott/echonest/master") (source_url . "http://github.com/greghendershott/echonest/tree/master"))))))) ("polysemy" . #hasheq((author . "georges.duperon@gmail.com") (authors . ("georges.duperon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "polysemy" "doc/polysemy@polysemy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/polysemy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/polysemy.txt"))) (checksum . "5b58b66e664bfbe896f858afa0c34c7bc2fd8a5f") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" "6.3") "rackunit-lib" ("scribble-lib" "1.16") "racket-doc")) (description . "Highly experimental and unstable. Attach multiple meanings to an identifier (match expander, function overloads, macros, custom \"~literal\" tokens…). Rename parts of identifiers (rename only some meanings, leaving others with the original name). Compose hybrid identifiers by mixing the meanings of two or more independently defined identifiers.") (implies . ()) (last-checked . 1522414534) (last-edit . 1501078926) (last-updated . 1502816298) (modules . ((lib "polysemy/test/test-require-d.rkt") (lib "polysemy/private/ids.rkt") (lib "polysemy/test/test-2-require.rkt") (lib "polysemy/test/test-2-provide.rkt") (lib "polysemy/test/test-require-c.rkt") (lib "polysemy/private/utils.rkt") (lib "polysemy/scribblings/polysemy.scrbl") (lib "polysemy/test/test-provide-b.rkt") (lib "polysemy/test/test-require-e-rename-failure.rkt") (lib "polysemy/test/test-require.rkt") (lib "polysemy/main.rkt") (lib "polysemy/test/test-provide.rkt"))) (name . "polysemy") (nix-sha256 . "0ml85bv3mqjgz2q7i5h1m5rfa224zyb2jykic2lcxi91fbdppzps") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:georges.duperon@gmail.com . #t) (experimental . #t) (provide . #t) (require . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/jsmaniac/polysemy.git") (tags . ("experimental" "provide" "require" "syntax")) (versions . #hash((default . #hasheq((checksum . "5b58b66e664bfbe896f858afa0c34c7bc2fd8a5f") (source . "https://github.com/jsmaniac/polysemy.git") (source_url . "https://github.com/jsmaniac/polysemy.git"))))))) ("scribble-code-examples" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scribble-code-examples" "doc/scribble-code-examples@scribble-code-examples/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scribble-code-examples.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scribble-code-examples.txt"))) (checksum . "3c847609cccbc681a3198d3158f3ce986da852c5") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "sandbox-lib" "racket-doc" "scribble-doc")) (description . "A scribble examples form that works with non-s-exp languages") (implies . ()) (last-checked . 1522414675) (last-edit . 1469883635) (last-updated . 1520731775) (modules . ((lib "scribble-code-examples/tests/test.scrbl") (lib "scribble-code-examples/main.rkt") (lib "scribble-code-examples/scribblings/scribble-code-examples.scrbl"))) (name . "scribble-code-examples") (nix-sha256 . "0kkps5j7x3fw38i70s7frkrvx3lchz7g7wpz96nf5pk5kngy6jha") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (documentation . #t) (ring:1 . #t) (scribble . #t))) (source . "git://github.com/AlexKnauth/scribble-code-examples") (tags . ("documentation" "scribble")) (versions . #hash((default . #hasheq((checksum . "3c847609cccbc681a3198d3158f3ce986da852c5") (source . "git://github.com/AlexKnauth/scribble-code-examples") (source_url . "http://github.com/AlexKnauth/scribble-code-examples/tree/master"))))))) ("net-cookies" . #hash((author . "jmj@fellowhuman.com jay.mccarthy@gmail.com") (checksum . "0c43038a279f0d7c26a3c0a9183843fc7b406ff3") (dependencies . ("net-cookies-lib" "net-cookies-doc")) (description . "jmj@fellowhuman.com jay.mccarthy@gmail.com") (modules . ()) (name . "net-cookies") (source . "https://download.racket-lang.org/releases/6.12/pkgs/net-cookies.zip") (tags . ()))) ("zeromq" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (("extract" "zeromq" "doc/zeromq@zeromq/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zeromq.txt") (test-failure-log . "server/built/test-fail/zeromq.txt") (test-success-log . #f))) (checksum . "cff2ce12fd39e5830628a48f479b917b290c5036") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "at-exp-lib" "racket-doc" "math-lib" "rackunit-lib")) (description . "A Racket interface to zeromq based on an FFI") (implies . ()) (last-checked . 1522414704) (last-edit . 1353603845) (last-updated . 1502816536) (modules . ((lib "net/zmq/zeromq.scrbl") (lib "net/zmq.rkt"))) (name . "zeromq") (nix-sha256 . "1lzf13mnnwq589320qx7a6nir37rwysalbkvh0xzz1bbxx8v328d") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:docs-error: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (concurrency . #t) (ffi . #t) (net . #t) (parallel . #t) (ring:1 . #t))) (source . "github://github.com/jeapostrophe/zeromq/master") (tags . ("concurrency" "ffi" "net" "parallel")) (versions . #hash((default . #hasheq((checksum . "cff2ce12fd39e5830628a48f479b917b290c5036") (source . "github://github.com/jeapostrophe/zeromq/master") (source_url . "http://github.com/jeapostrophe/zeromq/tree/master"))))))) ("parse-qif" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/parse-qif.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parse-qif.txt") (test-failure-log . "server/built/test-fail/parse-qif.txt") (test-success-log . #f))) (checksum . "2ab9f7aeef4643a69cfe7d41e8dda238496bf42e") (checksum-error . #f) (conflicts . ()) (dependencies . ()) (description . "Basic QIF-parsing code, used to apply categories to downloaded transactions") (implies . ()) (last-checked . 1522414509) (last-edit . 1520224880) (last-updated . 1522133559) (modules . ((lib "parse-qif/parse-qif.rkt") (lib "parse-qif/main.rkt"))) (name . "parse-qif") (nix-sha256 . "1b2hrx8y2v5v4kdvx0n7qhwdpw8nh6csibz6qhirgnhi1k3dfhy0") (ring . 2) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:clements@racket-lang.org . #t) (parser . #t) (parsing . #t) (qif . #t) (ring:2 . #t))) (source . "https://github.com/jbclements/parse-qif.git") (tags . ("parser" "parsing" "qif")) (versions . #hash((default . #hasheq((checksum . "2ab9f7aeef4643a69cfe7d41e8dda238496bf42e") (source . "https://github.com/jbclements/parse-qif.git") (source_url . "https://github.com/jbclements/parse-qif.git"))))))) ("sweet-exp" . #hasheq((author . "asumu@ccs.neu.edu alexander@knauth.org") (authors . ("asumu@ccs.neu.edu" "alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sweet" "doc/sweet@sweet-exp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sweet-exp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sweet-exp.txt"))) (checksum . "2084656a266131cd589be727102d9ea26ed7a65b") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "sweet-exp-lib" "sweet-exp-test" "scribble-lib" "racket-doc" "scribble-doc" "lazy")) (description . "Sweet expressions: an alternative to s-expressions") (implies . ("sweet-exp-lib" "sweet-exp-test")) (last-checked . 1522414686) (last-edit . 1469717633) (last-updated . 1502816462) (modules . ((lib "sweet-exp/sweet.scrbl"))) (name . "sweet-exp") (nix-sha256 . "11z04fd7w48ar4g2zf62pi9x24hmxjvl762cap13n0mi3kyj216b") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (author:asumu@ccs.neu.edu . #t) (ring:1 . #t) (syntax . #t))) (source . "git://github.com/takikawa/sweet-racket?path=sweet-exp") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "2084656a266131cd589be727102d9ea26ed7a65b") (source . "git://github.com/takikawa/sweet-racket?path=sweet-exp") (source_url . "http://github.com/takikawa/sweet-racket/tree/master?path=sweet-exp"))))))) ("pict-lib" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (checksum . "80962fd21ab63e5e55ccd73c4644c6e891d95a43") (dependencies . ("scheme-lib" "base" "compatibility-lib" "draw-lib" "syntax-color-lib" "rackunit-lib")) (description . "mflatt@racket-lang.org robby@racket-lang.org") (modules . ()) (name . "pict-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/pict-lib.zip") (tags . ()))) ("pretty-graphs" . #hasheq((author . "vincentnys@gmail.com") (authors . ("vincentnys@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pretty-graphs" "doc/pretty-graphs@pretty-graphs/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pretty-graphs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pretty-graphs.txt"))) (checksum . "a525fdc779e745b222b9e3d495c9f525290fd4cc") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "at-exp-lib" "graph" "pict-doc" "pict-lib" "scribble-lib" "racket-doc")) (description . "For visualizing generic graphs as picts.") (implies . ()) (last-checked . 1522414536) (last-edit . 1506329324) (last-updated . 1512580073) (modules . ((lib "pretty-graphs/scribblings/pretty-graphs.scrbl") (lib "pretty-graphs/main.rkt"))) (name . "pretty-graphs") (nix-sha256 . "1sh9jbi5bl8jhdx0fd28s31m080rlgj7v39ga488nc06dink0zxx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:vincentnys@gmail.com . #t) (graph . #t) (pict . #t) (ring:1 . #t) (visualization . #t))) (source . "git://github.com/v-nys/pretty-graphs") (tags . ("graph" "pict" "visualization")) (versions . #hash((default . #hasheq((checksum . "a525fdc779e745b222b9e3d495c9f525290fd4cc") (source . "git://github.com/v-nys/pretty-graphs") (source_url . "http://github.com/v-nys/pretty-graphs/tree/master"))))))) ("taglib" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "taglib" "doc/taglib@taglib/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/taglib.txt") (test-failure-log . "server/built/test-fail/taglib.txt") (test-success-log . #f))) (checksum . "69b0494bac4cf2d4c6b99701c7b586bdb827a0a3") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "Bindings to the taglib C library, which provides simple access to audio file metadata.") (implies . ()) (last-checked . 1522414690) (last-edit . 1352400326) (last-updated . 1502816472) (modules . ((lib "taglib/scribblings/taglib.scrbl") (lib "taglib/main.rkt") (lib "taglib/taglib.rkt"))) (name . "taglib") (nix-sha256 . "07ag4ppy757qzr81yavwh9lfakqas3429kwiqaminv56fhbmz603") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audio . #t) (author:asumu@ccs.neu.edu . #t) (ring:1 . #t))) (source . "github://github.com/takikawa/taglib-racket/master") (tags . ("audio")) (versions . #hash((default . #hasheq((checksum . "69b0494bac4cf2d4c6b99701c7b586bdb827a0a3") (source . "github://github.com/takikawa/taglib-racket/master") (source_url . "http://github.com/takikawa/taglib-racket/tree/master"))))))) ("punctaffy-test" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/punctaffy-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/punctaffy-test.txt"))) (checksum . "7165a2fa50ae3d631753652671cb4a19df1f02c4") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "parendown" "punctaffy-lib" "rackunit-lib")) (description . "A library for manipulating higher-degree notions of brackets, such as quasiquotation syntax. (test)") (implies . ()) (last-checked . 1522414537) (last-edit . 1509266829) (last-updated . 1520926809) (modules . ((lib "punctaffy/tests/multi-phase.rkt") (lib "punctaffy/tests/single-phase.rkt"))) (name . "punctaffy-test") (nix-sha256 . "0gmnwwxc1aigfgpv2p59apg1g93r2acgx9x2za5i6nk22f1ydw0h") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (experimental . #t) (extensible . #t) (macro . #t) (quasiquotation . #t) (ring:2 . #t) (syntax . #t) (unstable . #t))) (source . "git://github.com/rocketnia/punctaffy?path=punctaffy-test") (tags . ("experimental" "extensible" "macro" "quasiquotation" "syntax" "unstable")) (versions . #hash((default . #hasheq((checksum . "7165a2fa50ae3d631753652671cb4a19df1f02c4") (source . "git://github.com/rocketnia/punctaffy?path=punctaffy-test") (source_url . "http://github.com/rocketnia/punctaffy/tree/master?path=punctaffy-test"))))))) ("explorer" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/explorer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/explorer.txt"))) (checksum . "2a1836d01a7ff2ed025a67cc5f06c38b56776b2d") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "gui-lib" "rackunit-lib")) (description . "Utility for interactive exploration of complex data structures.") (implies . ()) (last-checked . 1522414399) (last-edit . 1382141997) (last-updated . 1502815957) (modules . ((lib "explorer/main.rkt") (lib "explorer/compile-cond.rkt") (lib "explorer/frame.rkt") (lib "explorer/example.rkt") (lib "explorer/workspace.rkt"))) (name . "explorer") (nix-sha256 . "0ml68mrxhl002vi7zm6gpqv740r54gjgi51fvj8vqajnqmbc24vf") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/tonyg/racket-explorer") (tags . ()) (versions . #hash((default . #hasheq((checksum . "2a1836d01a7ff2ed025a67cc5f06c38b56776b2d") (source . "git://github.com/tonyg/racket-explorer") (source_url . "http://github.com/tonyg/racket-explorer/tree/master"))))))) ("asn1-doc" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "asn1" "doc/asn1@asn1-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/asn1-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/asn1-doc.txt"))) (checksum . "34802b6cc4f0f2200a2feb2aa724833fc17b157a") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "asn1-lib")) (description . "ASN.1 library") (implies . ()) (last-checked . 1522417871) (last-edit . 1518435052) (last-updated . 1518435052) (modules . ((lib "asn1/scribblings/translating.scrbl") (lib "asn1/scribblings/intro.scrbl") (lib "asn1/scribblings/asn1.scrbl") (lib "asn1/scribblings/types.scrbl") (lib "asn1/scribblings/codec.scrbl"))) (name . "asn1-doc") (nix-sha256 . "1w8h4q0s82898961qsn4mf24fmbsszznvjhrcw1w4xigwdivw4y0") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (io . #t) (net . #t) (parser . #t) (parsing . #t) (ring:2 . #t))) (source . "https://github.com/rmculpepper/asn1.git?path=asn1-doc") (tags . ("io" "net" "parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "34802b6cc4f0f2200a2feb2aa724833fc17b157a") (source . "https://github.com/rmculpepper/asn1.git?path=asn1-doc") (source_url . "https://github.com/rmculpepper/asn1.git?path=asn1-doc"))))))) ("srfi-lite-lib" . #hash((author . "mflatt@racket-lang.org") (checksum . "6f8659c9c903ff1ee9c94250e3878eba915c5df7") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "srfi-lite-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/srfi-lite-lib.zip") (tags . ()))) ("bloggy" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bloggy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bloggy.txt"))) (checksum . "d189325911f28fdfd9b8d7ae64225838d6400596") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "A very simple Racket blog system") (implies . ()) (last-checked . 1522414311) (last-edit . 1357059788) (last-updated . 1502812283) (modules . ((lib "bloggy/main.rkt"))) (name . "bloggy") (nix-sha256 . "1gy54c7nay7byird24fv4g6r1p70rsfrb11cklyc4c2n49yj5ssw") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (app . #t) (author:jay.mccarthy@gmail.com . #t) (blog . #t) (ring:1 . #t) (web . #t))) (source . "github://github.com/jeapostrophe/bloggy/master") (tags . ("app" "blog" "web")) (versions . #hash((default . #hasheq((checksum . "d189325911f28fdfd9b8d7ae64225838d6400596") (source . "github://github.com/jeapostrophe/bloggy/master") (source_url . "http://github.com/jeapostrophe/bloggy/tree/master"))))))) ("ldap-ffi" . #hasheq((author . "kalimehtar@mail.ru dmitryhertz@gmail.com") (authors . ("kalimehtar@mail.ru" "dmitryhertz@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ldap-ffi" "doc/ldap-ffi@ldap-ffi/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ldap-ffi.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ldap-ffi.txt"))) (checksum . "ed852e742d553729df921adb3c13e6e9272d291b") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "ldap-ffi: a Racket LDAP client built on top of libldap C API") (implies . ()) (last-checked . 1522414423) (last-edit . 1502735833) (last-updated . 1522216336) (modules . ((lib "ldap-ffi/scribblings/ldap-ffi.scrbl") (lib "ldap-ffi/ldap.rkt") (lib "ldap-ffi/test.rkt") (lib "ldap-ffi/ffi.rkt") (lib "ldap-ffi/main.rkt"))) (name . "ldap-ffi") (nix-sha256 . "12lj3zd0vi8pf6jirvwc8gfwdyqcyj4wr2j7acmsbr03qria7mjc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dmitryhertz@gmail.com . #t) (author:kalimehtar@mail.ru . #t) (ffi . #t) (ldap . #t) (net . #t) (ring:1 . #t))) (source . "git://github.com/DmHertz/ldap-ffi") (tags . ("ffi" "ldap" "net")) (versions . #hash((default . #hasheq((checksum . "ed852e742d553729df921adb3c13e6e9272d291b") (source . "git://github.com/DmHertz/ldap-ffi") (source_url . "http://github.com/DmHertz/ldap-ffi/tree/master"))))))) ("wxme-lib" . #hash((author . "mflatt@racket-lang.org") (checksum . "56be8e531cced09d3c3ae9fc58934bdbad9b7920") (dependencies . ("scheme-lib" "base" "compatibility-lib" "snip-lib")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "wxme-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/wxme-lib.zip") (tags . ()))) ("binary-class-dbf" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/binary-class-dbf.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/binary-class-dbf.txt"))) (checksum . "751ed1b7e44f6894d7bdc468727bfc854677338b") (checksum-error . #f) (conflicts . ()) (dependencies . ("binary-class" "base" "fast-convert")) (description . "Interface to *.dbf files (dBase, Foxpro, ...)") (implies . ()) (last-checked . 1522414310) (last-edit . 1404276243) (last-updated . 1502812281) (modules . ((lib "binary-class/dbf.scrbl") (lib "binary-class/dbf.rkt"))) (name . "binary-class-dbf") (nix-sha256 . "1v2jwzcivxx8kq2s6m87i01grjr1s1lf9rw1zj3ys0ff5fdr1v4r") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:kalimehtar@mail.ru . #t) (db . #t) (io . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "git://github.com/Kalimehtar/binary-class-dbf") (tags . ("db" "io" "parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "751ed1b7e44f6894d7bdc468727bfc854677338b") (source . "git://github.com/Kalimehtar/binary-class-dbf") (source_url . "http://github.com/Kalimehtar/binary-class-dbf/tree/master"))))))) ("libuuid" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "libuuid" "doc/libuuid@libuuid/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libuuid.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libuuid.txt"))) (checksum . "4bead1a3ccfc1714c1c494f8720c764e4f3b182f") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "FFI bindings for the libuuid library.") (implies . ()) (last-checked . 1522414424) (last-edit . 1408365245) (last-updated . 1515587056) (modules . ((lib "libuuid/libuuid.scrbl") (lib "libuuid/main.rkt"))) (name . "libuuid") (nix-sha256 . "0gk279gk9cs4jxdpmwdk61mlxplrk94jzzbyfw9mwxzv0l6ngpbh") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mordae@anilinux.org . #t) (ffi . #t) (ring:1 . #t))) (source . "github://github.com/mordae/racket-libuuid/master") (tags . ("ffi")) (versions . #hash((default . #hasheq((checksum . "4bead1a3ccfc1714c1c494f8720c764e4f3b182f") (source . "github://github.com/mordae/racket-libuuid/master") (source_url . "http://github.com/mordae/racket-libuuid/tree/master"))))))) ("pict3d-orig" . #hasheq((author . "neil.toronto@gmail.com") (authors . ("neil.toronto@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "pict3d") ("salvage" "typed-opengl" "doc/typed-opengl@pict3d-orig/index.html"))) (failure-log . "server/built/fail/pict3d-orig.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "09283c9d930c63b6a6a3f2caa43e029222091bdb") (checksum-error . #f) (conflicts . ("pict3d")) (dependencies . (("base" #:version "6.1.1") "draw-lib" "srfi-lite-lib" "typed-racket-lib" "typed-racket-more" "math-lib" "scribble-lib" "gui-lib" "pconvert-lib" "pict-lib" "profile-lib" "pfds" "draw-doc" "gui-doc" "gui-lib" "racket-doc" "plot-doc" "plot-lib" "plot-gui-lib" "images-doc" "images-lib" "htdp-doc" "htdp-lib" "pict-doc" "typed-racket-doc")) (description . "Modern 3D engine with a purely functional interface") (implies . ()) (last-checked . 1522414512) (last-edit . 1422736009) (last-updated . 1502816255) (modules . ((lib "pict3d/scribblings/sniplike-bitmap.rkt") (lib "pict3d/private/math/flprojective3.rkt") (lib "pict3d/private/math/flv3-merge.rkt") (lib "pict3d/private/shape.rkt") (lib "pict3d/private/shape/sphere/ge_32.rkt") (lib "pict3d/tests/opengl/planet.rkt") (lib "pict3d/private/engine/types.rkt") (lib "pict3d/private/math/fl.rkt") (lib "pict3d/private/math/fls3.rkt") (lib "pict3d/private/shape/triangle-mesh.rkt") (lib "pict3d/tests/opengl/vbotest.rkt") (lib "pict3d/tests/math/flv3-tests.rkt") (lib "pict3d/private/math/flaffine3.rkt") (lib "pict3d/private/gui/pict3d-bitmap.rkt") (lib "pict3d/private/gui/utils/format.rkt") (lib "pict3d/private/gui/typed-pict3d-combinators.rkt") (lib "pict3d/private/gl/cached-vector.rkt") (lib "pict3d/tests/triangle-surface.rkt") (lib "pict3d/private/shape/disk.rkt") (lib "pict3d/private/gui/pict3d-struct.rkt") (lib "pict3d/private/math/maybe-flrect3.rkt") (lib "pict3d/tests/spinny-cube/player.rkt") (lib "pict3d/private/gui/utils/scales.rkt") (lib "pict3d/private/utils.rkt") (lib "pict3d/tests/opengl/gltest.rkt") (lib "pict3d/private/shape/directional-light.rkt") (lib "pict3d/private/soup/deform.rkt") (lib "pict3d/private/engine/draw.rkt") (lib "typed/opengl/typed-types.rkt") (lib "pict3d/private/shape/rectangle.rkt") (lib "pict3d/tests/depth-range.rkt") (lib "pict3d/private/math/flt3.rkt") (lib "pict3d/tests/fractal-trees.rkt") (lib "pict3d/scribblings/utils.rkt") (lib "pict3d/tests/spinny-cube/player-state.rkt") (lib "pict3d/tests/gen-world-state.rkt") (lib "pict3d/private/engine/shader.rkt") (lib "pict3d/private/gl/context.rkt") (lib "pict3d/private/engine/draw/draw-pass.rkt") (lib "pict3d/private/ffi-types.rkt") (lib "pict3d/private/math/flplane3.rkt") (lib "pict3d/private/soup/types.rkt") (lib "pict3d/private/engine/utils.rkt") (lib "pict3d/private/shape/sphere.rkt") (lib "pict3d/tests/adaptive-deform.rkt") (lib "pict3d/private/engine/scene.rkt") (lib "pict3d/private/engine/shader/shader-code.rkt") (lib "pict3d/private/soup/mesh.rkt") (lib "pict3d/private/gl/program.rkt") (lib "pict3d/private/math/flt3-data.rkt") (lib "pict3d/private/gui/typed-user-types.rkt") (lib "pict3d/private/shape/types.rkt") (lib "pict3d/tests/deform-groups.rkt") (lib "typed/opengl/ffi.rkt") (lib "pict3d/private/gui/pict3d-draw.rkt") (lib "pict3d/private/untyped-utils.rkt") (lib "typed/opengl/readspec.rkt") (lib "pict3d/private/gl/face.rkt") (lib "pict3d/private/gui/master-context.rkt") (lib "pict3d/private/math/flv3.rkt") (lib "pict3d/private/gui/untyped-pict3d-bitmap.rkt") (lib "typed/opengl/ffi-types.rkt") (lib "pict3d/tests/spinny-cube/player-state-test.rkt") (lib "pict3d/private/shape/cylinder.rkt") (lib "pict3d/tests/opengl/viewer.rkt") (lib "pict3d/private/shape/sphere/sphere-type.rkt") (lib "pict3d/private/shape/polygon.rkt") (lib "pict3d/private/gui/utils/timeout-timer.rkt") (lib "pict3d/private/gui/untyped-master-context.rkt") (lib "pict3d/private/engine/scene/scene.rkt") (lib "pict3d/scribblings/serializable-bitmap.rkt") (lib "pict3d/tests/opengl/shadertest.rkt") (lib "pict3d/private/math.rkt") (lib "pict3d/tests/triangle-vertex.rkt") (lib "typed/opengl/typed-opengl.scrbl") (lib "typed/opengl/untyped.rkt") (lib "pict3d/private/math/flt3-unboxed-ops.rkt") (lib "pict3d/private/gui/pict3d-combinators.rkt") (lib "pict3d/private/gui/pict3d-snip.rkt") (lib "pict3d/private/engine/scene/types.rkt") (lib "pict3d/private/gl/framebuffer.rkt") (lib "pict3d/private/gui/untyped-pict3d-canvas.rkt") (lib "pict3d/tests/debug-passes.rkt") (lib "pict3d/tests/spaceship.rkt") (lib "pict3d/main.rkt") (lib "pict3d/private/math/flv4.rkt") (lib "pict3d/private/gui/parameters.rkt") (lib "pict3d/private/gui/shape/light-grid.rkt") (lib "pict3d/tests/trace.rkt") (lib "pict3d/private/gui/utils/camera.rkt") (lib "pict3d/tests/cull.rkt") (lib "pict3d/private/gui/typed-pict3d-canvas.rkt") (lib "pict3d/private/shape/frozen-scene.rkt") (lib "pict3d/private/math/fl2.rkt") (lib "pict3d/private/soup/query.rkt") (lib "pict3d/private/universe/big-bang.rkt") (lib "pict3d/private/gl/buffer.rkt") (lib "typed/opengl/utils.rkt") (lib "pict3d/private/gui/pict3d-canvas.rkt") (lib "pict3d/private/engine/shader/serialize-vertices.rkt") (lib "pict3d/tests/docs-complete.rkt") (lib "pict3d/private/gui/indicators.rkt") (lib "pict3d/private/engine/scene/scene-query.rkt") (lib "pict3d/universe.rkt") (lib "pict3d/tests/spinny-cube/debug-picts.rkt") (lib "pict3d/engine.rkt") (lib "pict3d/private/lazy-gui.rkt") (lib "pict3d/private/engine/draw/draw-passes.rkt") (lib "typed/opengl.rkt") (lib "pict3d/private/gl/typed-context.rkt") (lib "pict3d/private/gl/texture.rkt") (lib "pict3d/private/soup/geometry.rkt") (lib "pict3d/private/gl/renderbuffer.rkt") (lib "pict3d/private/memo.rkt") (lib "pict3d/private/shape/sphere/ge_30.rkt") (lib "pict3d/scribblings/pict3d.scrbl") (lib "pict3d/tests/spheres-on-canvas.rkt") (lib "pict3d/private/math/flrect3.rkt") (lib "pict3d/tests/randomized/check-ray-trace-vs-opengl.rkt") (lib "pict3d/tests/opengl/gears.rkt") (lib "pict3d/private/gl/untyped-context.rkt") (lib "pict3d/private/math/fl4.rkt") (lib "pict3d/private/gl/object.rkt") (lib "pict3d/private/shape/composite.rkt") (lib "pict3d/private/math/fl3.rkt") (lib "pict3d/private/engine/draw/types.rkt") (lib "pict3d/private/gui/user-types.rkt") (lib "pict3d/private/gui/utils/center-pointer.rkt") (lib "pict3d/tests/randomized/randomized-tests.rkt") (lib "pict3d/private/gui/shape/point-light-shell.rkt") (lib "pict3d/private/engine.rkt") (lib "pict3d/private/math/fllinear3.rkt") (lib "pict3d/private/soup.rkt") (lib "pict3d/tests/snowman.rkt") (lib "pict3d/tests/randomized/regression-tests.rkt") (lib "pict3d/private/engine/scene/tags.rkt") (lib "pict3d/tests/nuclear-sausage-plant.rkt") (lib "pict3d/private/shape/triangle-outline.rkt") (lib "pict3d/private/gui/invisible-context.rkt") (lib "pict3d/private/soup/group.rkt") (lib "typed/opengl/typed.rkt") (lib "pict3d/tests/camera-ray-trace.rkt") (lib "pict3d/private/engine/draw/merge-passes.rkt") (lib "pict3d/private/shape/point-light.rkt") (lib "pict3d/tests/randomized/check-tessellate-vs-orig.rkt") (lib "pict3d/private/gl.rkt") (lib "pict3d/private/ffi.rkt") (lib "pict3d/private/gl/vertex-array.rkt") (lib "pict3d/tests/opengl/bitmaptest.rkt"))) (name . "pict3d-orig") (nix-sha256 . "0b5xdq9rlxbbzp1kf5vmv6s84sh2gjg2lb3gbvif04ivi25b8s3i") (ring . 2) (search-terms . #hasheq((3d . #t) (:build-fail: . #t) (:conflicts: . #t) (:docs-error: . #t) (author:neil.toronto@gmail.com . #t) (games . #t) (graphics . #t) (gui . #t) (opengl . #t) (ring:2 . #t))) (source . "git://github.com/ntoronto/pict3d") (tags . ("3d" "games" "graphics" "gui" "opengl")) (versions . #hash((default . #hasheq((checksum . "09283c9d930c63b6a6a3f2caa43e029222091bdb") (source . "git://github.com/ntoronto/pict3d") (source_url . "http://github.com/ntoronto/pict3d/tree/master"))))))) ("typed-racket-test" . #hash((author . "samth@racket-lang.org stamourv@racket-lang.org") (checksum . "fcd251b1056d229b59eaee725b2e08ce13801c74") (dependencies . ("redex-lib" "sandbox-lib" ("base" #:version "6.2.900.16") ("typed-racket-lib" #:version "1.3") "typed-racket-more" "typed-racket-compatibility" "2d" "rackunit-lib" "racket-index" "compatibility-lib" "math-lib" "scheme-lib" "base" "racket-benchmarks" "rackunit-lib" "compiler-lib" "redex-lib" "htdp-lib" "sandbox-lib")) (description . "samth@racket-lang.org stamourv@racket-lang.org") (modules . ()) (name . "typed-racket-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/typed-racket-test.zip") (tags . ()))) ("unstable-macro-testing-lib" . #hash((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-macro-testing-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-macro-testing-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.2.900.6"))) (description . "Experimental libraries for testing macros") (implies . ()) (last-checked . 1522414698) (last-edit . 1445382797) (last-updated . 1502816515) (modules . ((lib "unstable/macro-testing.rkt"))) (name . "unstable-macro-testing-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("unstable")) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) (default . #hasheq((checksum . "92c7c6d8fb35f17fb74ab4f2ad995f487cca0d96") (source . "git://github.com/racket/unstable-macro-testing-lib") (source_url . "http://github.com/racket/unstable-macro-testing-lib/tree/master"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("benchmark" . #hasheq((author . "stamourv@racket-lang.org") (authors . ("stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "benchmark" "doc/benchmark@benchmark/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/benchmark.txt") (test-failure-log . "server/built/test-fail/benchmark.txt") (test-success-log . #f))) (checksum . "78f36c4e85e97de9de0367d0464d40710659912c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "math-lib" "plot-gui-lib" "plot-lib" "typed-racket-lib" "plot-doc" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Benchmarking library") (implies . ()) (last-checked . 1522414305) (last-edit . 1398970069) (last-updated . 1502812280) (modules . ((lib "benchmark/examples/external/collatz1000.rkt") (lib "benchmark/macro.rkt") (lib "benchmark/examples/sleep.rkt") (lib "benchmark/results.rkt") (lib "benchmark/main.rkt") (lib "benchmark/examples/sleep-delta.rkt") (lib "benchmark/examples/macro-examples/collatz.rkt") (lib "benchmark/examples/external/fib5.rkt") (lib "benchmark/examples/macro-examples/fib.rkt") (lib "benchmark/examples/scribble-example1.rkt") (lib "benchmark/examples/incremental-record.rkt") (lib "benchmark/types.rkt") (lib "benchmark/examples/scribble-example2.rkt") (lib "benchmark/examples/external/fib20.rkt") (lib "benchmark/plot.rkt") (lib "benchmark/scribblings/benchmark.scrbl") (lib "benchmark/examples/sleep-racket-time.rkt") (lib "benchmark/bootstrap-ci.rkt"))) (name . "benchmark") (nix-sha256 . "0s3zlav03i9x3wkzxikzpm91f0fkjxp97nsdckdbylv5abvmqhlf") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:stamourv@racket-lang.org . #t) (performance . #t) (ring:1 . #t))) (source . "git://github.com/stamourv/racket-benchmark#master") (tags . ("performance")) (versions . #hash(("6.3" . #hasheq((checksum . "679dac464f413f617e9654262d28534088057dba") (source . "github://github.com/stamourv/racket-benchmark/racket-6.3") (source_url . "http://github.com/stamourv/racket-benchmark/tree/racket-6.3"))) (default . #hasheq((checksum . "78f36c4e85e97de9de0367d0464d40710659912c") (source . "git://github.com/stamourv/racket-benchmark#master") (source_url . "http://github.com/stamourv/racket-benchmark/tree/master#master"))) ("6.2" . #hasheq((checksum . "757898302572e930bf8be254361e226dbda75af5") (source . "github://github.com/stamourv/racket-benchmark/racket-6.2") (source_url . "http://github.com/stamourv/racket-benchmark/tree/racket-6.2"))))))) ("planet-doc" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (checksum . "eb2b051c3bb9831312110c2a54406548209cd9c7") (dependencies . ("planet-lib" "scribble-lib" "base" "racket-doc" "scribble-doc")) (description . "mflatt@racket-lang.org robby@racket-lang.org") (modules . ()) (name . "planet-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/planet-doc.zip") (tags . ()))) ("class-iop-doc" . #hash((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "class-iop" "doc/class-iop@class-iop-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/class-iop-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/class-iop-doc.txt"))) (checksum . "a4fd4beea6d9c8786a108ac12c997097b90191a9") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.2.900.6") "class-iop-lib" "scribble-lib" "racket-doc")) (description . "Documentation for \"class-iop\"") (implies . ()) (last-checked . 1522414313) (last-edit . 1438195663) (last-updated . 1502812290) (modules . ((lib "scribblings/iop/class-iop.scrbl"))) (name . "class-iop-doc") (nix-sha256 . "105xjqhv6hiidlgp7f2bjqbkzn7h2q11plmhx3x6s8b8whjsgxa0") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "git://github.com/racket/class-iop?path=class-iop-doc") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "a4fd4beea6d9c8786a108ac12c997097b90191a9") (source . "git://github.com/racket/class-iop?path=class-iop-doc") (source_url . "http://github.com/racket/class-iop/tree/master?path=class-iop-doc"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("racketui" . #hasheq((author . "nadeem@acm.org") (authors . ("nadeem@acm.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "racketui" "doc/racketui@racketui/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racketui.txt") (test-failure-log . "server/built/test-fail/racketui.txt") (test-success-log . #f))) (checksum . "059fda3fa60b84a390fabe764e12edbdfd079190") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "draw-lib" "htdp-lib" "srfi-lite-lib" "web-server-lib" "racket-doc" "scribble-lib")) (description . "Automated web forms UI generator (especially for HtDP)") (implies . ()) (last-checked . 1522414662) (last-edit . 1500073915) (last-updated . 1502816372) (modules . ((lib "racketui/bsl-tests/genetics-list-struct-contain.rkt") (lib "racketui/main.rkt") (lib "racketui/save.rkt") (lib "racketui/web.rkt") (lib "racketui/scribblings/racketui.scrbl") (lib "racketui/bsl-tests/web-file-size-mixed-struct.rkt") (lib "racketui/web-launch.rkt") (lib "racketui/tests/tfield-tests.rkt") (lib "racketui/tests/save-tests.rkt") (lib "racketui/bsl-tests/target-img.rkt") (lib "racketui/bsl-tests/reverser-file-io.rkt") (lib "racketui/bsl-tests/blood-test-2list.rkt") (lib "racketui/bsl-tests/hello.rkt") (lib "racketui/tests/web-tests.rkt") (lib "racketui/tests/syntax-tests.rkt") (lib "racketui/bsl-tests/dish-order-cost-struct.rkt") (lib "racketui/bsl-tests/acronym-list-str.rkt") (lib "racketui/bsl-tests/all-bigger-2list.rkt") (lib "racketui/tfield.rkt") (lib "racketui/bsl-tests/clock-img.rkt") (lib "racketui/common.rkt") (lib "racketui/syntax.rkt") (lib "racketui/bsl-tests/counter-change-img.rkt") (lib "racketui/render.rkt") (lib "racketui/bsl-tests/total-sales-seats-matrix.rkt") (lib "racketui/bsl-tests/longest-list-str.rkt") (lib "racketui/bsl-tests/grades-average-list-mixed.rkt") (lib "racketui/bsl-tests/wgt-on-moon-simple.rkt") (lib "racketui/bsl-tests/caesar-file.rkt"))) (name . "racketui") (nix-sha256 . "0v2wx5jm98rw0v3j4jj80xqvs0r23403pb0nabq8fcjqlmhj68a4") (ring . 1) (search-terms . #hasheq((2htdp . #t) (:build-success: . #t) (:docs: . #t) (author:nadeem@acm.org . #t) (ring:1 . #t) (web . #t))) (source . "git://github.com/nadeemabdulhamid/racketui") (tags . ("2htdp" "web")) (versions . #hash((default . #hasheq((checksum . "059fda3fa60b84a390fabe764e12edbdfd079190") (source . "git://github.com/nadeemabdulhamid/racketui") (source_url . "http://github.com/nadeemabdulhamid/racketui/tree/master"))))))) ("hive-client" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/hive-client.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hive-client.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hive-client.txt"))) (checksum . "8a9dd23042f61821f365a09436067c1d2d562059") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "hive-common" "racket-doc")) (description . "Hive: client-server framework. This is client package.") (implies . ()) (last-checked . 1522414415) (last-edit . 1466352183) (last-updated . 1502816118) (modules . ((lib "hive/client/users.rkt") (lib "hive/client/defaults.rkt") (lib "hive/client/commands.rkt") (lib "hive/client/string-constants.rkt") (lib "hive/client/string-constants-ru.rkt") (lib "hive/client.rkt") (lib "hive/client/string-constants-en.rkt"))) (name . "hive-client") (nix-sha256 . "0xbaggnj0lacfkdhz5ywl6wbznfhya2cgcww12y7shmhszcf4aia") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:kalimehtar@mail.ru . #t) (client . #t) (ipc . #t) (ring:1 . #t))) (source . "git://github.com/Kalimehtar/hive-client") (tags . ("client" "ipc")) (versions . #hash((default . #hasheq((checksum . "8a9dd23042f61821f365a09436067c1d2d562059") (source . "git://github.com/Kalimehtar/hive-client") (source_url . "http://github.com/Kalimehtar/hive-client/tree/master"))))))) ("sweet-exp-lib" . #hasheq((author . "alexander@knauth.org asumu@ccs.neu.edu") (authors . ("alexander@knauth.org" "asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sweet-exp-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sweet-exp-lib.txt"))) (checksum . "2084656a266131cd589be727102d9ea26ed7a65b") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "Implementation part of sweet-exp") (implies . ()) (last-checked . 1522414686) (last-edit . 1469717779) (last-updated . 1502816462) (modules . ((lib "sweet-exp/main.rkt") (lib "sweet-exp/sugar.rkt") (lib "sweet-exp/racket/init.rkt") (lib "sweet-exp/sweet.rkt") (lib "sweet-exp/modern/process-curly.rkt") (lib "sweet-exp/indent.rkt") (lib "sweet-exp/util.rkt") (lib "sweet-exp/read-sig.rkt") (lib "sweet-exp/modern.rkt"))) (name . "sweet-exp-lib") (nix-sha256 . "11z04fd7w48ar4g2zf62pi9x24hmxjvl762cap13n0mi3kyj216b") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (author:asumu@ccs.neu.edu . #t) (ring:1 . #t) (syntax . #t))) (source . "git://github.com/takikawa/sweet-racket?path=sweet-exp-lib") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "2084656a266131cd589be727102d9ea26ed7a65b") (source . "git://github.com/takikawa/sweet-racket?path=sweet-exp-lib") (source_url . "http://github.com/takikawa/sweet-racket/tree/master?path=sweet-exp-lib"))))))) ("refined-acl2" . #hasheq((author . "cce@racket-lang.org") (authors . ("cce@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/refined-acl2.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "2e344ad7bcbc5b5a758296a8158dcf9a7f3880bd") (checksum-error . #f) (conflicts . ()) (dependencies . ("mischief")) (description . "Refined ACL2: experimental implementation of ACL2-verifiable code with ML modules and Racket macros.") (implies . ()) (last-checked . 1522414670) (last-edit . 1378339910) (last-updated . 1502816397) (modules . ((lib "refined-acl2/certify.rkt") (lib "refined-acl2/model/names.rkt") (lib "refined-acl2/prelude/core/component.rkt") (lib "refined-acl2/examples/virtual-machine/descriptions.rkt") (lib "refined-acl2/legacy/type/base.rkt") (lib "refined-acl2/examples/id-non-dracula/original.rkt") (lib "refined-acl2/prelude/list-of.rkt") (lib "refined-acl2/prelude/core/keywords.rkt") (lib "refined-acl2/model/acl2.rkt") (lib "refined-acl2/model/api.rkt") (lib "refined-acl2/examples/id-non-dracula/check.rkt") (lib "refined-acl2/examples/vm.rkt") (lib "refined-acl2/prelude.rkt") (lib "refined-acl2/prelude/base/struct.rkt") (lib "refined-acl2/examples/generic.rkt") (lib "refined-acl2/prelude/core/description.rkt") (lib "refined-acl2/tests/suite/modular.rkt") (lib "refined-acl2/prelude/core/imported.rkt") (lib "refined-acl2/tests/suite/atomic.rkt") (lib "refined-acl2/prelude/type.rkt") (lib "refined-acl2/core.rkt") (lib "refined-acl2/prelude/core/expressions.rkt") (lib "refined-acl2/prelude/base/datatype.rkt") (lib "refined-acl2/tests/run.rkt") (lib "refined-acl2/legacy/type/function.rkt") (lib "refined-acl2/expansion/grammar.rkt") (lib "refined-acl2/legacy/ref.rkt") (lib "refined-acl2/expansion/runtime.rkt") (lib "refined-acl2/examples/sexp.rkt") (lib "refined-acl2/legacy/type/theorem.rkt") (lib "refined-acl2/examples/id-non-dracula/fresh.rkt") (lib "refined-acl2/tests/suite/macro.rkt") (lib "refined-acl2/base.rkt") (lib "refined-acl2/tests/harness.rkt") (lib "refined-acl2/expansion/simplify.rkt") (lib "refined-acl2/examples/virtual-machine/soundness.rkt") (lib "refined-acl2/prelude/core/expansion.rkt") (lib "refined-acl2/examples/ast.rkt") (lib "refined-acl2/legacy/type/generic.rkt") (lib "refined-acl2/legacy/type.rkt") (lib "refined-acl2/proof/static.rkt") (lib "refined-acl2/primitive.rkt") (lib "refined-acl2/legacy/api.rkt") (lib "refined-acl2/prelude/sexp.rkt") (lib "refined-acl2/legacy/type/field.rkt") (lib "refined-acl2/legacy/type/description.rkt") (lib "refined-acl2/legacy/registry.rkt") (lib "refined-acl2/prelude/base/shorthand.rkt") (lib "refined-acl2/kernel.rkt") (lib "refined-acl2/model.rkt") (lib "refined-acl2/proof/term.rkt") (lib "refined-acl2/examples/bug.rkt") (lib "refined-acl2/prelude/base/primitive.rkt") (lib "refined-acl2/model/data.rkt") (lib "refined-acl2/prelude/base/mutual.rkt") (lib "refined-acl2/model/verify.rkt") (lib "refined-acl2/examples/id-non-dracula/different.rkt") (lib "refined-acl2/examples/id-non-dracula/identical.rkt") (lib "refined-acl2/expansion/names.rkt") (lib "refined-acl2/prelude/core/input-streams.rkt") (lib "refined-acl2/proof/dynamic.rkt") (lib "refined-acl2/legacy/check.rkt") (lib "refined-acl2/prelude/core/atomic.rkt") (lib "refined-acl2/tests/suite/surface.rkt") (lib "refined-acl2/expansion/alpha.rkt") (lib "refined-acl2/legacy/proof.rkt") (lib "refined-acl2/prelude/base.rkt") (lib "refined-acl2/prelude/base/match.rkt") (lib "refined-acl2/prelude/core/support.rkt") (lib "refined-acl2/legacy/rename.rkt") (lib "refined-acl2/legacy/type/component.rkt") (lib "refined-acl2/tests/diff.rkt") (lib "refined-acl2/model/parse.rkt") (lib "refined-acl2/model/quote.rkt") (lib "refined-acl2/model/subst.rkt") (lib "refined-acl2/legacy/unique.rkt") (lib "refined-acl2/prelude/set-of.rkt") (lib "refined-acl2/legacy/type/value.rkt") (lib "refined-acl2/expansion/paths.rkt") (lib "refined-acl2/model/proof-term.rkt") (lib "refined-acl2/model/syntax.rkt") (lib "refined-acl2/expansion/dependency.rkt") (lib "refined-acl2/model/unparse.rkt") (lib "refined-acl2/tests/suite/component.rkt") (lib "refined-acl2/examples/diss.rkt") (lib "refined-acl2/main.rkt") (lib "refined-acl2/prelude/core.rkt"))) (name . "refined-acl2") (nix-sha256 . "0d34c281l2rbcns8l4fg53di787dzxqqn11fgp9i14nih0rzh3gx") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:cce@racket-lang.org . #t) (ring:1 . #t))) (source . "github://github.com/carl-eastlund/refined-acl2/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "2e344ad7bcbc5b5a758296a8158dcf9a7f3880bd") (source . "github://github.com/carl-eastlund/refined-acl2/master") (source_url . "http://github.com/carl-eastlund/refined-acl2/tree/master"))))))) ("unstable-list-lib" . #hash((author . "ryanc@racket-lang.org samth@racket-lang.org") (authors . ("ryanc@racket-lang.org" "samth@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-list-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-list-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "class-iop-lib")) (description . "Experimental libraries for list operations") (implies . ()) (last-checked . 1522414698) (last-edit . 1445382797) (last-updated . 1502816514) (modules . ((lib "unstable/bytes.rkt") (lib "unstable/hash.rkt") (lib "unstable/class-iop.rkt") (lib "unstable/list.rkt") (lib "unstable/function.rkt"))) (name . "unstable-list-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("unstable")) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) (default . #hasheq((checksum . "a328c5e663072779f70a42a722d2c3e9f2c430c3") (source . "git://github.com/racket/unstable-list-lib") (source_url . "http://github.com/racket/unstable-list-lib/tree/master"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("collections-test" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/collections-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/collections-test.txt"))) (checksum . "5b3ec9b3ea3ca493f3fcda4994b81bc804f29870") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "collections-lib" "match-plus" "rackunit-lib")) (description . "") (implies . ()) (last-checked . 1522414314) (last-edit . 1475261238) (last-updated . 1502812298) (modules . ((lib "tests/data/collection/sequence.rkt") (lib "tests/data/collection/contract.rkt") (lib "tests/data/collection/match.rkt") (lib "tests/data/collection/experimental/quasi.rkt") (lib "tests/data/collection/collection.rkt") (lib "tests/data/collection/dict.rkt") (lib "tests/data/collection/sequence-lib.rkt"))) (name . "collections-test") (nix-sha256 . "0vh781q0iw0wv1a741qp7s9havc030p5wahz6vcdhfn9azv00znp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-collections?path=collections-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "5b3ec9b3ea3ca493f3fcda4994b81bc804f29870") (source . "git://github.com/lexi-lambda/racket-collections?path=collections-test") (source_url . "http://github.com/lexi-lambda/racket-collections/tree/master?path=collections-test"))))))) ("zeromq-r-lib" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zeromq-r-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/zeromq-r-lib.txt"))) (checksum . "2bf136f8b7b9a53ec0141a8b61fe8d874918a139") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.10"))) (description . "Bindings for ZeroMQ") (implies . ()) (last-checked . 1522414704) (last-edit . 1501792313) (last-updated . 1513754237) (modules . ((lib "zeromq/main.rkt") (lib "zeromq/private/addr.rkt") (lib "zeromq/unsafe.rkt") (lib "zeromq/private/ffi.rkt"))) (name . "zeromq-r-lib") (nix-sha256 . "06pmcxiwy7cmq6518xxnzx0p546fiav74nryvzyirasrcjmz6mdm") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (net . #t) (ring:1 . #t))) (source . "git://github.com/rmculpepper/racket-zeromq?path=zeromq-r-lib") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "2bf136f8b7b9a53ec0141a8b61fe8d874918a139") (source . "git://github.com/rmculpepper/racket-zeromq?path=zeromq-r-lib") (source_url . "http://github.com/rmculpepper/racket-zeromq/tree/master?path=zeromq-r-lib"))))))) ("hamt" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "hamt" "doc/hamt@hamt/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hamt.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hamt.txt"))) (checksum . "561cb6a447e9766dcb8abf2c01b30b87d91135f5") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "r6rs-lib" "collections-lib" "racket-doc" "rackunit-lib" "scribble-lib" "collections-lib")) (description . "Hash array mapped tries") (implies . ()) (last-checked . 1522414415) (last-edit . 1380916167) (last-updated . 1502816110) (modules . ((lib "data/hamt/fast.rkt") (lib "tests/data/hamt/hamt.rkt") (lib "data/hamt.rkt") (lib "data/hamt/syntax.rkt") (lib "tests/data/hamt/perf.rkt") (lib "data/hamt/popcount.rkt") (lib "data/hamt/array.rkt") (lib "data/hamt/hamt.scrbl"))) (name . "hamt") (nix-sha256 . "02b1iaddimqyl58kq4l5dwnyqsgkzbfy5wg4yiky13k63ajw5gwi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:zeppieri@gmail.com . #t) (ring:1 . #t))) (source . "github://github.com/97jaz/hamt/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "561cb6a447e9766dcb8abf2c01b30b87d91135f5") (source . "github://github.com/97jaz/hamt/master") (source_url . "http://github.com/97jaz/hamt/tree/master"))))))) ("pkg-build" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pkg-build.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pkg-build.txt"))) (checksum . "8444d96c50f741cb7b70e97dab329ef21ee44f17") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit" "scribble-html-lib" "web-server-lib" "plt-web-lib" ("remote-shell-lib" #:version "1.1") "at-exp-lib")) (description . "Build server for pkgs") (implies . ()) (last-checked . 1522414513) (last-edit . 1417307461) (last-updated . 1503452365) (modules . ((lib "pkg-build/main.rkt") (lib "pkg-build/union-find.rkt") (lib "pkg-build/summary.rkt") (lib "pkg-build/thread.rkt") (lib "pkg-build/pkg-adds.rkt") (lib "pkg-build/download.rkt") (lib "pkg-build/extract-doc.rkt") (lib "pkg-build/pkg-list.rkt") (lib "pkg-build/status.rkt") (lib "pkg-build/about.rkt"))) (name . "pkg-build") (nix-sha256 . "16klkhdbzsrd6ixjm0pnj16a5jmrki7lap8b9nlkxc62x3rz7nc3") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/racket/pkg-build") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8444d96c50f741cb7b70e97dab329ef21ee44f17") (source . "git://github.com/racket/pkg-build") (source_url . "http://github.com/racket/pkg-build/tree/master"))))))) ("wxme-test" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/wxme-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/wxme-test.txt"))) (checksum . "93ed84203f918c8d44cb9879b2498d4844589ced") (checksum-error . #f) (conflicts . ()) (dependencies . ("rackunit" "wxme-lib" "base" "snip-lib")) (description . "tests for \"wxme\"") (implies . ()) (last-checked . 1522414702) (last-edit . 1485612096) (last-updated . 1502816531) (modules . ((lib "wxme/test/image.rkt") (lib "wxme/test/wxme.rkt"))) (name . "wxme-test") (nix-sha256 . "1xfz53v77d7mxbsc5m8ma2487s94nipgxc3db70kn92r0l25f3qw") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mflatt@racket-lang.org . #t) (main-tests . #t) (ring:1 . #t))) (source . "git://github.com/racket/wxme?path=wxme-test") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "93ed84203f918c8d44cb9879b2498d4844589ced") (source . "git://github.com/racket/wxme?path=wxme-test") (source_url . "http://github.com/racket/wxme/tree/master?path=wxme-test"))))))) ("set-exp" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "set-exp" "doc/set-exp@set-exp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/set-exp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/set-exp.txt"))) (checksum . "28ede5dfb086f3f3623309adad83d017e59cc5c0") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "doc-coverage" "cover" "doc-coverage" "scribble-lib" "rackunit-lib" "racket-doc")) (description . "Literal set syntax") (implies . ()) (last-checked . 1522414677) (last-edit . 1500077346) (last-updated . 1502816425) (modules . ((lib "set-exp/lang.rkt") (lib "set-exp/test.rkt") (lib "set-exp/lang/reader.rkt") (lib "set-exp/set-exp.scrbl"))) (name . "set-exp") (nix-sha256 . "02llqv78q7p28cshk3p7an3w0wil22lqlaxp10jh9vf3bdai6j2c") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (experimental . #t) (reader . #t) (ring:1 . #t) (sugar . #t))) (source . "git://github.com/jackfirth/set-exp") (tags . ("experimental" "reader" "sugar")) (versions . #hash((default . #hasheq((checksum . "28ede5dfb086f3f3623309adad83d017e59cc5c0") (source . "git://github.com/jackfirth/set-exp") (source_url . "http://github.com/jackfirth/set-exp/tree/master"))))))) ("picturing-programs" . #hash((author . "sbloch@racket-lang.org") (checksum . "a37e8fa42b0dea5bfbdf7f5e9c6fe5db360f4e88") (dependencies . ("base" "draw-lib" "gui-lib" "snip-lib" "htdp-lib" "racket-doc" "htdp-doc" "scribble-lib")) (description . "sbloch@racket-lang.org") (modules . ()) (name . "picturing-programs") (source . "https://download.racket-lang.org/releases/6.12/pkgs/picturing-programs.zip") (tags . ()))) ("hackett" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hackett.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hackett.txt"))) (checksum . "dfe5aa3442e1fa0a0dd0ceb75b78470212f0a97a") (checksum-error . #f) (conflicts . ()) (dependencies . ("hackett-doc" "hackett-lib")) (description . "") (implies . ("hackett-doc" "hackett-lib")) (last-checked . 1522414414) (last-edit . 1483625647) (last-updated . 1518650696) (modules . ()) (name . "hackett") (nix-sha256 . "06psy883j4kqyz42jybfyh8zcyki64wzyiw53dya8zwkxdx4g0n3") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:lexi.lambda@gmail.com . #t) (lang . #t) (language . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/hackett?path=hackett") (tags . ("lang" "language")) (versions . #hash((default . #hasheq((checksum . "dfe5aa3442e1fa0a0dd0ceb75b78470212f0a97a") (source . "git://github.com/lexi-lambda/hackett?path=hackett") (source_url . "http://github.com/lexi-lambda/hackett/tree/master?path=hackett"))))))) ("nlopt" . #hasheq((author . "kominek@gmail.com") (authors . ("kominek@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "nlopt" "doc/nlopt@nlopt/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/nlopt.txt") (test-failure-log . "server/built/test-fail/nlopt.txt") (test-success-log . #f))) (checksum . "362f338891785a5bc40d06bbeac05df591b417ad") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "math-lib" "math-doc" "racket-doc" "scribble-lib")) (description . "FFI wrapper for the NLopt nonlinear optimization library.") (implies . ()) (last-checked . 1522414505) (last-edit . 1430604051) (last-updated . 1502816196) (modules . ((lib "nlopt/docs/highlevel.scrbl") (lib "nlopt/main.rkt") (lib "nlopt/safe.rkt") (lib "nlopt/docs/safe.scrbl") (lib "nlopt/unsafe.rkt") (lib "nlopt/highlevel.rkt") (lib "nlopt/docs/algorithms.scrbl") (lib "nlopt/docs/unsafe.scrbl") (lib "tests/unsafe.rkt") (lib "nlopt/docs/nlopt.scrbl") (lib "tests/highlevel.rkt"))) (name . "nlopt") (nix-sha256 . "17y7cr6y095j5197iyi8phbivlapfra8x2n7irakbrf6mfi20nzi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kominek@gmail.com . #t) (ffi . #t) (numerical . #t) (optimization . #t) (ring:1 . #t))) (source . "git://github.com/jkominek/nlopt") (tags . ("ffi" "numerical" "optimization")) (versions . #hash((default . #hasheq((checksum . "362f338891785a5bc40d06bbeac05df591b417ad") (source . "git://github.com/jkominek/nlopt") (source_url . "http://github.com/jkominek/nlopt/tree/master"))))))) ("sql" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sql" "doc/sql@sql/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sql.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sql.txt"))) (checksum . "7b69b22a1396d1887ae90232cb69ca3319aaed01") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.3") "rackunit-lib" "db-lib" "racket-doc" "scribble-lib" "sandbox-lib" "db-doc")) (description . "an S-expression notation for SQL") (implies . ()) (last-checked . 1522414681) (last-edit . 1478894891) (last-updated . 1513076906) (modules . ((lib "sql/private/jumble.rkt") (lib "sql/sql.scrbl") (lib "sql/private/syntax.rkt") (lib "sql/private/emit.rkt") (lib "sql/main.rkt") (lib "sql/private/sql-keywords.rkt") (lib "sql/private/ast.rkt") (lib "sql/test.rkt") (lib "sql/private/parse.rkt") (lib "sql/private/dialect.rkt"))) (name . "sql") (nix-sha256 . "0za60q4dc82g06j8m4z84f19hykqqclp0g6l7p5cignimskxwwyi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (db . #t) (ring:1 . #t))) (source . "git://github.com/rmculpepper/sql") (tags . ("db")) (versions . #hash((default . #hasheq((checksum . "7b69b22a1396d1887ae90232cb69ca3319aaed01") (source . "git://github.com/rmculpepper/sql") (source_url . "http://github.com/rmculpepper/sql/tree/master"))))))) ("sexp-diff" . #hasheq((author . "stamourv@racket-lang.org") (authors . ("stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sexp-diff" "doc/sexp-diff@sexp-diff/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sexp-diff.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sexp-diff.txt"))) (checksum . "5b5034c7e6b930002870877e8e1eb1e6d69ae0b4") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "rackunit-lib")) (description . "Diffs s-expressions based on Levenshtein-like edit distance.") (implies . ()) (last-checked . 1522414678) (last-edit . 1384896424) (last-updated . 1502816426) (modules . ((lib "sexp-diff/sexp-diff.scrbl") (lib "sexp-diff/main.rkt"))) (name . "sexp-diff") (nix-sha256 . "0wjdz3kb2f5hbb1ha8x2ksgc3ccb5pfwh75m6fpnkjy9vdv1dq8a") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:stamourv@racket-lang.org . #t) (ring:1 . #t))) (source . "github://github.com/stamourv/sexp-diff/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "5b5034c7e6b930002870877e8e1eb1e6d69ae0b4") (source . "github://github.com/stamourv/sexp-diff/master") (source_url . "http://github.com/stamourv/sexp-diff/tree/master"))))))) ("unix-socket-doc" . #hash((author . "ryanc@racket-lang.org") (checksum . "1c5c54762338f429d11067d8dcd0caa08b43b65f") (dependencies . ("base" ("unix-socket-lib" #:version "1.2") "scribble-lib" "racket-doc")) (description . "ryanc@racket-lang.org") (modules . ()) (name . "unix-socket-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/unix-socket-doc.zip") (tags . ()))) ("xrepl-lib" . #hash((author . "eli@racket-lang.org") (checksum . "a6160657357c2c2f39041842004ddc9867108bc8") (dependencies . ("base" "readline-lib" "scribble-text-lib")) (description . "eli@racket-lang.org") (modules . ()) (name . "xrepl-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/xrepl-lib.zip") (tags . ()))) ("io" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/io.txt") (test-failure-log . "server/built/test-fail/io.txt") (test-success-log . #f))) (checksum . "db8413c802782bfc3de706cc1cb8dab6fe4f941e") (checksum-error . #f) (conflicts . ()) (dependencies . ("srfi-lite-lib" "base" "in-new-directory" "compatibility-lib" "rackunit-gui" "rackunit-lib")) (description . "I/O utilities from dherman's io.plt Planet package") (implies . ()) (last-checked . 1522414420) (last-edit . 1503512193) (last-updated . 1510358514) (modules . ((lib "io/private/tests/file.rkt") (lib "io/private/tests/tests.rkt") (lib "io/main.rkt") (lib "io/file.rkt") (lib "io/private/tests/io.rkt"))) (name . "io") (nix-sha256 . "0m83nsi7ppviwc5yhfy0wmrwmcbvhb1f0cf4wgvgif9sa3k09nbg") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (io . #t) (ring:1 . #t))) (source . "git://github.com/samth/io.rkt") (tags . ("io")) (versions . #hash((default . #hasheq((checksum . "db8413c802782bfc3de706cc1cb8dab6fe4f941e") (source . "git://github.com/samth/io.rkt") (source_url . "http://github.com/samth/io.rkt/tree/master"))))))) ("net" . #hash((author . "mflatt@racket-lang.org") (checksum . "badaf679833b746ab7b8d8ddb9e55518fb05e9d9") (dependencies . ("net-lib" "net-doc")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "net") (source . "https://download.racket-lang.org/releases/6.12/pkgs/net.zip") (tags . ()))) ("readline-gpl" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/readline-gpl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/readline-gpl.txt"))) (checksum . "2990d5f3a3d43c2d2f083970dacba7f1358950c7") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "Cause readline collection to use GNU's readline library.") (implies . ()) (last-checked . 1522414667) (last-edit . 1430520585) (last-updated . 1502816383) (modules . ((lib "readline-gpl/private/readline-lib.rkt"))) (name . "readline-gpl") (nix-sha256 . "1vi149h4arxnkz4h899gw0ja7r6a0yj4rk31rpaaxj4nkr43zfy8") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:leif@leifandersen.net . #t) (readline . #t) (ring:1 . #t))) (source . "git://github.com/racket/readline-gpl") (tags . ("readline")) (versions . #hash((default . #hasheq((checksum . "2990d5f3a3d43c2d2f083970dacba7f1358950c7") (source . "git://github.com/racket/readline-gpl") (source_url . "http://github.com/racket/readline-gpl/tree/master"))))))) ("cldr-numbers-modern" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cldr-numbers-modern" "doc/cldr-numbers-modern@cldr-numbers-modern/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cldr-numbers-modern.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cldr-numbers-modern.txt"))) (checksum . "625428099b3f8cd264955a283dddc176a6080ba1") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "cldr-core" "scribble-lib" "racket-doc")) (description . "API for cldr-numbers-modern data set") (implies . ()) (last-checked . 1522414314) (last-edit . 1426996138) (last-updated . 1502812295) (modules . ((lib "cldr/numbers-modern.rkt") (lib "cldr/scribblings/cldr-numbers-modern.scrbl"))) (name . "cldr-numbers-modern") (nix-sha256 . "159ckjnyx6f7dajg6w5q4cd5gzfrdsbp9xhc6spgrj8jidvvadj4") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:zeppieri@gmail.com . #t) (cldr . #t) (l10n . #t) (ring:1 . #t))) (source . "git://github.com/97jaz/cldr-numbers-modern") (tags . ("cldr" "l10n")) (versions . #hash((default . #hasheq((checksum . "625428099b3f8cd264955a283dddc176a6080ba1") (source . "git://github.com/97jaz/cldr-numbers-modern") (source_url . "http://github.com/97jaz/cldr-numbers-modern/tree/master"))))))) ("job-queue" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/job-queue.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/job-queue.txt"))) (checksum . "0a2c349636aa88b06c9c299ef201494df648b164") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "job-queue-lib" "job-queue-doc")) (description . "A library for managing sets of workers and their jobs.") (implies . ()) (last-checked . 1522414421) (last-edit . 1490026009) (last-updated . 1502816142) (modules . ()) (name . "job-queue") (nix-sha256 . "066m6rjc3qvlnr15jm6n5mdl4cgc5n12imwkj3aw56sc2cyhs1kd") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (concurrency . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/job-queue?path=job-queue") (tags . ("concurrency")) (versions . #hash((default . #hasheq((checksum . "0a2c349636aa88b06c9c299ef201494df648b164") (source . "git://github.com/jeapostrophe/job-queue?path=job-queue") (source_url . "http://github.com/jeapostrophe/job-queue/tree/master?path=job-queue"))))))) ("plt-services" . #hash((author . "eli@racket-lang.org mflatt@racket-lang.org") (authors . ("eli@racket-lang.org" "mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plt-services.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plt-services.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . ()) (description . "Miscellaneous management and maintenance tools used by the Racket development team") (implies . ()) (last-checked . 1522414516) (last-edit . 1460066358) (last-updated . 1522414516) (modules . ()) (name . "plt-services") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:eli@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (deprecated . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("deprecated")) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) (default . #hasheq((checksum . "6f628b2531d35fc1d32148f1284051eaa9b0c586") (source . "git://github.com/racket/racket/?path=pkgs/plt-services") (source_url . "git://github.com/racket/racket/?path=pkgs/plt-services"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("draw-x11-x86_64-linux-natipkg" . #hash((author . "mflatt@racket-lang.org") (checksum . "5638ae9289570f973d48b32fed2e7d056f2161c3") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "draw-x11-x86_64-linux-natipkg") (source . "https://download.racket-lang.org/releases/6.12/pkgs/draw-x11-x86_64-linux-natipkg.zip") (tags . ()))) ("collections-lens" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/collections-lens.txt") (docs . (("main" "collections-lens" "doc/collections-lens@collections-lens/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/collections-lens.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/collections-lens.txt"))) (checksum . "73556daf4885558ea6a66a5def8ad668c0fcf4c3") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "collections" "curly-fn" "lens-common" "scribble-lib" "at-exp-lib" "racket-doc" "lens-doc" "rackunit-lib")) (description . "Lenses for generic collections") (implies . ()) (last-checked . 1522414314) (last-edit . 1471826212) (last-updated . 1502812297) (modules . ((lib "data/scribblings/main.scrbl") (lib "data/collection/lens.rkt") (lib "data/collection/lens/private/sandbox.rkt"))) (name . "collections-lens") (nix-sha256 . "1d5f4swvfzp7h8dxka8i4q77mq8c7xj6laxmchc45f88a4vald8a") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (lens . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/collections-lens") (tags . ("lens")) (versions . #hash((default . #hasheq((checksum . "73556daf4885558ea6a66a5def8ad668c0fcf4c3") (source . "git://github.com/lexi-lambda/collections-lens") (source_url . "http://github.com/lexi-lambda/collections-lens/tree/master"))))))) ("latex-utils" . #hasheq((author . "matias@fortlogic.net") (authors . ("matias@fortlogic.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "utils" "doc/utils@latex-utils/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/latex-utils.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/latex-utils.txt"))) (checksum . "631ad9b13b837f4109932252c85bc1bf6f0ae752") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scheme-lib" "scribble-lib" "seq-no-order" "at-exp-lib" "racket-doc" "scribble-doc")) (description . "Some utilities for generating LaTeX markup of various descriptions.") (implies . ()) (last-checked . 1522414423) (last-edit . 1476262536) (last-updated . 1502816147) (modules . ((lib "latex-utils/scribble/references.rkt") (lib "latex-utils/scribble/private/theorem.rkt") (lib "latex-utils/scribble.rkt") (lib "latex-utils/scribble/private/unmap.rkt") (lib "latex-utils/scribble/private/utils.rkt") (lib "latex-utils/scribble/private/syntax.rkt") (lib "latex-utils/scribblings/utils.scrbl") (lib "latex-utils/scribble/utils.rkt") (lib "latex-utils/scribble/unmap.rkt") (lib "latex-utils/scribble/private/math.rkt") (lib "latex-utils/scribble/math.rkt") (lib "latex-utils/scribble/homework.rkt") (lib "latex-utils/scribble/theorem.rkt"))) (name . "latex-utils") (nix-sha256 . "06slak52xlr6zmsrbf9bkvnhpkqk0bp7ni7y7r5r8m5i99jd56d3") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (LaTeX . #t) (author:matias@fortlogic.net . #t) (ring:1 . #t) (scribble . #t))) (source . "git://github.com/dented42/latex-utils.git#master") (tags . ("LaTeX" "scribble")) (versions . #hash((default . #hasheq((checksum . "631ad9b13b837f4109932252c85bc1bf6f0ae752") (source . "git://github.com/dented42/latex-utils.git#master") (source_url . "http://github.com/dented42/latex-utils.git/tree/master#master"))))))) ("Chinese-4-Stratego" . #hasheq((author . "lolisa@marisa.moe") (authors . ("lolisa@marisa.moe")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "Chinese-4-Stratego" "doc/Chinese-4-Stratego@Chinese-4-Stratego/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/Chinese-4-Stratego.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/Chinese-4-Stratego.txt"))) (checksum . "2df6d4ca0b402e6387413d34f49c54cc3c86c610") (checksum-error . #f) (conflicts . ()) (dependencies . ("gls" "base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Chinese Stratego") (implies . ()) (last-checked . 1522414313) (last-edit . 1450708697) (last-updated . 1502812289) (modules . ((lib "Chinese-4-Stratego/main.rkt") (lib "Chinese-4-Stratego/scribblings/Chinese-4-Stratego.scrbl"))) (name . "Chinese-4-Stratego") (nix-sha256 . "1pszia41kxjxllbaijlga8aqvvww4p9n43zdm3d33lw90d0w89a5") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lolisa@marisa.moe . #t) (games . #t) (ring:1 . #t))) (source . "git://github.com/lolisa/Chinese-4-Stratego") (tags . ("games")) (versions . #hash((default . #hasheq((checksum . "2df6d4ca0b402e6387413d34f49c54cc3c86c610") (source . "git://github.com/lolisa/Chinese-4-Stratego") (source_url . "http://github.com/lolisa/Chinese-4-Stratego/tree/master"))))))) ("monitors" . #hasheq((author . "samc@ccs.neu.edu") (authors . ("samc@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "monitors" "doc/monitors@monitors/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/monitors.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/monitors.txt"))) (checksum . "928a1b27b15ad46eb0f715b3bccfe06b437edf30") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "data-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Java style monitors for Racket objects") (implies . ()) (last-checked . 1522414436) (last-edit . 1502996613) (last-updated . 1503002347) (modules . ((lib "monitors/scribblings/monitors.scrbl") (lib "monitors/main.rkt") (lib "monitors/monitor.rkt"))) (name . "monitors") (nix-sha256 . "0043biv8lkwy22p3421y5ch10mp4mrs5mrnmg6mjxs5glnf13alf") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:samc@ccs.neu.edu . #t) (concurrency . #t) (ring:1 . #t))) (source . "git://github.com/howell/monitors") (tags . ("concurrency")) (versions . #hash((default . #hasheq((checksum . "928a1b27b15ad46eb0f715b3bccfe06b437edf30") (source . "git://github.com/howell/monitors") (source_url . "http://github.com/howell/monitors/tree/master"))))))) ("class-iop-lib" . #hash((author . "ryanc@racket-lang.org") (checksum . "3887471740eca3f10a403e42af55d7010ed078e7") (dependencies . (("base" #:version "6.2.900.6"))) (description . "ryanc@racket-lang.org") (modules . ()) (name . "class-iop-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/class-iop-lib.zip") (tags . ()))) ("redex-lib" . #hash((author . "robby@racket-lang.org bfetscher@racket-lang.org") (checksum . "d3c7836f7e7b49744860fd6a15c0330c12458b3b") (dependencies . (("data-enumerate-lib" #:version "1.3") "scheme-lib" ("base" #:version "6.2.900.6") "data-lib" "math-lib" "tex-table" "profile-lib" "typed-racket-lib" "testing-util-lib" "2d-lib" "rackunit-lib")) (description . "robby@racket-lang.org bfetscher@racket-lang.org") (modules . ()) (name . "redex-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/redex-lib.zip") (tags . ()))) ("namespaced-transformer" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/namespaced-transformer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/namespaced-transformer.txt"))) (checksum . "4cdc1bdae09a07b78f23665267f2c7df4be5a7f6") (checksum-error . #f) (conflicts . ()) (dependencies . ("namespaced-transformer-doc" "namespaced-transformer-lib")) (description . "") (implies . ("namespaced-transformer-doc" "namespaced-transformer-lib")) (last-checked . 1522414438) (last-edit . 1473370456) (last-updated . 1502816193) (modules . ()) (name . "namespaced-transformer") (nix-sha256 . "0lfcxyb76iadqh7vhxqzg5fdgd3pyx6nsjqdibgam10dlppck45y") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/namespaced-transformer?path=namespaced-transformer") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4cdc1bdae09a07b78f23665267f2c7df4be5a7f6") (source . "git://github.com/lexi-lambda/namespaced-transformer?path=namespaced-transformer") (source_url . "http://github.com/lexi-lambda/namespaced-transformer/tree/master?path=namespaced-transformer"))))))) ("repltest" . #hasheq((author . "georges.duperon@gmail.com") (authors . ("georges.duperon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "repltest" "doc/repltest@repltest/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/repltest.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/repltest.txt"))) (checksum . "c134d3c034c3ce6a4105b542cabec444eaf139ff") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "afl" "scribble-lib" "racket-doc" "typed-racket-doc")) (description . "REPL test: copy-paste REPL interactions and run them as tests") (implies . ()) (last-checked . 1522414670) (last-edit . 1470399295) (last-updated . 1517062705) (modules . ((lib "repltest/scribblings/repltest.scrbl") (lib "repltest/test/test.rkt") (lib "repltest/private/util.rkt") (lib "repltest/test/doc2-no-newline-at-end-of-file.rkt") (lib "repltest/test/doc4.rkt") (lib "repltest/test/doc5.rkt") (lib "repltest/private/run-interactions.rkt") (lib "repltest/test/simple.rkt") (lib "repltest/test/doc2-newline-at-end-of-file.rkt") (lib "repltest/main.rkt") (lib "repltest/lang/reader.rkt") (lib "repltest/test/meta.rkt") (lib "repltest/test/doc3.rkt") (lib "repltest/test/doc1.rkt"))) (name . "repltest") (nix-sha256 . "0yg75yrrp2l38sc67qbzbsjbb0gainsdrn7x5zfqh5zps75lirkc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:georges.duperon@gmail.com . #t) (lang-extension . #t) (repl . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/jsmaniac/repltest") (tags . ("lang-extension" "repl" "testing")) (versions . #hash((default . #hasheq((checksum . "c134d3c034c3ce6a4105b542cabec444eaf139ff") (source . "git://github.com/jsmaniac/repltest") (source_url . "http://github.com/jsmaniac/repltest/tree/master"))))))) ("typed-map-doc" . #hasheq((author . "georges.duperon@gmail.com") (authors . ("georges.duperon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "typed-map" "doc/typed-map@typed-map-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-map-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-map-doc.txt"))) (checksum . "c9c5a236f4e32d9391df3edffdf9b1a55401fe31") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "typed-racket-doc" "aful" "typed-map-lib")) (description . "Documentation for typed-map") (implies . ()) (last-checked . 1522414695) (last-edit . 1501078498) (last-updated . 1517062738) (modules . ((lib "typed-map/scribblings/typed-map.scrbl"))) (name . "typed-map-doc") (nix-sha256 . "150agc51y1kvrarg0n6r2x6n3awnvivqj5k78gx9ngr8q31zl83f") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:georges.duperon@gmail.com . #t) (docs . #t) (ring:1 . #t) (typed-map . #t))) (source . "https://github.com/jsmaniac/typed-map.git?path=typed-map-doc") (tags . ("docs" "typed-map")) (versions . #hash((default . #hasheq((checksum . "c9c5a236f4e32d9391df3edffdf9b1a55401fe31") (source . "https://github.com/jsmaniac/typed-map.git?path=typed-map-doc") (source_url . "https://github.com/jsmaniac/typed-map.git?path=typed-map-doc"))))))) ("gcstats" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gcstats.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gcstats.txt"))) (checksum . "c1112a07155f2a8e8a8ad999c9980d544d56b970") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "Print summary GC statistics after running a program.") (implies . ()) (last-checked . 1522414404) (last-edit . 1352758218) (last-updated . 1502816076) (modules . ((lib "gcstats/main.rkt") (lib "gcstats/core.rkt"))) (name . "gcstats") (nix-sha256 . "071xmsf7zdkp20bfyld793sfi17a4wk43aibx3i545yv52wv5s4m") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (dev . #t) (performance . #t) (ring:1 . #t))) (source . "github://github.com/samth/gcstats/master") (tags . ("dev" "performance")) (versions . #hash((default . #hasheq((checksum . "c1112a07155f2a8e8a8ad999c9980d544d56b970") (source . "github://github.com/samth/gcstats/master") (source_url . "http://github.com/samth/gcstats/tree/master"))))))) ("gui-pkg-manager-lib" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (checksum . "3d20e0e9f8a4cf690d20a2b9e5a4e524fe455408") (dependencies . ("base" "gui-lib" ("string-constants-lib" #:version "1.9"))) (description . "mflatt@racket-lang.org robby@racket-lang.org") (modules . ()) (name . "gui-pkg-manager-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/gui-pkg-manager-lib.zip") (tags . ()))) ("drracket-tool-test" . #hash((author . "robby@racket-lang.org") (checksum . "373a1ff135b7d5fe74fed761f84bc48fe8c029c1") (dependencies . ("base" "rackunit-lib" "drracket-tool-lib")) (description . "robby@racket-lang.org") (modules . ()) (name . "drracket-tool-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/drracket-tool-test.zip") (tags . ()))) ("GLPK" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "glpk" "doc/glpk@GLPK/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/GLPK.txt") (test-failure-log . "server/built/test-fail/GLPK.txt") (test-success-log . #f))) (checksum . "b4b6d3e54dc5bb227d813781ede9f035738911a9") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "racket-doc" "scribble-lib" "scribble-math" "typed-racket-more")) (description . "An interface to the Gnu Linear Programming Kit (GLPK)") (implies . ()) (last-checked . 1522414405) (last-edit . 1498178980) (last-updated . 1521499374) (modules . ((lib "glpk/use-lib.rkt") (lib "glpk/lp-solve.rkt") (lib "glpk/chicken-example.rkt") (lib "glpk/tests/tests.rkt") (lib "glpk/glpk.scrbl") (lib "glpk/main.rkt") (lib "glpk/lib.rkt"))) (name . "GLPK") (nix-sha256 . "0gsjzrh1dzqgw9zh4q26nqpd6svi113kpy9dvsznxmv1gmr50b2h") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (linear-programming . #t) (math . #t) (ring:1 . #t))) (source . "git://github.com/jbclements/glpk") (tags . ("linear-programming" "math")) (versions . #hash((default . #hasheq((checksum . "b4b6d3e54dc5bb227d813781ede9f035738911a9") (source . "git://github.com/jbclements/glpk") (source_url . "http://github.com/jbclements/glpk/tree/master"))))))) ("towers-server" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/towers-server.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/towers-server.txt"))) (checksum . "e1224228b5b5b514c7063b44810c1bdd5f8d5d14") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "db-lib" "web-server-lib" "bazaar" "towers-lib")) (description . "The server for the Towers game. Not required to play.") (implies . ()) (last-checked . 1522414693) (last-edit . 1516442631) (last-updated . 1516476622) (modules . ((lib "towers-server/main.rkt") (lib "towers-server/server.rkt") (lib "towers-server/db.rkt"))) (name . "towers-server") (nix-sha256 . "1ip1sr61415zfg3pkcdx18zsxaknb1r8hna90f2ypcvag3wvbp0w") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:laurent.orseau@gmail.com . #t) (games . #t) (ring:1 . #t) (server . #t))) (source . "https://github.com/Metaxal/towers.git?path=towers-server") (tags . ("games" "server")) (versions . #hash((default . #hasheq((checksum . "e1224228b5b5b514c7063b44810c1bdd5f8d5d14") (source . "https://github.com/Metaxal/towers.git?path=towers-server") (source_url . "https://github.com/Metaxal/towers.git?path=towers-server"))))))) ("eopl" . #hash((author . "dvanhorn@racket-lang.org") (checksum . "f02f69b8fb8d489d167c0972c804ea63e83b76f8") (dependencies . ("base" "compatibility-lib" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "dvanhorn@racket-lang.org") (modules . ()) (name . "eopl") (source . "https://download.racket-lang.org/releases/6.12/pkgs/eopl.zip") (tags . ()))) ("scribble-test" . #hash((author . "mflatt@racket-lang.org eli@racket-lang.org") (checksum . "d9d9f9d2f432fd4a328317a485a29c4f451dfec9") (dependencies . ("at-exp-lib" "base" "eli-tester" "rackunit-lib" "sandbox-lib" "scribble-doc" "scribble-lib" "scribble-text-lib" "racket-index")) (description . "mflatt@racket-lang.org eli@racket-lang.org") (modules . ()) (name . "scribble-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/scribble-test.zip") (tags . ()))) ("list-utils" . #hasheq((author . "vincentnys@gmail.com") (authors . ("vincentnys@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "list-utils" "doc/list-utils@list-utils/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/list-utils.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/list-utils.txt"))) (checksum . "d364b7d3e508abc4da31d6e600ee201f76d05217") (checksum-error . #f) (conflicts . ()) (dependencies . ("at-exp-lib" "base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Some additional list-processing functions which I have found useful.") (implies . ()) (last-checked . 1522414425) (last-edit . 1513667842) (last-updated . 1513667842) (modules . ((lib "list-utils/main.rkt") (lib "list-utils/scribblings/list-utils.scrbl"))) (name . "list-utils") (nix-sha256 . "15dm33kq62pamm38ly7jqs7dcc3ywdhz38r6v93imymjgczvz9vk") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:vincentnys@gmail.com . #t) (lists . #t) (ring:2 . #t) (utilities . #t))) (source . "https://github.com/v-nys/list-utils.git") (tags . ("lists" "utilities")) (versions . #hash((default . #hasheq((checksum . "d364b7d3e508abc4da31d6e600ee201f76d05217") (source . "https://github.com/v-nys/list-utils.git") (source_url . "https://github.com/v-nys/list-utils.git"))))))) ("distro-build-client" . #hash((author . "mflatt@racket-lang.org") (checksum . "2369f6f1c9be9a21863a30beab39fb85cfb9a057") (dependencies . (("base" #:version "6.2.900.9") "ds-store-lib" "at-exp-lib")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "distro-build-client") (source . "https://download.racket-lang.org/releases/6.12/pkgs/distro-build-client.zip") (tags . ()))) ("plot-compat" . #hash((author . "ntoronto@racket-lang.org") (checksum . "1c7b011d21af36e57ba42de930b9627edb0b034e") (dependencies . ("base" "plot-gui-lib" "draw-lib" "plot-lib" "snip-lib")) (description . "ntoronto@racket-lang.org") (modules . ()) (name . "plot-compat") (source . "https://download.racket-lang.org/releases/6.12/pkgs/plot-compat.zip") (tags . ()))) ("portaudio" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "portaudio" "doc/portaudio@portaudio/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/portaudio.txt") (test-failure-log . "server/built/test-fail/portaudio.txt") (test-success-log . #f))) (checksum . "74dfaf1d6317a9f5479ae5492e874e9e73888a46") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Bindings for portaudio, a cross-platform audio library.") (implies . ()) (last-checked . 1522414535) (last-edit . 1410457003) (last-updated . 1502816323) (modules . ((lib "portaudio/portaudio.scrbl") (lib "portaudio/test/test-stream-playback.rkt") (lib "portaudio/s16vec-play.rkt") (lib "portaudio/test/test-s16vec-play.rkt") (lib "portaudio/s16vec-record.rkt") (lib "portaudio/devices.rkt") (lib "portaudio/portaudio.rkt") (lib "portaudio/stream-play.rkt") (lib "portaudio/test/test-stream-callback.rkt") (lib "portaudio/callback-support.rkt") (lib "portaudio/main.rkt") (lib "portaudio/test/test-portaudio.rkt") (lib "portaudio/test/helpers.rkt") (lib "portaudio/test/test-copying-callbacks.rkt") (lib "portaudio/test/test-hi-level-stream-play.rkt") (lib "portaudio/test/test-s16vec-record.rkt"))) (name . "portaudio") (nix-sha256 . "1zczwx2z5kw85h15bw3xikwnjb4mxw4n4g8x7wkzqfrkvll8xmsb") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audio . #t) (author:clements@racket-lang.org . #t) (ffi . #t) (io . #t) (ring:1 . #t))) (source . "github://github.com/jbclements/portaudio/pre-6/") (tags . ("audio" "ffi" "io")) (versions . #hash(("5.92" . #hasheq((checksum . "74dfaf1d6317a9f5479ae5492e874e9e73888a46") (source . "github://github.com/jbclements/portaudio/pre-6/") (source_url . "http://github.com/jbclements/portaudio/tree/pre-6/"))) ("5.3.4" . #hasheq((checksum . "74dfaf1d6317a9f5479ae5492e874e9e73888a46") (source . "github://github.com/jbclements/portaudio/pre-6/") (source_url . "http://github.com/jbclements/portaudio/tree/pre-6/"))) (default . #hasheq((checksum . "3703edda0c6b9f5ef7e7bf39b933cb1d0e9a82b5") (source . "github://github.com/jbclements/portaudio/master/") (source_url . "http://github.com/jbclements/portaudio/tree/master/"))) ("5.3.6" . #hasheq((checksum . "74dfaf1d6317a9f5479ae5492e874e9e73888a46") (source . "github://github.com/jbclements/portaudio/pre-6/") (source_url . "http://github.com/jbclements/portaudio/tree/pre-6/"))) ("5.3.2" . #hasheq((checksum . "74dfaf1d6317a9f5479ae5492e874e9e73888a46") (source . "github://github.com/jbclements/portaudio/pre-6/") (source_url . "http://github.com/jbclements/portaudio/tree/pre-6/"))) ("5.3.3" . #hasheq((checksum . "74dfaf1d6317a9f5479ae5492e874e9e73888a46") (source . "github://github.com/jbclements/portaudio/pre-6/") (source_url . "http://github.com/jbclements/portaudio/tree/pre-6/"))) ("5.3.5" . #hasheq((checksum . "74dfaf1d6317a9f5479ae5492e874e9e73888a46") (source . "github://github.com/jbclements/portaudio/pre-6/") (source_url . "http://github.com/jbclements/portaudio/tree/pre-6/"))) ("5.93" . #hasheq((checksum . "74dfaf1d6317a9f5479ae5492e874e9e73888a46") (source . "github://github.com/jbclements/portaudio/pre-6/") (source_url . "http://github.com/jbclements/portaudio/tree/pre-6/"))))))) ("racket-poppler" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-poppler.txt") (test-failure-log . "server/built/test-fail/racket-poppler.txt") (test-success-log . #f))) (checksum . "5ba20818706d68902ef296577087eb442f38738a") (checksum-error . #f) (conflicts . ()) (dependencies . ("draw-lib" "slideshow-lib" "web-server-lib" "base" "pict" ("poppler-x86-64-macosx" #:platform "x86_64-macosx") ("poppler-i386-macosx" #:platform "i386-macosx") ("poppler-ppc-macosx" #:platform "ppc-macosx") ("poppler-win32-x86-64" #:platform "win32\\x86_64") ("poppler-win32-i386" #:platform "win32\\i386") "at-exp-lib" "rackunit-lib" "scribble-lib" "racket-doc" "draw-doc" "pict-doc")) (description . "Read, search and render pdfs. Use LaTeX in scribble and slidehow.") (implies . ()) (last-checked . 1522414606) (last-edit . 1397498742) (last-updated . 1502816351) (modules . ((lib "racket-poppler/render-tex.rkt") (lib "racket-poppler/examples/test-pdf-functions.rkt") (lib "racket-poppler/libs.rkt") (lib "racket-poppler/examples/test-render-tex.rkt") (lib "racket-poppler/main.rkt") (lib "racket-poppler/ffi.rkt"))) (name . "racket-poppler") (nix-sha256 . "0ahcrkv8vlylpi5nyihijpg1kfpfc0i329zgllqm93mxv2x8d2lh") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jensaxel@soegaard.net . #t) (pdf . #t) (poppler . #t) (ring:1 . #t) (scribble . #t) (slideshow . #t))) (source . "github://github.com/soegaard/racket-poppler/master") (tags . ("pdf" "poppler" "scribble" "slideshow")) (versions . #hash((default . #hasheq((checksum . "5ba20818706d68902ef296577087eb442f38738a") (source . "github://github.com/soegaard/racket-poppler/master") (source_url . "http://github.com/soegaard/racket-poppler/tree/master"))))))) ("cs2500f16-jsonlab" . #hasheq((author . "mackenzie.r@husky.neu.edu") (authors . ("mackenzie.r@husky.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cs2500f16-jsonlab" "doc/cs2500f16-jsonlab@cs2500f16-jsonlab/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cs2500f16-jsonlab.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cs2500f16-jsonlab.txt"))) (checksum . "34e5dceecc4b8c43428414b3da7befdb36c123d6") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Teachpack for CS2500 JSON lab") (implies . ()) (last-checked . 1522414369) (last-edit . 1472064553) (last-updated . 1502815872) (modules . ((lib "cs2500f16-jsonlab/scribblings/cs2500f16-jsonlab.scrbl") (lib "cs2500f16-jsonlab/main.rkt"))) (name . "cs2500f16-jsonlab") (nix-sha256 . "0ggc0wnr68lrskjy7rxn2dmpin55fh4hz6invr61jybn631ij46h") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mackenzie.r@husky.neu.edu . #t) (cs2500 . #t) (ring:1 . #t))) (source . "git://github.com/rmacnz/cs2500jsonlab") (tags . ("cs2500")) (versions . #hash((default . #hasheq((checksum . "34e5dceecc4b8c43428414b3da7befdb36c123d6") (source . "git://github.com/rmacnz/cs2500jsonlab") (source_url . "http://github.com/rmacnz/cs2500jsonlab/tree/master"))))))) ("syntax-color" . #hash((author . "mflatt@racket-lang.org") (checksum . "2f5248a0532a4a3ba0786aab5aa253c9a5637dc7") (dependencies . ("syntax-color-lib" "syntax-color-doc")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "syntax-color") (source . "https://download.racket-lang.org/releases/6.12/pkgs/syntax-color.zip") (tags . ()))) ("nanopass" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "nanopass" "doc/nanopass@nanopass/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/nanopass.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/nanopass.txt"))) (checksum . "b5c55036d806e2ed37fde815b1339d80cee7e75c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "compatibility-lib" "unstable-pretty-lib" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (last-checked . 1522414438) (last-edit . 1450983821) (last-updated . 1511370516) (modules . ((lib "nanopass/private/meta-parser.rkt") (lib "nanopass/private/pass.rkt") (lib "nanopass/private/syntaxconvert.rkt") (lib "nanopass/private/helpers.rkt") (lib "nanopass/tests/helpers.rkt") (lib "nanopass/scribblings/nanopass.scrbl") (lib "nanopass/private/pass-helper.rkt") (lib "nanopass/tests/coresheme-to-javascript-compiler.rkt") (lib "nanopass/tests/test-all.rkt") (lib "nanopass/private/language.rkt") (lib "nanopass/tests/compiler-test.rkt") (lib "nanopass/tests/test-driver.rkt") (lib "nanopass/private/nano-syntax-dispatch.rkt") (lib "nanopass/private/records.rkt") (lib "nanopass/private/meta-syntax-dispatch.rkt") (lib "nanopass/main.rkt") (lib "nanopass/lang/reader.rkt") (lib "nanopass/private/parser.rkt") (lib "nanopass/base.rkt") (lib "nanopass/private/language-helpers.rkt") (lib "nanopass/private/unparser.rkt") (lib "nanopass/tests/compiler.rkt") (lib "nanopass/private/language-node-counter.rkt") (lib "nanopass/tests/alltests.rkt") (lib "nanopass/tests/synforms.rkt") (lib "nanopass/tests/unit-tests.rkt"))) (name . "nanopass") (nix-sha256 . "1096bdh7mhkwj7hzlkfxwwsz24fk5c24nnvhixi8j0jgsw55zkci") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (compiler . #t) (ring:1 . #t))) (source . "git://github.com/nanopass/nanopass-framework-racket") (tags . ("compiler")) (versions . #hash(("6.0" . #hasheq((checksum . "1422f5183e0d15492bbba2a77f7ad927f9349681") (source . "git://github.com/nanopass/nanopass-framework-racket#old-racket") (source_url . "http://github.com/nanopass/nanopass-framework-racket/tree/master#old-racket"))) ("6.1.1" . #hasheq((checksum . "1422f5183e0d15492bbba2a77f7ad927f9349681") (source . "git://github.com/nanopass/nanopass-framework-racket#old-racket") (source_url . "http://github.com/nanopass/nanopass-framework-racket/tree/master#old-racket"))) ("6.2.1" . #hasheq((checksum . "1422f5183e0d15492bbba2a77f7ad927f9349681") (source . "git://github.com/nanopass/nanopass-framework-racket#old-racket") (source_url . "http://github.com/nanopass/nanopass-framework-racket/tree/master#old-racket"))) (default . #hasheq((checksum . "b5c55036d806e2ed37fde815b1339d80cee7e75c") (source . "git://github.com/nanopass/nanopass-framework-racket") (source_url . "http://github.com/nanopass/nanopass-framework-racket/tree/master"))) ("6.0.1" . #hasheq((checksum . "1422f5183e0d15492bbba2a77f7ad927f9349681") (source . "git://github.com/nanopass/nanopass-framework-racket#old-racket") (source_url . "http://github.com/nanopass/nanopass-framework-racket/tree/master#old-racket"))) ("6.2" . #hasheq((checksum . "1422f5183e0d15492bbba2a77f7ad927f9349681") (source . "git://github.com/nanopass/nanopass-framework-racket#old-racket") (source_url . "http://github.com/nanopass/nanopass-framework-racket/tree/master#old-racket"))) ("6.1" . #hasheq((checksum . "1422f5183e0d15492bbba2a77f7ad927f9349681") (source . "git://github.com/nanopass/nanopass-framework-racket#old-racket") (source_url . "http://github.com/nanopass/nanopass-framework-racket/tree/master#old-racket"))))))) ("deferred" . #hasheq((author . "cjfuller@gmail.com") (authors . ("cjfuller@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "deferred" "doc/deferred@deferred/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/deferred.txt") (test-failure-log . "server/built/test-fail/deferred.txt") (test-success-log . #f))) (checksum . "fccb728dc9cbc0a6acb38fd0bc782db41bf32d4c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "A simple library for deferring asynchronous tasks until a specified time") (implies . ()) (last-checked . 1522414378) (last-edit . 1419883017) (last-updated . 1502815889) (modules . ((lib "deferred/main-test.rkt") (lib "deferred/main.rkt") (lib "deferred/deferred.scrbl"))) (name . "deferred") (nix-sha256 . "0a7f7ymgmdjgwm0d5ij8f4hcqcggwqlsd8cc9d6dqmcx7lccph1b") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:cjfuller@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/cjfuller/deferred") (tags . ()) (versions . #hash((default . #hasheq((checksum . "fccb728dc9cbc0a6acb38fd0bc782db41bf32d4c") (source . "git://github.com/cjfuller/deferred") (source_url . "http://github.com/cjfuller/deferred/tree/master"))))))) ("errortrace-doc" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org florence@racket-lang.org") (checksum . "104c0b4b878fa5939a3cade2df876a6b9a45859f") (dependencies . ("racket-doc" "base" "errortrace-lib" "scribble-lib")) (description . "mflatt@racket-lang.org robby@racket-lang.org florence@racket-lang.org") (modules . ()) (name . "errortrace-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/errortrace-doc.zip") (tags . ()))) ("binary-class-riff" . #hasheq((author . "leo@lwh.jp") (authors . ("leo@lwh.jp")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "binary-class-wave" "doc/binary-class-wave@binary-class-riff/index.html") ("main" "binary-class-riff" "doc/binary-class-riff@binary-class-riff/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/binary-class-riff.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/binary-class-riff.txt"))) (checksum . "2062f82382eed570b502a935f740621d3971d527") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "binary-class" "racket-doc" "scribble-lib")) (description . "Classes for reading and writing RIFF files") (implies . ()) (last-checked . 1522414311) (last-edit . 1508498929) (last-updated . 1508566197) (modules . ((lib "binary-class/scribblings/wave.scrbl") (lib "binary-class/riff.rkt") (lib "binary-class/wave.rkt") (lib "binary-class/scribblings/riff.scrbl"))) (name . "binary-class-riff") (nix-sha256 . "1h7rcijd5vx1h3l4f9wcjszgh3c147nh3mr77cx5va9bkpxqg6dm") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:leo@lwh.jp . #t) (binary-class . #t) (io . #t) (riff . #t) (ring:2 . #t) (wav . #t))) (source . "git://github.com/lwhjp/binary-class-riff") (tags . ("binary-class" "io" "riff" "wav")) (versions . #hash((default . #hasheq((checksum . "2062f82382eed570b502a935f740621d3971d527") (source . "git://github.com/lwhjp/binary-class-riff") (source_url . "http://github.com/lwhjp/binary-class-riff/tree/master"))))))) ("sysfs" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sysfs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sysfs.txt"))) (checksum . "80a68016bfd28fa5e86269e7bae0cbbe5ad8de87") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1")) (description . "Linux /sys utilities.") (implies . ()) (last-checked . 1522414689) (last-edit . 1368570744) (last-updated . 1502816471) (modules . ((lib "sysfs/net.rkt") (lib "sysfs/util.rkt") (lib "sysfs/block.rkt") (lib "sysfs/main.rkt"))) (name . "sysfs") (nix-sha256 . "0g6f38n60ivkvszvpn352q1ylmynkkg0krh37ajhhy3k1qii23jh") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mordae@anilinux.org . #t) (linux . #t) (ring:1 . #t))) (source . "github://github.com/mordae/racket-sysfs/master") (tags . ("linux")) (versions . #hash((default . #hasheq((checksum . "80a68016bfd28fa5e86269e7bae0cbbe5ad8de87") (source . "github://github.com/mordae/racket-sysfs/master") (source_url . "http://github.com/mordae/racket-sysfs/tree/master"))))))) ("web-server-lib" . #hash((author . "jay@racket-lang.org") (checksum . "b16f5ba817c470fb570c859a28677610869d6b80") (dependencies . ("srfi-lite-lib" ("base" #:version "6.2.900.15") "net-lib" "net-cookies-lib" "compatibility-lib" "scribble-text-lib" "parser-tools-lib" "rackunit-lib")) (description . "jay@racket-lang.org") (modules . ()) (name . "web-server-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/web-server-lib.zip") (tags . ()))) ("glob" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "glob" "doc/glob@glob/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/glob.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/glob.txt"))) (checksum . "e3010eaf8d89b5c963c4f33f31ecf98dd029300d") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Deprecated. Use file/glob instead.") (implies . ()) (last-checked . 1522414404) (last-edit . 1475797107) (last-updated . 1516774622) (modules . ((lib "glob/private/glob.rkt") (lib "glob/typed.rkt") (lib "glob/scribblings/glob.scrbl") (lib "glob/main.rkt") (lib "glob/private/in-new-directory.rkt"))) (name . "glob") (nix-sha256 . "0sgifhhjfdwh48sjzrc93j09bvdxxdwqwv0sz04kflxa1ypyqrq5") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (deprecated . #t) (iterable . #t) (ring:1 . #t) (scripting . #t) (string . #t))) (source . "git://github.com/bennn/glob") (tags . ("deprecated" "iterable" "scripting" "string")) (versions . #hash(("6.1.1" . #hasheq((checksum . "d717381557272ee8403b1513a83135ae157f6de2") (source . "git://github.com/bennn/glob#6.2") (source_url . "http://github.com/bennn/glob/tree/master#6.2"))) ("6.3" . #hasheq((checksum . "b642f0d8ba32f39a7fe51d01199ff0dffbdfed70") (source . "git://github.com/bennn/glob#6.6") (source_url . "http://github.com/bennn/glob/tree/master#6.6"))) ("6.2.1" . #hasheq((checksum . "d717381557272ee8403b1513a83135ae157f6de2") (source . "git://github.com/bennn/glob#6.2") (source_url . "http://github.com/bennn/glob/tree/master#6.2"))) (default . #hasheq((checksum . "e3010eaf8d89b5c963c4f33f31ecf98dd029300d") (source . "git://github.com/bennn/glob") (source_url . "http://github.com/bennn/glob/tree/master"))) ("6.4" . #hasheq((checksum . "b642f0d8ba32f39a7fe51d01199ff0dffbdfed70") (source . "git://github.com/bennn/glob#6.6") (source_url . "http://github.com/bennn/glob/tree/master#6.6"))) ("6.5" . #hasheq((checksum . "b642f0d8ba32f39a7fe51d01199ff0dffbdfed70") (source . "git://github.com/bennn/glob#6.6") (source_url . "http://github.com/bennn/glob/tree/master#6.6"))) ("6.6" . #hasheq((checksum . "b642f0d8ba32f39a7fe51d01199ff0dffbdfed70") (source . "git://github.com/bennn/glob#6.6") (source_url . "http://github.com/bennn/glob/tree/master#6.6"))) ("6.2" . #hasheq((checksum . "d717381557272ee8403b1513a83135ae157f6de2") (source . "git://github.com/bennn/glob#6.2") (source_url . "http://github.com/bennn/glob/tree/master#6.2"))) ("6.1" . #hasheq((checksum . "d717381557272ee8403b1513a83135ae157f6de2") (source . "git://github.com/bennn/glob#6.2") (source_url . "http://github.com/bennn/glob/tree/master#6.2"))))))) ("xlang" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xlang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/xlang.txt"))) (checksum . "6672450a99cdf9aed7dcbcde2ab8e76063966973") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "A minimal combinator language, created for PLT Game #1") (implies . ()) (last-checked . 1522414703) (last-edit . 1354727298) (last-updated . 1502816532) (modules . ((lib "xlang/example.rkt") (lib "xlang/main.rkt"))) (name . "xlang") (nix-sha256 . "15zlpkavhk5hmd121g3ivhds17ax5kppgw6hz2sfc3lqq5sc6cds") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (language . #t) (ring:1 . #t))) (source . "github://github.com/samth/xlang/master") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "6672450a99cdf9aed7dcbcde2ab8e76063966973") (source . "github://github.com/samth/xlang/master") (source_url . "http://github.com/samth/xlang/tree/master"))))))) ("errortrace" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org florence@racket-lang.org") (checksum . "e63c664f79bb05c15f84ec9e42e6a7f9b8966bd2") (dependencies . ("errortrace-lib" "errortrace-doc")) (description . "mflatt@racket-lang.org robby@racket-lang.org florence@racket-lang.org") (modules . ()) (name . "errortrace") (source . "https://download.racket-lang.org/releases/6.12/pkgs/errortrace.zip") (tags . ()))) ("kernel" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/kernel.txt") (test-failure-log . "server/built/test-fail/kernel.txt") (test-success-log . #f))) (checksum . "8602042a9d6109399dfa7f492b5af7af6c88f597") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1" "rtnl" "sysfs")) (description . "Interface to Linux kernel runtime configuration.") (implies . ()) (last-checked . 1522414422) (last-edit . 1405684736) (last-updated . 1502816144) (modules . ((lib "kernel/private/socket.rkt") (lib "kernel/private/sysfs-net.rkt") (lib "kernel/main.rkt") (lib "kernel/private/ffi.rkt") (lib "kernel/address.rkt") (lib "kernel/private/sysfs-util.rkt") (lib "kernel/link.rkt"))) (name . "kernel") (nix-sha256 . "00n53nfy90nadiv5x6ik3rkvlc6dd5z23vpvmc3wvmjyjxk5jji8") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mordae@anilinux.org . #t) (linux . #t) (net . #t) (ring:1 . #t))) (source . "github://github.com/mordae/racket-kernel/master") (tags . ("linux" "net")) (versions . #hash((default . #hasheq((checksum . "8602042a9d6109399dfa7f492b5af7af6c88f597") (source . "github://github.com/mordae/racket-kernel/master") (source_url . "http://github.com/mordae/racket-kernel/tree/master"))))))) ("pkg-push" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pkg-push.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pkg-push.txt"))) (checksum . "4f221f45faea7f60bd4bbb539685326ec123bb92") (checksum-error . #f) (conflicts . ()) (dependencies . ("aws" "base" "http")) (implies . ()) (last-checked . 1522414513) (last-edit . 1417307461) (last-updated . 1502816260) (modules . ((lib "pkg-push/push-catalog.rkt"))) (name . "pkg-push") (nix-sha256 . "07d5viv2gh4jn00bs3i1rlpwc1vn5gz8h4rcjw0s8jl3vnqs187w") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/racket/pkg-push") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4f221f45faea7f60bd4bbb539685326ec123bb92") (source . "git://github.com/racket/pkg-push") (source_url . "http://github.com/racket/pkg-push/tree/master"))))))) ("extensible-parser-specifications" . #hasheq((author . "georges.duperon@gmail.com") (authors . ("georges.duperon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "extensible-parser-specifications" "doc/extensible-parser-specifications@extensible-parser-specifications/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/extensible-parser-specifications.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/extensible-parser-specifications.txt"))) (checksum . "8368d2d60162307b0137354a7918997d6c344ee7") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "phc-toolkit" "generic-syntax-expanders" "alexis-util" "scribble-lib" "racket-doc" "seq-no-order")) (description . "Unstable, and has seemingly unsolvable problems with module boundaries. This package works like seq-no-order by Alexander Knauth, but adds reusable (within the same module) clauses and global constraints like \"a must occur before b\" or \"a mutually exclusive with c\".") (implies . ()) (last-checked . 1522414400) (last-edit . 1501078603) (last-updated . 1521585771) (modules . ((lib "extensible-parser-specifications/private/mixin.rkt") (lib "extensible-parser-specifications/private/pre.rkt") (lib "extensible-parser-specifications/private/before-after.rkt") (lib "extensible-parser-specifications/test/test-order-point.rkt") (lib "extensible-parser-specifications/test/test-extend-structure-options.rkt") (lib "extensible-parser-specifications/scribblings/pre-global-post-section.scrbl") (lib "extensible-parser-specifications/main.rkt") (lib "extensible-parser-specifications/private/global-mutex.rkt") (lib "extensible-parser-specifications/private/post.rkt") (lib "extensible-parser-specifications/scribblings/utils.rkt") (lib "extensible-parser-specifications/scribblings/misc.scrbl") (lib "extensible-parser-specifications/private/parameters.rkt") (lib "extensible-parser-specifications/test/test-maybe-empty.rkt") (lib "extensible-parser-specifications/scribblings/extensible-parser-specifications.scrbl") (lib "extensible-parser-specifications/private/try-attribute.rkt") (lib "extensible-parser-specifications/scribblings/no-order.scrbl") (lib "extensible-parser-specifications/private/no-order.rkt") (lib "extensible-parser-specifications/test/test-rest.rkt") (lib "extensible-parser-specifications/scribblings/rest.scrbl") (lib "extensible-parser-specifications/scribblings/global.scrbl") (lib "extensible-parser-specifications/scribblings/pre.scrbl") (lib "extensible-parser-specifications/test/test-structure-options.rkt") (lib "extensible-parser-specifications/scribblings/post.scrbl") (lib "extensible-parser-specifications/private/global.rkt") (lib "extensible-parser-specifications/private/define-syntax+simple-api.rkt") (lib "extensible-parser-specifications/test/test-global.rkt") (lib "extensible-parser-specifications/private/optional.rkt") (lib "extensible-parser-specifications/scribblings/forward-attributes.scrbl") (lib "extensible-parser-specifications/private/nop.rkt") (lib "extensible-parser-specifications/test/test-scopes-mixin-in-syntax-parser.rkt") (lib "extensible-parser-specifications/scribblings/defining-reusable-mixins.scrbl") (lib "extensible-parser-specifications/scribblings/pre-global-post-order.scrbl"))) (name . "extensible-parser-specifications") (nix-sha256 . "0qz79mvjxrxqq6d7w0038fv08drbkrjk04jg8w9yd8m9j7kgq1nx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:georges.duperon@gmail.com . #t) (experimental . #t) (ring:1 . #t) (syntax . #t) (syntax-parse . #t))) (source . "https://github.com/jsmaniac/extensible-parser-specifications.git") (tags . ("experimental" "syntax" "syntax-parse")) (versions . #hash((default . #hasheq((checksum . "8368d2d60162307b0137354a7918997d6c344ee7") (source . "https://github.com/jsmaniac/extensible-parser-specifications.git") (source_url . "https://github.com/jsmaniac/extensible-parser-specifications.git"))))))) ("redex-examples" . #hash((author . "robby@racket-lang.org bfetscher@racket-lang.org") (checksum . "9b5fc2d7be1f7cfe1eb15ba1d944a6ab8db39544") (dependencies . ("base" "compiler-lib" "rackunit-lib" "redex-gui-lib" "slideshow-lib" "math-lib" "plot-lib")) (description . "robby@racket-lang.org bfetscher@racket-lang.org") (modules . ()) (name . "redex-examples") (source . "https://download.racket-lang.org/releases/6.12/pkgs/redex-examples.zip") (tags . ()))) ("wn" . #hasheq((author . "anurag@mendhekar.com") (authors . ("anurag@mendhekar.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/wn.txt") (docs . (("main" "wn" "doc/wn@wn/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/wn.txt") (test-failure-log . "server/built/test-fail/wn.txt") (test-success-log . #f))) (checksum . "2f4f7658125efc2422590f3cd40e342246b25653") (checksum-error . #f) (conflicts . ()) (dependencies . ()) (description . "An FFI interface to WordNet 3.0 -- A Lexical Database for English") (implies . ()) (last-checked . 1522414702) (last-edit . 1442875832) (last-updated . 1502816529) (modules . ((lib "wn/wn.rkt") (lib "wn/wn.scrbl"))) (name . "wn") (nix-sha256 . "02q898879065i8nvr3q0y1rkm5jqjf56xy9w6kqmx97fkzxxajp2") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:anurag@mendhekar.com . #t) (ffi . #t) (nlp . #t) (ring:1 . #t))) (source . "git://github.com/themetaschemer/wn") (tags . ("ffi" "nlp")) (versions . #hash((default . #hasheq((checksum . "2f4f7658125efc2422590f3cd40e342246b25653") (source . "git://github.com/themetaschemer/wn") (source_url . "http://github.com/themetaschemer/wn/tree/master"))))))) ("gtp-plot" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gtp-plot" "doc/gtp-plot@gtp-plot/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gtp-plot.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gtp-plot.txt"))) (checksum . "b16148d811f5f0c9cd0562af791c6090d94be9a3") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "draw-lib" "scribble-abbrevs" "scribble-lib" "math-lib" "pict-lib" "plot-lib" "reprovide-lang" "gtp-util" "rackunit-lib" "racket-doc" "scribble-doc" "pict-lib" "pict-doc" "plot-doc" "rackunit-abbrevs" "typed-racket-doc" "gtp-util")) (description . "Plots for gradual typing performance") (implies . ()) (last-checked . 1522414406) (last-edit . 1503902619) (last-updated . 1519068282) (modules . ((lib "gtp-plot/private/reticulated-info.rkt") (lib "gtp-plot/private/raco.rkt") (lib "gtp-plot/reticulated-info.rkt") (lib "gtp-plot/sample-info.rkt") (lib "gtp-plot/private/typed-racket-info.rkt") (lib "gtp-plot/private/util.rkt") (lib "gtp-plot/typed-racket-info.rkt") (lib "gtp-plot/private/sample-info.rkt") (lib "gtp-plot/configuration-info.rkt") (lib "gtp-plot/private/plot.rkt") (lib "gtp-plot/docs/supporting.scrbl") (lib "gtp-plot/docs/data-definition.scrbl") (lib "gtp-plot/private/configuration-info.rkt") (lib "gtp-plot/private/performance-info.rkt") (lib "gtp-plot/docs/gtp-plot.scrbl") (lib "gtp-plot/util.rkt") (lib "gtp-plot/system.rkt") (lib "gtp-plot/private/system.rkt") (lib "gtp-plot/performance-info.rkt") (lib "gtp-plot/docs/parsing.scrbl") (lib "gtp-plot/plot.rkt") (lib "gtp-plot/docs/plotting.scrbl"))) (name . "gtp-plot") (nix-sha256 . "01z3r7v63qq0ag3d1r26g76cv04igmw3vz8j044w42vcvz950f20") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (gtp . #t) (plot . #t) (ring:1 . #t) (util . #t))) (source . "git://github.com/bennn/gtp-plot") (tags . ("gtp" "plot" "util")) (versions . #hash((default . #hasheq((checksum . "b16148d811f5f0c9cd0562af791c6090d94be9a3") (source . "git://github.com/bennn/gtp-plot") (source_url . "http://github.com/bennn/gtp-plot/tree/master"))))))) ("spaceship-game-demo" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/spaceship-game-demo.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/spaceship-game-demo.txt") (test-failure-log . "server/built/test-fail/spaceship-game-demo.txt") (test-success-log . #f))) (checksum . "268ffe506cdc21f751a83c5d1b5d9c02f54c6a54") (checksum-error . #f) (conflicts . ()) (dependencies . ("game-engine-demos-common")) (description . "A demo \"game\" (actually many versions of a game) that we are using to teach the principles of game design.  Not intended to be particularly fun...") (implies . ()) (last-checked . 1522414681) (last-edit . 1519856804) (last-updated . 1522202012) (modules . ((lib "spaceship-game-demo/v2/spaceship_game.rkt") (lib "spaceship-game-demo/v7/spaceship_game.rkt") (lib "spaceship-game-demo/v9/spaceship_game.rkt") (lib "spaceship-game-demo/v4/spaceship_game.rkt") (lib "spaceship-game-demo/v16/spaceship_game.rkt") (lib "spaceship-game-demo/v5/spaceship_game.rkt") (lib "spaceship-game-demo/v8/spaceship_game.rkt") (lib "spaceship-game-demo/v17/spaceship_game.rkt") (lib "spaceship-game-demo/v10/spaceship_game.rkt") (lib "spaceship-game-demo/main.rkt") (lib "spaceship-game-demo/v13/spaceship_game.rkt") (lib "spaceship-game-demo/v12/spaceship_game.rkt") (lib "spaceship-game-demo/v1/spaceship_game.rkt") (lib "spaceship-game-demo/v6/spaceship_game.rkt") (lib "spaceship-game-demo/v3/spaceship_game.rkt") (lib "spaceship-game-demo/v15/spaceship_game.rkt") (lib "spaceship-game-demo/v14/spaceship_game.rkt") (lib "spaceship-game-demo/v11/spaceship_game.rkt"))) (name . "spaceship-game-demo") (nix-sha256 . "0bzv7hc0yzwa3lx0xrgpsqpfdgb95lk1r6qgykb5kkgj4vnzam3q") (ring . 2) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:stephen@thoughtstem.com . #t) (education . #t) (games . #t) (ring:2 . #t))) (source . "https://github.com/srfoster/game-engine-demos.git?path=spaceship-game-demo") (tags . ("education" "games")) (versions . #hash((default . #hasheq((checksum . "268ffe506cdc21f751a83c5d1b5d9c02f54c6a54") (source . "https://github.com/srfoster/game-engine-demos.git?path=spaceship-game-demo") (source_url . "https://github.com/srfoster/game-engine-demos.git?path=spaceship-game-demo"))))))) ("expect" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "expect" "doc/expect@expect/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/expect.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/expect.txt"))) (checksum . "9530df30537ae05400b6a3add9619e5f697dca52") (checksum-error . #f) (conflicts . ()) (dependencies . ("syntax-classes-lib" ("arguments" #:version "1.1") "base" "fancy-app" ("rackunit-lib" #:version "1.7") "reprovide-lang" "rackunit-doc" "doc-coverage" "racket-doc" "scribble-lib" "scribble-text-lib" "syntax-classes-lib")) (description . "A package defining \"expectations\", first-class assertions about values for use in validation and unit testing with high quality error messages. Currently experimental.") (implies . ()) (last-checked . 1522414399) (last-edit . 1500074613) (last-updated . 1506054560) (modules . ((lib "expect/private/main.rkt") (lib "expect/scribblings/base.scrbl") (lib "expect/tests/data/data-sequence.rkt") (lib "expect/rackunit.rkt") (lib "expect/scribblings/struct.scrbl") (lib "expect/tests/compare.rkt") (lib "expect/scribblings/syntax.scrbl") (lib "expect/scribblings/data.scrbl") (lib "expect/tests/scribble.rkt") (lib "expect/private/data/data-dict.rkt") (lib "expect/tests/util.rkt") (lib "expect/private/lite/main.rkt") (lib "expect/private/lite/base.rkt") (lib "expect/private/data/data-sequence.rkt") (lib "expect/private/meta.rkt") (lib "expect/private/rackunit/check.rkt") (lib "expect/private/function.rkt") (lib "expect/private/syntax.rkt") (lib "expect/scribblings/meta.scrbl") (lib "expect/private/text.rkt") (lib "expect/tests/data/convert.rkt") (lib "expect/private/util.rkt") (lib "expect/tests/struct.rkt") (lib "expect/private/data/main.rkt") (lib "expect/private/lite/compare-sugar.rkt") (lib "expect/scribblings/util.rkt") (lib "expect/tests/data/convert-equal.rkt") (lib "expect/private/data/data-box.rkt") (lib "expect/tests/meta.rkt") (lib "expect/private/data/data-set.rkt") (lib "expect/scribblings/combinator.scrbl") (lib "expect/scribblings/base.rkt") (lib "expect/tests/text.rkt") (lib "expect/scribblings/compare.scrbl") (lib "expect/private/lite/combinator.rkt") (lib "expect/private/data/data-syntax.rkt") (lib "expect/scribblings/convert.scrbl") (lib "expect/scribblings/text.scrbl") (lib "expect/scribblings/function.scrbl") (lib "expect/private/data.rkt") (lib "expect/tests/logic.rkt") (lib "expect/scribblings/logic.scrbl") (lib "expect/tests/syntax.rkt") (lib "expect/tests/data/data-set.rkt") (lib "expect/scribblings/rackunit.scrbl") (lib "expect/private/rackunit/main.rkt") (lib "expect/scribblings/main.scrbl") (lib "expect/main.rkt") (lib "expect/private/rackunit/case.rkt") (lib "expect/private/text-io.rkt") (lib "expect/private/lite/logic.rkt") (lib "expect/private/function-context.rkt") (lib "expect/private/struct.rkt") (lib "expect/tests/data/data-hash.rkt") (lib "expect/private/lite/compare.rkt") (lib "expect/private/data/context.rkt") (lib "expect/tests/data/data-box.rkt") (lib "expect/private/lite.rkt") (lib "expect/private/data/convert.rkt") (lib "expect/private/rackunit/base.rkt") (lib "expect/tests/rackunit.rkt") (lib "expect/tests/function.rkt") (lib "expect/private/fail.rkt") (lib "expect/private/data/convert-base.rkt"))) (name . "expect") (nix-sha256 . "144sa4i069sg428kij5y3zivk9njaw3my89v5aaz1yhdlirlgapp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (experimental . #t) (rackunit . #t) (ring:1 . #t) (testing . #t) (validation . #t))) (source . "git://github.com/jackfirth/racket-expect") (tags . ("experimental" "rackunit" "testing" "validation")) (versions . #hash((default . #hasheq((checksum . "9530df30537ae05400b6a3add9619e5f697dca52") (source . "git://github.com/jackfirth/racket-expect") (source_url . "http://github.com/jackfirth/racket-expect/tree/master"))))))) ("hive-common" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "hive-common" "doc/hive-common@hive-common/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hive-common.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hive-common.txt"))) (checksum . "ee66c7ca261c401b7f46c6df22577007615f4c86") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "thread-utils" "racket-doc")) (description . "Hive: client-server framework. This is library for both client and server.") (implies . ()) (last-checked . 1522414415) (last-edit . 1466352121) (last-updated . 1518863090) (modules . ((lib "hive/common/read-write.rkt") (lib "hive/common/users.rkt") (lib "hive/common/serialize.rkt") (lib "hive/common/hive-common.scrbl"))) (name . "hive-common") (nix-sha256 . "1y50g6qsiybnx5mav87kjr5h6wqn8zw4b84qxb0mixflr1xlbn6j") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (ipc . #t) (ring:1 . #t))) (source . "git://github.com/Kalimehtar/hive-common") (tags . ("ipc")) (versions . #hash((default . #hasheq((checksum . "ee66c7ca261c401b7f46c6df22577007615f4c86") (source . "git://github.com/Kalimehtar/hive-common") (source_url . "http://github.com/Kalimehtar/hive-common/tree/master"))))))) ("ffmpeg-x86_64-macosx" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ffmpeg-x86_64-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ffmpeg-x86_64-macosx.txt"))) (checksum . "e8fb290d38e90800ffa1d105dbb540d28f931807") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "openh264-x86_64-macosx")) (description . "") (implies . ()) (last-checked . 1522414401) (last-edit . 1497318909) (last-updated . 1521584183) (modules . ()) (name . "ffmpeg-x86_64-macosx") (nix-sha256 . "1h5nrhdlb9z89vx4irrzxcpc7zgpyjk1vy6yc598yfq1hskmwjvl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (ffmpeg . #t) (ring:1 . #t) (video . #t))) (source . "git://github.com/videolang/native-pkgs?path=ffmpeg-x86_64-macosx") (tags . ("ffmpeg" "video")) (versions . #hash((default . #hasheq((checksum . "e8fb290d38e90800ffa1d105dbb540d28f931807") (source . "git://github.com/videolang/native-pkgs?path=ffmpeg-x86_64-macosx") (source_url . "http://github.com/videolang/native-pkgs/tree/master?path=ffmpeg-x86_64-macosx"))))))) ("xlist" . #hasheq((author . "georges.duperon@gmail.com") (authors . ("georges.duperon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "xlist" "doc/xlist@xlist/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xlist.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/xlist.txt"))) (checksum . "65af3c7a8a170e73e52a4e4c51eb0b7b24a7c98e") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "mutable-match-lambda" "scribble-enhanced" "multi-id" "type-expander" "typed-racket-lib" "typed-racket-more" "phc-toolkit" "reprovide-lang" "match-string" "scribble-lib" "racket-doc" "typed-racket-doc" "scribble-math")) (description . "Fancy lists, with bounded or unbounded repetition of elements. Can be used as a type or match pattern.") (implies . ()) (last-checked . 1522414703) (last-edit . 1474481869) (last-updated . 1517062746) (modules . ((lib "xlist/test/test-match-typed.rkt") (lib "xlist/main.rkt") (lib "xlist/scribblings/split-xlist.scrbl") (lib "xlist/once-identifier.rkt") (lib "xlist/implementation.rkt") (lib "xlist/test/test-type-superscripts.rkt") (lib "xlist/scribblings/identifiers.scrbl") (lib "xlist/infinity-identifier.rkt") (lib "xlist/split-xlist.rkt") (lib "xlist/scribble-enhanced.rkt") (lib "xlist/test/test-split-xlist.rkt") (lib "xlist/untyped.rkt") (lib "xlist/test/test-match.rkt") (lib "xlist/test/test-type.rkt") (lib "xlist/test/test-split-xlist-ann.rkt") (lib "xlist/caret-identifier.rkt") (lib "xlist/between.rkt") (lib "xlist/scribblings/xlist-untyped.scrbl") (lib "xlist/scribblings/xlist.scrbl"))) (name . "xlist") (nix-sha256 . "004w9lj6dcfpd1g80qbnf7r812m6vg9dcqhcv3yfayca5zimcf5c") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:georges.duperon@gmail.com . #t) (match . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/jsmaniac/xlist.git") (tags . ("match" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "65af3c7a8a170e73e52a4e4c51eb0b7b24a7c98e") (source . "https://github.com/jsmaniac/xlist.git") (source_url . "https://github.com/jsmaniac/xlist.git"))))))) ("drracket-cyberpunk" . #hasheq((author . "scott@thinkmoore.net") (authors . ("scott@thinkmoore.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-cyberpunk.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-cyberpunk.txt"))) (checksum . "65d2ccc304b2f1d81423f78f9330a314497f8aae") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1522414393) (last-edit . 1457033684) (last-updated . 1502815938) (modules . ()) (name . "drracket-cyberpunk") (nix-sha256 . "0flywlzswx5fpd5rgd3ys0rzv43nvpp6ym47js11spidvamkzzq5") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (DrRacket . #t) (author:scott@thinkmoore.net . #t) (colorscheme . #t) (ring:1 . #t))) (source . "git://github.com/thinkmoore/drracket-cyberpunk.git") (tags . ("colorscheme" "DrRacket")) (versions . #hash((default . #hasheq((checksum . "65d2ccc304b2f1d81423f78f9330a314497f8aae") (source . "git://github.com/thinkmoore/drracket-cyberpunk.git") (source_url . "http://github.com/thinkmoore/drracket-cyberpunk.git/tree/master"))))))) ("css-expr" . #hasheq((author . "me@leafac.com") (authors . ("me@leafac.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "css-expr" "doc/css-expr@css-expr/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/css-expr.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/css-expr.txt"))) (checksum . "ccfe9e41d79ff9e789dc2e19e261f5535f65227b") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "nanopass" "scribble-lib" "racket-doc" "sandbox-lib")) (description . "S-expression-based CSS") (implies . ()) (last-checked . 1522414370) (last-edit . 1486939826) (last-updated . 1520423621) (modules . ((lib "css-expr/typed.rkt") (lib "css-expr/main.rkt") (lib "css-expr/documentation/css-expr.scrbl"))) (name . "css-expr") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:me@leafac.com . #t) (css . #t) (dsl . #t) (pollen . #t) (ring:1 . #t))) (source . "https://www.leafac.com/software/css-expr/css-expr.zip") (tags . ("css" "dsl" "pollen")) (versions . #hash((default . #hasheq((checksum . "ccfe9e41d79ff9e789dc2e19e261f5535f65227b") (source . "https://www.leafac.com/software/css-expr/css-expr.zip") (source_url . "https://www.leafac.com/software/css-expr/css-expr.zip"))))))) ("gdbdump" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gdbdump" "doc/gdbdump@gdbdump/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gdbdump.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gdbdump.txt"))) (checksum . "34e26cb2f32b78ca2804684f587caa9102b7593e") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "compatibility-lib" "racket-doc" "scribble-lib")) (description . "GDB-based Native Thread Backtrace Dumps") (implies . ()) (last-checked . 1522414404) (last-edit . 1456513177) (last-updated . 1502816076) (modules . ((lib "gdbdump/main.rkt") (lib "gdbdump/gdbdump.scrbl"))) (name . "gdbdump") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (debugging . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/gdbdump.zip") (tags . ("debugging")) (versions . #hash((default . #hasheq((checksum . "34e26cb2f32b78ca2804684f587caa9102b7593e") (source . "http://www.neilvandyke.org/racket/gdbdump.zip") (source_url . "http://www.neilvandyke.org/racket/gdbdump.zip"))))))) ("python" . #hasheq((author . "pedropramos@tecnico.ulisboa.pt") (authors . ("pedropramos@tecnico.ulisboa.pt")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/python.txt") (test-failure-log . "server/built/test-fail/python.txt") (test-success-log . #f))) (checksum . "16edd14f3950fd5a01f8b0237e023536ef48d17b") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "parser-tools" "compatibility-lib" "srfi-lite-lib")) (description . "An implementation of the Python programming language for Racket") (implies . ()) (last-checked . 1522414537) (last-edit . 1440945925) (last-updated . 1502816339) (modules . ((lib "python/examples/datetime/datetime_racket.rkt") (lib "python/examples/eratosthenes/sieve.rkt") (lib "python/lang/python.rkt") (lib "python/engine/numbers.rkt") (lib "python/engine/iterators.rkt") (lib "python/engine/collections.rkt") (lib "python/ast-node-target.rkt") (lib "python/debug/lang/reader.rkt") (lib "python/examples/ackermann/ackermann.rkt") (lib "python/config.rkt") (lib "python/runtime.rkt") (lib "python/debug/lang/python.rkt") (lib "python/lang/lang-info.rkt") (lib "python/lang/runtime-config.rkt") (lib "python/lex+yacc.rkt") (lib "python/sandbox.rkt") (lib "python/engine/files.rkt") (lib "python/compile.rkt") (lib "python/engine/functions.rkt") (lib "python/cpy-importing.rkt") (lib "python/parse.rkt") (lib "python/ast-node-stmt.rkt") (lib "python/lang/reader.rkt") (lib "python/main.rkt") (lib "python/examples/fibonacci/fib.rkt") (lib "python/engine/racket_values.rkt") (lib "python/engine/modules.rkt") (lib "python/engine/singletons.rkt") (lib "python/runtime_FFI.rkt") (lib "python/libpython.rkt") (lib "python/ast-node.rkt") (lib "python/bindings-mixin.rkt") (lib "python/paths.rkt") (lib "python/examples/mandelbrot/mandelbrot.rkt") (lib "python/engine/descriptors.rkt") (lib "python/ast-node-expr.rkt") (lib "python/engine/strings.rkt") (lib "python/engine/bools.rkt") (lib "python/engine/engine.rkt") (lib "python/name-mangling.rkt") (lib "python/engine/exceptions.rkt"))) (name . "python") (nix-sha256 . "146wvp53liz3dgvkdn9gddqqp8fnb9arvwbbnbrqz6kkl5y4dqj1") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:pedropramos@tecnico.ulisboa.pt . #t) (language . #t) (ring:1 . #t))) (source . "git://github.com/pedropramos/PyonR.git#master") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "16edd14f3950fd5a01f8b0237e023536ef48d17b") (source . "git://github.com/pedropramos/PyonR.git#master") (source_url . "http://github.com/pedropramos/PyonR.git/tree/master#master"))))))) ("profile" . #hash((author . "eli@racket-lang.org") (checksum . "7e480569da7e6671d6667830701fe3ee875f0f52") (dependencies . ("profile-lib" "profile-doc")) (description . "eli@racket-lang.org") (modules . ()) (name . "profile") (source . "https://download.racket-lang.org/releases/6.12/pkgs/profile.zip") (tags . ()))) ("xfunctions-doc" . #hasheq((author . "wesley.bitomski@gmail.com") (authors . ("wesley.bitomski@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xfunctions-doc.txt") (test-failure-log . "server/built/test-fail/xfunctions-doc.txt") (test-success-log . #f))) (checksum . "a8c545d55ee1d9df715ccc44fb22eec463e0f206") (checksum-error . #f) (conflicts . ()) (dependencies . (("base") ("racket") ("sandbox-lib") ("scribble-lib") ("racket-doc") ("xfunctions-lib"))) (description . "Documentation for xfunctions") (implies . ()) (last-checked . 1522414703) (last-edit . 1515107616) (last-updated . 1515417539) (modules . ((lib "xfunctions-doc/xfunctions.scrbl"))) (name . "xfunctions-doc") (nix-sha256 . "03h570a9dzlz0hb0vhlqhbr6lbgcjq3v4s9ydk53ba7wgxw3jyz3") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:wesley.bitomski@gmail.com . #t) (ring:2 . #t))) (source . "https://github.com/wesleybits/xfunctions.git?path=xfunctions-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a8c545d55ee1d9df715ccc44fb22eec463e0f206") (source . "https://github.com/wesleybits/xfunctions.git?path=xfunctions-doc") (source_url . "https://github.com/wesleybits/xfunctions.git?path=xfunctions-doc"))))))) ("math-win32-i386" . #hash((author . "mflatt@racket-lang.org") (checksum . "84caac08898e4e94398c29302f8ee05cfae72472") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "math-win32-i386") (source . "https://download.racket-lang.org/releases/6.12/pkgs/math-win32-i386.zip") (tags . ()))) ("racket-i386-macosx-2" . #hash((author . "mflatt@racket-lang.org") (checksum . "3676f10696b81a80e555bccaac9e466bd7aef807") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "racket-i386-macosx-2") (source . "https://download.racket-lang.org/releases/6.12/pkgs/racket-i386-macosx-2.zip") (tags . ()))) ("rtmidi" . #hasheq((author . "clements@racket-lang.org m4burns@uwaterloo.ca") (authors . ("clements@racket-lang.org" "m4burns@uwaterloo.ca")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rtmidi" "doc/rtmidi@rtmidi/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rtmidi.txt") (test-failure-log . "server/built/test-fail/rtmidi.txt") (test-success-log . #f))) (checksum . "61c9f0892f9ce1fab46ea96b984e37f3632b6498") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "RtMidi provides racket bindings for the RtMidi library, thus enabling racket programs to send and receive MIDI events.") (implies . ()) (last-checked . 1522414673) (last-edit . 1415741132) (last-updated . 1502816414) (modules . ((lib "rtmidi/main.rkt") (lib "rtmidi/rtmidi.scrbl") (lib "rtmidi/rtmidi-example.rkt"))) (name . "rtmidi") (nix-sha256 . "1r2a5l0f8rzk8qjymjjblq82vmzp1fc6q76r4qirayr0i5qxnngn") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audio . #t) (author:clements@racket-lang.org . #t) (author:m4burns@uwaterloo.ca . #t) (io . #t) (midi . #t) (ring:1 . #t))) (source . "git://github.com/jbclements/rtmidi") (tags . ("audio" "io" "midi")) (versions . #hash((default . #hasheq((checksum . "61c9f0892f9ce1fab46ea96b984e37f3632b6498") (source . "git://github.com/jbclements/rtmidi") (source_url . "http://github.com/jbclements/rtmidi/tree/master"))))))) ("handin" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "handin-server" "doc/handin-server@handin/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/handin.txt") (test-failure-log . "server/built/test-fail/handin.txt") (test-success-log . #f))) (checksum . "3c31daccf0f61bb06aa65e36d72acc0ef2f453da") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "drracket" "drracket-plugin-lib" "gui-lib" "htdp-lib" "net-lib" "pconvert-lib" "sandbox-lib" "rackunit-lib" "web-server-lib" "gui-doc" "racket-doc" "scribble-lib")) (description . "Handin server and client template") (implies . ()) (last-checked . 1522414415) (last-edit . 1365690182) (last-updated . 1502816110) (modules . ((lib "handin-server/private/config.rkt") (lib "handin-server/scribblings/server-client.scrbl") (lib "handin-server/private/lock.rkt") (lib "handin-server/web-status-server.rkt") (lib "handin-server/utils.rkt") (lib "handin-server/scribblings/multifile.scrbl") (lib "handin-server/scribblings/handin-server.scrbl") (lib "handin-server/scribblings/hook-dummy.rkt") (lib "handin-server/scribblings/updater.scrbl") (lib "handin-client/client.rkt") (lib "handin-client/client-gui.rkt") (lib "handin-server/run-servlet.rkt") (lib "handin-server/scribblings/utils.scrbl") (lib "handin-server/private/run-status.rkt") (lib "handin-server/scribblings/other-utils.scrbl") (lib "handin-server/scribblings/server-setup.scrbl") (lib "handin-server/private/hooker.rkt") (lib "handin-server/scribblings/grading-utils.scrbl") (lib "handin-server/scribblings/checker.scrbl") (lib "handin-server/main.rkt") (lib "handin-server/scribblings/checker-utils.scrbl") (lib "handin-server/private/logger.rkt") (lib "handin-server/overridden-collects/teachpack/htdp/master.rkt") (lib "handin-client/this-collection.rkt") (lib "handin-server/sandbox.rkt") (lib "handin-server/scribblings/client-customization.scrbl") (lib "handin-server/scribblings/sandbox.scrbl") (lib "handin-server/grading-utils.rkt") (lib "handin-server/scribblings/wheres-the-collection.scrbl") (lib "handin-server/scribblings/quick-start.scrbl") (lib "handin-client/updater.rkt") (lib "handin-server/overridden-collects/teachpack/htdp/guess.rkt") (lib "handin-server/scribblings/common.rkt") (lib "handin-server/private/reloadable.rkt") (lib "handin-client/handin-multi.rkt") (lib "handin-server/checker.rkt") (lib "handin-server/private/md5.rkt"))) (name . "handin") (nix-sha256 . "09vqljgvz43gymc2q4i40mg551xxhb9pf4zkgnprdrvjhi6ihdss") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mflatt@cs.utah.edu . #t) (ring:0 . #t))) (source . "github://github.com/plt/handin/for-v5.3.6") (tags . ()) (versions . #hash((default . #hasheq((checksum . "3c75e42125f44b5a42631b49b65c35595d5b6d83") (source . "github://github.com/plt/handin/master") (source_url . "http://github.com/plt/handin/tree/master"))) ("5.3.6" . #hasheq((checksum . "3c31daccf0f61bb06aa65e36d72acc0ef2f453da") (source . "github://github.com/plt/handin/for-v5.3.6") (source_url . "http://github.com/plt/handin/tree/for-v5.3.6"))) ("5.3.5" . #hasheq((checksum . "3c31daccf0f61bb06aa65e36d72acc0ef2f453da") (source . "github://github.com/plt/handin/for-v5.3.6") (source_url . "http://github.com/plt/handin/tree/for-v5.3.6"))))))) ("lambdajam-2015-racket-pl-pl" . #hasheq((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lambdajam-2015-racket-pl-pl.txt") (test-failure-log . "server/built/test-fail/lambdajam-2015-racket-pl-pl.txt") (test-success-log . #f))) (checksum . "4c9001dca9fb72c885d8cc1bef057ac8f56c24d0") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "gui-lib" "lazy" "parser-tools-lib" "rackunit-lib" "scheme-lib" "schemeunit" "slideshow-lib" "typed-racket-lib" "lang-slide")) (description . "") (implies . ()) (last-checked . 1522414422) (last-edit . 1445998661) (last-updated . 1502816146) (modules . ((lib "lambdajam-2015-racket-pl-pl/lang-slide.rkt") (lib "lambdajam-2015-racket-pl-pl/or.rkt") (lib "mini-hdl/rca-hdl.rkt") (lib "lambdajam-2015-racket-pl-pl/open-compiler.rkt") (lib "lambdajam-2015-racket-pl-pl/thanks.rkt") (lib "mini-hdl/gc/lang/reader.rkt") (lib "mini-hdl/runtime.rkt") (lib "mini-hdl/rca-2-hdl.rkt") (lib "lambdajam-2015-racket-pl-pl/intro-code/fibs.rkt") (lib "lambdajam-2015-racket-pl-pl/enum.rkt") (lib "mini-hdl/gc-runtime.rkt") (lib "lambdajam-2015-racket-pl-pl/intro-code/fib.scrbl") (lib "mini-hdl/parser.rkt") (lib "lambdajam-2015-racket-pl-pl/salad-bar.rkt") (lib "lambdajam-2015-racket-pl-pl/title-lib.rkt") (lib "lambdajam-2015-racket-pl-pl/title.rkt") (lib "lambdajam-2015-racket-pl-pl/intro-code/lazy.rkt") (lib "lambdajam-2015-racket-pl-pl/util.rkt") (lib "lambdajam-2015-racket-pl-pl/main.rkt") (lib "mini-hdl/lang/reader.rkt") (lib "lambdajam-2015-racket-pl-pl/hdl-ex.rkt"))) (name . "lambdajam-2015-racket-pl-pl") (nix-sha256 . "1n6vsl5dj1zb83dqzdl5h8fdckmn78lr0gfnsfk98sva9szg6whv") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:robby@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/rfindler/lambdajam-2015-racket-pl-pl") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4c9001dca9fb72c885d8cc1bef057ac8f56c24d0") (source . "git://github.com/rfindler/lambdajam-2015-racket-pl-pl") (source_url . "http://github.com/rfindler/lambdajam-2015-racket-pl-pl/tree/master"))))))) ("scribble-lib" . #hash((author . "mflatt@racket-lang.org eli@racket-lang.org") (checksum . "4dbbf2797bc19682c75be9aeb7f3401f46848e3a") (dependencies . ("scheme-lib" "base" "compatibility-lib" "scribble-text-lib" "scribble-html-lib" "planet-lib" "net-lib" "at-exp-lib" "draw-lib" "syntax-color-lib" "sandbox-lib" "typed-racket-lib" "rackunit-lib")) (description . "mflatt@racket-lang.org eli@racket-lang.org") (modules . ()) (name . "scribble-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/scribble-lib.zip") (tags . ()))) ("macro-debugger" . #hash((author . "ryanc@racket-lang.org") (checksum . "deb9e63dda79b649a9a03f43e53bc9285acaecaf") (dependencies . ("base" "class-iop-lib" "compatibility-lib" "data-lib" "gui-lib" "images-lib" "images-gui-lib" "parser-tools-lib" "macro-debugger-text-lib" ("draw-lib" #:version "1.7") "racket-index" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "ryanc@racket-lang.org") (modules . ()) (name . "macro-debugger") (source . "https://download.racket-lang.org/releases/6.12/pkgs/macro-debugger.zip") (tags . ()))) ("plot-bestfit" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "bestfit" "doc/bestfit@plot-bestfit/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plot-bestfit.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plot-bestfit.txt"))) (checksum . "dd6ffbef2626d7cc7e6802389ce53d57d36bb21d") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "plot-lib" "plot-gui-lib" "math-lib" "racket-doc" "typed-racket-doc" "scribble-lib" "math-doc" "plot-doc")) (description . "") (implies . ()) (last-checked . 1522414515) (last-edit . 1441048148) (last-updated . 1508113918) (modules . ((lib "bestfit/scribblings/base.rkt") (lib "bestfit/scribblings/bestfit.scrbl") (lib "bestfit/main.rkt"))) (name . "plot-bestfit") (nix-sha256 . "0mrc01wc26nrc7r1cn2nl5ikyq0q1j1f9p6dlxflpiv7d1miibys") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:spencer@florence.io . #t) (ring:1 . #t))) (source . "git://github.com/florence/plot-bestfit") (tags . ()) (versions . #hash((default . #hasheq((checksum . "dd6ffbef2626d7cc7e6802389ce53d57d36bb21d") (source . "git://github.com/florence/plot-bestfit") (source_url . "http://github.com/florence/plot-bestfit/tree/master"))))))) ("racketeer" . #hasheq((author . "emailmiraleung@gmail.com jordanelder@outlook.com") (authors . ("emailmiraleung@gmail.com" "jordanelder@outlook.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racketeer.txt") (test-failure-log . "server/built/test-fail/racketeer.txt") (test-success-log . #f))) (checksum . "e3f703a46db1d97acbca361ebad3a21b3d4c2601") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "drracket" "drracket-plugin-lib" "gui-lib" "htdp-lib" "rackunit-lib" "sandbox-lib" "syntax-color-lib" "wxme-lib")) (description . "Continuous testing for DrRacket") (implies . ()) (last-checked . 1522414662) (last-edit . 1437598939) (last-updated . 1502816362) (modules . ((lib "racketeer/racketeer/private/testing-mixin.rkt") (lib "racketeer/racketeer/tool.rkt"))) (name . "racketeer") (nix-sha256 . "06d64k4igwkn2rs98ivyi168id2qj68n19ah8s2xayfc0fs6c6xi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:emailmiraleung@gmail.com . #t) (author:jordanelder@outlook.com . #t) (ring:1 . #t))) (source . "git://github.com/miraleung/racketeer#master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e3f703a46db1d97acbca361ebad3a21b3d4c2601") (source . "git://github.com/miraleung/racketeer#master") (source_url . "http://github.com/miraleung/racketeer/tree/master#master"))) ("6.2" . #hasheq((checksum . "254633617d2557f01996a1d036b7062c408f1089") (source . "git://github.com/miraleung/racketeer#racket-v6.2") (source_url . "http://github.com/miraleung/racketeer/tree/master#racket-v6.2"))))))) ("crypto-doc" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "crypto" "doc/crypto@crypto-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/crypto-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/crypto-doc.txt"))) (checksum . "07610cabe6c318809b3b9022d88cfe1cc386852e") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "crypto-lib")) (description . "Cryptography library") (implies . ()) (last-checked . 1522414369) (last-edit . 1519093619) (last-updated . 1519100633) (modules . ((lib "crypto/scribblings/misc.scrbl") (lib "crypto/scribblings/kdf.scrbl") (lib "crypto/scribblings/intro.scrbl") (lib "crypto/scribblings/factory.scrbl") (lib "crypto/scribblings/crypto.scrbl") (lib "crypto/scribblings/pkey.scrbl") (lib "crypto/scribblings/digest.scrbl") (lib "crypto/scribblings/cipher.scrbl"))) (name . "crypto-doc") (nix-sha256 . "08wdlzgz7grhyfzx9yk69nby2fams7y1vjdhdcrwddw9xmxvflxm") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (crypto . #t) (ring:2 . #t))) (source . "https://github.com/rmculpepper/crypto.git?path=crypto-doc") (tags . ("crypto")) (versions . #hash((default . #hasheq((checksum . "07610cabe6c318809b3b9022d88cfe1cc386852e") (source . "https://github.com/rmculpepper/crypto.git?path=crypto-doc") (source_url . "https://github.com/rmculpepper/crypto.git?path=crypto-doc"))))))) ("c-defs" . #hasheq((author . "peblairman@gmail.com") (authors . ("peblairman@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "c-defs" "doc/c-defs@c-defs/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/c-defs.txt") (test-failure-log . "server/built/test-fail/c-defs.txt") (test-success-log . #f))) (checksum . "d5b7ba438ccdead8213e96051a205b696e4a8a93") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "sandbox-lib" "scribble-lib")) (description . "Simple C value access") (implies . ()) (last-checked . 1522414312) (last-edit . 1436462400) (last-updated . 1502812286) (modules . ((lib "c-defs/main.rkt") (lib "c-defs/docs/c-defs.scrbl") (lib "c-defs/ffi.rkt") (lib "c-defs/examples/python-types.rkt"))) (name . "c-defs") (nix-sha256 . "0r1wfmjrrvby25pqgbn69npq32axqp2j6vn1gk84js1dis543fs5") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (C . #t) (author:peblairman@gmail.com . #t) (ffi . #t) (ring:1 . #t))) (source . "git://github.com/belph/c-defs") (tags . ("C" "ffi")) (versions . #hash((default . #hasheq((checksum . "d5b7ba438ccdead8213e96051a205b696e4a8a93") (source . "git://github.com/belph/c-defs") (source_url . "http://github.com/belph/c-defs/tree/master"))))))) ("distributed-places-lib" . #hash((author . "tewk@racket-lang.org") (checksum . "12f9e11df668b6be4e146403ffe3cb5df30732a2") (dependencies . ("base")) (description . "tewk@racket-lang.org") (modules . ()) (name . "distributed-places-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/distributed-places-lib.zip") (tags . ()))) ("hostname" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "hostname" "doc/hostname@hostname/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hostname.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hostname.txt"))) (checksum . "e235b0ed0e00388dfc80c4a20577458885679cdd") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "overeasy")) (description . "Getting Hostname, FQDN, and IP Addresses") (implies . ()) (last-checked . 1522414416) (last-edit . 1456469042) (last-updated . 1502816119) (modules . ((lib "hostname/main.rkt") (lib "hostname/hostname.scrbl"))) (name . "hostname") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:neil@neilvandyke.org . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/hostname.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e235b0ed0e00388dfc80c4a20577458885679cdd") (source . "http://www.neilvandyke.org/racket/hostname.zip") (source_url . "http://www.neilvandyke.org/racket/hostname.zip"))))))) ("string-sexpr" . #hasheq((author . "matthias@ccs.neu.edu") (authors . ("matthias@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/string-sexpr.txt") (docs . (("main" "string-sexpr" "doc/string-sexpr@string-sexpr/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/string-sexpr.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/string-sexpr.txt"))) (checksum . "b87319d3c34be048df24222e54c7dc4327063dc8") (checksum-error . #f) (conflicts . ()) (dependencies . ("racket" "scribble-lib" "racket-doc")) (description . "a supplementary package for Fundamentals I") (implies . ()) (last-checked . 1522414685) (last-edit . 1479092417) (last-updated . 1502816458) (modules . ((lib "string-sexpr/scribblings/string-sexpr.scrbl") (lib "string-sexpr/main.rkt"))) (name . "string-sexpr") (nix-sha256 . "1r749df8zxhyfas7rslflafxdlxfingl59lv1dp6xn5zhl1izzjz") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:matthias@ccs.neu.edu . #t) (ring:1 . #t) (string . #t))) (source . "git://github.com/mfelleisen/string-sexpr") (tags . ("string")) (versions . #hash((default . #hasheq((checksum . "b87319d3c34be048df24222e54c7dc4327063dc8") (source . "git://github.com/mfelleisen/string-sexpr") (source_url . "http://github.com/mfelleisen/string-sexpr/tree/master"))))))) ("typed-racket-more" . #hash((author . "samth@racket-lang.org stamourv@racket-lang.org") (checksum . "dbc01dde29997cf8eca4efd1330623fd3dda1004") (dependencies . ("srfi-lite-lib" "base" "net-lib" "web-server-lib" "db-lib" "draw-lib" "rackunit-lib" "rackunit-gui" "rackunit-typed" "snip-lib" "typed-racket-lib" "gui-lib" "pict-lib" "images-lib" "racket-index" "sandbox-lib")) (description . "samth@racket-lang.org stamourv@racket-lang.org") (modules . ()) (name . "typed-racket-more") (source . "https://download.racket-lang.org/releases/6.12/pkgs/typed-racket-more.zip") (tags . ()))) ("sdl" . #hasheq((author . "cosmez leif@leifandersen.net") (authors . ("cosmez" "leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sdl.txt") (test-failure-log . "server/built/test-fail/sdl.txt") (test-success-log . #f))) (checksum . "8b31e76b77b24afe76683d4d5630c771a0329683") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "gui-lib" "scribble-lib" "racket-doc")) (description . "Racket bindings for SDL") (implies . ()) (last-checked . 1522414677) (last-edit . 1477494205) (last-updated . 1502816423) (modules . ((lib "sdl/constants.rkt") (lib "sdl/main.rkt") (lib "sdl/definitions.rkt") (lib "sdl/structs.rkt"))) (name . "sdl") (nix-sha256 . "067v0dhf7w8n2rixcpbndc4wkq36mfs3yng4lprl41nyq70kyx5w") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:cosmez . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t))) (source . "git://github.com/cosmez/racket-sdl/?path=sdl") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8b31e76b77b24afe76683d4d5630c771a0329683") (source . "git://github.com/cosmez/racket-sdl/?path=sdl") (source_url . "git://github.com/cosmez/racket-sdl/?path=sdl"))))))) ("scope-operations" . #hasheq((author . "georges.duperon@gmail.com") (authors . ("georges.duperon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scope-operations" "doc/scope-operations@scope-operations/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scope-operations.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scope-operations.txt"))) (checksum . "9d4221f65c604649caf9b57a648738c7b3f954f5") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "High-level operations on scopes and sets of scopes, for use in unhygienic macros.") (implies . ()) (last-checked . 1522414675) (last-edit . 1481748736) (last-updated . 1517055522) (modules . ((lib "scope-operations/short.rkt") (lib "scope-operations/scribblings/scope-operations.scrbl") (lib "scope-operations/main.rkt"))) (name . "scope-operations") (nix-sha256 . "1q170ki0vs9zsnd1rxby6gpvv3w8rm8xdr6niw55n90wfqcyndsw") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:georges.duperon@gmail.com . #t) (ring:1 . #t) (scopes . #t) (syntax . #t))) (source . "https://github.com/jsmaniac/scope-operations.git") (tags . ("scopes" "syntax")) (versions . #hash((default . #hasheq((checksum . "9d4221f65c604649caf9b57a648738c7b3f954f5") (source . "https://github.com/jsmaniac/scope-operations.git") (source_url . "https://github.com/jsmaniac/scope-operations.git"))))))) ("web-server-doc" . #hash((author . "jay@racket-lang.org") (checksum . "b621a570e9d7cbb166130624e3c2dbdad198cfce") (dependencies . ("base" "net-doc" "net-cookies-doc" "rackunit-doc" "compatibility-doc" "db-doc" "scribble-doc" "compatibility-lib" "db-lib" "net-lib" "net-cookies-lib" "rackunit-lib" "sandbox-lib" "scribble-lib" "web-server-lib" "racket-doc")) (description . "jay@racket-lang.org") (modules . ()) (name . "web-server-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/web-server-doc.zip") (tags . ()))) ("base" . #hash((author . "mflatt@racket-lang.org") (checksum . "842e2b328663a51a11b18ef6c0f971647227a231") (dependencies . ("racket-lib" ("racket" #:version "6.11.0.6"))) (description . "mflatt@racket-lang.org") (modules . ()) (name . "base") (source . "https://download.racket-lang.org/releases/6.12/pkgs/base.zip") (tags . ()))) ("typed-stack" . #hasheq((author . "lehi@tosk.in") (authors . ("lehi@tosk.in")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "typed-stack" "doc/typed-stack@typed-stack/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-stack.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-stack.txt"))) (checksum . "f6e63310ea20e147f9fbb80e5fb9768b6905f7aa") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-more" "typed-racket-lib" "scribble-lib" "typed-racket-doc" "racket-doc")) (description . "A simple stack library written in TR.") (implies . ()) (last-checked . 1522414696) (last-edit . 1486890793) (last-updated . 1513747039) (modules . ((lib "typed-stack/main.rkt") (lib "typed-stack/test/stack-test.rkt") (lib "typed-stack/doc/typed-stack.scrbl") (lib "typed-stack/typed-stack.rkt"))) (name . "typed-stack") (nix-sha256 . "17wy3h04ndz86s8ka7csf4v2ni8sjcvfbwyxc2k1j1dnnv510m7a") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lehi@tosk.in . #t) (ring:1 . #t) (stack . #t) (typed-racket . #t))) (source . "git://github.com/lehitoskin/typed-stack") (tags . ("stack" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "f6e63310ea20e147f9fbb80e5fb9768b6905f7aa") (source . "git://github.com/lehitoskin/typed-stack") (source_url . "http://github.com/lehitoskin/typed-stack/tree/master"))))))) ("ldap" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ldap" "doc/ldap@ldap/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ldap.txt") (test-failure-log . "server/built/test-fail/ldap.txt") (test-success-log . #f))) (checksum . "e7440a2632f01563182f277135ab066c41157639") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.2.900.15") "eli-tester" "racket-doc" "scribble-lib")) (description . "A native Racket interface to LDAP authentication.") (implies . ()) (last-checked . 1522414423) (last-edit . 1352832285) (last-updated . 1502816149) (modules . ((lib "tests/net/test.rkt") (lib "net/ldap.rkt") (lib "net/ldap/ldap.scrbl"))) (name . "ldap") (nix-sha256 . "0qrnz71q2rbdwskxnbfcabvz3d6hjjmv55nfisvi540wv704hvcq") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (net . #t) (ring:1 . #t))) (source . "github://github.com/jeapostrophe/ldap/master") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "e7440a2632f01563182f277135ab066c41157639") (source . "github://github.com/jeapostrophe/ldap/master") (source_url . "http://github.com/jeapostrophe/ldap/tree/master"))))))) ("multi-id" . #hasheq((author . "georges.duperon@gmail.com") (authors . ("georges.duperon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "multi-id.hl" "doc/multi-id.hl@multi-id/index.html") ("main" "multi-id" "doc/multi-id@multi-id/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/multi-id.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/multi-id.txt"))) (checksum . "d71fc35ee889371d7cfe6c1b02c9a07e17d06a69") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "phc-toolkit" "type-expander" "scribble-lib" "hyper-literate" "scribble-lib" "racket-doc" "scribble-enhanced" "typed-racket-doc")) (description . "Define identifiers which act as a type-expander and match-expander and macro and identifier macro and set! transformer") (implies . ()) (last-checked . 1522414437) (last-edit . 1500986234) (last-updated . 1517062650) (modules . ((lib "multi-id/multi-id.hl.rkt") (lib "multi-id/scribblings/multi-id.scrbl") (lib "multi-id/test/test-multi-id.rkt") (lib "multi-id/main.rkt"))) (name . "multi-id") (nix-sha256 . "0hnhddy6lc0zjrvsv8rc97cdy5w6gfxbn9jaag6xrigm25rf53c4") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:georges.duperon@gmail.com . #t) (define . #t) (multimethods . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/jsmaniac/multi-id.git") (tags . ("define" "multimethods" "syntax")) (versions . #hash((default . #hasheq((checksum . "d71fc35ee889371d7cfe6c1b02c9a07e17d06a69") (source . "https://github.com/jsmaniac/multi-id.git") (source_url . "https://github.com/jsmaniac/multi-id.git"))))))) ("game-engine-demos-common" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/game-engine-demos-common.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/game-engine-demos-common.txt") (test-failure-log . "server/built/test-fail/game-engine-demos-common.txt") (test-success-log . #f))) (checksum . "268ffe506cdc21f751a83c5d1b5d9c02f54c6a54") (checksum-error . #f) (conflicts . ()) (dependencies . ("game-engine")) (description . "Some useful entities/components/assets for some demo games that we've built for a game design course that we teach at ThoughtSTEM.") (implies . ()) (last-checked . 1522414403) (last-edit . 1519854006) (last-updated . 1522201923) (modules . ((lib "game-engine-demos-common/assets/ore-sprite.rkt") (lib "game-engine-demos-common/assets/space-bg-generator.rkt") (lib "game-engine-demos-common/assets/spaceship-sprite.rkt") (lib "game-engine-demos-common/game-over-screen.rkt") (lib "game-engine-demos-common/instructions.rkt") (lib "game-engine-demos-common/main.rkt") (lib "game-engine-demos-common/borders.rkt"))) (name . "game-engine-demos-common") (nix-sha256 . "0bzv7hc0yzwa3lx0xrgpsqpfdgb95lk1r6qgykb5kkgj4vnzam3q") (ring . 2) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:stephen@thoughtstem.com . #t) (education . #t) (games . #t) (ring:2 . #t))) (source . "https://github.com/srfoster/game-engine-demos.git?path=game-engine-demos-common") (tags . ("education" "games")) (versions . #hash((default . #hasheq((checksum . "268ffe506cdc21f751a83c5d1b5d9c02f54c6a54") (source . "https://github.com/srfoster/game-engine-demos.git?path=game-engine-demos-common") (source_url . "https://github.com/srfoster/game-engine-demos.git?path=game-engine-demos-common"))))))) ("mcfly" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mcfly" "doc/mcfly@mcfly/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mcfly.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mcfly.txt"))) (checksum . "e670b083eefe6ac27c23cc9423bac0f31720d58c") (checksum-error . #f) (conflicts . ()) (dependencies . ("at-exp-lib" "base" "scribble-lib" "racket-doc")) (description . "Embedded Package Documentation Runtime") (implies . ()) (last-checked . 1522414433) (last-edit . 1456463369) (last-updated . 1502816174) (modules . ((lib "mcfly/mcfly-parse.rkt") (lib "mcfly/main.rkt") (lib "mcfly/doc.rkt") (lib "mcfly/mcfly-misc.rkt") (lib "mcfly/mcfly-expand.rkt") (lib "mcfly/mcfly.scrbl") (lib "mcfly/mcfly-scribble.rkt") (lib "mcfly/mcfly-format.rkt") (lib "mcfly/mcfly-spec.rkt") (lib "mcfly/test-mcfly-spec.rkt"))) (name . "mcfly") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (documentation . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/mcfly.zip") (tags . ("documentation")) (versions . #hash((default . #hasheq((checksum . "e670b083eefe6ac27c23cc9423bac0f31720d58c") (source . "http://www.neilvandyke.org/racket/mcfly.zip") (source_url . "http://www.neilvandyke.org/racket/mcfly.zip"))))))) ("symalg" . #hasheq((author . "johannes@johannes.tax") (authors . ("johannes@johannes.tax")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "symalg" "doc/symalg@symalg/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/symalg.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/symalg.txt"))) (checksum . "7f0d9c409cb8ec9fce81a4761c0e773420c10cb1") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "multimethod" "parser-tools" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Expressing and manipulating symbolic algebraic expressions in Racket. ") (implies . ()) (last-checked . 1522414686) (last-edit . 1521273472) (last-updated . 1522357083) (modules . ((lib "symalg/scribblings/symalg.scrbl") (lib "symalg/symalg/private/data.rkt") (lib "symalg/symalg/latex.rkt") (lib "symalg/symalg/linear.rkt") (lib "symalg/symalg/simplify.rkt") (lib "symalg/symalg/smaller.rkt") (lib "symalg/symalg/parse.rkt") (lib "symalg/symalg/private/util.rkt") (lib "symalg/symalg/differentiate.rkt") (lib "symalg/symalg/infix.rkt") (lib "symalg/symalg/symalg-expr.rkt") (lib "symalg/symalg/private/zero-expr.rkt") (lib "symalg/symalg/evaluate.rkt") (lib "symalg/main.rkt") (lib "symalg/symalg/sexpr.rkt") (lib "symalg/symalg/private/preorder.rkt"))) (name . "symalg") (nix-sha256 . "0143wlx9y8367pi5fb0qf6qy7alqvshqpcxcaba1bppq9m5v9zn0") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (algebra . #t) (author:johannes@johannes.tax . #t) (math . #t) (ring:2 . #t))) (source . "https://github.com/pyohannes/racket-symalg.git") (tags . ("algebra" "math")) (versions . #hash((default . #hasheq((checksum . "7f0d9c409cb8ec9fce81a4761c0e773420c10cb1") (source . "https://github.com/pyohannes/racket-symalg.git") (source_url . "https://github.com/pyohannes/racket-symalg.git"))))))) ("sau-cptr-405" . #hasheq((author . "rordonez@southern.edu") (authors . ("rordonez@southern.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sau-cptr-405" "doc/sau-cptr-405@sau-cptr-405/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sau-cptr-405.txt") (test-failure-log . "server/built/test-fail/sau-cptr-405.txt") (test-success-log . #f))) (checksum . "95fe87935c02790dce8d3ef2c30b117f98685fe7") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "drracket" "drracket-plugin-lib" "gui-lib" "htdp-lib" "net-lib" "pconvert-lib" "sandbox-lib" "rackunit-lib" "web-server-lib" "plai-typed" "plai-typed-s-exp-match" "gui-doc" "racket-doc" "scribble-lib")) (description . "SAU CPTR-405 W18 handin plugin for DrRacket") (implies . ()) (last-checked . 1522414674) (last-edit . 1517236569) (last-updated . 1517236569) (modules . ((lib "sau-cptr-405/client.rkt") (lib "sau-cptr-405/main.rkt") (lib "sau-cptr-405/scribblings/sau-cptr-405.scrbl") (lib "sau-cptr-405/this-collection.rkt") (lib "sau-cptr-405/handin-multi.rkt") (lib "sau-cptr-405/client-gui.rkt") (lib "sau-cptr-405/updater.rkt"))) (name . "sau-cptr-405") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:rordonez@southern.edu . #t) (ring:1 . #t))) (source . "http://computing.southern.edu/rordonez/class/CPTR-405/sau-cptr-405.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "95fe87935c02790dce8d3ef2c30b117f98685fe7") (source . "http://computing.southern.edu/rordonez/class/CPTR-405/sau-cptr-405.zip") (source_url . "http://computing.southern.edu/rordonez/class/CPTR-405/sau-cptr-405.zip"))))))) ("gmp-lib" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gmp-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gmp-lib.txt"))) (checksum . "45807466a9a1492e8abce7f1453ee5253c698a58") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "Bindings to gmp (the GNU Multiple Precision Arithmetic Library)") (implies . ()) (last-checked . 1522414405) (last-edit . 1501866112) (last-updated . 1518567888) (modules . ((lib "gmp/unsafe.rkt") (lib "gmp/private/gmp.rkt") (lib "gmp/main.rkt"))) (name . "gmp-lib") (nix-sha256 . "1w9c2nidld48jz1k860kcizncdc4i49vzjq62dwvcyq21n31cpcr") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (math . #t) (ring:1 . #t))) (source . "git://github.com/rmculpepper/racket-gmp?path=gmp-lib") (tags . ("math")) (versions . #hash((default . #hasheq((checksum . "45807466a9a1492e8abce7f1453ee5253c698a58") (source . "git://github.com/rmculpepper/racket-gmp?path=gmp-lib") (source_url . "http://github.com/rmculpepper/racket-gmp/tree/master?path=gmp-lib"))))))) ("option-contract-lib" . #hash((author . "chrdimo@seas.harvard.edu robby@racket-lang.org") (checksum . "ee150a2fada04b3fc31c2f7360aa0f6e11029df8") (dependencies . (("base" #:version "6.2.900.17"))) (description . "chrdimo@seas.harvard.edu robby@racket-lang.org") (modules . ()) (name . "option-contract-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/option-contract-lib.zip") (tags . ()))) ("struct-define" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/struct-define.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/struct-define.txt"))) (checksum . "073ff599c0ea128f0e80a50aefd50dced2ad21b9") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "quickly pull out struct fields") (implies . ()) (last-checked . 1522414685) (last-edit . 1515102523) (last-updated . 1516238328) (modules . ((lib "struct-define/main.rkt"))) (name . "struct-define") (nix-sha256 . "0xfgxr8hcxlnpllrhab0yda7z0gkbajd7ils3khima34igqw99l1") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (ring:2 . #t) (utilities . #t))) (source . "https://github.com/jeapostrophe/struct-define.git") (tags . ("utilities")) (versions . #hash((default . #hasheq((checksum . "073ff599c0ea128f0e80a50aefd50dced2ad21b9") (source . "https://github.com/jeapostrophe/struct-define.git") (source_url . "https://github.com/jeapostrophe/struct-define.git"))))))) ("lang" . #hasheq((author . "zaomir@outlook.com") (authors . ("zaomir@outlook.com")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . "server/built/deps/lang.txt") (docs . (("extract" "zaoqil" "doc/zaoqil@lang/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lang.txt"))) (checksum . "804a7f5c96d173928205693f244578a19e3cebc5") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: https://github.com/zaoqil/zaoqil.git?path=racket\n  context...:\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:324:3: for-loop\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:321:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:73:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:54:2: retry-loop\n   /home/pkgserver/racket/collects/racket/private/more-scheme.rkt:261:28\n   /home/pkgserver/racket/collects/racket/private/list.rkt:264:4: loop\n   /home/pkgserver/pkg-index/official/update.rkt:137:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:138:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:154:22\n") (conflicts . ()) (dependencies . ("racket" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "語") (implies . ()) (last-checked . 1517995049) (last-edit . 1517568734) (last-updated . 1517915839) (modules . ((lib "zaoqil/lang/reader.rkt") (lib "zaoqil/main.rkt") (lib "zaoqil/zaoqil.scrbl"))) (name . "lang") (ring . 2) (search-terms . #hasheq((:build-conflicts: . #t) (:build-dep-fail: . #t) (:build-success: . #t) (:docs-error: . #t) (:docs: . #t) (:error: . #t) (author:zaomir@outlook.com . #t) (compiler . #t) (kernel . #t) (lisp . #t) (os . #t) (ring:2 . #t))) (source . "https://github.com/zaoqil/zaoqil.git?path=racket") (tags . ("compiler" "kernel" "lisp" "os")) (versions . #hash((default . #hasheq((checksum . "804a7f5c96d173928205693f244578a19e3cebc5") (source . "https://github.com/zaoqil/zaoqil.git?path=racket") (source_url . "https://github.com/zaoqil/zaoqil.git?path=racket"))))))) ("r6rs-test" . #hash((author . "mflatt@racket-lang.org") (checksum . "0809d0ce6f90871a536af94c699de9fffed37213") (dependencies . ("base" "r6rs-lib")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "r6rs-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/r6rs-test.zip") (tags . ()))) ("anarki" . #hasheq((author . "rokitna@hotmail.com arc.racket@akkartik.com zkanfer@gmail.com") (authors . ("rokitna@hotmail.com" "arc.racket@akkartik.com" "zkanfer@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "anarki" "doc/anarki@anarki/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/anarki.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/anarki.txt"))) (checksum . "4e18a53835d3a461245b483b91781c55431c0925") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "Community-managed variant of the Arc dialect of Lisp") (implies . ()) (last-checked . 1522417871) (last-edit . 1457860748) (last-updated . 1520423592) (modules . ((lib "anarki/lib/racket-lang-demo/lang-anarki-application.rkt") (lib "anarki/lang/module-begin.rkt") (lib "anarki/lib/racket-lang-demo/racket-application.rkt") (lib "anarki/ac.rkt") (lib "anarki/lib/ns.rkt") (lib "anarki/lang/reader.rkt") (lib "anarki/main.rkt") (lib "anarki/lib/json.rkt") (lib "anarki/lib/racket-lang-demo/racket-deep-dependency.rkt") (lib "anarki/lib/racket-lang-demo/lang-anarki-library.rkt") (lib "anarki/scribblings/anarki.scrbl") (lib "anarki/brackets.rkt") (lib "anarki/lib/racket-lang-demo/lang-anarki-deep-dependency.rkt") (lib "anarki/boot.rkt"))) (name . "anarki") (nix-sha256 . "0vxi5sll1qwrshg3bw6a1krnm4q7f10d5qybazq115w889plxpsi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:arc.racket@akkartik.com . #t) (author:rokitna@hotmail.com . #t) (author:zkanfer@gmail.com . #t) (language . #t) (ring:1 . #t) (unstable . #t) (web . #t))) (source . "git://github.com/arclanguage/anarki") (tags . ("language" "unstable" "web")) (versions . #hash((default . #hasheq((checksum . "4e18a53835d3a461245b483b91781c55431c0925") (source . "git://github.com/arclanguage/anarki") (source_url . "http://github.com/arclanguage/anarki/tree/master"))))))) ("shell-pipeline" . #hasheq((author . "willghatch@gmail.com") (authors . ("willghatch@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "shell-pipeline" "doc/shell-pipeline@shell-pipeline/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/shell-pipeline.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/shell-pipeline.txt"))) (checksum . "f341c519476bca2451036f62e2c7332950d13795") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Shell pipeline library") (implies . ()) (last-checked . 1522414678) (last-edit . 1471564935) (last-updated . 1517422686) (modules . ((lib "shell/utils/bourne-expansion-utils.rkt") (lib "shell/private/define-simple-alias.rkt") (lib "shell/private/pipeline-operators.rkt") (lib "shell/private/rash-alias.rkt") (lib "shell/scribblings/mixed-pipeline.scrbl") (lib "shell/pipeline.rkt") (lib "shell/private/mostly-structs.rkt") (lib "shell/private/pipeline-operator-transform.rkt") (lib "shell/private/test-pipeline.rkt") (lib "shell/private/pipeline-operator-default.rkt") (lib "shell/private/good-unix-operator.rkt") (lib "shell/demo/more-pipeline-operators.rkt") (lib "shell/scribblings/pipeline-macro.scrbl") (lib "shell/private/pipeline-operator-detect.rkt") (lib "shell/private/pipeline-macro-logicwrapper.rkt") (lib "shell/scribblings/shell-pipeline.scrbl") (lib "shell/pipeline-macro.rkt") (lib "shell/private/define-pipeline-alias.rkt") (lib "shell/private/filter-keyword-args.rkt") (lib "shell/private/pipeline-macro-parse.rkt") (lib "shell/scribblings/pipeline.scrbl") (lib "shell/private/test-mixed-pipeline.rkt") (lib "shell/private/misc-utils.rkt") (lib "shell/mixed-pipeline.rkt"))) (name . "shell-pipeline") (nix-sha256 . "1bayfks76lgs033zhf7z2xxqlnlmhkkhp853gyjpnggdakq14gyh") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:willghatch@gmail.com . #t) (ring:1 . #t) (shell . #t) (unix . #t))) (source . "git://github.com/willghatch/racket-shell-pipeline") (tags . ("shell" "unix")) (versions . #hash((default . #hasheq((checksum . "f341c519476bca2451036f62e2c7332950d13795") (source . "git://github.com/willghatch/racket-shell-pipeline") (source_url . "http://github.com/willghatch/racket-shell-pipeline/tree/master"))))))) ("mmap" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mmap.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mmap.txt"))) (checksum . "4d75782ebac990ae85a2b456f9d138cb666deed5") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "Wrapper for the system mmap() function") (implies . ()) (last-checked . 1522414435) (last-edit . 1503521896) (last-updated . 1502816182) (modules . ((lib "mmap/main.rkt"))) (name . "mmap") (nix-sha256 . "1m5blkzxlcdli6bxalvrscjkbk11fsxipqabjz2i7r32pvdahafq") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (mmap . #t) (process . #t) (ring:1 . #t))) (source . "git://github.com/samth/mmap") (tags . ("mmap" "process")) (versions . #hash((default . #hasheq((checksum . "4d75782ebac990ae85a2b456f9d138cb666deed5") (source . "git://github.com/samth/mmap") (source_url . "http://github.com/samth/mmap/tree/master"))))))) ("sugar" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sugar" "doc/sugar@sugar/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sugar.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sugar.txt"))) (checksum . "805ae055c6050869cd5f27153da35be2b0ef045c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "shortcuts for simplicity & readability") (implies . ()) (last-checked . 1522414686) (last-edit . 1427947040) (last-updated . 1521771802) (modules . ((lib "sugar/define.rkt") (lib "sugar/scribblings/installation.scrbl") (lib "sugar/unstable/len.rkt") (lib "sugar/unstable/source.rkt") (lib "sugar/xml.rkt") (lib "sugar/scribblings/xml.scrbl") (lib "sugar/scribblings/include.scrbl") (lib "sugar/scribblings/len.scrbl") (lib "sugar/file.rkt") (lib "sugar/scribblings/file-extensions.scrbl") (lib "sugar/unstable/misc.rkt") (lib "sugar/main.rkt") (lib "sugar/scribblings/list.scrbl") (lib "sugar/test/test-require-modes.rkt") (lib "sugar/unstable/include.rkt") (lib "sugar/test.rkt") (lib "sugar/scribblings/cache.scrbl") (lib "sugar/scribblings/sugar.scrbl") (lib "sugar/scribblings/debug.scrbl") (lib "sugar/scribblings/license.scrbl") (lib "sugar/list.rkt") (lib "sugar/debug.rkt") (lib "sugar/private/syntax-utils.rkt") (lib "sugar/coerce/contract.rkt") (lib "sugar/test/main.rkt") (lib "sugar/cache.rkt") (lib "sugar/unstable/string.rkt") (lib "sugar/scribblings/container.scrbl") (lib "sugar/unstable/container.rkt") (lib "sugar/coerce.rkt") (lib "sugar/coerce/base.rkt") (lib "sugar/scribblings/string.scrbl") (lib "sugar/test/debug-meta-lang.rkt") (lib "sugar/scribblings/coerce.scrbl"))) (name . "sugar") (nix-sha256 . "002fpkg1zrhlh58fb3d3b8ygknczpjwcs4si2mzasls8z7x33ifs") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mb@mbtype.com . #t) (ring:1 . #t))) (source . "git://github.com/mbutterick/sugar") (tags . ()) (versions . #hash((default . #hasheq((checksum . "805ae055c6050869cd5f27153da35be2b0ef045c") (source . "git://github.com/mbutterick/sugar") (source_url . "http://github.com/mbutterick/sugar/tree/master"))))))) ("htdp-test" . #hash((author . "matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org") (checksum . "d56b78bdfa59cf1245da61485a064ba10f36ac54") (dependencies . ("base" "htdp-lib" "scheme-lib" "srfi-lite-lib" "compatibility-lib" "gui-lib" "racket-test" "rackunit-lib" "profile-lib" "wxme-lib" "pconvert-lib")) (description . "matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org") (modules . ()) (name . "htdp-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/htdp-test.zip") (tags . ()))) ("pollen-tfl" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pollen-tfl" "doc/pollen-tfl@pollen-tfl/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pollen-tfl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pollen-tfl.txt"))) (checksum . "76ea727cd23eb4f839bf919cced40110a9385c2b") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "pollen" "hyphenate" "css-tools" "txexpr" "sugar" "scribble-lib" "rackunit-lib" "racket-doc" "scribble-doc")) (description . "Sample Pollen project: source code for Typography for Lawyers website") (implies . ()) (last-checked . 1522414534) (last-edit . 1449782965) (last-updated . 1521778672) (modules . ((lib "pollen-tfl/pricing-table.rkt") (lib "pollen-tfl/fonts/pollen.rkt") (lib "pollen-tfl/scribblings/pollen-rkt.scrbl") (lib "pollen-tfl/scribblings/pollen-tfl.scrbl") (lib "pollen-tfl/sku.rkt") (lib "pollen-tfl/pollen-test.rkt") (lib "pollen-tfl/pollen.rkt"))) (name . "pollen-tfl") (nix-sha256 . "0lgk832k8jypxdkfayvgv8bg9idklw6m74shma6xlrgy2jrj0g52") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mb@mbtype.com . #t) (ring:1 . #t))) (source . "git://github.com/mbutterick/pollen-tfl") (tags . ()) (versions . #hash((default . #hasheq((checksum . "76ea727cd23eb4f839bf919cced40110a9385c2b") (source . "git://github.com/mbutterick/pollen-tfl") (source_url . "http://github.com/mbutterick/pollen-tfl/tree/master"))))))) ("libtoxcore-racket" . #hasheq((author . "lehi@tosk.in") (authors . ("lehi@tosk.in")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "libtoxcore-racket" "doc/libtoxcore-racket@libtoxcore-racket/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libtoxcore-racket.txt") (test-failure-log . "server/built/test-fail/libtoxcore-racket.txt") (test-success-log . #f))) (checksum . "8baa14d6835ec4371de4ce7aa73237cd509d8f48") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "A Racket wrapper for the Tox libraries.") (implies . ()) (last-checked . 1522414424) (last-edit . 1415417025) (last-updated . 1502816156) (modules . ((lib "libtoxcore-racket/av.rkt") (lib "libtoxcore-racket/main.rkt") (lib "libtoxcore-racket/doc/av.scrbl") (lib "libtoxcore-racket/doc/common.rkt") (lib "libtoxcore-racket/functions.rkt") (lib "libtoxcore-racket/doc/examples.scrbl") (lib "libtoxcore-racket/doc/license.scrbl") (lib "libtoxcore-racket/dns.rkt") (lib "libtoxcore-racket/doc/constants.scrbl") (lib "libtoxcore-racket/test/test.rkt") (lib "libtoxcore-racket/encrypt.rkt") (lib "libtoxcore-racket/enums.rkt") (lib "libtoxcore-racket/doc/functions.scrbl") (lib "libtoxcore-racket/doc/libtoxcore-racket.scrbl"))) (name . "libtoxcore-racket") (nix-sha256 . "0r88wv557bkliw2xlzkljyn2vnkqjk7pymq0v35zdiczflrspz50") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (API . #t) (author:lehi@tosk.in . #t) (crypto . #t) (ffi . #t) (ring:1 . #t) (wrapper . #t))) (source . "git://github.com/lehitoskin/libtoxcore-racket.git") (tags . ("API" "crypto" "ffi" "wrapper")) (versions . #hash((default . #hasheq((checksum . "8baa14d6835ec4371de4ce7aa73237cd509d8f48") (source . "git://github.com/lehitoskin/libtoxcore-racket.git") (source_url . "http://github.com/lehitoskin/libtoxcore-racket.git/tree/master"))))))) ("simple-barcode" . #hasheq((author . "chenxiao770117@gmail.com") (authors . ("chenxiao770117@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "simple-barcode" "doc/simple-barcode@simple-barcode/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/simple-barcode.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/simple-barcode.txt"))) (checksum . "ab70e02811d16319002ba119df674c30d2b68845") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "draw-lib" "racket-doc" "scribble-lib")) (description . "A Barcode reader and writer for Racket") (implies . ()) (last-checked . 1522414678) (last-edit . 1496649879) (last-updated . 1502816428) (modules . ((lib "simple-barcode/example/example.rkt") (lib "simple-barcode/lib/code39-lib.rkt") (lib "simple-barcode/main.rkt") (lib "simple-barcode/tests/main/main-test.rkt") (lib "simple-barcode/tests/code39/code39-test.rkt") (lib "simple-barcode/simple-barcode.scrbl") (lib "simple-barcode/tests/share-test.rkt") (lib "simple-barcode/tests/code128/code128-test.rkt") (lib "simple-barcode/lib/share.rkt") (lib "simple-barcode/tests/ean13/ean13-test.rkt") (lib "simple-barcode/lib/ean13-lib.rkt") (lib "simple-barcode/lib/code128-lib.rkt"))) (name . "simple-barcode") (nix-sha256 . "06aavdzr8s9xds6hhb459x486sl4n8vhyl3405l4yf5mxjnd6z01") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:chenxiao770117@gmail.com . #t) (barcode . #t) (ring:1 . #t))) (source . "git://github.com/simmone/racket-simple-barcode") (tags . ("barcode")) (versions . #hash((default . #hasheq((checksum . "ab70e02811d16319002ba119df674c30d2b68845") (source . "git://github.com/simmone/racket-simple-barcode") (source_url . "http://github.com/simmone/racket-simple-barcode/tree/master"))))))) ("neu-cs2500-handin" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/neu-cs2500-handin.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/neu-cs2500-handin.txt"))) (checksum . "d48c433d69d75ea03c029ec0207faa928796e757") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "gui-lib" "net-lib" "drracket" "drracket-plugin-lib")) (description . "") (implies . ()) (last-checked . 1522414505) (last-edit . 1471636915) (last-updated . 1502816196) (modules . ((lib "neu-cs2500-handin/handin-multi.rkt") (lib "neu-cs2500-handin/updater.rkt") (lib "neu-cs2500-handin/client-gui.rkt") (lib "neu-cs2500-handin/this-collection.rkt") (lib "neu-cs2500-handin/client.rkt"))) (name . "neu-cs2500-handin") (nix-sha256 . "1ccam253vr421cgy0531lvminr3b8lj66v1a7db4q5z32j8wa8di") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t))) (source . "git://github.com/nuprl/cs2500-client#f2016") (tags . ()) (versions . #hash((default . #hasheq((checksum . "d48c433d69d75ea03c029ec0207faa928796e757") (source . "git://github.com/nuprl/cs2500-client#f2016") (source_url . "http://github.com/nuprl/cs2500-client/tree/master#f2016"))))))) ("compiler-test" . #hash((author . "mflatt@racket-lang.org") (checksum . "b24ece87c3621e0a7015021bfdada4fbfaed6ef4") (dependencies . ("base" "icons" "compiler-lib" "eli-tester" "rackunit-lib" "net-lib" "scheme-lib" "compatibility-lib" "gui-lib" "htdp-lib" "plai-lib" "rackunit-lib")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "compiler-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/compiler-test.zip") (tags . ()))) ("racketscript-compiler" . #hasheq((author . "vishesh3y@gmail.com") (authors . ("vishesh3y@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racketscript-compiler.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racketscript-compiler.txt"))) (checksum . "bf2fac484b1066475730d92479470f6a29287a0e") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" ("racket" "6.4") "typed-racket-lib" "typed-racket-more" "threading" "graph" "anaphoric" "base" "typed-racket-lib" "typed-racket-more" "rackunit-lib")) (description . "A Racket to JavaScript compiler") (implies . ()) (last-checked . 1522414662) (last-edit . 1481679010) (last-updated . 1507573837) (modules . ((lib "racketscript/boot/lang/reader.rkt") (lib "racketscript/compiler/logging.rkt") (lib "racketscript/compiler/runtime/network.rkt") (lib "racketscript/compiler/runtime/place.rkt") (lib "racketscript/compiler/il-analyze.rkt") (lib "racketscript/compiler/assembler.rkt") (lib "racketscript/compiler/expand.rkt") (lib "racketscript/compiler/case-lambda.rkt") (lib "racketscript/compiler/absyn.rkt") (lib "racketscript/boot/lang/private/interop.rkt") (lib "racketscript/browser.rkt") (lib "racketscript/main.rkt") (lib "racketscript/compiler/moddeps.rkt") (lib "racketscript/compiler/util.rkt") (lib "racketscript/compiler/main.rkt") (lib "racketscript/compiler/global.rkt") (lib "racketscript/compiler/stx-utils.rkt") (lib "racketscript/compiler/language.rkt") (lib "racketscript/compiler/ident.rkt") (lib "racketscript/private/interop.rkt") (lib "racketscript/compiler/runtime/foreign.rkt") (lib "racketscript/compiler/runtime/kernel.rkt") (lib "racketscript/compiler/runtime/flfxnum.rkt") (lib "racketscript/compiler/runtime/extfl.rkt") (lib "racketscript/compiler/transform.rkt") (lib "racketscript/compiler/runtime/unsafe.rkt") (lib "racketscript/base/lang/reader.rkt") (lib "racketscript/compiler/environment.rkt") (lib "racketscript/compiler/runtime/place-struct.rkt") (lib "racketscript/compiler/runtime/lib.rkt") (lib "racketscript/compiler/runtime/futures.rkt") (lib "racketscript/compiler/util-untyped.rkt") (lib "racketscript/compiler/runtime/utils.rkt") (lib "racketscript/boot.rkt") (lib "racketscript/compiler/runtime/paramz.rkt") (lib "racketscript/base/main.rkt") (lib "racketscript/interop.rkt") (lib "racketscript/compiler/il.rkt") (lib "racketscript/compiler/runtime/builtin.rkt") (lib "racketscript/base.rkt") (lib "racketscript/compiler/runtime/boot.rkt") (lib "racketscript/compiler/nothing.rkt") (lib "racketscript/compiler/config.rkt"))) (name . "racketscript-compiler") (nix-sha256 . "0x0rfpzva49lrqh3ji65w0iv0qn5b443md05pwn4cx3x0vgawmhy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:vishesh3y@gmail.com . #t) (compiler . #t) (javascript . #t) (ring:1 . #t) (web . #t))) (source . "git://github.com/vishesh/racketscript?path=racketscript-compiler") (tags . ("compiler" "javascript" "web")) (versions . #hash((default . #hasheq((checksum . "bf2fac484b1066475730d92479470f6a29287a0e") (source . "git://github.com/vishesh/racketscript?path=racketscript-compiler") (source_url . "http://github.com/vishesh/racketscript/tree/master?path=racketscript-compiler"))))))) ("contract-repl" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/contract-repl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/contract-repl.txt"))) (checksum . "5eadd5d87b04178d5574804313238934f3544692") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "A REPL that prints contracts on values") (implies . ()) (last-checked . 1522414367) (last-edit . 1365266285) (last-updated . 1502815869) (modules . ((lib "contract-repl/main.rkt"))) (name . "contract-repl") (nix-sha256 . "0bg2agcs6wymlm4z824q8lz2405a2a5rxy4hrsp58v1v5v6mz2c9") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:asumu@ccs.neu.edu . #t) (contracts . #t) (repl . #t) (ring:1 . #t))) (source . "github://github.com/takikawa/contract-repl/master") (tags . ("contracts" "repl")) (versions . #hash((default . #hasheq((checksum . "5eadd5d87b04178d5574804313238934f3544692") (source . "github://github.com/takikawa/contract-repl/master") (source_url . "http://github.com/takikawa/contract-repl/tree/master"))))))) ("gtp-checkup" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gtp-checkup" "doc/gtp-checkup@gtp-checkup/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gtp-checkup.txt") (test-failure-log . "server/built/test-fail/gtp-checkup.txt") (test-success-log . #f))) (checksum . "9d341a2e4d90b3d60dce8b85bccf834b008864e3") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "data-lib" "draw-lib" "math-lib" "memoize" "pict-lib" "plot-lib" "rackunit-lib" "require-typed-check" "sandbox-lib" "typed-racket-lib" "typed-racket-more" "zo-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Test correctness of typed/untyped interaction.") (implies . ()) (last-checked . 1522414406) (last-edit . 1508861699) (last-updated . 1522209203) (modules . ((lib "gtp-checkup/benchmarks/take5/gradual-0/card-pool.rkt") (lib "gtp-checkup/benchmarks/quadBG/typed/ocm-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-6/collide.rkt") (lib "gtp-checkup/benchmarks/fsmoo/gradual-0/population-adapted.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-1/admin.rkt") (lib "gtp-checkup/benchmarks/fsm/gradual-1/main.rkt") (lib "gtp-checkup/benchmarks/quadMB/typed/penalty-struct.rkt") (lib "gtp-checkup/benchmarks/zordoz/gradual-1/zo-string.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-2/time.rkt") (lib "gtp-checkup/benchmarks/zombie/gradual-2/math.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-9/measure.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-2/stack.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-2/collide.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-2/structs.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-7/card-pool.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-3/ymd.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-2/typed-data.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-6/deck-types.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-2/summary-adapted.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-3/motion-help.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-4/player-types.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-2/array-broadcast.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-4/array-utils.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-8/world.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-3/block.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-1/ocm-struct.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-0/data.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-7/const.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-10/penalty-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/take5/typed/card-adapted.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-0/datetime.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-0/dealer.rkt") (lib "gtp-checkup/benchmarks/zordoz/typed/zo-shell.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-7/tzinfo-adapter.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-3/main.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-4/wrap.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-9/typed-data.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-0/quad-main.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-1/consts.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-2/ocm.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-6/main.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-2/main.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-1/benv-adapted.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-5/data.rkt") (lib "gtp-checkup/benchmarks/synth/typed/data.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-6/dealer.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-6/ocm-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-2/card-adapted.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-2/pict-adapted.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-3/consts.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-0/tree-adapted.rkt") (lib "gtp-checkup/benchmarks/fsmoo/typed/utilities.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-fns-maxflow.rkt") (lib "gtp-checkup/benchmarks/zordoz/gradual-0/zo-string.rkt") (lib "gtp-checkup/benchmarks/tetris/typed/block.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-1/datetime.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-1/sugar-list.rkt") (lib "gtp-checkup/benchmarks/stack/gradual-0/stack.rkt") (lib "gtp-checkup/benchmarks/quadBG/base/csp/problem.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-13/main.rkt") (lib "gtp-checkup/benchmarks/quadBG/typed/quads.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-2/data.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-3/main.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-2/core-adapter.rkt") (lib "gtp-checkup/benchmarks/fsm/typed/population.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-7/typed-data.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-7/auxiliaries.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-0/tree.rkt") (lib "gtp-checkup/benchmarks/lnm/typed/summary.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-6/moment.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-7/stack-types.rkt") (lib "gtp-checkup/benchmarks/dungeon/gradual-3/cell.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed/ukkonen.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-5/bitstring.rkt") (lib "gtp-checkup/benchmarks/fsmoo/gradual-3/automata-adapted.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-5/array-utils.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-5/main.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/main.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-3/ocm.rkt") (lib "gtp-checkup/benchmarks/fsm/gradual-2/automata-adapted.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-6/penalty-struct.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-4/collide.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-7/card-adapted.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-13/measure.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-9/time.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-12/datetime.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-1/collide.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-3/data.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-6/quick-sample.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-8/aux.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-5/ocm-struct.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-1/ocm.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-5/world.rkt") (lib "gtp-checkup/benchmarks/quadMB/typed/render.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-3/modulegraph.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-1/ai.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/admin.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-6/sugar-list.rkt") (lib "gtp-checkup/benchmarks/zordoz/gradual-3/zo-shell.rkt") (lib "gtp-checkup/benchmarks/gregor/base/cldr/likely-subtags.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-4/basics.rkt") (lib "gtp-checkup/benchmarks/take5/typed/card.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-7/world.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-3/modulegraph-adapted.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-10/gregor-structs.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-0/hmsn.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-0/aux.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-1/deck-types.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-9/core-adapter.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-0/date.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/ymd.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-7/consts.rkt") (lib "gtp-checkup/benchmarks/tetris/typed/tetras.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-5/benv.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-4/sequencer.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-4/summary-adapted.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-3/lcs.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-2/ocm-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-1/structs.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-0/tzinfo-adapter.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-0/bitstring.rkt") (lib "gtp-checkup/benchmarks/sieve/typed/main.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-1/time.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-5/deck.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-8/base-types.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-5/gregor-adapter.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-7/hmsn.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-5/stack-types.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-0/quads.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-11/hyphenate.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-3/time.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-7/core-adapter.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-1/array-transform.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-6/card-pool-types.rkt") (lib "gtp-checkup/benchmarks/quadBG/typed/hyphenate.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed/data.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-5/handlers.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-0/strategy.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-0/const.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-10/quick-sample.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-11/ocm.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-4/basics.rkt") (lib "gtp-checkup/benchmarks/quadBG/typed/penalty-struct.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-6/hmsn.rkt") (lib "gtp-checkup/benchmarks/fsm/gradual-1/automata.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-8/penalty-struct.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-3/time.rkt") (lib "gtp-checkup/benchmarks/gregor/base/cldr/core.rkt") (lib "gtp-checkup/benchmarks/snake/typed/data.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-5/data-adaptor.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-3/render.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-10/moment.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-12/world.rkt") (lib "gtp-checkup/benchmarks/synth/typed/array-utils.rkt") (lib "gtp-checkup/benchmarks/quadBG/typed/main.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-7/state-adapted.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/date.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-4/core-structs.rkt") (lib "gtp-checkup/benchmarks/mbta/gradual-2/run-t.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-7/datetime.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-0/moment.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-3/data.rkt") (lib "gtp-checkup/benchmarks/fsm/gradual-3/utilities.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-1/moment-base.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-9/core-structs.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-1/quad-main.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-3/main.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-6/clock.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-4/denotable.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-6/dealer-types.rkt") (lib "gtp-checkup/benchmarks/morsecode/gradual-3/morse-code-table.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-2/ymd.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-6/quad-main.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-5/elim.rkt") (lib "gtp-checkup/benchmarks/quadBG/typed/quad-main.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-9/main.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-5/player.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-2/structs-adapted.rkt") (lib "gtp-checkup/benchmarks/zordoz/typed/main.rkt") (lib "gtp-checkup/benchmarks/zordoz/gradual-4/zo-shell.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/benv-adapted.rkt") (lib "gtp-checkup/benchmarks/quadBG/base/csp/domain.rkt") (lib "gtp-checkup/benchmarks/synth/typed/sequencer.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-4/main.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-0/ukkonen.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-2/base-types.rkt") (lib "gtp-checkup/benchmarks/morsecode/typed/main.rkt") (lib "gtp-checkup/benchmarks/synth/typed/synth.rkt") (lib "gtp-checkup/benchmarks/zordoz/gradual-4/zo-transition.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-0/denotable.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-2/aux.rkt") (lib "gtp-checkup/benchmarks/fsm/gradual-2/utilities.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-0/pict-adapted.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-5/ukkonen.rkt") (lib "gtp-checkup/benchmarks/zordoz/gradual-3/main.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-7/board-adapted.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-2/board.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-12/render.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-8/admin.rkt") (lib "gtp-checkup/benchmarks/sieve/typed/streams.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-3/spreadsheet.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-5/player-types.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-1/denotable-adapted.rkt") (lib "gtp-checkup/benchmarks/quadBG/typed/ocm-struct.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-4/ocm-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-1/main.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-7/drum.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-2/drum.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-6/tetras.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-2/basics.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-5/benv-adapted.rkt") (lib "gtp-checkup/benchmarks/dungeon/gradual-0/grid.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-5/hmsn.rkt") (lib "gtp-checkup/benchmarks/fsmoo/gradual-3/population.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-3/card.rkt") (lib "gtp-checkup/benchmarks/fsm/gradual-2/automata.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-3/player-types.rkt") (lib "gtp-checkup/benchmarks/synth/typed/drum.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-5/basics.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-6/state.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-3/moment.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-6/date.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-13/ocm-struct.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-5/sequencer.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-8/quad-main.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-1/board-adapted.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-4/benv.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-4/date.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-2/main.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-11/ocm-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-6/stack.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-4/modulegraph-adapted.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-6/base-types.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-8/bset.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-3/core-adapter.rkt") (lib "gtp-checkup/benchmarks/quadMB/base/csp/domain.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-1/deck.rkt") (lib "gtp-checkup/benchmarks/take5/typed/dealer-types.rkt") (lib "gtp-checkup/benchmarks/stack/typed/main.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-6/typed-data.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/main.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-2/cut-tail.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-0/ocm-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-2/tree-adapted.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-3/structs-adapted.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-11/world.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-12/time.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-7/deck.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-1/basics-types.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-8/array-utils.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-12/quick-sample.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-5/data.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-11/penalty-struct.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-1/motion.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-3/data-adaptor.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-4/world.rkt") (lib "gtp-checkup/benchmarks/quadMB/typed/wrap.rkt") (lib "gtp-checkup/benchmarks/quadBG/typed/render.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-6/tree-adapted.rkt") (lib "gtp-checkup/benchmarks/fsmoo/gradual-1/utilities.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-7/basics-types.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-1/world.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-10/sugar-list.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-0/offset-resolvers.rkt") (lib "gtp-checkup/benchmarks/forth/gradual-0/stack.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-4/motion.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-4/block.rkt") (lib "gtp-checkup/benchmarks/mbta/base/t-graph-types.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-11/gregor-adapter.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed/typed-data.rkt") (lib "gtp-checkup/benchmarks/fsmoo/gradual-1/main.rkt") (lib "gtp-checkup/benchmarks/synth/typed/array-broadcast.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-7/base-types.rkt") (lib "gtp-checkup/benchmarks/dungeon/typed/grid.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-8/moment-base.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-2/offset-resolvers.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-0/basics.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-9/ocm.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-0/board.rkt") (lib "gtp-checkup/benchmarks/quadMB/typed/sugar-list.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-7/difference.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-1/modulegraph.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-2/state.rkt") (lib "gtp-checkup/benchmarks/mbta/gradual-2/t-graph.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-1/tree-adapted.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-0/world.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-5/dealer-types.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/time-adapted.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-8/tzinfo-adapter.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-7/time.rkt") (lib "gtp-checkup/benchmarks/quadMB/typed/measure.rkt") (lib "gtp-checkup/benchmarks/quadBG/base/core-types.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-1/main.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-3/const.rkt") (lib "gtp-checkup/benchmarks/zombie/gradual-1/image.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-4/admin.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-12/offset-resolvers.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-3/denotable.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-4/penalty-struct.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-7/moment-base.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-5/modulegraph-adapted.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-4/motion-help.rkt") (lib "gtp-checkup/benchmarks/dungeon/typed/message-queue.rkt") (lib "gtp-checkup/benchmarks/quadMB/typed/penalty-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/snake/typed/motion-help.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-3/label.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-8/gregor-structs.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-2/structs.rkt") (lib "gtp-checkup/benchmarks/fsm/gradual-0/population.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/auxiliaries.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-8/board-adapted.rkt") (lib "gtp-checkup/benchmarks/lnm/typed/main.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-0/structs.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-5/base-types.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-9/tzinfo-adapter.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-8/offset-resolvers.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-4/stack.rkt") (lib "gtp-checkup/benchmarks/zordoz/gradual-1/zo-find.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-2/modulegraph.rkt") (lib "gtp-checkup/benchmarks/stack/typed/stack.rkt") (lib "gtp-checkup/benchmarks/zombie/gradual-3/image-adapted.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-2/stack-types.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-7/data.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-5/array-broadcast.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-1/card-adapted.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-2/gregor-adapter.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-3/array-utils.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-2/main.rkt") (lib "gtp-checkup/benchmarks/zordoz/gradual-3/zo-transition.rkt") (lib "gtp-checkup/benchmarks/dungeon/typed/utils.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-12/ocm-struct.rkt") (lib "gtp-checkup/benchmarks/forth/gradual-3/eval.rkt") (lib "gtp-checkup/benchmarks/zordoz/gradual-1/main.rkt") (lib "gtp-checkup/benchmarks/quadMB/typed/utils.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-8/sequencer.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-7/elim.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-5/moment-base.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-8/main.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-7/player.rkt") (lib "gtp-checkup/benchmarks/zordoz/gradual-3/zo-string.rkt") (lib "gtp-checkup/benchmarks/fsmoo/gradual-2/automata-adapted.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-8/moment.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-11/quick-sample.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-4/main.rkt") (lib "gtp-checkup/benchmarks/dungeon/gradual-2/message-queue.rkt") (lib "gtp-checkup/benchmarks/fsm/typed/automata-adapted.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-5/summary-adapted.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-4/data.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-6/wrap.rkt") (lib "gtp-checkup/benchmarks/take5/typed/basics.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-2/measure.rkt") (lib "gtp-checkup/benchmarks/zordoz/gradual-0/zo-shell.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/player.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-7/player.rkt") (lib "gtp-checkup/benchmarks/forth/gradual-2/stack.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/state-adapted.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-6/mixer.rkt") (lib "gtp-checkup/benchmarks/zordoz/gradual-2/zo-shell.rkt") (lib "gtp-checkup/benchmarks/zordoz/base/typed-zo-structs.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-0/main.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-8/synth.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-2/main.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-5/bset.rkt") (lib "gtp-checkup/benchmarks/fsm/gradual-0/utilities.rkt") (lib "gtp-checkup/benchmarks/mbta/gradual-0/run-t.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-6/handlers.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-0/wrap.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-1/cut-tail.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-6/denotable-adapted.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-5/difference.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-4/board-adapted.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-1/motion-help.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-6/measure.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-8/basics.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-1/block.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-5/date.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-0/consts.rkt") (lib "gtp-checkup/benchmarks/quadMB/base/csp/problem.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-1/strategy.rkt") (lib "gtp-checkup/benchmarks/lnm/typed/spreadsheet.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-8/ocm-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-5/ocm-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/snake/typed/cut-tail.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-3/ocm-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-6/basics-types.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-7/quads.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-0/moment-base.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-9/main.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-4/main.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-4/utils.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-2/consts.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-8/date.rkt") (lib "gtp-checkup/benchmarks/mbta/gradual-0/main.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-8/core-adapter.rkt") (lib "gtp-checkup/benchmarks/dungeon/base/cell-types.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-10/time.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-6/benv.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-10/quads.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-0/auxiliaries.rkt") (lib "gtp-checkup/benchmarks/fsm/gradual-1/automata-adapted.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/board.rkt") (lib "gtp-checkup/benchmarks/zombie/typed/image-adapted.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-5/array-struct.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-7/synth.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-5/core-structs.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-1/handlers.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-6/main.rkt") (lib "gtp-checkup/benchmarks/quadBG/base/csp/helper.rkt") (lib "gtp-checkup/benchmarks/morsecode/gradual-2/main.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/state.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-6/array-broadcast.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-6/card-adapted.rkt") (lib "gtp-checkup/benchmarks/synth/typed/main.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-3/penalty-struct.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-8/hyphenate.rkt") (lib "gtp-checkup/benchmarks/mbta/base/my-graph.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-7/basics.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-10/utils.rkt") (lib "gtp-checkup/benchmarks/tetris/typed/main.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-10/ymd.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-4/basics-types.rkt") (lib "gtp-checkup/benchmarks/sieve/gradual-1/main.rkt") (lib "gtp-checkup/benchmarks/dungeon/gradual-3/message-queue.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-3/pict-adapted.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-6/card-pool.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-10/ocm.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-0/admin.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-2/data.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-9/gregor-structs.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-4/gregor-structs.rkt") (lib "gtp-checkup/benchmarks/quadMB/base/core.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-8/wrap.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-12/core-adapter.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/main.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-11/datetime.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-4/structs.rkt") (lib "gtp-checkup/benchmarks/take5/typed/player-types.rkt") (lib "gtp-checkup/benchmarks/fsm/gradual-1/population.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-0/main.rkt") (lib "gtp-checkup/benchmarks/mbta/typed/run-t.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-7/data.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-7/array-transform.rkt") (lib "gtp-checkup/benchmarks/forth/gradual-2/main.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-6/tree.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-11/tzinfo-adapter.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-1/array-broadcast.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-3/datetime.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-2/moment-base.rkt") (lib "gtp-checkup/benchmarks/sieve/gradual-0/main.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-2/time.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-4/synth.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-1/stack.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-5/measure.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-7/penalty-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-1/moment.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-4/drum.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-1/structs-adapted.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-0/state-adapted.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-1/sequencer.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-7/aux.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-13/world.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-12/difference.rkt") (lib "gtp-checkup/benchmarks/synth/typed/array-transform.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-2/main.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-12/moment-base.rkt") (lib "gtp-checkup/benchmarks/zombie/typed/math.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-9/hyphenate.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-0/data-adaptor.rkt") (lib "gtp-checkup/benchmarks/zordoz/typed/zo-find.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-9/data.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-8/typed-data.rkt") (lib "gtp-checkup/benchmarks/tetris/typed/world.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-2/main.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-1/label.rkt") (lib "gtp-checkup/benchmarks/zordoz/gradual-2/zo-string.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-1/penalty-struct.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-2/board-adapted.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-2/quick-sample.rkt") (lib "gtp-checkup/benchmarks/tetris/typed/consts.rkt") (lib "gtp-checkup/benchmarks/zombie/gradual-3/math.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-7/mixer.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-1/card-pool-types.rkt") (lib "gtp-checkup/benchmarks/dungeon/gradual-4/utils.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-2/ui.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-3/quick-sample.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-4/ukkonen.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-3/difference.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-3/card-pool-types.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-2/denotable-adapted.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-4/main.rkt") (lib "gtp-checkup/benchmarks/dungeon/gradual-4/grid.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-5/moment.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-7/core-structs.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-weighted.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-12/quad-main.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-8/difference.rkt") (lib "gtp-checkup/benchmarks/fsmoo/gradual-1/population.rkt") (lib "gtp-checkup/benchmarks/lnm/typed/pict-adapted.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-8/clock.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-6/main.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-7/world.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-3/main.rkt") (lib "gtp-checkup/benchmarks/dungeon/gradual-1/main.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-2/card.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-0/benv.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-4/measure.rkt") (lib "gtp-checkup/benchmarks/lnm/typed/modulegraph.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-2/basics-types.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-6/benv-adapted.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-8/state-adapted.rkt") (lib "gtp-checkup/benchmarks/zordoz/gradual-4/zo-string.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-0/modulegraph.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-5/main.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/moment.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-8/quads.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-7/card.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-4/handlers.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-1/gregor-adapter.rkt") (lib "gtp-checkup/benchmarks/quadBG/base/quad-types.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-8/quick-sample.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-3/date.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-0/data.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-6/main.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-12/gregor-adapter.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-fns-allpairs-shortestpaths.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-8/main.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-1/data.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-8/main.rkt") (lib "gtp-checkup/benchmarks/quadBG/base/core.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-0/collide.rkt") (lib "gtp-checkup/benchmarks/forth/gradual-0/eval.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-2/clock.rkt") (lib "gtp-checkup/benchmarks/zombie/typed/image.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-4/aux.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-5/ui.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-1/data.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-0/synth.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-3/offset-resolvers.rkt") (lib "gtp-checkup/benchmarks/fsmoo/gradual-2/automata.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-11/measure.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-3/structs.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-7/basics.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-6/moment-base.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-1/player-types.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-5/datetime.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-1/bitstring.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-0/drum.rkt") (lib "gtp-checkup/benchmarks/forth/base/command-types.rkt") (lib "gtp-checkup/benchmarks/tetris/typed/elim.rkt") (lib "gtp-checkup/benchmarks/morsecode/gradual-0/levenshtein.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-0/world.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-0/structs.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-1/main.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-2/array-utils.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-4/card-adapted.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-3/main.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-6/offset-resolvers.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-8/ymd.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-3/main.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-3/player.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-9/main.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-8/datetime.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-9/ocm-struct.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-7/collide.rkt") (lib "gtp-checkup/benchmarks/fsmoo/gradual-0/utilities.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-13/penalty-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-4/array-broadcast.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-6/data-adaptor.rkt") (lib "gtp-checkup/main.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/ui.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/private/zoneinfo-search.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-10/hmsn.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-2/array-struct.rkt") (lib "gtp-checkup/benchmarks/snake/typed/const.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-fns-singlesource-shortestpaths.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-8/measure.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-7/tree.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-0/handlers.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-7/ocm-struct.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-7/date.rkt") (lib "gtp-checkup/benchmarks/forth/typed/eval.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-2/tetras.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-4/main.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-3/ai.rkt") (lib "gtp-checkup/benchmarks/zombie/gradual-3/zombie.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-6/main.rkt") (lib "gtp-checkup/benchmarks/zordoz/gradual-2/zo-find.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-0/deck-types.rkt") (lib "gtp-checkup/benchmarks/fsmoo/typed/population.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-6/const.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-12/main.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-5/aux.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-4/moment-base.rkt") (lib "gtp-checkup/benchmarks/synth/typed/array-struct.rkt") (lib "gtp-checkup/scribblings/gtp-checkup.scrbl") (lib "gtp-checkup/benchmarks/quadMB/gradual-7/ocm.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-7/measure.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-3/typed-data.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-2/state-adapted.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-1/typed-data.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-5/main.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-3/typed-data.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-1/wrap.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-2/penalty-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/forth/gradual-3/main.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-7/main.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-6/card.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-2/data-adaptor.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-7/wrap.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-0/main.rkt") (lib "gtp-checkup/benchmarks/dungeon/gradual-3/grid.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-0/elim.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-12/wrap.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-0/ai.rkt") (lib "gtp-checkup/benchmarks/zordoz/typed/zo-string.rkt") (lib "gtp-checkup/benchmarks/fsm/gradual-3/automata-adapted.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-4/benv-adapted.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-3/world.rkt") (lib "gtp-checkup/benchmarks/take5/typed/card-pool-types.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-6/elim.rkt") (lib "gtp-checkup/benchmarks/zombie/gradual-0/math.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-12/main.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/private/os/env.rkt") (lib "gtp-checkup/benchmarks/morsecode/gradual-2/levenshtein.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-3/board-adapted.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-1/basics.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-5/summary.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-5/ai.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/tree-adapted.rkt") (lib "gtp-checkup/benchmarks/dungeon/gradual-1/grid.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed/label.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-5/card-pool.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-1/spreadsheet.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/gregor-structs.rkt") (lib "gtp-checkup/benchmarks/fsmoo/gradual-3/main.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-6/structs-adapted.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-8/tree.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-7/main.rkt") (lib "gtp-checkup/benchmarks/quadMB/typed/quads.rkt") (lib "gtp-checkup/benchmarks/stack/gradual-1/main.rkt") (lib "gtp-checkup/benchmarks/fsmoo/gradual-3/population-adapted.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-1/date.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-5/collide.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-3/base-types.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/structs-adapted.rkt") (lib "gtp-checkup/benchmarks/mbta/typed/t-view.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-7/strategy.rkt") (lib "gtp-checkup/benchmarks/quadBG/typed/sugar-list.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-11/time.rkt") (lib "gtp-checkup/benchmarks/take5/typed/dealer.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-2/deck.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-9/array-transform.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-8/auxiliaries.rkt") (lib "gtp-checkup/benchmarks/quadMB/base/csp/solver.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/main.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-2/player.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-7/data.rkt") (lib "gtp-checkup/benchmarks/morsecode/gradual-0/morse-code-table.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-5/ocm.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-7/tetras.rkt") (lib "gtp-checkup/benchmarks/quadMB/typed/world.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-0/typed-data.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-0/motion.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-3/measure.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/main.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-9/mixer.rkt") (lib "gtp-checkup/benchmarks/zombie/typed/main.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-6/admin.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-12/moment.rkt") (lib "gtp-checkup/benchmarks/quadBG/typed/measure.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-3/benv-adapted.rkt") (lib "gtp-checkup/benchmarks/zombie/gradual-2/image-adapted.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/offset-resolvers.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-7/offset-resolvers.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-3/stack.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-3/ui.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-6/player.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-13/ocm.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-4/time.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-0/player-types.rkt") (lib "gtp-checkup/benchmarks/quadBG/base/csp/constraint.rkt") (lib "gtp-checkup/benchmarks/quadBG/typed/utils.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-12/ymd.rkt") (lib "gtp-checkup/benchmarks/mbta/base/t-view-types.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-2/lnm-plot.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-3/deck.rkt") (lib "gtp-checkup/benchmarks/mbta/gradual-1/main.rkt") (lib "gtp-checkup/benchmarks/dungeon/gradual-2/grid.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-7/admin.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-3/wrap.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-5/penalty-struct.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-0/time.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-6/block.rkt") (lib "gtp-checkup/benchmarks/take5/base/untyped.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-0/ocm.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-0/board-adapted.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-0/card.rkt") (lib "gtp-checkup/benchmarks/zombie/gradual-2/zombie.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-0/clock.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-2/gregor-structs.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-2/main.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-4/time-adapted.rkt") (lib "gtp-checkup/benchmarks/forth/typed/command.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-4/structs.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-10/measure.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-12/hyphenate.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-4/card-pool.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-7/ymd.rkt") (lib "gtp-checkup/benchmarks/zordoz/gradual-3/zo-find.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-4/ai.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-9/sugar-list.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-4/stack-types.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-1/main.rkt") (lib "gtp-checkup/benchmarks/morsecode/gradual-3/levenshtein.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-0/player.rkt") (lib "gtp-checkup/benchmarks/quadBG/base/csp/csp.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-10/difference.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-0/stack.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-1/quads.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-0/lcs.rkt") (lib "gtp-checkup/benchmarks/acquire/base/types.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-6/hyphenate.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-7/penalty-struct.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-8/data.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-fns-graphviz.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-6/main.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-2/main.rkt") (lib "gtp-checkup/benchmarks/tetris/typed/bset.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-4/tree.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-3/tzinfo-adapter.rkt") (lib "gtp-checkup/benchmarks/quadBG/base/csp/solver.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-11/main.rkt") (lib "gtp-checkup/benchmarks/dungeon/gradual-2/cell.rkt") (lib "gtp-checkup/benchmarks/fsmoo/typed/automata.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-2/card-pool.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-4/bitstring.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-2/elim.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-0/core-adapter.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-3/card-adapted.rkt") (lib "gtp-checkup/benchmarks/stack/gradual-0/main.rkt") (lib "gtp-checkup/benchmarks/fsmoo/gradual-1/population-adapted.rkt") (lib "gtp-checkup/benchmarks/morsecode/gradual-1/main.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-1/measure.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-9/render.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-11/clock.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-1/main.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-1/const.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-2/render.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-1/lnm-plot.rkt") (lib "gtp-checkup/benchmarks/quadMB/base/core-types.rkt") (lib "gtp-checkup/benchmarks/take5/typed/stack.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-0/array-transform.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-2/motion.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed/main.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-8/world.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-2/hmsn.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-1/utils.rkt") (lib "gtp-checkup/benchmarks/quadMB/base/lib-typed.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-7/quad-main.rkt") (lib "gtp-checkup/benchmarks/fsm/gradual-2/main.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-13/render.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-7/array-struct.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-0/data.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-2/deck-types.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-2/data.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/structs.rkt") (lib "gtp-checkup/benchmarks/quadMB/base/csp/helper.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-5/motion.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-0/quick-sample.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-0/gregor-adapter.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-1/core-adapter.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-9/quad-main.rkt") (lib "gtp-checkup/benchmarks/snake/typed/collide.rkt") (lib "gtp-checkup/benchmarks/quadMB/typed/ocm.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/source.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-3/stack-types.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-6/quads.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-1/player.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-11/hmsn.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-9/wrap.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-0/difference.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-0/penalty-struct.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-10/ocm-struct.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/denotable-adapted.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/private/os/windows.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-2/world.rkt") (lib "gtp-checkup/benchmarks/fsmoo/typed/population-adapted.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-6/sequencer.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-3/gregor-structs.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-3/core-structs.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-3/basics.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-7/dealer.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-8/consts.rkt") (lib "gtp-checkup/benchmarks/dungeon/gradual-4/main.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-10/main.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-1/card-pool.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-6/basics.rkt") (lib "gtp-checkup/benchmarks/zombie/gradual-0/main.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-5/denotable.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/strategy.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-7/gregor-adapter.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-1/main.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-11/moment.rkt") (lib "gtp-checkup/benchmarks/morsecode/gradual-1/morse-code-strings.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-5/data.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-4/strategy.rkt") (lib "gtp-checkup/benchmarks/fsm/gradual-3/main.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-0/array-struct.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-3/mixer.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-6/core-adapter.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/tree.rkt") (lib "gtp-checkup/benchmarks/dungeon/gradual-4/cell.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-1/main.rkt") (lib "gtp-checkup/benchmarks/morsecode/gradual-2/morse-code-strings.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/private/os/windows-registry.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-3/state-adapted.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-2/utils.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-3/denotable-adapted.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-0/penalty-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/fsmoo/gradual-3/automata.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-4/cut-tail.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-4/player.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/moment-base.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-0/block.rkt") (lib "gtp-checkup/benchmarks/mbta/typed/t-graph.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-2/hyphenate.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-10/core-adapter.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-0/spreadsheet.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-0/typed-data.rkt") (lib "gtp-checkup/benchmarks/fsmoo/typed/automata-adapted.rkt") (lib "gtp-checkup/benchmarks/forth/gradual-3/stack.rkt") (lib "gtp-checkup/benchmarks/mbta/gradual-3/t-graph.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-1/penalty-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-unweighted.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-11/gregor-structs.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-1/core-structs.rkt") (lib "gtp-checkup/benchmarks/mbta/gradual-3/main.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-4/difference.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-8/state.rkt") (lib "gtp-checkup/benchmarks/mbta/typed/main.rkt") (lib "gtp-checkup/benchmarks/quadBG/typed/wrap.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-3/motion.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-0/data.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/hash-utils.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-9/sequencer.rkt") (lib "gtp-checkup/benchmarks/fsmoo/gradual-0/automata-adapted.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-3/world.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-4/moment.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-2/mixer.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-9/moment-base.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-11/offset-resolvers.rkt") (lib "gtp-checkup/benchmarks/synth/typed/typed-data.rkt") (lib "gtp-checkup/benchmarks/zombie/gradual-1/image-adapted.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-0/array-broadcast.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-12/clock.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-6/gregor-adapter.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-5/wrap.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-10/penalty-struct.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-5/spreadsheet.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-0/base-types.rkt") (lib "gtp-checkup/benchmarks/zordoz/base/compiler-zo-parse.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-7/handlers.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-11/wrap.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-5/board.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-5/denotable-adapted.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-4/modulegraph.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-1/quick-sample.rkt") (lib "gtp-checkup/benchmarks/zombie/gradual-2/image.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-12/core-structs.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-2/quads.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-4/auxiliaries.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-1/gregor-structs.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-7/deck-types.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-4/consts.rkt") (lib "gtp-checkup/benchmarks/fsmoo/gradual-3/utilities.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-10/main.rkt") (lib "gtp-checkup/benchmarks/morsecode/gradual-3/main.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-2/summary.rkt") (lib "gtp-checkup/benchmarks/fsm/typed/main.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-6/ai.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-1/auxiliaries.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-5/structs.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-5/state.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-4/mixer.rkt") (lib "gtp-checkup/benchmarks/mbta/gradual-1/t-graph.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-0/card-adapted.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-4/player.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-0/main.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-11/quad-main.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-matrix.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-0/dealer-types.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-5/clock.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-3/deck-types.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-3/array-transform.rkt") (lib "gtp-checkup/benchmarks/snake/typed/main.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-0/main.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-6/world.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-3/hyphenate.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-6/drum.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-9/date.rkt") (lib "gtp-checkup/benchmarks/forth/gradual-0/command.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-7/state.rkt") (lib "gtp-checkup/benchmarks/lnm/typed/lnm-plot.rkt") (lib "gtp-checkup/benchmarks/zombie/typed/zombie.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-13/quads.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-0/bset.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-0/label.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-4/ocm.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-10/offset-resolvers.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-0/main.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-6/data.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-2/player-types.rkt") (lib "gtp-checkup/benchmarks/fsmoo/gradual-2/population.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-1/base-types.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-4/main.rkt") (lib "gtp-checkup/benchmarks/quadMB/typed/quad-main.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-6/tzinfo-adapter.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-3/player.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-5/main.rkt") (lib "gtp-checkup/benchmarks/quadMB/typed/quick-sample.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-1/difference.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/private/structs.rkt") (lib "gtp-checkup/benchmarks/zordoz/typed/zo-transition.rkt") (lib "gtp-checkup/benchmarks/mbta/gradual-1/run-t.rkt") (lib "gtp-checkup/benchmarks/quadMB/base/csp/csp.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-5/motion-help.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/difference.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-1/structs.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-1/state.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-6/render.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-3/dealer.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-5/deck-types.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-6/array-struct.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-2/difference.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-8/data.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-2/date.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-2/bset.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-2/datetime.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-3/penalty-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/zombie/gradual-0/zombie.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-2/world.rkt") (lib "gtp-checkup/benchmarks/zordoz/gradual-4/main.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-5/main.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-8/render.rkt") (lib "gtp-checkup/benchmarks/quadMB/typed/main.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-2/benv-adapted.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-7/main.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/queue/gen-queue.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-3/quad-main.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-9/quads.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-5/player.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-2/main.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-6/structs.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-13/wrap.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-12/measure.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-1/hmsn.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-2/synth.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-5/cut-tail.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-4/board.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-2/strategy.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-5/synth.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-0/cut-tail.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/private/generics.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-2/motion-help.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-4/main.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-8/hmsn.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-6/datetime.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-11/penalty-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-4/tzinfo-adapter.rkt") (lib "gtp-checkup/benchmarks/zombie/gradual-0/image-adapted.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-7/bset.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-9/utils.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/board-adapted.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-4/base-types.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-4/data-adaptor.rkt") (lib "gtp-checkup/benchmarks/zordoz/gradual-4/zo-find.rkt") (lib "gtp-checkup/benchmarks/zordoz/gradual-0/main.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-11/render.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-0/core-structs.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-5/tree-adapted.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-3/array-struct.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-10/moment-base.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-6/main.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-2/wrap.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-9/penalty-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/quadBG/typed/penalty-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-3/elim.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-0/basics-types.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-4/render.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-8/ocm.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-7/render.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-4/world.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-3/strategy.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-12/quads.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-1/typed-data.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-2/moment.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-8/tree-adapted.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-4/gregor-adapter.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-4/state.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-13/sugar-list.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-4/ymd.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-2/block.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-3/state.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-5/auxiliaries.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-4/elim.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-6/ocm.rkt") (lib "gtp-checkup/benchmarks/quadBG/typed/world.rkt") (lib "gtp-checkup/benchmarks/mbta/gradual-3/run-t.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-6/ocm-struct.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed/structs.rkt") (lib "gtp-checkup/benchmarks/take5/typed/basics-types.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-2/sugar-list.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/clock.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-2/penalty-struct.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-9/gregor-adapter.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-7/array-utils.rkt") (lib "gtp-checkup/benchmarks/fsmoo/gradual-2/population-adapted.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-7/block.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-1/array-struct.rkt") (lib "gtp-checkup/benchmarks/dungeon/gradual-1/utils.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-9/array-broadcast.rkt") (lib "gtp-checkup/benchmarks/fsm/gradual-2/population.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-3/summary-adapted.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-0/time-adapted.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-3/main.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-4/ui.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-4/time.rkt") (lib "gtp-checkup/benchmarks/fsmoo/gradual-0/population.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-5/consts.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-8/array-broadcast.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-1/basics.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/private/tzfile-parser.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-1/tetras.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-1/offset-resolvers.rkt") (lib "gtp-checkup/benchmarks/synth/typed/mixer.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-12/tzinfo-adapter.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-1/pict-adapted.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-9/clock.rkt") (lib "gtp-checkup/benchmarks/forth/gradual-3/command.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-8/player.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-7/main.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-4/quad-main.rkt") (lib "gtp-checkup/benchmarks/lnm/typed/bitstring.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-6/ymd.rkt") (lib "gtp-checkup/benchmarks/quadMB/typed/hyphenate.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-7/dealer-types.rkt") (lib "gtp-checkup/benchmarks/dungeon/gradual-0/message-queue.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-4/array-transform.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-6/difference.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-0/main.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-4/data.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-1/tzinfo-adapter.rkt") (lib "gtp-checkup/benchmarks/zordoz/gradual-2/main.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-4/main.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-5/tzinfo-adapter.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-6/data.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-11/sugar-list.rkt") (lib "gtp-checkup/benchmarks/fsmoo/gradual-1/automata.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/benv.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-1/render.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-9/ymd.rkt") (lib "gtp-checkup/benchmarks/morsecode/gradual-1/morse-code-table.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-11/ymd.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/ai.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-4/typed-data.rkt") (lib "gtp-checkup/benchmarks/forth/gradual-1/command.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-7/sugar-list.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-3/structs.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-4/structs-adapted.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-10/core-structs.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-10/date.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-1/array-utils.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-3/array-broadcast.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-5/sugar-list.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-8/utils.rkt") (lib "gtp-checkup/benchmarks/stack/gradual-1/stack.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-5/admin.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-7/stack.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-1/ymd.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-3/cut-tail.rkt") (lib "gtp-checkup/benchmarks/snake/typed/handlers.rkt") (lib "gtp-checkup/benchmarks/morsecode/gradual-3/morse-code-strings.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-7/player-types.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-7/utils.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/private/tabfile-parser.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-6/array-utils.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-13/penalty-struct.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-0/ymd.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-0/player.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-2/core-structs.rkt") (lib "gtp-checkup/benchmarks/fsm/gradual-0/main.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-6/ui.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-3/quads.rkt") (lib "gtp-checkup/benchmarks/zombie/gradual-1/zombie.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-3/bset.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-11/date.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-2/ukkonen.rkt") (lib "gtp-checkup/benchmarks/morsecode/typed/morse-code-table.rkt") (lib "gtp-checkup/benchmarks/fsm/gradual-3/population.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-0/gregor-structs.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-6/cut-tail.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/basics.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-3/data.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-2/ocm-struct.rkt") (lib "gtp-checkup/benchmarks/dungeon/gradual-0/main.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-3/gregor-adapter.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-11/quads.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-11/difference.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-5/structs-adapted.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-0/summary-adapted.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-2/player.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-4/data.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-2/tree.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-11/ocm-struct.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-9/offset-resolvers.rkt") (lib "gtp-checkup/benchmarks/morsecode/typed/morse-code-strings.rkt") (lib "gtp-checkup/benchmarks/dungeon/gradual-1/message-queue.rkt") (lib "gtp-checkup/benchmarks/zombie/gradual-1/main.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-4/bset.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-1/player.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-7/ocm-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-1/ocm-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-1/tree.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-5/hyphenate.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-4/spreadsheet.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-5/basics.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-3/handlers.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-3/summary.rkt") (lib "gtp-checkup/benchmarks/fsm/gradual-0/automata.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-6/motion-help.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-6/time.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/datetime.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-13/quad-main.rkt") (lib "gtp-checkup/benchmarks/zombie/gradual-0/image.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/queue/priority.rkt") (lib "gtp-checkup/benchmarks/fsm/typed/automata.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-7/clock.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-1/main.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-10/hyphenate.rkt") (lib "gtp-checkup/benchmarks/acquire/base/untyped.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-8/time.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-5/structs.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-2/tzinfo-adapter.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-13/quick-sample.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-fns-basic.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-11/core-adapter.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-7/card-pool-types.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-5/card.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-5/drum.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-5/gregor-structs.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-3/main.rkt") (lib "gtp-checkup/benchmarks/morsecode/gradual-2/morse-code-table.rkt") (lib "gtp-checkup/benchmarks/mbta/gradual-1/t-view.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-12/penalty-struct.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/gregor-adapter.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-13/utils.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-11/moment-base.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-0/hyphenate.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-0/stack-types.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-9/hmsn.rkt") (lib "gtp-checkup/benchmarks/mbta/gradual-0/t-graph.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-5/offset-resolvers.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-1/summary-adapted.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-3/bitstring.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-0/motion-help.rkt") (lib "gtp-checkup/benchmarks/tetris/typed/aux.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-10/clock.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-6/basics.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-6/time.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-2/sequencer.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-3/benv.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-2/denotable.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-2/quad-main.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-3/sequencer.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-3/tree.rkt") (lib "gtp-checkup/benchmarks/zordoz/gradual-0/zo-transition.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-1/clock.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-8/elim.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-2/typed-data.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-0/time.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-3/hmsn.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-8/block.rkt") (lib "gtp-checkup/benchmarks/morsecode/gradual-1/levenshtein.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-8/mixer.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-12/penalty-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-1/board.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-0/benv-adapted.rkt") (lib "gtp-checkup/benchmarks/zombie/gradual-1/math.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-4/data.rkt") (lib "gtp-checkup/benchmarks/quadMB/base/csp/constraint.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-7/main.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/denotable.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-0/deck.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/private/zoneinfo.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-9/synth.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/hmsn.rkt") (lib "gtp-checkup/benchmarks/dungeon/gradual-3/main.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-5/typed-data.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-6/state-adapted.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-8/penalty-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/quadMB/base/csp/variable.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-9/array-utils.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-5/quad-main.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-4/state-adapted.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-0/structs-adapted.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-4/deck.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-7/main.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-2/spreadsheet.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-5/main.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-2/dealer.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-4/clock.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-10/world.rkt") (lib "gtp-checkup/benchmarks/sieve/gradual-0/streams.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-3/time-adapted.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-4/tetras.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-7/quick-sample.rkt") (lib "gtp-checkup/benchmarks/sieve/gradual-1/streams.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-3/dealer-types.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-3/ukkonen.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-0/modulegraph-adapted.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-0/lnm-plot.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-5/main.rkt") (lib "gtp-checkup/benchmarks/quadMB/typed/ocm-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-4/typed-data.rkt") (lib "gtp-checkup/benchmarks/zordoz/gradual-2/zo-transition.rkt") (lib "gtp-checkup/benchmarks/quadMB/typed/ocm-struct.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-4/sugar-list.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-3/lnm-plot.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-4/offset-resolvers.rkt") (lib "gtp-checkup/benchmarks/fsmoo/gradual-2/utilities.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-3/basics-types.rkt") (lib "gtp-checkup/benchmarks/take5/typed/main.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-9/ocm-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-0/ocm-struct.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-0/main.rkt") (lib "gtp-checkup/benchmarks/forth/gradual-2/eval.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-4/datetime.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-9/quick-sample.rkt") (lib "gtp-checkup/benchmarks/forth/gradual-0/main.rkt") (lib "gtp-checkup/benchmarks/fsm/gradual-3/automata.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-8/sugar-list.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-1/ui.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-6/aux.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-2/ai.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-9/penalty-struct.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-2/time-adapted.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-4/main.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-7/sequencer.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-4/label.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-0/summary.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-5/main.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-6/array-transform.rkt") (lib "gtp-checkup/benchmarks/mbta/gradual-2/main.rkt") (lib "gtp-checkup/benchmarks/take5/typed/deck.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-5/core-adapter.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-0/array-utils.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-8/core-structs.rkt") (lib "gtp-checkup/benchmarks/forth/gradual-2/command.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-6/board-adapted.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-4/core-adapter.rkt") (lib "gtp-checkup/benchmarks/mbta/gradual-2/t-view.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-4/hmsn.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-2/array-transform.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-3/admin.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-7/main.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/core-structs.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-4/deck-types.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-2/handlers.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-12/ocm.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/private/os/unix.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-5/basics-types.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-0/ui.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-4/lcs.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-3/card-pool.rkt") (lib "gtp-checkup/benchmarks/quadMB/base/quad-types.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-9/world.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-3/drum.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-6/penalty-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-8/array-struct.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-11/utils.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-6/denotable.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-8/main.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-2/const.rkt") (lib "gtp-checkup/benchmarks/fsm/gradual-0/automata-adapted.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/gen-graph.rkt") (lib "gtp-checkup/benchmarks/dungeon/typed/main.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-1/dealer-types.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-3/clock.rkt") (lib "gtp-checkup/benchmarks/quadBG/base/csp/variable.rkt") (lib "gtp-checkup/benchmarks/mbta/gradual-0/t-view.rkt") (lib "gtp-checkup/benchmarks/morsecode/gradual-0/morse-code-strings.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-1/data.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-4/main.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-1/lcs.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-1/time-adapted.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-6/main.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-0/main.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-7/motion-help.rkt") (lib "gtp-checkup/benchmarks/take5/typed/deck-types.rkt") (lib "gtp-checkup/benchmarks/forth/gradual-1/eval.rkt") (lib "gtp-checkup/benchmarks/tetris/typed/base-types.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-1/stack-types.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-5/main.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-5/modulegraph.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-5/data.rkt") (lib "gtp-checkup/benchmarks/lnm/typed/modulegraph-adapted.rkt") (lib "gtp-checkup/benchmarks/fsmoo/gradual-2/main.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-6/board.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-6/data.rkt") (lib "gtp-checkup/benchmarks/forth/gradual-1/stack.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-4/quick-sample.rkt") (lib "gtp-checkup/benchmarks/tetris/typed/data.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-5/block.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-13/hyphenate.rkt") (lib "gtp-checkup/benchmarks/zordoz/base/compiler-zo-structs.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-1/drum.rkt") (lib "gtp-checkup/benchmarks/lnm/typed/summary-adapted.rkt") (lib "gtp-checkup/benchmarks/zombie/gradual-3/image.rkt") (lib "gtp-checkup/benchmarks/forth/gradual-1/main.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-8/board.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-4/summary.rkt") (lib "gtp-checkup/benchmarks/fsmoo/gradual-0/automata.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-6/synth.rkt") (lib "gtp-checkup/benchmarks/zordoz/gradual-0/zo-find.rkt") (lib "gtp-checkup/benchmarks/fsm/gradual-1/utilities.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-6/core-structs.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed/lcs.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-7/motion.rkt") (lib "gtp-checkup/benchmarks/dungeon/gradual-0/cell.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-2/benv.rkt") (lib "gtp-checkup/benchmarks/gregor/base/cldr/file.rkt") (lib "gtp-checkup/benchmarks/dungeon/gradual-2/utils.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-2/label.rkt") (lib "gtp-checkup/benchmarks/zordoz/gradual-1/zo-shell.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-10/tzinfo-adapter.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-8/ocm-struct.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-1/time.rkt") (lib "gtp-checkup/benchmarks/fsmoo/gradual-0/main.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-6/time-adapted.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-5/world.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-1/ukkonen.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-3/ocm-struct.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-0/measure.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-3/basics.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-1/world.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-6/bset.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-8/strategy.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-2/main.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-10/quad-main.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-7/gregor-structs.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/zoneinfo.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-1/summary.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-0/sugar-list.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/tzinfo-adapter.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-11/main.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-1/main.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-5/mixer.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-2/dealer-types.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-property.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-5/time-adapted.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-7/array-broadcast.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-1/state-adapted.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-3/sugar-list.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-3/tetras.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-12/sugar-list.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-3/main.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-1/aux.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-1/modulegraph-adapted.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-3/tree-adapted.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-5/lcs.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-6/auxiliaries.rkt") (lib "gtp-checkup/benchmarks/gregor/base/types.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-fns-coloring.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-6/player-types.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-8/tetras.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-4/ocm-struct.rkt") (lib "gtp-checkup/benchmarks/dungeon/gradual-4/message-queue.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-9/moment.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-2/admin.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-6/utils.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-5/array-transform.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-5/ymd.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-5/quads.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-1/denotable.rkt") (lib "gtp-checkup/benchmarks/fsmoo/gradual-1/automata-adapted.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-5/dealer.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-2/data.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-4/lnm-plot.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-8/drum.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-fns-minspantree.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-4/dealer-types.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-5/main.rkt") (lib "gtp-checkup/benchmarks/morsecode/typed/levenshtein.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-1/benv.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-7/board.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-5/state-adapted.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-3/collide.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-6/motion.rkt") (lib "gtp-checkup/benchmarks/mbta/gradual-3/t-view.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-4/pict-adapted.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-5/label.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-4/const.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-2/lcs.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-5/tree.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-6/consts.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-5/const.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-8/array-transform.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-5/strategy.rkt") (lib "gtp-checkup/benchmarks/dungeon/gradual-2/main.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-5/card-pool-types.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-7/tree-adapted.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-1/elim.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-5/time.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-6/gregor-structs.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-3/board.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-8/gregor-adapter.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-0/basics.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-0/state.rkt") (lib "gtp-checkup/benchmarks/zordoz/gradual-1/zo-transition.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-5/penalty-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-3/synth.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-4/tree-adapted.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-10/ocm-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-9/datetime.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-7/hyphenate.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-6/stack-types.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-1/dealer.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-2/auxiliaries.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-10/render.rkt") (lib "gtp-checkup/benchmarks/snake/typed/motion.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-1/card.rkt") (lib "gtp-checkup/benchmarks/forth/typed/main.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-1/data.rkt") (lib "gtp-checkup/benchmarks/take5/typed/player.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-3/main.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-7/moment.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-12/hmsn.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-4/array-struct.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-1/synth.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-12/date.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-9/array-struct.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-13/ocm-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-0/sequencer.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-4/hyphenate.rkt") (lib "gtp-checkup/benchmarks/fsmoo/typed/main.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-5/quick-sample.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-8/main.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-12/utils.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-1/bset.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/time.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-0/card-pool-types.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-5/typed-data.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-5/lnm-plot.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/utils.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/core-adapter.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/adjlist-utils.rkt") (lib "gtp-checkup/benchmarks/dungeon/base/un-types.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-5/board-adapted.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-7/data-adaptor.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-0/denotable-adapted.rkt") (lib "gtp-checkup/benchmarks/forth/typed/stack.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-0/mixer.rkt") (lib "gtp-checkup/benchmarks/suffixtree/gradual-3/data.rkt") (lib "gtp-checkup/benchmarks/quadBG/typed/quick-sample.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-5/render.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-3/utils.rkt") (lib "gtp-checkup/benchmarks/zombie/gradual-3/main.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/time.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-6/deck.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-11/core-structs.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-4/card-pool-types.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-6/world.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-12/gregor-structs.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-5/pict-adapted.rkt") (lib "gtp-checkup/benchmarks/morsecode/gradual-0/main.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-6/player.rkt") (lib "gtp-checkup/benchmarks/quadBG/typed/ocm.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-2/modulegraph-adapted.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-4/penalty-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-12/ocm-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/kcfa/gradual-4/denotable-adapted.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-9/drum.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-2/card-pool-types.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-0/render.rkt") (lib "gtp-checkup/benchmarks/take5/typed/card-pool.rkt") (lib "gtp-checkup/benchmarks/synth/gradual-1/mixer.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-5/utils.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-5/card-adapted.rkt") (lib "gtp-checkup/benchmarks/dungeon/gradual-0/utils.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-5/time.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-4/dealer.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/queue/fifo.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-7/cut-tail.rkt") (lib "gtp-checkup/benchmarks/take5/typed/stack-types.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-1/hyphenate.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-4/card.rkt") (lib "gtp-checkup/benchmarks/snake/gradual-1/data-adaptor.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-10/wrap.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-2/bitstring.rkt") (lib "gtp-checkup/benchmarks/zombie/gradual-2/main.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-0/tetras.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-3/auxiliaries.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-3/aux.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-0/utils.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-1/main.rkt") (lib "gtp-checkup/benchmarks/fsm/typed/utilities.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-10/gregor-adapter.rkt") (lib "gtp-checkup/benchmarks/quadMB/gradual-4/quads.rkt") (lib "gtp-checkup/benchmarks/snake/typed/data-adaptor.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-10/datetime.rkt") (lib "gtp-checkup/benchmarks/dungeon/gradual-3/utils.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-6/strategy.rkt") (lib "gtp-checkup/benchmarks/acquire/gradual-2/basics.rkt") (lib "gtp-checkup/benchmarks/dungeon/typed/cell.rkt") (lib "gtp-checkup/benchmarks/dungeon/gradual-1/cell.rkt") (lib "gtp-checkup/benchmarks/tetris/gradual-5/tetras.rkt") (lib "gtp-checkup/benchmarks/take5/gradual-5/stack.rkt") (lib "gtp-checkup/benchmarks/lnm/gradual-0/main.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-9/difference.rkt") (lib "gtp-checkup/benchmarks/gregor/gradual-3/moment-base.rkt"))) (name . "gtp-checkup") (nix-sha256 . "1fjm30nlz2x1cdjpcvh5w853cj50vlv4dkn89h0wdh69vzxqgxvv") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (ring:2 . #t) (tests . #t) (typed-racket . #t))) (source . "git://github.com/bennn/gtp-checkup") (tags . ("tests" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "9d341a2e4d90b3d60dce8b85bccf834b008864e3") (source . "git://github.com/bennn/gtp-checkup") (source_url . "http://github.com/bennn/gtp-checkup/tree/master"))))))) ("typed-rosette" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/typed-rosette.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "cc6b31cab090ef9a35d4700b02a9ab005473e4bc") (checksum-error . #f) (conflicts . ()) (dependencies . (("racket" #:version "6.8.0.3") "base" "rosette" "turnstile" "rackunit-lib" "lens-common" "lens-unstable" "syntax-classes-lib" "rackunit-lib")) (description . "A typed variant of the Rosette language.") (implies . ()) (last-checked . 1522414696) (last-edit . 1515534266) (last-updated . 1520032263) (modules . ((lib "typed/rosette/set.rkt") (lib "test/synthcl-matrix-synth-tests.rkt") (lib "test/rosette-tests.rkt") (lib "typed/rosette/unsafe.rkt") (lib "test/rosette-guide-sec5-tests.rkt") (lib "test/typed-rosette/case-arrow.rkt") (lib "typed/rosette/list.rkt") (lib "test/rosette-guide-sec8-tests.rkt") (lib "typed/rosette/match-core.rkt") (lib "typed/bv/lang/reader.rkt") (lib "typed/rosette/struct-type-properties.rkt") (lib "test/matrix-verify-kernel.rkt") (lib "sdsl/typed-fsm/fsm.rkt") (lib "typed/rosette/base-forms.rkt") (lib "sdsl/typed-ifc/ifc.rkt") (lib "typed/query/debug.rkt") (lib "test/rosette-guide-sec43-tests.rkt") (lib "test/synthcl-matrix-verify-tests.rkt") (lib "test/typed-rosette/occurrence.rkt") (lib "typed/lib/angelic.rkt") (lib "sdsl/typed-synthcl/synthcl-model.rkt") (lib "test/walsh-synth-kernel.rkt") (lib "test/synthcl-walsh-verify-tests.rkt") (lib "test/synthcl-walsh-synth-tests.rkt") (lib "test/rosette-guide-sec45-tests.rkt") (lib "test/sobel-kernel.rkt") (lib "typed/lib/synthax.rkt") (lib "test/rosette-guide-sec4-tests.rkt") (lib "test/synthcl-tests.rkt") (lib "typed/lib/roseunit.rkt") (lib "sdsl/typed-bv/bv.rkt") (lib "typed/rosette/bool.rkt") (lib "test/rosette-guide-sec49-tests.rkt") (lib "typed/rosette/types.rkt") (lib "test/rosette-guide-sec46-tests.rkt") (lib "typed/rosette/vector.rkt") (lib "typed/ifc/lang/reader.rkt") (lib "test/rosette-guide-sec7-tests.rkt") (lib "test/synthcl-matrix-verify-buggy-tests.rkt") (lib "typed/rosette-util.rkt") (lib "typed/lib/check-asserts.rkt") (lib "test/bv-ref-tests.rkt") (lib "test/synthcl-sobel-tests.rkt") (lib "typed/rosette/lang/reader.rkt") (lib "sdsl/typed-synthcl/synthcl.rkt") (lib "typed/fsm/lang/reader.rkt") (lib "test/walsh-verify-kernel.rkt") (lib "typed/rosette/format.rkt") (lib "typed/rosette/hash.rkt") (lib "test/typed-rosette/occurrence2.rkt") (lib "test/typed-rosette/for-all-union.rkt") (lib "test/rosette-guide-sec3-tests.rkt") (lib "typed/rosette/function.rkt") (lib "typed/lib/render.rkt") (lib "test/rosette-guide-sec2-tests.rkt") (lib "typed/lib/lift.rkt") (lib "test/quote-tests.rkt") (lib "typed/main.rkt") (lib "typed/rosette/generic-interfaces.rkt") (lib "test/fsm-tests.rkt") (lib "test/matrix-synth-kernel.rkt") (lib "typed/rosette.rkt") (lib "typed/rosette/concrete-predicate.rkt") (lib "typed/rosette/for-forms.rkt") (lib "test/typed-rosette/rest-arg.rkt") (lib "test/rosette-guide-sec6-tests.rkt") (lib "test/rosette-guide-sec44-tests.rkt") (lib "test/typed-rosette/for-tests.rkt") (lib "typed/synthcl/lang/reader.rkt") (lib "typed/rosette/struct.rkt") (lib "typed/rosette/match-pat-forms.rkt") (lib "test/ifc-tests.rkt") (lib "test/typed-rosette/test-type-decl.rkt") (lib "typed/rosette/forms-pre-match.rkt") (lib "test/bv-test-utils.rkt") (lib "test/bv-tests.rkt"))) (name . "typed-rosette") (nix-sha256 . "033796a115ifl1izq4xi36kk0vljwk973h70bfzh01b333yz85py") (ring . 2) (search-terms . #hasheq((:build-fail: . #t) (author:stchang@racket-lang.org . #t) (ring:2 . #t) (rosette . #t) (symbolic-execution . #t) (typed . #t))) (source . "https://github.com/stchang/typed-rosette.git") (tags . ("rosette" "symbolic-execution" "typed")) (versions . #hash((default . #hasheq((checksum . "cc6b31cab090ef9a35d4700b02a9ab005473e4bc") (source . "https://github.com/stchang/typed-rosette.git") (source_url . "https://github.com/stchang/typed-rosette.git"))))))) ("racket-benchmarks" . #hash((author . "eli@racket-lang.org jay@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org samth@racket-lang.org stamourv@racket-lang.org") (checksum . "fc468b7acf3dd58f617bbbd5e3d1248757d6b75e") (dependencies . ("base" "compatibility-lib" "r5rs-lib" "scheme-lib" "racket-test" "typed-racket-lib" "gui-lib")) (description . "eli@racket-lang.org jay@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org samth@racket-lang.org stamourv@racket-lang.org") (modules . ()) (name . "racket-benchmarks") (source . "https://download.racket-lang.org/releases/6.12/pkgs/racket-benchmarks.zip") (tags . ()))) ("apse" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/apse.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/apse.txt"))) (checksum . "b02dfe2de3f7ae1a1edf931c9555408e6354a5bc") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "lux" "mode-lambda")) (description . "a pixel-based sprite editor (good with mode-lambda)") (implies . ()) (last-checked . 1522417871) (last-edit . 1504535462) (last-updated . 1502895067) (modules . ((lib "apse/core.rkt") (lib "apse/main.rkt") (lib "apse/tool.rkt"))) (name . "apse") (nix-sha256 . "1pvxvzsy99gn74qa8qm5cbr21xxqy2nbvd1bw4v0arlwps01bgg6") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (app . #t) (author:jay.mccarthy@gmail.com . #t) (games . #t) (graphics . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/apse") (tags . ("app" "games" "graphics")) (versions . #hash((default . #hasheq((checksum . "b02dfe2de3f7ae1a1edf931c9555408e6354a5bc") (source . "git://github.com/jeapostrophe/apse") (source_url . "http://github.com/jeapostrophe/apse/tree/master"))))))) ("binary-class" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "binary-class" "doc/binary-class@binary-class/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/binary-class.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/binary-class.txt"))) (checksum . "69705ed306be38c9e4dd67d9075ec160ecdb82a4") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Classes for writing and reading binary data") (implies . ()) (last-checked . 1522414310) (last-edit . 1407001953) (last-updated . 1502812281) (modules . ((lib "binary-class/manual.scrbl") (lib "binary-class/private/base.rkt") (lib "binary-class/string.rkt") (lib "binary-class/main.rkt") (lib "binary-class/base.rkt") (lib "binary-class/syntax.rkt") (lib "binary-class/common.rkt") (lib "binary-class/contract.rkt"))) (name . "binary-class") (nix-sha256 . "0h3xa9i973ka4ilkr82ifa9dgmsrkv747bk74x56gl6km3r7lmyk") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (io . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "git://github.com/Kalimehtar/binary-class") (tags . ("io" "parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "69705ed306be38c9e4dd67d9075ec160ecdb82a4") (source . "git://github.com/Kalimehtar/binary-class") (source_url . "http://github.com/Kalimehtar/binary-class/tree/master"))))))) ("scribble-doc" . #hash((author . "mflatt@racket-lang.org eli@racket-lang.org") (checksum . "12871bb7c7a9e2c842dd5a485ea4112df23a9564") (dependencies . ("racket-index" "mzscheme-doc" "net-doc" "scheme-lib" "draw-doc" "gui-doc" "slideshow-doc" "pict-doc" "typed-racket-doc" "at-exp-lib" "base" "compatibility-lib" "draw-lib" "pict-lib" "sandbox-lib" "slideshow-lib" "scribble-lib" "scribble-text-lib" "racket-doc")) (description . "mflatt@racket-lang.org eli@racket-lang.org") (modules . ()) (name . "scribble-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/scribble-doc.zip") (tags . ()))) ("static-rename-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "static-rename" "doc/static-rename@static-rename-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/static-rename-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/static-rename-doc.txt"))) (checksum . "50f1ff9866a3ef116471eb1a483c1992480dcd45") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "static-rename-lib")) (description . "documentation (no implementation) for “static-rename”") (implies . ()) (last-checked . 1522414684) (last-edit . 1490649800) (last-updated . 1502816455) (modules . ((lib "scribblings/static-rename/main.scrbl"))) (name . "static-rename-doc") (nix-sha256 . "09gzqnlilws5hm7ayg1cc82maz72syxa52p0r89ayazxhw0yfmyx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-static-rename?path=static-rename-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "50f1ff9866a3ef116471eb1a483c1992480dcd45") (source . "git://github.com/lexi-lambda/racket-static-rename?path=static-rename-doc") (source_url . "http://github.com/lexi-lambda/racket-static-rename/tree/master?path=static-rename-doc"))))))) ("schemeunit" . #hash((author . "jay@racket-lang.org") (checksum . "40863a38c853e99b4da1a6f50c4589672193f959") (dependencies . ("base" "rackunit-lib" "rackunit-gui")) (description . "jay@racket-lang.org") (modules . ()) (name . "schemeunit") (source . "https://download.racket-lang.org/releases/6.12/pkgs/schemeunit.zip") (tags . ()))) ("magic-loader" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/magic-loader.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/magic-loader.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/magic-loader.txt"))) (checksum . "e945f4403983b3bbc60a8fce6a403b99eea6cf5d") (checksum-error . #f) (conflicts . ()) (dependencies . ()) (description . "We use this at ThoughtSTEM to help kids get demo code into DrRacket quickly.  I don't recommend using this package directly -- but it could be useful as a demonstration of extending DrRacket.") (implies . ()) (last-checked . 1522414426) (last-edit . 1520971787) (last-updated . 1522356821) (modules . ((lib "magic-loader/tool.rkt"))) (name . "magic-loader") (nix-sha256 . "1wvs1bjsqv3wg13ii22vl4ay0i86668s8ywk8dxv7100328js5z4") (ring . 2) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:stephen@thoughtstem.com . #t) (drracket . #t) (ring:2 . #t) (tools . #t))) (source . "https://github.com/thoughtstem/magic-loader.git") (tags . ("drracket" "tools")) (versions . #hash((default . #hasheq((checksum . "e945f4403983b3bbc60a8fce6a403b99eea6cf5d") (source . "https://github.com/thoughtstem/magic-loader.git") (source_url . "https://github.com/thoughtstem/magic-loader.git"))))))) ("hygienic-reader-extension" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "hygienic-reader-extension" "doc/hygienic-reader-extension@hygienic-reader-extension/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hygienic-reader-extension.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hygienic-reader-extension.txt"))) (checksum . "e84dc0babc99cd6f522dbf49980a8f5007e06530") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "adding hygiene to racket reader extensions") (implies . ()) (last-checked . 1522414418) (last-edit . 1466174297) (last-updated . 1502816131) (modules . ((lib "hygienic-reader-extension/tests/hygienic-quote/lang/reader.rkt") (lib "lang-extension/lang-extension-lang.rkt") (lib "lang-reader/lang-reader-lang.rkt") (lib "hygienic-reader-extension/tests/hygienic-quote/test.rkt") (lib "lang-extension/meta-reader-util.rkt") (lib "hygienic-reader-extension/extend-reader.rkt") (lib "hygienic-reader-extension/scribblings/hygienic-reader-extension.scrbl") (lib "hygienic-reader-extension/tests/hygienic-quote/racket/lang/reader.rkt") (lib "lang-reader/syntax-module-reader/lang/reader.rkt") (lib "lang-reader/lang/reader.rkt") (lib "lang-extension/lang/reader.rkt") (lib "lang-reader/lang-reader.rkt") (lib "lang-reader/syntax-module-reader.rkt") (lib "hygienic-reader-extension/tests/hygienic-quote/racket/test.rkt"))) (name . "hygienic-reader-extension") (nix-sha256 . "1ci4mzlkgasxcrq0375aqhcs8sszbzaiyb08g7dkqvmxw74qjiah") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (lang-extension . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/hygienic-reader-extension") (tags . ("lang-extension")) (versions . #hash((default . #hasheq((checksum . "e84dc0babc99cd6f522dbf49980a8f5007e06530") (source . "git://github.com/AlexKnauth/hygienic-reader-extension") (source_url . "http://github.com/AlexKnauth/hygienic-reader-extension/tree/master"))))))) ("termios" . #hasheq((author . "bprzygoda@gmail.com") (authors . ("bprzygoda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/termios.txt") (success-log . "server/built/install/termios.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/termios.txt"))) (checksum . "b6632c54c587577c0cce86e62a72e9b09c38342e") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "FFI bindings to POSIX terminal interface functions") (implies . ()) (last-checked . 1522414690) (last-edit . 1424731185) (last-updated . 1502816475) (modules . ((lib "termios/defines.rkt") (lib "termios/termios.rkt") (lib "termios/main.rkt") (lib "termios/private/install.rkt"))) (name . "termios") (nix-sha256 . "0i7lyqxclkkk6g1300w6k8gp2fs4h41wybrqxz4mv60l80k2id15") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bprzygoda@gmail.com . #t) (ffi . #t) (linux . #t) (posix . #t) (ring:1 . #t) (termios . #t))) (source . "git://github.com/BartAdv/racket-termios") (tags . ("ffi" "linux" "posix" "termios")) (versions . #hash((default . #hasheq((checksum . "b6632c54c587577c0cce86e62a72e9b09c38342e") (source . "git://github.com/BartAdv/racket-termios") (source_url . "http://github.com/BartAdv/racket-termios/tree/master"))))))) ("sandbox-lib" . #hash((author . "eli@racket-lang.org") (checksum . "6faf43eb89878ff8f359afe826738d0fa846f0c9") (dependencies . ("scheme-lib" "base" "errortrace-lib")) (description . "eli@racket-lang.org") (modules . ()) (name . "sandbox-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/sandbox-lib.zip") (tags . ()))) ("client-cookies" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/client-cookies.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/client-cookies.txt"))) (checksum . "ea699f80c4865c71971a73b4cfc444969a633c6c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "Client cookies jar for net/url and similar libs") (implies . ()) (last-checked . 1522414314) (last-edit . 1391522543) (last-updated . 1502812296) (modules . ((lib "client-cookies/main.rkt") (lib "client-cookies/dev.rkt"))) (name . "client-cookies") (nix-sha256 . "0nd16r7cia0hz8qyhc7rfdw6gfl2yam716y2mqq9id1p9b1sj8bl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:kalimehtar@mail.ru . #t) (net . #t) (ring:1 . #t) (web . #t))) (source . "github://github.com/Kalimehtar/client-cookies/master") (tags . ("net" "web")) (versions . #hash((default . #hasheq((checksum . "ea699f80c4865c71971a73b4cfc444969a633c6c") (source . "github://github.com/Kalimehtar/client-cookies/master") (source_url . "http://github.com/Kalimehtar/client-cookies/tree/master"))))))) ("operational-transformation-lib" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/operational-transformation-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/operational-transformation-lib.txt"))) (checksum . "88b2f0370b945814135cff01fac9c714a5558ab0") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "profile-lib")) (description . "Operational Transformation (OT) for Racket. Just the operational-transformation collect, no demo included.") (implies . ()) (last-checked . 1522414508) (last-edit . 1469237930) (last-updated . 1502816237) (modules . ((lib "operational-transformation/main.rkt") (lib "operational-transformation/diff.rkt") (lib "operational-transformation/text/simple-document.rkt") (lib "operational-transformation/operation.rkt") (lib "operational-transformation/client.rkt") (lib "operational-transformation/server.rkt") (lib "operational-transformation/text.rkt"))) (name . "operational-transformation-lib") (nix-sha256 . "03k215288mlv0bapy5frg80xwvlw54lrns0ffg4x0s0jzl038bxf") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/tonyg/racket-operational-transformation?path=operational-transformation-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "88b2f0370b945814135cff01fac9c714a5558ab0") (source . "git://github.com/tonyg/racket-operational-transformation?path=operational-transformation-lib") (source_url . "http://github.com/tonyg/racket-operational-transformation/tree/master?path=operational-transformation-lib"))))))) ("rmc" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rmc.txt") (test-failure-log . "server/built/test-fail/rmc.txt") (test-success-log . #f))) (checksum . "e11425287cfecb3940f75a25a29f9b74826c2605") (checksum-error . #f) (conflicts . ()) (dependencies . ("pprint" "chk" "base" "rackunit-lib")) (description . "Racket-made C") (implies . ()) (last-checked . 1522414671) (last-edit . 1462316946) (last-updated . 1502816403) (modules . ((lib "rmc/lib.rkt") (lib "rmc/t.rkt") (lib "rmc/h.rkt") (lib "rmc/t/libc.rkt") (lib "rmc/h/libc.rkt") (lib "rmc/t/fac.rkt") (lib "rmc/t/ts.rkt") (lib "rmc/t/lib.rkt") (lib "rmc/h/glfw.rkt") (lib "rmc/main.rkt") (lib "rmc/private/class.rkt"))) (name . "rmc") (nix-sha256 . "0jk1whndmk8cmyb7z0gz91xk5jghs2akpnhq2y19d1bl61y9n0ak") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (c . #t) (dsl . #t) (ffi . #t) (ring:1 . #t) (systems . #t))) (source . "git://github.com/jeapostrophe/rmc") (tags . ("c" "dsl" "ffi" "systems")) (versions . #hash((default . #hasheq((checksum . "e11425287cfecb3940f75a25a29f9b74826c2605") (source . "git://github.com/jeapostrophe/rmc") (source_url . "http://github.com/jeapostrophe/rmc/tree/master"))))))) ("remote-shell-lib" . #hash((author . "mflatt@racket-lang.org") (checksum . "fc393e14919019a462d92c2c5a84968f33bc026d") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "remote-shell-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/remote-shell-lib.zip") (tags . ()))) ("dos" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dos" "doc/dos@dos/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dos.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dos.txt"))) (checksum . "1dc8bd1e54078b03f5203c664da905aa9b6b2ec3") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "htdp-lib" "htdp-lib" "scribble-lib" "racket-doc" "htdp-doc" "rackunit-lib")) (description . "Delimited-continuation-based Operating-system Simulator") (implies . ()) (last-checked . 1522414381) (last-edit . 1411610244) (last-updated . 1513772088) (modules . ((lib "dos/win.rkt") (lib "dos/examples/win-long.rkt") (lib "dos/main.rkt") (lib "dos/os2.rkt") (lib "dos/examples/dos.rkt") (lib "dos/win/big-bang.rkt") (lib "dos/examples/win.rkt") (lib "dos/dos.scrbl") (lib "dos/examples/os2.rkt"))) (name . "dos") (nix-sha256 . "15pzkb4lwgpbv69s8dm3vgqhbbrlx4y7wqi5p20ddxjchjp2pwz9") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (continuation . #t) (games . #t) (os . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/dos") (tags . ("continuation" "games" "os")) (versions . #hash((default . #hasheq((checksum . "1dc8bd1e54078b03f5203c664da905aa9b6b2ec3") (source . "git://github.com/jeapostrophe/dos") (source_url . "http://github.com/jeapostrophe/dos/tree/master"))))))) ("compatibility-lib" . #hash((author . "eli@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org samth@racket-lang.org") (checksum . "6e7c6038296d8c3323cbcc0e33d64bb924a58a5d") (dependencies . ("scheme-lib" "base" "net-lib" "sandbox-lib")) (description . "eli@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org samth@racket-lang.org") (modules . ()) (name . "compatibility-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/compatibility-lib.zip") (tags . ()))) ("htdp-lib" . #hash((author . "matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org") (checksum . "e385292543056ee3a43ad9fe20bffa512f322403") (dependencies . (("base" #:version "6.8.0.2") "compatibility-lib" "draw-lib" ("drracket-plugin-lib" #:version "1.1") "errortrace-lib" "html-lib" "images-gui-lib" "images-lib" "net-lib" "pconvert-lib" "plai-lib" "r5rs-lib" "sandbox-lib" "scheme-lib" "scribble-lib" "slideshow-lib" "snip-lib" "srfi-lite-lib" ("string-constants-lib" #:version "1.13") "typed-racket-lib" "typed-racket-more" "web-server-lib" "wxme-lib" ("gui-lib" #:version "1.7") "deinprogramm-signature" "pict-lib" "racket-index" "at-exp-lib" "rackunit-lib")) (description . "matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org") (modules . ()) (name . "htdp-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/htdp-lib.zip") (tags . ()))) ("SSE" . #hasheq((author . "qxacur@use.startmail.com") (authors . ("qxacur@use.startmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "SSE" "doc/SSE@SSE/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/SSE.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/SSE.txt"))) (checksum . "b03b5cbfea7836a18b31267459a409a23cf5de6e") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Server Sent Events for Racket") (implies . ()) (last-checked . 1522414683) (last-edit . 1519615696) (last-updated . 1519615696) (modules . ((lib "SSE/sse.rkt") (lib "SSE/scribblings/SSE.scrbl") (lib "SSE/main.rkt"))) (name . "SSE") (nix-sha256 . "0gkw4iy1a1l1x23fzsfr7jgzna62n1kghl7klgclsb750v4d54bj") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:qxacur@use.startmail.com . #t) (ring:2 . #t))) (source . "https://github.com/quxo/SSE.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b03b5cbfea7836a18b31267459a409a23cf5de6e") (source . "https://github.com/quxo/SSE.git") (source_url . "https://github.com/quxo/SSE.git"))))))) ("racket-school-mystery-languages" . #hasheq((author . "justinpombrio@cs.brown.edu") (authors . ("justinpombrio@cs.brown.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/racket-school-mystery-languages.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-school-mystery-languages.txt") (test-failure-log . "server/built/test-fail/racket-school-mystery-languages.txt") (test-success-log . #f))) (checksum . "757295f338d9d3937046782f9c910f8e39d42ef8") (checksum-error . #f) (conflicts . ()) (dependencies . ()) (description . "Some labs will have you explore these languages. One syntax, many semantics. (2017)") (implies . ()) (last-checked . 1522414607) (last-edit . 1499403519) (last-updated . 1502816355) (modules . ((lib "RacketSchool/Records2.rkt") (lib "RacketSchool/private/mystery-records.rkt") (lib "RacketSchool/private/mystery-lang.rkt") (lib "RacketSchool/private/basic.rkt") (lib "RacketSchool/Records3.rkt") (lib "RacketSchool/Functions1.rkt") (lib "RacketSchool/RecordsAll.rkt") (lib "RacketSchool/private/testing.rkt") (lib "RacketSchool/private/event-loop.rkt") (lib "RacketSchool/Functions2.rkt") (lib "RacketSchool/private/mystery-variables.rkt") (lib "RacketSchool/private/tests.rkt") (lib "RacketSchool/FunctionsAll.rkt") (lib "RacketSchool/Variables3.rkt") (lib "RacketSchool/Functions3.rkt") (lib "RacketSchool/private/mystery-semantics-records.rkt") (lib "RacketSchool/public/basic.rkt") (lib "RacketSchool/private/mystery-semantics-functions.rkt") (lib "RacketSchool/private/mystery-functions.rkt") (lib "RacketSchool/private/mystery-semantics-variables.rkt") (lib "RacketSchool/VariablesAll.rkt") (lib "RacketSchool/Variables1.rkt") (lib "RacketSchool/private/mystery.rkt") (lib "RacketSchool/Variables2.rkt") (lib "RacketSchool/Records1.rkt"))) (name . "racket-school-mystery-languages") (nix-sha256 . "143jgb0v464wvm88y42d38ydw7d9kniylc8qlj75w4lw23w2w9k9") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:justinpombrio@cs.brown.edu . #t) (ring:1 . #t))) (source . "git://github.com/justinpombrio/RacketSchool") (tags . ()) (versions . #hash((default . #hasheq((checksum . "757295f338d9d3937046782f9c910f8e39d42ef8") (source . "git://github.com/justinpombrio/RacketSchool") (source_url . "http://github.com/justinpombrio/RacketSchool/tree/master"))))))) ("markparam-test" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/markparam-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/markparam-test.txt"))) (checksum . "f6393494334318ef497606001f2e83bab2c8c15d") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.2.900.4") "markparam-lib" "racket-index" "eli-tester")) (description . "a convenience library for continuation marks like parameters") (implies . ()) (last-checked . 1522414428) (last-edit . 1504535546) (last-updated . 1502816164) (modules . ((lib "markparam/tests/main.rkt"))) (name . "markparam-test") (nix-sha256 . "1fj9xn8s5b1n3qz881qibj29dhzbyjgkj2g0yxaav02580qgvxs0") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (continuation-marks . #t) (ring:1 . #t) (utility . #t))) (source . "git://github.com/jeapostrophe/markparam?path=markparam-test") (tags . ("continuation-marks" "utility")) (versions . #hash((default . #hasheq((checksum . "f6393494334318ef497606001f2e83bab2c8c15d") (source . "git://github.com/jeapostrophe/markparam?path=markparam-test") (source_url . "http://github.com/jeapostrophe/markparam/tree/master?path=markparam-test"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("sicp" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/sicp.txt") (docs . (("main" "sicp-manual" "doc/sicp-manual@sicp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sicp.txt") (test-failure-log . "server/built/test-fail/sicp.txt") (test-success-log . #f))) (checksum . "0add3ff174d519abfde4bccf09f4664387c95763") (checksum-error . #f) (conflicts . ()) (dependencies . ("mzscheme" "base" "compatibility-lib" "gui-lib" "scheme-lib" "r5rs-lib" "at-exp-lib" "mzscheme" "scribble-lib" "racket-doc")) (description . "SICP Support for DrRacket") (implies . ()) (last-checked . 1522414678) (last-edit . 1508663348) (last-updated . 1510002181) (modules . ((lib "sicp-pict/primitives.rkt") (lib "sicp-pict/main.rkt") (lib "sicp-pict/sicp-manual.scrbl") (lib "sicp/lang/reader.rkt") (lib "sicp-pict/sicp.rkt") (lib "sicp-pict/painters.rkt") (lib "sicp/main.rkt") (lib "sicp-pict/test.rkt") (lib "sicp-pict2/sicp.rkt"))) (name . "sicp") (nix-sha256 . "1dc833gkd9dk3igcwvb0jk1jgjz8jd1nl9ksba0ip5frqpnc82g3") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:jensaxel@soegaard.net . #t) (ring:1 . #t))) (source . "git://github.com/sicp-lang/sicp") (tags . ()) (versions . #hash((default . #hasheq((checksum . "0add3ff174d519abfde4bccf09f4664387c95763") (source . "git://github.com/sicp-lang/sicp") (source_url . "http://github.com/sicp-lang/sicp/tree/master"))))))) ("pretty-format" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pretty-format.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pretty-format.txt"))) (checksum . "f55f334bd0ac434479ed136e210e8beda07cb556") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.0.0.4") "typed-racket-lib" "rackunit-lib")) (description . "Pretty versions of printf, format, etc. that print according to format strings") (implies . ()) (last-checked . 1522414536) (last-edit . 1519447631) (last-updated . 1519447631) (modules . ((lib "typed/pretty-format.rkt") (lib "pretty-format/main.rkt"))) (name . "pretty-format") (nix-sha256 . "1iaxq4apnlnpia5vbb86zns6a4mzd4wcy5g6ximq8550gjq1gy77") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (io . #t) (printing . #t) (ring:2 . #t))) (source . "https://github.com/AlexKnauth/pretty-format.git") (tags . ("io" "printing")) (versions . #hash((default . #hasheq((checksum . "f55f334bd0ac434479ed136e210e8beda07cb556") (source . "https://github.com/AlexKnauth/pretty-format.git") (source_url . "https://github.com/AlexKnauth/pretty-format.git"))))))) ("openal" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "openal" "doc/openal@openal/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/openal.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/openal.txt"))) (checksum . "50b52525426f4bf2e0c3fd4c2ab4d0c59598e99a") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "FFI for OpenAL") (implies . ()) (last-checked . 1522414507) (last-edit . 1447718757) (last-updated . 1504538990) (modules . ((lib "openal/main.rkt") (lib "openal/path.rkt") (lib "openal/openal.scrbl"))) (name . "openal") (nix-sha256 . "1gl4sag5v5zp44i4rjp5wp4knqnf1icnxw8sxl7x3a2rr6f28srs") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audio . #t) (author:jay.mccarthy@gmail.com . #t) (ffi . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/openal") (tags . ("audio" "ffi")) (versions . #hash((default . #hasheq((checksum . "50b52525426f4bf2e0c3fd4c2ab4d0c59598e99a") (source . "git://github.com/jeapostrophe/openal") (source_url . "http://github.com/jeapostrophe/openal/tree/master"))))))) ("drracket" . #hash((author . "robby@racket-lang.org") (checksum . "5c8ca8ca6a53bda3e6f7593577ecc3da79218146") (dependencies . ("scheme-lib" "data-lib" "compiler-lib" ("base" #:version "6.2.900.15") "planet-lib" "compatibility-lib" ("draw-lib" #:version "1.7") "errortrace-lib" "macro-debugger-text-lib" "parser-tools-lib" "pconvert-lib" "pict-lib" "profile-lib" "sandbox-lib" ("scribble-lib" #:version "1.11") ("snip-lib" #:version "1.2") ("string-constants-lib" #:version "1.17") "typed-racket-lib" "wxme-lib" ("gui-lib" #:version "1.32") ("racket-index" #:version "1.2") "racket-doc" "html-lib" "images-lib" ("icons" #:version "1.2") "typed-racket-more" "trace" ("macro-debugger" #:version "1.1") "net-lib" "tex-table" "htdp-lib" ("drracket-plugin-lib" #:version "1.1") "gui-pkg-manager-lib" "drracket-tool-lib" "drracket-tool-doc" "pict-snip-lib" "option-contract-lib" "syntax-color-lib" "mzscheme-doc" "net-doc" "planet-doc" "compatibility-doc" "string-constants-doc" "draw-doc" "errortrace-doc" "gui-doc" "pict-doc" "profile-doc" "r5rs-doc" "at-exp-lib" "rackunit-lib")) (description . "robby@racket-lang.org") (modules . ()) (name . "drracket") (source . "https://download.racket-lang.org/releases/6.12/pkgs/drracket.zip") (tags . ()))) ("systemd" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "systemd" "doc/systemd@systemd/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/systemd.txt") (test-failure-log . "server/built/test-fail/systemd.txt") (test-success-log . #f))) (checksum . "fd389e3d6369aeae47004deef9d1d93018db7da4") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1" "libuuid" "racket-doc")) (description . "SystemD Support") (implies . ()) (last-checked . 1522414689) (last-edit . 1408365472) (last-updated . 1502816471) (modules . ((lib "systemd/id.scrbl") (lib "systemd/id.rkt") (lib "systemd/daemon.rkt") (lib "systemd/systemd.scrbl") (lib "systemd/daemon.scrbl") (lib "systemd/main.rkt"))) (name . "systemd") (nix-sha256 . "143fzaflys8l48vdq1phqziyy9si57gn2p57ddrkiw1wglfgf7ph") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mordae@anilinux.org . #t) (linux . #t) (ring:1 . #t))) (source . "github://github.com/mordae/racket-systemd/master") (tags . ("linux")) (versions . #hash((default . #hasheq((checksum . "fd389e3d6369aeae47004deef9d1d93018db7da4") (source . "github://github.com/mordae/racket-systemd/master") (source_url . "http://github.com/mordae/racket-systemd/tree/master"))))))) ("turnstile" . #hasheq((author . "alexander@knauth.org stchang@racket-lang.org") (authors . ("alexander@knauth.org" "stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "turnstile" "doc/turnstile@turnstile/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/turnstile.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/turnstile.txt"))) (checksum . "1d424187785a16307cb13877fc20d8a9e1a2606a") (checksum-error . #f) (conflicts . ()) (dependencies . (("racket" #:version "6.7") "base" "lens-lib" "rackunit-lib" "scribble-lib" "sandbox-lib" "racket-doc")) (description . "#lang for implementing typed Racket languages") (implies . ()) (last-checked . 1522414694) (last-edit . 1485397784) (last-updated . 1522173503) (modules . ((lib "turnstile/examples/tests/stlc-tests.rkt") (lib "turnstile/examples/linear/lin+chan.rkt") (lib "turnstile/examples/tests/dep-tests.rkt") (lib "turnstile/examples/stlc+tup.rkt") (lib "macrotypes/examples/tests/rackunit-typechecking.rkt") (lib "macrotypes/examples/stlc+tup.rkt") (lib "macrotypes/examples/fomega.rkt") (lib "turnstile/examples/stlc+reco+var.rkt") (lib "macrotypes/type-constraints.rkt") (lib "macrotypes/examples/exist.rkt") (lib "turnstile/lang/lang/reader.rkt") (lib "turnstile/examples/stlc+reco2.rkt") (lib "macrotypes/examples/sysf.rkt") (lib "turnstile/examples/linear/lin+var.rkt") (lib "turnstile/examples/mlish-do.rkt") (lib "turnstile/examples/fomega-no-reuse.rkt") (lib "turnstile/examples/tests/stlc+union+case.rkt") (lib "turnstile/examples/tests/stlc+rec-iso-tests.rkt") (lib "turnstile/examples/tests/ext-stlc-tests.rkt") (lib "macrotypes/examples/fomega2.rkt") (lib "macrotypes/variance-constraints.rkt") (lib "turnstile/examples/tests/stlc+reco2-tests.rkt") (lib "macrotypes/examples/stlc+rec-iso.rkt") (lib "macrotypes/examples/tests/perf.rkt") (lib "turnstile/examples/exist.rkt") (lib "macrotypes/examples/tests/do-tests.rkt") (lib "turnstile/examples/tests/fomega-no-reuse-tests.rkt") (lib "turnstile/examples/tests/stlc+sub-tests.rkt") (lib "macrotypes/examples/stlc+effect.rkt") (lib "turnstile/examples/tests/stlc+union.rkt") (lib "turnstile/examples/tests/rackunit-typechecking.rkt") (lib "macrotypes/stx-utils.rkt") (lib "macrotypes/examples/stlc+cons.rkt") (lib "turnstile/scribblings/common.rkt") (lib "turnstile/examples/tests/stlc+reco+var-tests.rkt") (lib "macrotypes/examples/perf.rkt") (lib "turnstile/main.rkt") (lib "macrotypes/examples/stlc+box.rkt") (lib "macrotypes/examples/tests/ext-stlc-tests.rkt") (lib "macrotypes/examples/tests/stlc+occurrence-tests.rkt") (lib "macrotypes/examples/stlc+reco+sub.rkt") (lib "turnstile/examples/tests/mlish-tests.rkt") (lib "macrotypes/examples/tests/fomega2-tests.rkt") (lib "turnstile/scribblings/doc-utils.rkt") (lib "macrotypes/examples/tests/fomega3-tests.rkt") (lib "macrotypes/examples/tests/stlc+tup-tests.rkt") (lib "macrotypes/examples/stlc.rkt") (lib "turnstile/examples/stlc+union.rkt") (lib "turnstile/examples/fomega2.rkt") (lib "turnstile/examples/fomega.rkt") (lib "turnstile/examples/tests/tlb-infer-tests.rkt") (lib "macrotypes/examples/tests/sysf-tests.rkt") (lib "turnstile/examples/util/filter-maximal.rkt") (lib "turnstile/examples/tests/linear/lin+cons-tests.rkt") (lib "macrotypes/examples/tests/mlish-tests.rkt") (lib "turnstile/examples/linear/lin+cons.rkt") (lib "macrotypes/examples/tests/stlc+rec-iso-tests.rkt") (lib "macrotypes/examples/tests/stlc+box-tests.rkt") (lib "macrotypes/examples/tests/infer-tests.rkt") (lib "turnstile/examples/tests/rackunit-kindchecking.rkt") (lib "turnstile/scribblings/turnstile.scrbl") (lib "macrotypes/examples/tests/stlc+overloading-tests.rkt") (lib "turnstile/examples/tests/stlc+reco+sub-tests.rkt") (lib "macrotypes/examples/fomega3.rkt") (lib "turnstile/examples/linear/fabul.rkt") (lib "turnstile/examples/sysf.rkt") (lib "macrotypes/examples/tests/exist-tests.rkt") (lib "turnstile/examples/stlc+reco+sub.rkt") (lib "macrotypes/examples/tests/mlish/sweet-map.rkt") (lib "turnstile/rackunit-typechecking.rkt") (lib "turnstile/turnstile.rkt") (lib "macrotypes/examples/stlc+reco+var.rkt") (lib "turnstile/examples/stlc+box.rkt") (lib "macrotypes/examples/tests/perfsysf.rkt") (lib "turnstile/examples/tests/fomega-no-reuse-tests-old.rkt") (lib "macrotypes/typecheck-core.rkt") (lib "turnstile/examples/tests/pat-expander-tests-def.rkt") (lib "macrotypes/examples/tests/rackunit-kindchecking.rkt") (lib "macrotypes/examples/tests/stlc-tests.rkt") (lib "turnstile/examples/tests/fomega2-tests.rkt") (lib "macrotypes/examples/tests/stlc+sub-tests.rkt") (lib "macrotypes/examples/tests/stlc+reco+sub-tests.rkt") (lib "turnstile/examples/tests/linear/lin-tests.rkt") (lib "macrotypes/examples/tests/stlc+cons-tests.rkt") (lib "turnstile/examples/tests/exist-tests.rkt") (lib "turnstile/scribblings/guide.scrbl") (lib "turnstile/scribblings/reference.scrbl") (lib "turnstile/examples/tests/pat-expander-tests.rkt") (lib "turnstile/examples/tests/fomega3-tests.rkt") (lib "turnstile/examples/tests/linear/lin+var-tests.rkt") (lib "macrotypes/examples/tests/stlc+effect-tests.rkt") (lib "turnstile/examples/fomega-no-reuse-old.rkt") (lib "turnstile/examples/stlc-jesse.rkt") (lib "macrotypes/examples/mlish+adhoc.rkt") (lib "turnstile/examples/tests/linear/fabul-tests.rkt") (lib "macrotypes/examples/infer.rkt") (lib "turnstile/quicklang/lang/reader.rkt") (lib "turnstile/examples/tests/fomega-tests.rkt") (lib "turnstile/examples/tests/stlc+cons-tests.rkt") (lib "turnstile/examples/infer.rkt") (lib "macrotypes/examples/stlc+lit.rkt") (lib "macrotypes/examples/tests/stlc+reco+var-tests.rkt") (lib "turnstile/examples/fomega3.rkt") (lib "macrotypes/examples/tests/fomega-tests.rkt") (lib "macrotypes/typecheck.rkt") (lib "macrotypes/examples/stlc+overloading.rkt") (lib "turnstile/examples/dep.rkt") (lib "macrotypes/examples/tests/fsub-tests.rkt") (lib "turnstile/examples/stlc+union+case.rkt") (lib "turnstile/examples/tests/fsub-tests.rkt") (lib "macrotypes/examples/fsub.rkt") (lib "turnstile/examples/tests/mlish/sweet-map.rkt") (lib "macrotypes/examples/tests/general-tests.rkt") (lib "turnstile/lang/reader.rkt") (lib "turnstile/examples/tests/sysf-tests.rkt") (lib "turnstile/mode.rkt") (lib "turnstile/examples/linear/lin.rkt") (lib "turnstile/lang.rkt") (lib "turnstile/examples/tests/stlc+lit-tests.rkt") (lib "turnstile/examples/tests/stlc+tup-tests.rkt") (lib "turnstile/examples/stlc+effect.rkt") (lib "turnstile/examples/stlc+rec-iso.rkt") (lib "macrotypes/examples/tests/stlc+lit-tests.rkt") (lib "turnstile/examples/tests/trivial-test.rkt") (lib "macrotypes/examples/perfsysf.rkt") (lib "turnstile/examples/trivial.rkt") (lib "turnstile/examples/tests/linear/lin+chan-tests.rkt") (lib "turnstile/examples/tests/stlc-jesse-tests.rkt") (lib "turnstile/examples/tests/stlc+effect-tests.rkt") (lib "turnstile/examples/tests/stlc+box-tests.rkt") (lib "turnstile/examples/linear/fabul-utils.rkt") (lib "turnstile/examples/mlish+adhoc.rkt") (lib "turnstile/examples/linear/lin+tup.rkt") (lib "macrotypes/postfix-in.rkt") (lib "macrotypes/examples/stlc+sub.rkt") (lib "turnstile/examples/tests/linear/lin+tup-tests.rkt") (lib "macrotypes/examples/mlish-do.rkt") (lib "turnstile/examples/stlc+sub.rkt") (lib "turnstile/examples/stlc+cons.rkt") (lib "turnstile/examples/ext-stlc.rkt") (lib "turnstile/examples/mlish.rkt") (lib "macrotypes/examples/stlc+occurrence.rkt") (lib "macrotypes/examples/mlish.rkt") (lib "turnstile/examples/stlc+lit.rkt") (lib "turnstile/examples/fsub.rkt") (lib "turnstile/examples/stlc.rkt") (lib "macrotypes/examples/ext-stlc.rkt"))) (name . "turnstile") (nix-sha256 . "0bmms9jhkjqvggsb0czrbs4aw9mp35ryhvnm119lva2cq7q509qa") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (author:stchang@racket-lang.org . #t) (lang . #t) (language . #t) (ring:1 . #t))) (source . "https://bitbucket.org/stchang/macrotypes.git") (tags . ("lang" "language")) (versions . #hash((default . #hasheq((checksum . "1d424187785a16307cb13877fc20d8a9e1a2606a") (source . "https://bitbucket.org/stchang/macrotypes.git") (source_url . "https://bitbucket.org/stchang/macrotypes.git"))))))) ("mischief-dev" . #hasheq((author . "cce@racket-lang.org") (authors . ("cce@racket-lang.org")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (("extract" "mischief" "doc/mischief@mischief-dev/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mischief-dev.txt") (test-failure-log . "server/built/test-fail/mischief-dev.txt") (test-success-log . #f))) (checksum . "c22cea34af35222a329b9905eeba7026840e107e") (checksum-error . #f) (conflicts . ("mischief")) (dependencies . ("base" "compatibility-lib" "macro-debugger" "macro-debugger-text-lib" "pconvert-lib" "sandbox-lib" "scribble-lib" "srfi-lib" "srfi-lite-lib" "compatibility-doc" "data-doc" "racket-doc" "scribble-doc" "racket-index" "rackunit-gui" "rackunit-lib")) (description . "Mischief: A Racketeer's Toolkit [development branch]") (implies . ()) (last-checked . 1522414435) (last-edit . 1365619456) (last-updated . 1502816181) (modules . ((lib "debug/provide.rkt") (lib "debug/racket/lang/reader.rkt") (lib "no-debug/syntax.rkt") (lib "mischief/web.rkt") (lib "mischief/define.rkt") (lib "mischief/parse.rkt") (lib "mischief/scribblings/visitor.scrbl") (lib "mischief/string.rkt") (lib "no-debug/racket.rkt") (lib "mischief/scribblings/debugging.scrbl") (lib "mischief/list.rkt") (lib "mischief/scribblings/transform.scrbl") (lib "mischief/lang/config.rkt") (lib "debug/racket.rkt") (lib "mischief/phrase.rkt") (lib "mischief/lang/reader.rkt") (lib "mischief/match.rkt") (lib "mischief/scribblings/typesetting.scrbl") (lib "mischief/stylish/print.rkt") (lib "mischief/transform.rkt") (lib "mischief/scribblings/modular.scrbl") (lib "no-debug/racket/base.rkt") (lib "mischief/scribblings/debug.scrbl") (lib "debug/mischief.rkt") (lib "mischief/scope.rkt") (lib "mischief/visitor.rkt") (lib "mischief/quotation.rkt") (lib "mischief/place.rkt") (lib "debug/racket/base/lang/reader.rkt") (lib "mischief/scribblings/contract.scrbl") (lib "mischief/scribblings/metaprogramming.scrbl") (lib "mischief/scribblings/for.scrbl") (lib "mischief/require.rkt") (lib "mischief/id-table.rkt") (lib "mischief/private/render-expression.rkt") (lib "no-debug/racket/base/lang/reader.rkt") (lib "mischief/scribblings/no-debug.scrbl") (lib "mischief/stylish/expression.rkt") (lib "mischief/struct.rkt") (lib "mischief/scribblings/fold.scrbl") (lib "mischief/scribblings/dye-pack.scrbl") (lib "mischief/memoize.rkt") (lib "mischief/discrim.rkt") (lib "mischief/scribblings/bindings.scrbl") (lib "mischief/scribblings/stylish.scrbl") (lib "debug/main.rkt") (lib "mischief/scribblings/metaprogramming-simple.scrbl") (lib "mischief/stylish/print-style.rkt") (lib "mischief/scribblings/kernel-syntax.scrbl") (lib "mischief/stylish/format.rkt") (lib "mischief/scribblings/scope.scrbl") (lib "mischief/contract.rkt") (lib "mischief/symbol.rkt") (lib "mischief/main.rkt") (lib "mischief/scribblings/memoize.scrbl") (lib "mischief/scribblings/id-table.scrbl") (lib "mischief/scribblings/metaprogramming-complex.scrbl") (lib "mischief/maybe.rkt") (lib "debug/syntax.rkt") (lib "mischief/dye-pack.rkt") (lib "mischief/kernel-syntax.rkt") (lib "mischief/module.rkt") (lib "mischief/for.rkt") (lib "mischief/stylish/signatures.rkt") (lib "mischief/scribblings/web.scrbl") (lib "mischief/scribblings/metaprogramming-moderate.scrbl") (lib "mischief/dict.rkt") (lib "mischief/scribblings/mischief.scrbl") (lib "mischief/fold.rkt") (lib "mischief/error.rkt") (lib "mischief/scribblings/parse.scrbl") (lib "mischief/stylish/expr-style.rkt") (lib "mischief/stepper.rkt") (lib "debug/low-level.rkt") (lib "mischief/explode.rkt") (lib "mischief/preserve-expensive-metadata.rkt") (lib "mischief/stylish/stylish.rkt") (lib "mischief/sort.rkt") (lib "no-debug/mischief.rkt") (lib "mischief/stream.rkt") (lib "no-debug/main.rkt") (lib "mischief/scribblings/printing.scrbl") (lib "mischief/json.rkt") (lib "mischief/scribblings/higher-order.scrbl") (lib "mischief/shorthand.rkt") (lib "mischief/scribblings/datatypes.scrbl") (lib "mischief/lang/runtime.rkt") (lib "mischief/tests/stylish.rkt") (lib "mischief/scribblings/function.scrbl") (lib "mischief/props/lang/reader.rkt") (lib "mischief/scribblings/examples.scrbl") (lib "debug/racket/base.rkt") (lib "mischief/boolean.rkt") (lib "debug/mischief/lang/reader.rkt") (lib "no-debug/mischief/lang/reader.rkt") (lib "mischief/keyword.rkt") (lib "mischief/private/reify-value.rkt") (lib "no-debug/low-level.rkt") (lib "mischief/function.rkt") (lib "mischief/values.rkt") (lib "mischief/examples.rkt") (lib "no-debug/racket/lang/reader.rkt") (lib "mischief/stylish.rkt"))) (name . "mischief-dev") (nix-sha256 . "10qnv88rl8a69vz67xfxhvamqisfc5287i6kp6x2x9f288c2cfl4") (ring . 2) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:conflicts: . #t) (:docs-error: . #t) (:docs: . #t) (author:cce@racket-lang.org . #t) (data . #t) (debug . #t) (dev . #t) (documentation . #t) (language . #t) (ring:2 . #t) (syntax . #t))) (source . "github://github.com/carl-eastlund/mischief/master") (tags . ("data" "debug" "dev" "documentation" "language" "syntax")) (versions . #hash((default . #hasheq((checksum . "c22cea34af35222a329b9905eeba7026840e107e") (source . "github://github.com/carl-eastlund/mischief/master") (source_url . "http://github.com/carl-eastlund/mischief/tree/master"))))))) ("aws" . #hasheq((author . "greghendershott@gmail.com") (authors . ("greghendershott@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "aws" "doc/aws@aws/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/aws.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/aws.txt"))) (checksum . "9076ed4e4a4c9d8dac9fde0c6a6e3ff4b2469977") (checksum-error . #f) (conflicts . ()) (dependencies . (("racket" "6.0.1") "base" ("http" "0.3") "sha" "rackunit-lib" "at-exp-lib" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Amazon Web Services including S3, SDB, SES, SNS, SQS, CloudWatch, Glacier, Dynamo, and Route 53.") (implies . ()) (last-checked . 1522414288) (last-edit . 1396443660) (last-updated . 1521675726) (modules . ((lib "aws/cw.rkt") (lib "aws/r53.rkt") (lib "aws/sqs.rkt") (lib "aws/s3.rkt") (lib "examples/examples.rkt") (lib "aws/post.rkt") (lib "aws/glacier.rkt") (lib "aws/sns.rkt") (lib "aws/sigv4.rkt") (lib "aws/take.rkt") (lib "aws/xml-path.rkt") (lib "aws/sdb.rkt") (lib "examples/backup.rkt") (lib "aws/pool.rkt") (lib "aws/main.rkt") (lib "aws/dynamo.rkt") (lib "aws/aws.scrbl") (lib "aws/tests/data.rkt") (lib "aws/util.rkt") (lib "aws/ses.rkt") (lib "aws/exn.rkt") (lib "aws/keys.rkt"))) (name . "aws") (nix-sha256 . "0mdb2qml4ibk8q5dj83zljrxxy0z6l95dv2alkc9qf297c7g2nk3") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (AWS . #t) (author:greghendershott@gmail.com . #t) (ring:1 . #t) (web . #t))) (source . "github://github.com/greghendershott/aws/master") (tags . ("AWS" "web")) (versions . #hash((default . #hasheq((checksum . "9076ed4e4a4c9d8dac9fde0c6a6e3ff4b2469977") (source . "github://github.com/greghendershott/aws/master") (source_url . "http://github.com/greghendershott/aws/tree/master"))))))) ("hidapi" . #hasheq((author . "jpathy@lazycons.xyz") (authors . ("jpathy@lazycons.xyz")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "hidapi" "doc/hidapi@hidapi/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hidapi.txt") (test-failure-log . "server/built/test-fail/hidapi.txt") (test-success-log . #f))) (checksum . "91c5e5b8eb7380d3b6031d736e6d8fc9121a7cb0") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "Racket bindings to hidapi library.") (implies . ()) (last-checked . 1522414415) (last-edit . 1508136508) (last-updated . 1508907677) (modules . ((lib "hidapi/main.rkt") (lib "hidapi/scribblings/hidapi.scrbl") (lib "hidapi/private/ffi.rkt"))) (name . "hidapi") (nix-sha256 . "0b310wydvw5kvjxmzd4r15ghhrbwn3hyqckbh25ys8ydjh6zwlpn") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jpathy@lazycons.xyz . #t) (ffi . #t) (hid . #t) (hidapi . #t) (ring:2 . #t) (usb . #t))) (source . "git://github.com/jpathy/hidapi") (tags . ("ffi" "hid" "hidapi" "usb")) (versions . #hash((default . #hasheq((checksum . "91c5e5b8eb7380d3b6031d736e6d8fc9121a7cb0") (source . "git://github.com/jpathy/hidapi") (source_url . "http://github.com/jpathy/hidapi/tree/master"))))))) ("scheme-lib" . #hash((author . "mflatt@racket-lang.org") (checksum . "de670cedc171f3678e59f9d780e6d944d4b6a086") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "scheme-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/scheme-lib.zip") (tags . ()))) ("rackunit-plugin-lib" . #hash((author . "ryanc@racket-lang.org noel@racket-lang.org") (checksum . "a6f23772301c93e9aab4ce6db65de0da4f0d8bda") (dependencies . ("base" "rackunit-lib" "rackunit-gui" "gui-lib" "drracket-plugin-lib")) (description . "ryanc@racket-lang.org noel@racket-lang.org") (modules . ()) (name . "rackunit-plugin-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/rackunit-plugin-lib.zip") (tags . ()))) ("hive-server" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/hive-server.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hive-server.txt") (test-failure-log . "server/built/test-fail/hive-server.txt") (test-success-log . #f))) (checksum . "00bc39cbba9e2c38ddec35c01b7845e6e11c95c3") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "hive-common" "racket-doc")) (description . "Hive: client-server framework. This is server-side package.") (implies . ()) (last-checked . 1522414415) (last-edit . 1466352089) (last-updated . 1502816119) (modules . ((lib "hive/server/session.rkt") (lib "hive/server/users.rkt") (lib "hive/server/commands.rkt") (lib "hive/server/catalog.rkt") (lib "hive/server/make-next.rkt") (lib "hive/server.rkt") (lib "hive/server/file-store.rkt"))) (name . "hive-server") (nix-sha256 . "1bdwlxy06vaqf5gzvd5p5fpj9smr4bs2k1j2jr0vqpfpjkldjhqc") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:kalimehtar@mail.ru . #t) (ring:1 . #t))) (source . "git://github.com/Kalimehtar/hive-server") (tags . ()) (versions . #hash((default . #hasheq((checksum . "00bc39cbba9e2c38ddec35c01b7845e6e11c95c3") (source . "git://github.com/Kalimehtar/hive-server") (source_url . "http://github.com/Kalimehtar/hive-server/tree/master"))))))) ("bencode-codec" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "bencode-codec" "doc/bencode-codec@bencode-codec/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bencode-codec.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bencode-codec.txt"))) (checksum . "cf4161c67e0a6f3f25fa162b9f61a3460b4ce445") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Library for reading and writing Bencoded data.") (implies . ()) (last-checked . 1522414310) (last-edit . 1471272645) (last-updated . 1520538802) (modules . ((lib "bencode-codec/bencode-codec.scrbl") (lib "bencode-codec/test-bencode.rkt") (lib "bencode-codec/dump.rkt") (lib "bencode-codec/bencode.rkt") (lib "bencode-codec/main.rkt"))) (name . "bencode-codec") (nix-sha256 . "0279xv1w5sg148jrpy6a6p4gk0b044k1sjl4iwhcwc85gprc6942") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:tonygarnockjones@gmail.com . #t) (net . #t) (ring:1 . #t))) (source . "git://github.com/tonyg/racket-bencode") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "cf4161c67e0a6f3f25fa162b9f61a3460b4ce445") (source . "git://github.com/tonyg/racket-bencode") (source_url . "http://github.com/tonyg/racket-bencode/tree/master"))))))) ("pcg" . #hasheq((author . "macocio@gmail.com") (authors . ("macocio@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/pcg.txt") (docs . (("main" "pcg" "doc/pcg@pcg/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pcg.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pcg.txt"))) (checksum . "d21dfbcbdacfed12b1c702d24f8c1e4e20824a14") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Permuted congruential generators (PCG) in Racket") (implies . ()) (last-checked . 1522414510) (last-edit . 1514881130) (last-updated . 1514881130) (modules . ((lib "pcg/main.rkt") (lib "pcg/scribblings/pcg.scrbl"))) (name . "pcg") (nix-sha256 . "1b0pwf6m57plphlaqwjij8z4kcb128ypsk2xm23qip6jl1rvbjgf") (ring . 2) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:macocio@gmail.com . #t) (pcg . #t) (random . #t) (ring:2 . #t))) (source . "https://github.com/BourgondAries/pcg.git") (tags . ("pcg" "random")) (versions . #hash((default . #hasheq((checksum . "d21dfbcbdacfed12b1c702d24f8c1e4e20824a14") (source . "https://github.com/BourgondAries/pcg.git") (source_url . "https://github.com/BourgondAries/pcg.git"))))))) ("gregor-test" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gregor-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gregor-test.txt"))) (checksum . "0d7c40c8d6ce6165419564df3b168821c322e3ae") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "gregor-lib" "rackunit-lib")) (description . "Tests for the gregor library") (implies . ()) (last-checked . 1522414406) (last-edit . 1426998261) (last-updated . 1502816091) (modules . ((lib "gregor/tests/datetime.rkt") (lib "gregor/tests/date.rkt") (lib "gregor/tests/format.rkt") (lib "gregor/tests/datetime-provider.rkt") (lib "gregor/tests/parse.rkt") (lib "gregor/tests/period.rkt") (lib "gregor/tests/moment.rkt") (lib "gregor/tests/time.rkt") (lib "gregor/tests/time-arithmetic.rkt") (lib "gregor/tests/time-provider.rkt") (lib "gregor/tests/all-tests.rkt") (lib "gregor/tests/clock.rkt") (lib "gregor/tests/date-provider.rkt") (lib "gregor/tests/moment-provider.rkt") (lib "gregor/tests/date-arithmetic.rkt") (lib "gregor/tests/datetime-arithmetic.rkt") (lib "gregor/tests/query.rkt"))) (name . "gregor-test") (nix-sha256 . "0ha4r1f28xnv52rx99ds9alnwlrl3xl8chs5a6qgnh8l0z2wbvb7") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:zeppieri@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/97jaz/gregor/?path=gregor-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "0d7c40c8d6ce6165419564df3b168821c322e3ae") (source . "git://github.com/97jaz/gregor/?path=gregor-test") (source_url . "git://github.com/97jaz/gregor/?path=gregor-test"))))))) ("gui-lib" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (checksum . "891896fd1cfabdd3329e070209b04f3a149d859a") (dependencies . ("srfi-lite-lib" "data-lib" ("base" #:version "6.11.0.1") "syntax-color-lib" ("draw-lib" #:version "1.13") ("snip-lib" #:version "1.2") "wxme-lib" "pict-lib" "scheme-lib" "scribble-lib" ("string-constants-lib" #:version "1.14") "option-contract-lib" "2d-lib" "compatibility-lib" "tex-table" ("gui-i386-macosx" #:platform "i386-macosx") ("gui-x86_64-macosx" #:platform "x86_64-macosx") ("gui-ppc-macosx" #:platform "ppc-macosx") ("gui-win32-i386" #:platform "win32\\i386") ("gui-win32-x86_64" #:platform "win32\\x86_64") ("gui-x86_64-linux-natipkg" #:platform "x86_64-linux-natipkg") "at-exp-lib" "rackunit-lib")) (description . "mflatt@racket-lang.org robby@racket-lang.org") (modules . ()) (name . "gui-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/gui-lib.zip") (tags . ()))) ("tulip" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tulip.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tulip.txt"))) (checksum . "1613cfd4d7e8dbc8ceb86cf33479375147f42b2f") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "tulip-lib")) (description . "") (implies . ("tulip-lib")) (last-checked . 1522414694) (last-edit . 1466529282) (last-updated . 1502816488) (modules . ()) (name . "tulip") (nix-sha256 . "1lzj7skc9b78cj2k2scp5ydxdgympbrj9jh9w10nld4fycba3rc1") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-tulip?path=tulip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "1613cfd4d7e8dbc8ceb86cf33479375147f42b2f") (source . "git://github.com/lexi-lambda/racket-tulip?path=tulip") (source_url . "http://github.com/lexi-lambda/racket-tulip/tree/master?path=tulip"))))))) ("redex-benchmark" . #hash((author . "robby@racket-lang.org bfetscher@racket-lang.org") (checksum . "d8d6499a5cb6da350cd80398d40d89950e198388") (dependencies . ("base" "compiler-lib" "rackunit-lib" "redex-lib" "redex-examples" "math-lib" "plot-lib")) (description . "robby@racket-lang.org bfetscher@racket-lang.org") (modules . ()) (name . "redex-benchmark") (source . "https://download.racket-lang.org/releases/6.12/pkgs/redex-benchmark.zip") (tags . ()))) ("typed-racket" . #hash((author . "samth@racket-lang.org stamourv@racket-lang.org") (checksum . "11e7ae651558024c0060ebd7292e55646d5558c9") (dependencies . ("typed-racket-lib" "typed-racket-doc")) (description . "samth@racket-lang.org stamourv@racket-lang.org") (modules . ()) (name . "typed-racket") (source . "https://download.racket-lang.org/releases/6.12/pkgs/typed-racket.zip") (tags . ()))) ("livefrog" . #hasheq((author . "ebzzry@ebzzry.io") (authors . ("ebzzry@ebzzry.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/livefrog.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/livefrog.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/livefrog.txt"))) (checksum . "ba9bb8156d9363203ea3454c9b15e3133d043315") (checksum-error . #f) (conflicts . ()) (dependencies . ("sxml" "frog" "find-parent-dir")) (description . "Convert ljdump/ljmigrate files for Frog") (implies . ()) (last-checked . 1522414425) (last-edit . 1506942446) (last-updated . 1502816158) (modules . ((lib "livefrog/utils.rkt") (lib "livefrog/main.rkt") (lib "livefrog/symbols.rkt"))) (name . "livefrog") (nix-sha256 . "0m0sq2z8hhhsg6yb8rpqxcnf1d4wv1s029khaykgzw7zxnsl3p9a") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:ebzzry@ebzzry.io . #t) (blog . #t) (ring:1 . #t) (terminal . #t) (web . #t))) (source . "git://github.com/ebzzry/livefrog") (tags . ("blog" "terminal" "web")) (versions . #hash((default . #hasheq((checksum . "ba9bb8156d9363203ea3454c9b15e3133d043315") (source . "git://github.com/ebzzry/livefrog") (source_url . "http://github.com/ebzzry/livefrog/tree/master"))))))) ("struct-update-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "struct-update" "doc/struct-update@struct-update-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/struct-update-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/struct-update-doc.txt"))) (checksum . "8ce456cde8764ae27c348123ec9e01e76826d536") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "struct-update-lib")) (description . "documentation (no implementation) for “struct-update”") (implies . ()) (last-checked . 1522414685) (last-edit . 1469648494) (last-updated . 1502816459) (modules . ((lib "scribblings/struct-update.scrbl"))) (name . "struct-update-doc") (nix-sha256 . "14bmg0lchqy198wmbx05a8w5rpgk4rqagfg9izyj4dgkii9wrgzh") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/struct-update.git?path=struct-update-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8ce456cde8764ae27c348123ec9e01e76826d536") (source . "git://github.com/lexi-lambda/struct-update.git?path=struct-update-doc") (source_url . "http://github.com/lexi-lambda/struct-update.git/tree/master?path=struct-update-doc"))))))) ("typed-racket-stream" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-racket-stream.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-racket-stream.txt"))) (checksum . "74b0dcf6787d23ef50977134a5d232674e35adf0") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more")) (description . "Streams for typed racket") (implies . ()) (last-checked . 1522414695) (last-edit . 1451845688) (last-updated . 1502816505) (modules . ((lib "typed/racket/stream/stream-cons-thunk-untyped.rkt") (lib "typed/racket/stream/stream-pred.rkt") (lib "typed/racket/stream.rkt") (lib "typed/racket/stream/stream-cons-thunk.rkt") (lib "typed/racket/stream/tests/test-stream.rkt") (lib "typed/racket/stream/stream-cons.rkt"))) (name . "typed-racket-stream") (nix-sha256 . "1hi15nhfdgaqbllniwbhspj8dwqqx6fgxr0cw7p0ypdly9pfhw0b") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (ring:1 . #t) (typed-racket . #t))) (source . "git://github.com/AlexKnauth/typed-racket-stream") (tags . ("typed-racket")) (versions . #hash(("6.2.1" . #hasheq((checksum . "72ba65f2202ff1de973f7aa385f2112074b6387b") (source . "git://github.com/AlexKnauth/typed-racket-stream#for-v-up-to-6.2.1") (source_url . "http://github.com/AlexKnauth/typed-racket-stream/tree/master#for-v-up-to-6.2.1"))) (default . #hasheq((checksum . "74b0dcf6787d23ef50977134a5d232674e35adf0") (source . "git://github.com/AlexKnauth/typed-racket-stream") (source_url . "http://github.com/AlexKnauth/typed-racket-stream/tree/master"))) ("6.2" . #hasheq((checksum . "72ba65f2202ff1de973f7aa385f2112074b6387b") (source . "git://github.com/AlexKnauth/typed-racket-stream#for-v-up-to-6.2.1") (source_url . "http://github.com/AlexKnauth/typed-racket-stream/tree/master#for-v-up-to-6.2.1"))))))) ("mzscheme" . #hash((author . "mflatt@racket-lang.org") (checksum . "9398cb525ce2b95cd805b8dc4d3889b7ae058e50") (dependencies . ("mzscheme-lib" "mzscheme-doc")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "mzscheme") (source . "https://download.racket-lang.org/releases/6.12/pkgs/mzscheme.zip") (tags . ()))) ("hyper-literate" . #hasheq((author . "georges.duperon@gmail.com") (authors . ("georges.duperon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "test.hl" "doc/test.hl@hyper-literate/index.html") ("main" "hyper-literate" "doc/hyper-literate@hyper-literate/index.html") ("main" "test2.hl" "doc/test2.hl@hyper-literate/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hyper-literate.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hyper-literate.txt"))) (checksum . "ae57a0d043fe3030b0c673e85de2641a2b235bee") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "at-exp-lib" "scheme-lib" "scribble-lib" "typed-racket-lib" "typed-racket-more" "typed-racket-doc" "scribble-enhanced" "sexp-diff" "tr-immutable" "typed-map-lib" "debug-scopes" "syntax-color-lib" "scribble-lib" "racket-doc" "rackunit-doc" "scribble-doc" "rackunit-doc")) (description . "Some tools which help build hyper-literate programs. For now, this only contains a few changes from scribble/lp2, including support for typed/racket literate programs.") (implies . ()) (last-checked . 1522414418) (last-edit . 1483289613) (last-updated . 1502816132) (modules . ((lib "hyper-literate/private/lp.rkt") (lib "hyper-literate/test/comments/annotate-syntax.rkt") (lib "hyper-literate/private/no-auto-require.rkt") (lib "hyper-literate/lang/first-line-utils.rkt") (lib "hyper-literate/test/test-doc.rkt") (lib "hyper-literate/comments/syntax-properties.rkt") (lib "hyper-literate/comment-reader.rkt") (lib "hyper-literate/test/test-chunks-order.rkt") (lib "hyper-literate/comments/syntax-properties-typed.rkt") (lib "hyper-literate/comments/hide-comments-typed.rkt") (lib "hyper-literate/test/comments/same-syntax-typed.rkt") (lib "hyper-literate/test/comments/annotate-syntax-typed.rkt") (lib "hyper-literate/spoiler1.rkt") (lib "hyper-literate/private/chunks-toc-prefix.rkt") (lib "hyper-literate/scribblings/diff1-example.hl.rkt") (lib "hyper-literate/comments/restore-comments.rkt") (lib "hyper-literate/lang/meta-first-line.rkt") (lib "hyper-literate/lang/reader.rkt") (lib "hyper-literate/main.rkt") (lib "hyper-literate/test/test2.hl.rkt") (lib "hyper-literate/test/comments/test-comments-round-trip.rkt") (lib "hyper-literate/comments/restore-comments-typed.rkt") (lib "hyper-literate/restore-comments.rkt") (lib "hyper-literate/scribblings/hyper-literate.scrbl") (lib "hyper-literate/comments/hide-comments.rkt") (lib "hyper-literate/lang.rkt") (lib "hyper-literate/test/comments/same-syntax.rkt") (lib "hyper-literate/diff1.rkt") (lib "hyper-literate/private/common.rkt") (lib "hyper-literate/test/test.hl.rkt"))) (name . "hyper-literate") (nix-sha256 . "0l8yb4b6n93pyipj83r02f4brl5b0bpxqrac5nckwdmm45zy0dk9") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:georges.duperon@gmail.com . #t) (documentation . #t) (lang . #t) (language . #t) (literate-programming . #t) (ring:1 . #t))) (source . "https://github.com/jsmaniac/hyper-literate.git") (tags . ("documentation" "lang" "language" "literate-programming")) (versions . #hash(("6.0" . #hasheq((checksum . "ae152d4ab9058a77128cad7c7aab839b99f3f5d9") (source . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4") (source_url . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4"))) ("6.1.1" . #hasheq((checksum . "ae152d4ab9058a77128cad7c7aab839b99f3f5d9") (source . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4") (source_url . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4"))) ("6.3" . #hasheq((checksum . "ae152d4ab9058a77128cad7c7aab839b99f3f5d9") (source . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4") (source_url . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4"))) (default . #hasheq((checksum . "ae57a0d043fe3030b0c673e85de2641a2b235bee") (source . "https://github.com/jsmaniac/hyper-literate.git") (source_url . "https://github.com/jsmaniac/hyper-literate.git"))) ("6.7" . #hasheq((checksum . "ae152d4ab9058a77128cad7c7aab839b99f3f5d9") (source . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4") (source_url . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4"))) ("6.4" . #hasheq((checksum . "ae152d4ab9058a77128cad7c7aab839b99f3f5d9") (source . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4") (source_url . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4"))) ("6.5" . #hasheq((checksum . "ae152d4ab9058a77128cad7c7aab839b99f3f5d9") (source . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4") (source_url . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4"))) ("6.6" . #hasheq((checksum . "ae152d4ab9058a77128cad7c7aab839b99f3f5d9") (source . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4") (source_url . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4"))) ("6.2" . #hasheq((checksum . "ae152d4ab9058a77128cad7c7aab839b99f3f5d9") (source . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4") (source_url . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4"))) ("6.7.0.4" . #hasheq((checksum . "ae152d4ab9058a77128cad7c7aab839b99f3f5d9") (source . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4") (source_url . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4"))) ("6.1" . #hasheq((checksum . "ae152d4ab9058a77128cad7c7aab839b99f3f5d9") (source . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4") (source_url . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4"))))))) ("multimethod" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/multimethod.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/multimethod.txt"))) (checksum . "8a0903ebaedd919971c382eeb785f05080c7a8d6") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "multimethod-lib" "multimethod-doc")) (description . "") (implies . ("multimethod-lib" "multimethod-doc")) (last-checked . 1522414437) (last-edit . 1460257060) (last-updated . 1502816188) (modules . ()) (name . "multimethod") (nix-sha256 . "0jbmvs6q14f58hfi9qvz8g4ndq13ybyy80y375w7455s7y3w3af0") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-multimethod?path=multimethod") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8a0903ebaedd919971c382eeb785f05080c7a8d6") (source . "git://github.com/lexi-lambda/racket-multimethod?path=multimethod") (source_url . "http://github.com/lexi-lambda/racket-multimethod/tree/master?path=multimethod"))))))) ("struct-update-test" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/struct-update-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/struct-update-test.txt"))) (checksum . "8ce456cde8764ae27c348123ec9e01e76826d536") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "rackunit-spec" "struct-update-lib")) (description . "") (implies . ()) (last-checked . 1522414685) (last-edit . 1469648507) (last-updated . 1502816459) (modules . ((lib "tests/struct-update.rkt") (lib "tests/struct-update-super.rkt"))) (name . "struct-update-test") (nix-sha256 . "14bmg0lchqy198wmbx05a8w5rpgk4rqagfg9izyj4dgkii9wrgzh") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/struct-update.git?path=struct-update-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8ce456cde8764ae27c348123ec9e01e76826d536") (source . "git://github.com/lexi-lambda/struct-update.git?path=struct-update-test") (source_url . "http://github.com/lexi-lambda/struct-update.git/tree/master?path=struct-update-test"))))))) ("distro-build-server" . #hash((author . "mflatt@racket-lang.org") (checksum . "fdbb3ccdd41b9a846044e62be0995d6d63b56526") (dependencies . (("base" #:version "6.1.1.6") "distro-build-client" "web-server-lib" "ds-store-lib" "net-lib" "scribble-html-lib" "plt-web-lib" "remote-shell-lib" "at-exp-lib" "rackunit-lib")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "distro-build-server") (source . "https://download.racket-lang.org/releases/6.12/pkgs/distro-build-server.zip") (tags . ()))) ("drbayes" . #hasheq((author . "neil.toronto@gmail.com") (authors . ("neil.toronto@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/drbayes.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "e59eb7c7867118bf4c77ca903e133c7530e612a3") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "math-lib" "images-lib" "plot-gui-lib" "plot-lib" "profile-lib")) (description . "Probabilistic programming language") (implies . ()) (last-checked . 1522414393) (last-edit . 1423766206) (last-updated . 1502815931) (modules . ((lib "drbayes/private/flonum/directed-rounding.rkt") (lib "drbayes/private/search.rkt") (lib "drbayes/direct/exact-semantics/map-arrow.rkt") (lib "drbayes/direct/exact-semantics/fun-arrow.rkt") (lib "drbayes/tests/random-sets/random-set.rkt") (lib "drbayes/direct/types.rkt") (lib "drbayes/tests/random-sets/random-null-set.rkt") (lib "drbayes/private/set/store.rkt") (lib "drbayes/private/bigfloat/symmetric-log.rkt") (lib "drbayes/private/set.rkt") (lib "drbayes/private/set/store-set.rkt") (lib "drbayes/tests/random-sets/random-prob-set.rkt") (lib "drbayes/main.rkt") (lib "drbayes/private/search/search-tree.rkt") (lib "drbayes/private/set/ordered-set.rkt") (lib "drbayes/tests/set-tests/real-set-tests.rkt") (lib "drbayes/private/arrow/pure-lifts/bijection.rkt") (lib "drbayes/private/arrow/pure-lifts.rkt") (lib "drbayes/private/language/macros.rkt") (lib "drbayes/tests/language-tests/normal-normal.rkt") (lib "drbayes/private/arrow/meaning.rkt") (lib "drbayes/direct/exact-semantics/branch-trace.rkt") (lib "drbayes/direct/scratch/store-split.rkt") (lib "drbayes/private/arrow/pure-lifts/rounding-lifts.rkt") (lib "drbayes/private/arrow/pure-lifts/trijection.rkt") (lib "drbayes/private/search/refinement-sample.rkt") (lib "drbayes/direct/exact-semantics/partial-arrows-plus.rkt") (lib "drbayes/tests/real-tests/bijection-tests.rkt") (lib "drbayes/direct/exact-semantics/preimage-mapping.rkt") (lib "drbayes/private/set/integer-set.rkt") (lib "drbayes/private/search/sample.rkt") (lib "drbayes/private/set/types.rkt") (lib "drbayes/private/arrow/prob-arrows.rkt") (lib "drbayes/tests/random-sets/random-symbol-set.rkt") (lib "drbayes/tests/flonum-tests/log-random-tests.rkt") (lib "drbayes/private/arrow/cache.rkt") (lib "drbayes/private/arrow/pure-lifts/predicate-lifts.rkt") (lib "drbayes/tests/real-tests/trijection-tests.rkt") (lib "drbayes/tests/set-tests/set-algebra-properties.rkt") (lib "drbayes/tests/language-tests/ray-tracing.rkt") (lib "drbayes/tests/real-tests/utils.rkt") (lib "drbayes/private/arrow/pure-lifts/make-predicate-lift.rkt") (lib "drbayes/private/search/enumerate.rkt") (lib "drbayes/tests/set-tests/bool-set-tests.rkt") (lib "drbayes/private/arrow/pure-lifts/comparison-lifts.rkt") (lib "drbayes/tests/set-tests/prob-set-tests.rkt") (lib "drbayes/private/arrow/parameters.rkt") (lib "drbayes/private/arrow/pure-lifts/make-real-lift.rkt") (lib "drbayes/tests/set-tests/set-tests.rkt") (lib "drbayes/tests/set-tests/symbol-set-tests.rkt") (lib "drbayes/private/arrow/pure-arrows.rkt") (lib "drbayes/private/arrow/pure-lifts/prob-lifts.rkt") (lib "drbayes/private/arrow.rkt") (lib "drbayes/private/arrow/prob-lifts.rkt") (lib "drbayes/private/set/bool-set.rkt") (lib "drbayes/direct/racket-impl/pre-mapping.rkt") (lib "drbayes/tests/set-tests/null-set-tests.rkt") (lib "drbayes/tests/arrow-tests/real-function-tests.rkt") (lib "drbayes/private/bigfloat/directed-rounding.rkt") (lib "drbayes/private/flonum/probability.rkt") (lib "drbayes/private/search/split.rkt") (lib "drbayes/private/set/bottom.rkt") (lib "drbayes/direct/exact-semantics/tests.rkt") (lib "drbayes/direct/exact-semantics/partial-arrows.rkt") (lib "drbayes/private/search/types.rkt") (lib "drbayes/tests/set-tests/pair-set-tests.rkt") (lib "drbayes/private/set/null-set.rkt") (lib "drbayes/tests/random-sets/random-bool-set.rkt") (lib "drbayes/private/arrow/refine.rkt") (lib "drbayes/private/set/union.rkt") (lib "drbayes/direct/exact-semantics/set-ops.rkt") (lib "drbayes/tests/language-tests/probability-bounds-tests/normal-normal-query.rkt") (lib "drbayes/private/flonum.rkt") (lib "drbayes/tests/language-tests/probability-bounds-tests/normal-normal-cond-query.rkt") (lib "drbayes/private/set/extremal-set.rkt") (lib "drbayes/private/set/value.rkt") (lib "drbayes/private/language/parameterized-expansion.rkt") (lib "drbayes/private/arrow/types.rkt") (lib "drbayes/private/set/real-set.rkt") (lib "drbayes/private/language/functions.rkt") (lib "drbayes/private/arrow/pure-lifts/real-lifts.rkt") (lib "drbayes/direct/exact-semantics/semantic-function.rkt") (lib "drbayes/private/bigfloat.rkt") (lib "drbayes/tests/set-tests/integer-set-tests.rkt") (lib "drbayes/private/set/symbol-set.rkt") (lib "drbayes/private/search/parameters.rkt") (lib "drbayes/direct/racket-impl/pre-star-arrow.rkt") (lib "drbayes/private/set/union-more-ops.rkt") (lib "drbayes/direct/exact-semantics/bot-arrow.rkt") (lib "drbayes/private/flonum/flops.rkt") (lib "drbayes/private/language/drbayes-dispatcher.rkt") (lib "drbayes/direct/racket-impl/set.rkt") (lib "drbayes/tests/set-tests/set-properties.rkt") (lib "drbayes/private/arrow/pure-lifts/equal-lifts.rkt") (lib "drbayes/direct/exact-semantics/mapping.rkt") (lib "drbayes/direct/exact-semantics/pre-arrow.rkt") (lib "drbayes/private/arrow/pure-lifts/tag-lifts.rkt") (lib "drbayes/tests/arrow-tests/arrow-tests.rkt") (lib "drbayes/tests/language-tests/flonum-accuracy/abstract-float.rkt") (lib "drbayes/private/utils.rkt") (lib "drbayes/tests/flonum-tests/symmetric-log-tests.rkt") (lib "drbayes/tests/set-tests/set-lattice-properties.rkt") (lib "drbayes/private/set/parameters.rkt") (lib "drbayes/private/arrow/pure-lifts/make-prob-lift.rkt") (lib "drbayes/tests/language-tests/need-for-strict-if.rkt") (lib "drbayes/private/untyped-utils.rkt") (lib "drbayes/direct/racket-impl/pre-arrow.rkt") (lib "drbayes/private/search/utils.rkt") (lib "drbayes/private/arrow/indexes.rkt") (lib "drbayes/private/arrow/proc-arrow.rkt") (lib "drbayes/direct/untyped-utils.rkt") (lib "drbayes/tests/random-sets/random-real-set.rkt") (lib "drbayes/tests/test-utils.rkt") (lib "drbayes/tests/set-tests/set-membership-properties.rkt") (lib "drbayes/tests/random-sets/random-integer-set.rkt") (lib "drbayes/tests/language-tests/probabilistic-grammar.rkt") (lib "drbayes/private/set/store-index.rkt") (lib "drbayes/tests/set-tests/store-set-tests.rkt") (lib "drbayes/tests/language-tests/tests.rkt") (lib "drbayes/private/search/refinement-search.rkt") (lib "drbayes/private/set/prob-set.rkt") (lib "drbayes/private/language.rkt") (lib "drbayes/tests/random-sets/random-store-set.rkt") (lib "drbayes/tests/language-tests/build-it-break-it/build-it-break-it.rkt") (lib "drbayes/private/flonum/symmetric-log.rkt") (lib "drbayes/tests/language-tests/build-it-break-it/gamma-beta.rkt") (lib "drbayes/private/set/union-ops.rkt") (lib "drbayes/private/flonum/utils.rkt") (lib "drbayes/private/arrow/preimage-mapping.rkt") (lib "drbayes/tests/language-tests/flonum-accuracy/geometric-inv-cdf.rkt"))) (name . "drbayes") (nix-sha256 . "1b9rzs42vsclppg23iw1x1s28l0558ai3v48gs6sh6mqzgzhdfkk") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:neil.toronto@gmail.com . #t) (bayesian . #t) (language . #t) (probability . #t) (ring:1 . #t))) (source . "git://github.com/ntoronto/drbayes") (tags . ("bayesian" "language" "probability")) (versions . #hash((default . #hasheq((checksum . "e59eb7c7867118bf4c77ca903e133c7530e612a3") (source . "git://github.com/ntoronto/drbayes") (source_url . "http://github.com/ntoronto/drbayes/tree/master"))))))) ("neuron" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "neuron" "doc/neuron@neuron/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/neuron.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/neuron.txt"))) (checksum . "f5d906cfd7a8cca905bdf1b0ab745bc781ce0849") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "at-exp-lib" "pict-lib" "racket-doc" "rackunit-lib" "sandbox-lib" "scribble-lib")) (description . "Decentralized Software Organisms") (implies . ()) (last-checked . 1522414505) (last-edit . 1521741728) (last-updated . 1522309953) (modules . ((lib "neuron/scribblings/base.rkt") (lib "neuron/concurrency/process.rkt") (lib "neuron/scribblings/main.scrbl") (lib "neuron/scribblings/reference/control-your-resources.scrbl") (lib "neuron/private/require.rkt") (lib "neuron/data-flow.rkt") (lib "neuron/private/events.rkt") (lib "neuron/scribblings/reference/concurrency.scrbl") (lib "neuron/evaluation.rkt") (lib "neuron/scribblings/reference.scrbl") (lib "neuron/scribblings/reference/data-flow.scrbl") (lib "neuron/main.rkt") (lib "neuron/data-flow/codec.rkt") (lib "neuron/scribblings/reference/evaluation.scrbl") (lib "neuron/scribblings/guide.scrbl") (lib "neuron/concurrency/exchanger.rkt") (lib "neuron/concurrency/ipc.rkt") (lib "neuron/concurrency/control.rkt") (lib "neuron/concurrency.rkt") (lib "neuron/private/syntax.rkt") (lib "neuron/private/ipc.rkt") (lib "neuron/data-flow/network.rkt") (lib "neuron/data-flow/socket.rkt"))) (name . "neuron") (nix-sha256 . "17dqfmhgrd17dd5m8l6pa9pqbh37kiz0jw33y7r8fix9h19srsly") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dedbox@gmail.com . #t) (concurrency . #t) (experimental . #t) (ring:2 . #t) (serialization . #t))) (source . "https://github.com/dedbox/racket-neuron.git") (tags . ("concurrency" "experimental" "serialization")) (versions . #hash((default . #hasheq((checksum . "f5d906cfd7a8cca905bdf1b0ab745bc781ce0849") (source . "https://github.com/dedbox/racket-neuron.git") (source_url . "https://github.com/dedbox/racket-neuron.git"))))))) ("require-typed-check" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "require-typed-check" "doc/require-typed-check@require-typed-check/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/require-typed-check.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/require-typed-check.txt"))) (checksum . "26488b0870e8d5827842e59117e65c2c0f485332") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc" "rackunit-lib" "math-doc" "math-lib" "typed-racket-doc")) (description . "require/typed, but skips contracts on already-typed imports") (implies . ()) (last-checked . 1522414671) (last-edit . 1468765166) (last-updated . 1516774716) (modules . ((lib "require-typed-check/test/basic/main.rkt") (lib "require-typed-check/test/fsm/automata.rkt") (lib "require-typed-check/test/fsm/main.rkt") (lib "require-typed-check/scribblings/require-typed-check.scrbl") (lib "require-typed-check/test/fsm/utilities.rkt") (lib "require-typed-check/test/submodule/main.rkt") (lib "require-typed-check/test/fsm/automata-adapted.rkt") (lib "require-typed-check/test/opaque/untyped.rkt") (lib "require-typed-check/private/test-util.rkt") (lib "require-typed-check/test/bogus/main.rkt") (lib "require-typed-check/test/basic/untyped.rkt") (lib "require-typed-check/test/pr/3.rkt") (lib "require-typed-check/test/fsm/population.rkt") (lib "require-typed-check/test/opaque/main.rkt") (lib "require-typed-check/test/pr/1.rkt") (lib "require-typed-check/test/bogus/typed.rkt") (lib "require-typed-check/test/opaque/typed.rkt") (lib "require-typed-check/test/basic/typed.rkt") (lib "require-typed-check/main.rkt") (lib "require-typed-check/private/require-typed-check.rkt"))) (name . "require-typed-check") (nix-sha256 . "0hra219dvzkiv60szd0rhl2w64cb6fbhf9pnmpbfr2zrd2h1r9n5") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (contracts . #t) (require . #t) (ring:1 . #t) (typed-racket . #t))) (source . "git://github.com/bennn/require-typed-check") (tags . ("contracts" "require" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "26488b0870e8d5827842e59117e65c2c0f485332") (source . "git://github.com/bennn/require-typed-check") (source_url . "http://github.com/bennn/require-typed-check/tree/master"))))))) ("syntax-parse-example" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "syntax-parse-example" "doc/syntax-parse-example@syntax-parse-example/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-parse-example.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-parse-example.txt"))) (checksum . "c88cab995dab7a5e949b555d79460ad4e15962cf") (checksum-error . #f) (conflicts . ()) (dependencies . ("at-exp-lib" "base" "scribble-lib" "rackunit-lib" "scribble-lib" "racket-doc" "rackunit-doc" "rackunit-lib" "scribble-doc")) (description . "Example macros written using syntax/parse") (implies . ()) (last-checked . 1522414689) (last-edit . 1494875077) (last-updated . 1522130014) (modules . ((lib "syntax-parse-example/first-class-or/first-class-or-test.rkt") (lib "syntax-parse-example/def/def.rkt") (lib "syntax-parse-example/let-star/let-star-test.rkt") (lib "syntax-parse-example/let-star/let-star.rkt") (lib "syntax-parse-example/cross-macro-communication/cross-macro-communication-test.rkt") (lib "syntax-parse-example/cross-macro-communication/cross-macro-communication.scrbl") (lib "syntax-parse-example/multi-check-true/multi-check-true.scrbl") (lib "syntax-parse-example/rec-contract/rec-contract.rkt") (lib "syntax-parse-example/index.scrbl") (lib "syntax-parse-example/raco.rkt") (lib "syntax-parse-example/multi-check-true/multi-check-true.rkt") (lib "syntax-parse-example/let-star/let-star.scrbl") (lib "syntax-parse-example/lang/reader.rkt") (lib "syntax-parse-example/define-datum-literal-set/define-datum-literal-set.rkt") (lib "syntax-parse-example/define-datum-literal-set/define-datum-literal-set.scrbl") (lib "syntax-parse-example/first-class-or/first-class-or.scrbl") (lib "syntax-parse-example/conditional-require/conditional-require.scrbl") (lib "syntax-parse-example/conditional-require/conditional-require.rkt") (lib "syntax-parse-example/def/def.scrbl") (lib "syntax-parse-example/first-class-or/first-class-or.rkt") (lib "syntax-parse-example/render.rkt") (lib "syntax-parse-example/cross-macro-communication/cross-macro-communication.rkt") (lib "syntax-parse-example/multi-check-true/multi-check-true-test.rkt") (lib "syntax-parse-example/define-datum-literal-set/define-datum-literal-set-test.rkt") (lib "syntax-parse-example/rec-contract/rec-contract-test.rkt") (lib "syntax-parse-example/rec-contract/rec-contract.scrbl") (lib "syntax-parse-example/def/def-test.rkt") (lib "syntax-parse-example/test.rkt") (lib "syntax-parse-example/conditional-require/conditional-require-test.rkt") (lib "syntax-parse-example/syntax-parse-example.scrbl"))) (name . "syntax-parse-example") (nix-sha256 . "0alciixdag6ifjqn0z5pzb729daa50kb2jwc2v3g9rw6rj8r1fmv") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (macro . #t) (ring:1 . #t) (tutorial . #t))) (source . "git://github.com/bennn/syntax-parse-example") (tags . ("macro" "tutorial")) (versions . #hash((default . #hasheq((checksum . "c88cab995dab7a5e949b555d79460ad4e15962cf") (source . "git://github.com/bennn/syntax-parse-example") (source_url . "http://github.com/bennn/syntax-parse-example/tree/master"))))))) ("git-slice" . #hasheq((author . "samth@ccs.neu.edu mflatt@cs.utah.edu") (authors . ("samth@ccs.neu.edu" "mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/git-slice.txt") (test-failure-log . "server/built/test-fail/git-slice.txt") (test-success-log . #f))) (checksum . "3cebf2259bf2b204f0a94da7c94f1aeac776e4e0") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "remote-shell" "rackunit-lib")) (description . "For slicing git repositories into pieces") (implies . ()) (last-checked . 1522414404) (last-edit . 1408744731) (last-updated . 1519233877) (modules . ((lib "git-slice/git.rkt") (lib "git-slice/chop.rkt") (lib "git-slice/compute.rkt") (lib "git-slice/tests/test.rkt") (lib "git-slice/main.rkt") (lib "git-slice/filter.rkt") (lib "git-slice/prune.rkt") (lib "git-slice/commit.rkt"))) (name . "git-slice") (nix-sha256 . "1mvim3kxwjbhg2nhz4n0yznm2dkwj734my39fs34873in4965n0l") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mflatt@cs.utah.edu . #t) (author:samth@ccs.neu.edu . #t) (git . #t) (ring:1 . #t))) (source . "git://github.com/samth/git-slice") (tags . ("git")) (versions . #hash((default . #hasheq((checksum . "3cebf2259bf2b204f0a94da7c94f1aeac776e4e0") (source . "git://github.com/samth/git-slice") (source_url . "http://github.com/samth/git-slice/tree/master"))))))) ("delimit-app" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "delimit-app" "doc/delimit-app@delimit-app/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/delimit-app.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/delimit-app.txt"))) (checksum . "720c0f95c1c3642b936030fabfb4850ab166d7e2") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.4") "fancy-app" "racket-doc" "scribble-lib" "rackunit-lib")) (description . "An #%app macro that changes meaning based on paren shape") (implies . ()) (last-checked . 1522414379) (last-edit . 1500074416) (last-updated . 1502815891) (modules . ((lib "delimit-app/main.rkt") (lib "delimit-app/main.scrbl") (lib "delimit-app/fancy-app.rkt"))) (name . "delimit-app") (nix-sha256 . "0rk2ji1y341cql0fjcq4z7cmlpa5ynncm7a3vls3blpic8jnkrn9") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (app-syntax . #t) (author:jackhfirth@gmail.com . #t) (ring:1 . #t) (sugar . #t))) (source . "git://github.com/jackfirth/delimit-app") (tags . ("app-syntax" "sugar")) (versions . #hash((default . #hasheq((checksum . "720c0f95c1c3642b936030fabfb4850ab166d7e2") (source . "git://github.com/jackfirth/delimit-app") (source_url . "http://github.com/jackfirth/delimit-app/tree/master"))))))) ("racket-langserver" . #hasheq((author . "theconor4@gmail.com jay.mccarthy@gmail.com") (authors . ("theconor4@gmail.com" "jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-langserver.txt") (test-failure-log . "server/built/test-fail/racket-langserver.txt") (test-success-log . #f))) (checksum . "be0b883e5b2c2a8520d6ca96e05f0a1da5a8a275") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "data-lib" "drracket-tool-lib" "gui-lib" "syntax-color-lib" "chk")) (description . "Language Server Protocol implementation for Racket") (implies . ()) (last-checked . 1522414590) (last-edit . 1518711849) (last-updated . 1520006723) (modules . ((lib "racket-langserver/interfaces.rkt") (lib "racket-langserver/append-message.rkt") (lib "racket-langserver/tests/test-main.rkt") (lib "racket-langserver/check-syntax.rkt") (lib "racket-langserver/json-util.rkt") (lib "racket-langserver/responses.rkt") (lib "racket-langserver/methods.rkt") (lib "racket-langserver/msg-io.rkt") (lib "racket-langserver/symbol-kinds.rkt") (lib "racket-langserver/error-codes.rkt") (lib "racket-langserver/text-document.rkt") (lib "racket-langserver/main.rkt"))) (name . "racket-langserver") (nix-sha256 . "1q8jnlbfzpazq5br3xd7y3kz3ygg9ffdl69xl3hyhk0jpf4ifmf7") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (author:theconor4@gmail.com . #t) (ide . #t) (language-server-protocol . #t) (lsp . #t) (ring:2 . #t))) (source . "https://github.com/jeapostrophe/racket-langserver.git") (tags . ("ide" "language-server-protocol" "lsp")) (versions . #hash((default . #hasheq((checksum . "be0b883e5b2c2a8520d6ca96e05f0a1da5a8a275") (source . "https://github.com/jeapostrophe/racket-langserver.git") (source_url . "https://github.com/jeapostrophe/racket-langserver.git"))))))) ("combinator-parser" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "combinator-parser" "doc/combinator-parser@combinator-parser/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/combinator-parser.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/combinator-parser.txt"))) (checksum . "e64f938862f47f0e8bab8d6f406a8fa6a203e435") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "parser-tools-lib" "compatibility-lib" "scribble-lib" "parser-tools-doc" "racket-doc" "at-exp-lib" "lazy" "scheme-lib")) (description . "A combinator parser library retained for backwards compatibility. Using parser-tools/yacc or ragg instead is recommended.") (implies . ()) (last-checked . 1522414317) (last-edit . 1368287415) (last-updated . 1502812300) (modules . ((lib "combinator-parser/private-combinator/combinator.rkt") (lib "combinator-parser/combinator-unit.rkt") (lib "combinator-parser/main.rkt") (lib "combinator-parser/private-combinator/combinator-parser.rkt") (lib "combinator-parser/private-combinator/parser-sigs.rkt") (lib "combinator-parser/private-combinator/errors.rkt") (lib "combinator-parser/scribblings/combinator-parser.scrbl") (lib "combinator-parser/private-combinator/structs.rkt") (lib "combinator-parser/examples/combinator-example.rkt"))) (name . "combinator-parser") (nix-sha256 . "15iksz88qy40k9zgmv43fjf69lad15vzrrabv6z8daa8anipqky9") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (legacy . #t) (parsing . #t) (ring:1 . #t))) (source . "github://github.com/takikawa/combinator-parser/master") (tags . ("legacy" "parsing")) (versions . #hash((default . #hasheq((checksum . "e64f938862f47f0e8bab8d6f406a8fa6a203e435") (source . "github://github.com/takikawa/combinator-parser/master") (source_url . "http://github.com/takikawa/combinator-parser/tree/master"))))))) ("command-line-ext" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "command-line-ext" "doc/command-line-ext@command-line-ext/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/command-line-ext.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/command-line-ext.txt"))) (checksum . "02525e983bd1b233eab641b942338991f406ae6f") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "fancy-app" "generic-syntax-expanders" "reprovide-lang" "lens" "scribble-lib" "rackunit-lib" "racket-doc")) (description . "Extensible form of command-line with command-line-flag-expanders") (implies . ()) (last-checked . 1522414317) (last-edit . 1500074696) (last-updated . 1502812301) (modules . ((lib "command-line-ext/private/doc-util.rkt") (lib "command-line-ext/private/core-form.scrbl") (lib "command-line-ext/private/library-expanders.rkt") (lib "command-line-ext/private/example-script.rkt") (lib "command-line-ext/private/core-command-line-ext-syntax.rkt") (lib "command-line-ext/main.scrbl") (lib "command-line-ext/main.rkt") (lib "command-line-ext/private/extensible-command-line-ext-syntax.rkt"))) (name . "command-line-ext") (nix-sha256 . "0cd784alf8k58mfsixyy6p7mjxlx3di75m9asnhxr7zckisd67jv") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (experimental . #t) (generic-syntax-expanders . #t) (ring:1 . #t) (terminal . #t))) (source . "git://github.com/jackfirth/command-line-ext") (tags . ("experimental" "generic-syntax-expanders" "terminal")) (versions . #hash((default . #hasheq((checksum . "02525e983bd1b233eab641b942338991f406ae6f") (source . "git://github.com/jackfirth/command-line-ext") (source_url . "http://github.com/jackfirth/command-line-ext/tree/master"))))))) ("drdr" . #hash((author . "jay@racket-lang.org") (authors . ("jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drdr.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drdr.txt"))) (checksum . "b1f4660a3280e0f630134d3e6db9a92c725ee1cb") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "eli-tester" "net-lib" "web-server-lib" "web-server-test" "job-queue-lib" "at-exp-lib" "scheme-lib" "scribble-lib")) (description . "DrDr, Racket's continuous integration system") (implies . ()) (last-checked . 1522414393) (last-edit . 1417307461) (last-updated . 1502815931) (modules . ((lib "drdr/replay.rkt") (lib "drdr/status-analyze.rkt") (lib "drdr/gather-logs.rkt") (lib "drdr/rendering.rkt") (lib "drdr/set-browser.rkt") (lib "drdr/time-file.rkt") (lib "drdr/main.rkt") (lib "drdr/plt-build.rkt") (lib "drdr/make-archive-lib.rkt") (lib "drdr/analyze.rkt") (lib "drdr/notify.rkt") (lib "drdr/replay-log.rkt") (lib "drdr/formats.rkt") (lib "drdr/time-check.rkt") (lib "drdr/cache.rkt") (lib "drdr/metadata.rkt") (lib "drdr/list-count.rkt") (lib "drdr/time.rkt") (lib "drdr/make-archive.rkt") (lib "drdr/monitor-scm.rkt") (lib "drdr/cc.rkt") (lib "drdr/tests/loud.rkt") (lib "drdr/job-queue.rkt") (lib "drdr/path-utils.rkt") (lib "drdr/archive-repair.rkt") (lib "drdr/tests/run-collect.rkt") (lib "drdr/retry.rkt") (lib "drdr/diffcmd.rkt") (lib "drdr/svn.rkt") (lib "drdr/archive.rkt") (lib "drdr/monitor-drdr.rkt") (lib "drdr/rewriting.rkt") (lib "drdr/dirstruct.rkt") (lib "drdr/render.rkt") (lib "drdr/diff.rkt") (lib "drdr/status.rkt") (lib "drdr/sema.rkt") (lib "drdr/scm.rkt") (lib "drdr/archive-test.rkt") (lib "drdr/config.rkt") (lib "drdr/run-collect.rkt"))) (name . "drdr") (nix-sha256 . "12ii9l56czkrrxq75nia9jg8jvv1v0r2bjbg600xs2x6dkks9796") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:jay@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/racket/drdr") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b1f4660a3280e0f630134d3e6db9a92c725ee1cb") (source . "git://github.com/racket/drdr") (source_url . "http://github.com/racket/drdr/tree/master"))))))) ("megaparsack-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/megaparsack-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/megaparsack-lib.txt"))) (checksum . "56cbda3e43c6b54c963a138330a55dcd1fb9b2d7") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.5") "curly-fn-lib" ("functional-lib" #:version "0.6") "match-plus")) (description . "implementation (no documentation) for “megaparsack”") (implies . ()) (last-checked . 1522414434) (last-edit . 1462746781) (last-updated . 1517249847) (modules . ((lib "megaparsack/text.rkt") (lib "megaparsack/main.rkt") (lib "megaparsack/base.rkt") (lib "megaparsack/combinator.rkt"))) (name . "megaparsack-lib") (nix-sha256 . "0d9iylx1q420pk5p0abhwp7zmr7fd8a7kj100rqnfy8dvajlx0g7") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:lexi.lambda@gmail.com . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/megaparsack?path=megaparsack-lib") (tags . ("parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "56cbda3e43c6b54c963a138330a55dcd1fb9b2d7") (source . "git://github.com/lexi-lambda/megaparsack?path=megaparsack-lib") (source_url . "http://github.com/lexi-lambda/megaparsack/tree/master?path=megaparsack-lib"))))))) ("berkeley" . #hasheq((author . "guoguo12@gmail.com") (authors . ("guoguo12@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/berkeley.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "8c9c56d99d9f157a84d94d887143340246da9d73") (checksum-error . #f) (conflicts . ()) (dependencies . ()) (description . "Support library for CS 61AS at UC Berkeley (http://cs61as.org).") (implies . ()) (last-checked . 1522414310) (last-edit . 1445417306) (last-updated . 1453297984) (modules . ((lib "berkeley/main.rkt"))) (name . "berkeley") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:guoguo12@gmail.com . #t) (ring:1 . #t))) (source . "http://inst.eecs.berkeley.edu/~cs61as/library/berkeley.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8c9c56d99d9f157a84d94d887143340246da9d73") (source . "http://inst.eecs.berkeley.edu/~cs61as/library/berkeley.zip") (source_url . "http://inst.eecs.berkeley.edu/~cs61as/library/berkeley.zip"))))))) ("rkt-glfw" . #hasheq((author . "macocio@gmail.com") (authors . ("macocio@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/rkt-glfw.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "6602b4222d7e830c2228ce2efe6500ecc1ed382b") (checksum-error . #f) (conflicts . ()) (dependencies . ()) (description . "GLFW wrapper for Racket") (implies . ()) (last-checked . 1522414671) (last-edit . 1513725836) (last-updated . 1518053173) (modules . ((lib "rkt-glfw/example.rkt") (lib "rkt-glfw/glfw.rkt") (lib "rkt-glfw/glfw-test.rkt"))) (name . "rkt-glfw") (nix-sha256 . "0s98qxfivpjkzslfq598ynv7vsa9ycy43qvkc0f09hnxwqxci3xh") (ring . 2) (search-terms . #hasheq((:build-fail: . #t) (author:macocio@gmail.com . #t) (glfw . #t) (ring:2 . #t))) (source . "https://github.com/BourgondAries/rkt-glfw.git") (tags . ("glfw")) (versions . #hash((default . #hasheq((checksum . "6602b4222d7e830c2228ce2efe6500ecc1ed382b") (source . "https://github.com/BourgondAries/rkt-glfw.git") (source_url . "https://github.com/BourgondAries/rkt-glfw.git"))))))) ("asm" . #hasheq((author . "leo@lwh.jp") (authors . ("leo@lwh.jp")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "asm" "doc/asm@asm/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/asm.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/asm.txt"))) (checksum . "0d507e7ba3a95f9464fad2b0d3b68e059a079abe") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "binutils" "data-lib" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "A multi-platform assembler for Racket (supports x64 and generic instruction sets)") (implies . ()) (last-checked . 1522417871) (last-edit . 1466498787) (last-updated . 1507109326) (modules . ((lib "asm/x86.rkt") (lib "asm/example/ifib.rkt") (lib "asm/scribblings/asm.scrbl") (lib "asm/example/rpn.rkt") (lib "asm/x86/ndisasm.rkt") (lib "asm/x86/immediate.rkt") (lib "asm/generic.rkt") (lib "asm/x86/register.rkt") (lib "asm/main.rkt") (lib "asm/example/fibonacci.rkt") (lib "asm/x86/private/operand.rkt") (lib "asm/scribblings/ffi.scrbl") (lib "asm/generic/generic-asm-sig.rkt") (lib "asm/x86/op.rkt") (lib "asm/generic/generic-x86-unit.rkt") (lib "asm/scribblings/generic.scrbl") (lib "asm/scribblings/assembler.scrbl") (lib "asm/example/rfib.rkt") (lib "asm/ffi.rkt") (lib "asm/x86/private/define-instruction.rkt") (lib "asm/scribblings/x86.scrbl") (lib "asm/x86/private/instruction.rkt") (lib "asm/example/incr.rkt") (lib "asm/base.rkt") (lib "asm/x86/reference.rkt") (lib "asm/private/assembler.rkt") (lib "asm/x86/private/opstr.rkt"))) (name . "asm") (nix-sha256 . "0i8rhjp1libnpiwc7ivqk8lr2c2zrnp6p3wlnj3gx696bxzb348p") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (assembler . #t) (author:leo@lwh.jp . #t) (ffi . #t) (ring:1 . #t) (unstable . #t))) (source . "git://github.com/lwhjp/racket-asm") (tags . ("assembler" "ffi" "unstable")) (versions . #hash((default . #hasheq((checksum . "0d507e7ba3a95f9464fad2b0d3b68e059a079abe") (source . "git://github.com/lwhjp/racket-asm") (source_url . "http://github.com/lwhjp/racket-asm/tree/master"))))))) ("sl2014" . #hasheq((author . "matthias@ccs.neu.edu") (authors . ("matthias@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sl2014" "doc/sl2014@sl2014/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sl2014.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sl2014.txt"))) (checksum . "4ffef910ae5109eef916f3d57aaab95f02981df9") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "htdp-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (last-checked . 1522414679) (last-edit . 1442946714) (last-updated . 1502816431) (modules . ((lib "sl2014/scribblings/sl2014.scrbl") (lib "sl2014/main.rkt"))) (name . "sl2014") (nix-sha256 . "1izfcyvk6iwk42rgiwn67vndkzi3km6w8ncddiivy70k8jjd8hx5") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (author:matthias@ccs.neu.edu . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/mfelleisen/sl2014") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "4ffef910ae5109eef916f3d57aaab95f02981df9") (source . "git://github.com/mfelleisen/sl2014") (source_url . "http://github.com/mfelleisen/sl2014/tree/master"))))))) ("unix-socket-test" . #hash((author . "ryanc@racket-lang.org") (checksum . "95c4843cc089c0ba4d14da614cfce5ff7d8584e6") (dependencies . ("base" "rackunit-lib" ("unix-socket-lib" #:version "1.2"))) (description . "ryanc@racket-lang.org") (modules . ()) (name . "unix-socket-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/unix-socket-test.zip") (tags . ()))) ("rfc3339-old" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rfc3339-old" "doc/rfc3339-old@rfc3339-old/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rfc3339-old.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rfc3339-old.txt"))) (checksum . "4f52cf57d9905cbf8683f1aa25a23ba8d4ecc004") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "overeasy")) (description . "RFC 3339 Timestamps") (implies . ()) (last-checked . 1522414671) (last-edit . 1456803335) (last-updated . 1502816401) (modules . ((lib "rfc3339-old/rfc3339-old.scrbl") (lib "rfc3339-old/main.rkt"))) (name . "rfc3339-old") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:neil@neilvandyke.org . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/rfc3339-old.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4f52cf57d9905cbf8683f1aa25a23ba8d4ecc004") (source . "http://www.neilvandyke.org/racket/rfc3339-old.zip") (source_url . "http://www.neilvandyke.org/racket/rfc3339-old.zip"))))))) ("tesira" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "tesira" "doc/tesira@tesira/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tesira.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tesira.txt"))) (checksum . "47ae8cd92ad3b2610a3f95db9ba3e16db6b24d48") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "typed-racket-lib" "parser-tools-lib" "typed-racket-more" "mordae" "racket-doc" "typed-racket-doc" "typed-racket-lib")) (description . "Biamp Tesira Client Library") (implies . ()) (last-checked . 1522414690) (last-edit . 1439289370) (last-updated . 1502816476) (modules . ((lib "tesira/main.rkt") (lib "tesira/telnet.rkt") (lib "tesira/util.scrbl") (lib "tesira/encoding.rkt") (lib "tesira/mixer.rkt") (lib "tesira/private/encoding.rkt") (lib "tesira/util.rkt") (lib "tesira/tesira.scrbl"))) (name . "tesira") (nix-sha256 . "189crg5zndkmf48yqlic3z0afpvab3j7ii50n541k1fx1iyr7gp5") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mordae@anilinux.org . #t) (net . #t) (ring:1 . #t))) (source . "git://github.com/mordae/racket-tesira") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "47ae8cd92ad3b2610a3f95db9ba3e16db6b24d48") (source . "git://github.com/mordae/racket-tesira") (source_url . "http://github.com/mordae/racket-tesira/tree/master"))))))) ("envy" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "envy" "doc/envy@envy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/envy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/envy.txt"))) (checksum . "0adfe762ea5ee9237ec67e15b1880a8767060ffb") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "sweet-exp-lib" "threading" "typed-racket-lib" "racket-doc" "scribble-lib" "sweet-exp" "typed-racket-doc" "typed-racket-more")) (description . "an environment variable manager for applications") (implies . ("typed-racket-lib")) (last-checked . 1522414398) (last-edit . 1440904426) (last-updated . 1502815954) (modules . ((lib "envy/s-exp/lang/reader.rkt") (lib "envy/main.rkt") (lib "envy/private/coerce.rkt") (lib "envy/scribblings/lang-envy-sexp.scrbl") (lib "envy/environment.rkt") (lib "envy/scribblings/api-reference.scrbl") (lib "envy/scribblings/lang-envy.scrbl") (lib "envy/scribblings/envy.scrbl") (lib "envy/s-exp/lang/language.rkt") (lib "envy/lang/reader.rkt") (lib "tests/envy/environment.rkt") (lib "envy/scribblings/util.rkt"))) (name . "envy") (nix-sha256 . "0syyswjvs7k2h44kynizlwpnx49109x2vlwgm2bpbr0mnrv9ny0p") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/envy") (tags . ()) (versions . #hash(("6.2.1" . #hasheq((checksum . "1220a9678bc78daa496427ed406c183837cc0765") (source . "git://github.com/lexi-lambda/envy#v6.2") (source_url . "http://github.com/lexi-lambda/envy/tree/master#v6.2"))) (default . #hasheq((checksum . "0adfe762ea5ee9237ec67e15b1880a8767060ffb") (source . "git://github.com/lexi-lambda/envy") (source_url . "http://github.com/lexi-lambda/envy/tree/master"))) ("6.2" . #hasheq((checksum . "1220a9678bc78daa496427ed406c183837cc0765") (source . "git://github.com/lexi-lambda/envy#v6.2") (source_url . "http://github.com/lexi-lambda/envy/tree/master#v6.2"))))))) ("functional-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "functional" "doc/functional@functional-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/functional-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/functional-doc.txt"))) (checksum . "c73fcb6ffb59c6bd43a70f3ff3a8af6a42459003") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "collections-doc" "collections-lib" "functional-lib" "racket-doc" "scribble-lib")) (description . "documentation (no implementation) for “functional”") (implies . ()) (last-checked . 1522414402) (last-edit . 1475260504) (last-updated . 1512356809) (modules . ((lib "scribblings/data/functional.scrbl"))) (name . "functional-doc") (nix-sha256 . "11vycbvscpzcblvf8kvs6qklnxjnkrcbcfdj21fk6m017wk3wis3") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (functional . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/functional?path=functional-doc") (tags . ("functional")) (versions . #hash(("6.2.1" . #hasheq((checksum . "6709e8525aad5420d0bb3f0dc5dce5acb9bd9f3f") (source . "git://github.com/lexi-lambda/functional?path=functional-doc#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/functional/tree/master?path=functional-doc#version-exception--6.2"))) (default . #hasheq((checksum . "c73fcb6ffb59c6bd43a70f3ff3a8af6a42459003") (source . "git://github.com/lexi-lambda/functional?path=functional-doc") (source_url . "http://github.com/lexi-lambda/functional/tree/master?path=functional-doc"))) ("6.2" . #hasheq((checksum . "6709e8525aad5420d0bb3f0dc5dce5acb9bd9f3f") (source . "git://github.com/lexi-lambda/functional?path=functional-doc#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/functional/tree/master?path=functional-doc#version-exception--6.2"))))))) ("planet" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (checksum . "21bf70042a2fada81039eff4ea312051d2bc80ad") (dependencies . ("planet-lib" "planet-doc")) (description . "mflatt@racket-lang.org robby@racket-lang.org") (modules . ()) (name . "planet") (source . "https://download.racket-lang.org/releases/6.12/pkgs/planet.zip") (tags . ()))) ("doc-coverage" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "doc-coverage" "doc/doc-coverage@doc-coverage/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/doc-coverage.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/doc-coverage.txt"))) (checksum . "bd0225943d528bb4309ede013c3cca50fe2ca5bf") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.3") "racket-index" "rackunit-lib" "reprovide-lang" "scribble-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A package for inspecting and testing a module's documentation of its provided bindings") (implies . ()) (last-checked . 1522414381) (last-edit . 1505788731) (last-updated . 1505788731) (modules . ((lib "doc-coverage/private/export-tests.rkt") (lib "doc-coverage/private/main.rkt") (lib "doc-coverage/scribblings/main.scrbl") (lib "doc-coverage/private/export-count.rkt") (lib "doc-coverage/private/export-lists.rkt") (lib "doc-coverage/main.rkt") (lib "doc-coverage/private/raco.rkt") (lib "doc-coverage/tests/main.rkt"))) (name . "doc-coverage") (nix-sha256 . "0vgjpgjdxlx3mnfr7yvhz4zakg79bf0j7x8b7nl20gg51ifqgncx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (reflection . #t) (ring:1 . #t) (scribble . #t) (testing . #t))) (source . "git://github.com/jackfirth/doc-coverage?path=doc-coverage") (tags . ("reflection" "scribble" "testing")) (versions . #hash((default . #hasheq((checksum . "bd0225943d528bb4309ede013c3cca50fe2ca5bf") (source . "git://github.com/jackfirth/doc-coverage?path=doc-coverage") (source_url . "http://github.com/jackfirth/doc-coverage/tree/master?path=doc-coverage"))))))) ("irc" . #hasheq((author . "schuster@ccs.neu.edu") (authors . ("schuster@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "irc" "doc/irc@irc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/irc.txt") (test-failure-log . "server/built/test-fail/irc.txt") (test-success-log . #f))) (checksum . "6eb2645cf52c191c3bb46c8391f9150ae307af5a") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "An IRC client library.") (implies . ()) (last-checked . 1522414421) (last-edit . 1495646361) (last-updated . 1502816140) (modules . ((lib "irc/irc.scrbl") (lib "irc/examples/echobot.rkt") (lib "irc/examples/disconnect-test.rkt") (lib "irc/ctcp.rkt") (lib "irc/private/numeric-replies.rkt") (lib "irc/main.rkt"))) (name . "irc") (nix-sha256 . "1iwgsfkqiwm96dq96pbklxn5zkh8qfr54q6hlcawbn31w6cz69mg") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:schuster@ccs.neu.edu . #t) (irc . #t) (net . #t) (ring:1 . #t))) (source . "git://github.com/schuster/racket-irc") (tags . ("irc" "net")) (versions . #hash((default . #hasheq((checksum . "6eb2645cf52c191c3bb46c8391f9150ae307af5a") (source . "git://github.com/schuster/racket-irc") (source_url . "http://github.com/schuster/racket-irc/tree/master"))))))) ("tasks" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "tasks" "doc/tasks@tasks/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tasks.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tasks.txt"))) (checksum . "2d2e1e096fec61da49531a86421d7e7eb4a9f3df") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "Sugar for sync.") (implies . ()) (last-checked . 1522414690) (last-edit . 1385477023) (last-updated . 1502816473) (modules . ((lib "tasks/main.rkt") (lib "tasks/tasks.scrbl"))) (name . "tasks") (nix-sha256 . "16k9b21nazyag1jqsdix4jwx89kczkl1vr5x7cvi6jv5a9k4w626") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t))) (source . "github://github.com/mordae/racket-tasks/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "2d2e1e096fec61da49531a86421d7e7eb4a9f3df") (source . "github://github.com/mordae/racket-tasks/master") (source_url . "http://github.com/mordae/racket-tasks/tree/master"))))))) ("csc104" . #hasheq((author . "gfb@cs.toronto.edu") (authors . ("gfb@cs.toronto.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/csc104.txt") (docs . (("main" "csc104" "doc/csc104@csc104/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/csc104.txt") (test-failure-log . "server/built/test-fail/csc104.txt") (test-success-log . #f))) (checksum . "b92f81cea316da3b8e799784ceab56005e98f461") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.7.0.900"))) (description . "Language for University of Toronto course CSC104.") (implies . ()) (last-checked . 1522414369) (last-edit . 1504843628) (last-updated . 1504843628) (modules . ((lib "csc104/private/boxed-highlight/cond-star.rkt") (lib "csc104/private/contract.rkt") (lib "csc104/interpreter/layout.rkt") (lib "csc104/private/boxed-highlight/class.rkt") (lib "csc104/private/comments-tool.rkt") (lib "csc104/private/htdp-stepper-debugger.rkt") (lib "csc104/private/repl-link-tool.rkt") (lib "csc104/functions.rkt") (lib "csc104/image.rkt") (lib "csc104/private/boxed-highlight/define.rkt") (lib "csc104/private/match.rkt") (lib "csc104/private/sexp.rkt") (lib "csc104/private/class.rkt") (lib "csc104/private/collections.rkt") (lib "csc104/eval.rkt") (lib "csc104/universe.rkt") (lib "csc104/private/rewrite-error-message.rkt") (lib "csc104/interpreter/value.rkt") (lib "csc104/private/compatibility.rkt") (lib "csc104/private/boxed-highlight/tool.rkt") (lib "csc104/private/false.rkt") (lib "csc104/scribblings/eval.rkt") (lib "csc104/forms.rkt") (lib "csc104/private/keybindings-tool.rkt") (lib "csc104/private/boxed-highlight/gui.rkt") (lib "csc104/private/print-hook.rkt") (lib "csc104/private/space-out.rkt") (lib "csc104/interpreter/step.rkt") (lib "csc104/private/installer.rkt") (lib "csc104/private/keybinding.rkt") (lib "csc104/private/boxed-highlight/for.rkt") (lib "csc104/private/run-teaching-program.rkt") (lib "csc104/private/boxed-highlight/values.rkt") (lib "csc104/private/boxed-highlight/struct.rkt") (lib "csc104/scribblings/docs.scrbl") (lib "csc104/langs.rkt") (lib "csc104/private/gui.rkt") (lib "csc104/private/boxed-highlight/range-rectangle.rkt") (lib "csc104/private/common.rkt") (lib "csc104/2017-fall-reader.rkt") (lib "csc104/private/buttons-tool.rkt") (lib "csc104/interpreter/test.rkt") (lib "csc104/private/collapse-tools/tool.rkt") (lib "csc104/without-gui.rkt") (lib "csc104/private/test-display.rkt") (lib "csc104/2017-fall.rkt") (lib "csc104/private/structs.rkt"))) (name . "csc104") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:gfb@cs.toronto.edu . #t) (ring:1 . #t))) (source . "http://www.cs.toronto.edu/~gfb/heap/csc104.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b92f81cea316da3b8e799784ceab56005e98f461") (source . "http://www.cs.toronto.edu/~gfb/heap/csc104.zip") (source_url . "http://www.cs.toronto.edu/~gfb/heap/csc104.zip"))))))) ("gui-pkg-manager-doc" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (authors . ("mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gui-pkg-manager" "doc/gui-pkg-manager@gui-pkg-manager-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gui-pkg-manager-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gui-pkg-manager-doc.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "documentation part of \"gui-pkg-manager\"") (implies . ()) (last-checked . 1522414410) (last-edit . 1417659583) (last-updated . 1502816101) (modules . ((lib "pkg/gui/scribblings/gui-pkg-manager.scrbl"))) (name . "gui-pkg-manager-doc") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ()) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) (default . #hasheq((checksum . "5150d3e8bcb857696942274798ac37d36e7e249f") (source . "git://github.com/racket/gui-pkg-manager/?path=gui-pkg-manager-doc") (source_url . "git://github.com/racket/gui-pkg-manager/?path=gui-pkg-manager-doc"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("redex-test" . #hash((author . "robby@racket-lang.org bfetscher@racket-lang.org") (checksum . "91adbd43f82de307f793bbf8fe14d784e6f7d6d6") (dependencies . ("base" "rackunit-lib" "at-exp-lib" "compatibility-lib" "drracket" "gui-lib" "pict-lib" "redex-gui-lib" "redex-examples" "data-enumerate-lib" "data-lib" "racket-index" "scheme-lib" "slideshow-lib")) (description . "robby@racket-lang.org bfetscher@racket-lang.org") (modules . ()) (name . "redex-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/redex-test.zip") (tags . ()))) ("continued-fractions" . #hasheq((author . "deren.dohoda@gmail.com") (authors . ("deren.dohoda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cf-manual" "doc/cf-manual@continued-fractions/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/continued-fractions.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/continued-fractions.txt"))) (checksum . "1b64abbd6adcaf781c7873a8489bbeff87cbaa56") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "math-lib" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Exact computer arithmetic and base conversion via continued fractions.") (implies . ()) (last-checked . 1522414366) (last-edit . 1455368395) (last-updated . 1502815866) (modules . ((lib "continued-fractions/private/consumer-emitters.rkt") (lib "continued-fractions/bases.rkt") (lib "continued-fractions/cf-bases.scrbl") (lib "continued-fractions/private/simple-matrix.rkt") (lib "continued-fractions/main.rkt") (lib "continued-fractions/cf-manual.scrbl") (lib "continued-fractions/private/continued-fractions.rkt") (lib "continued-fractions/private/general-continued-fractions.rkt") (lib "continued-fractions/cf-create.scrbl") (lib "continued-fractions/private/arithmetic.rkt") (lib "continued-fractions/private/sequence-utils.rkt") (lib "continued-fractions/create.rkt"))) (name . "continued-fractions") (nix-sha256 . "03rd2jj45kpsadcgrxyjx3b3np34s035lb417cnjm3i5df5hkc8m") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:deren.dohoda@gmail.com . #t) (exact-arithmetic . #t) (ring:1 . #t))) (source . "https://derend@bitbucket.org/derend/continued-fractions.git") (tags . ("exact-arithmetic")) (versions . #hash((default . #hasheq((checksum . "1b64abbd6adcaf781c7873a8489bbeff87cbaa56") (source . "https://derend@bitbucket.org/derend/continued-fractions.git") (source_url . "https://derend@bitbucket.org/derend/continued-fractions.git"))))))) ("pdf-read" . #hasheq((author . "gcr@sneakygcr.net") (authors . ("gcr@sneakygcr.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pdf-read" "doc/pdf-read@pdf-read/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pdf-read.txt") (test-failure-log . "server/built/test-fail/pdf-read.txt") (test-success-log . #f))) (checksum . "088f8831864625b04c93dc5a52b927625400804e") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "gui-lib" "draw-lib" "slideshow-lib" "scribble-lib" "racket-doc" "pict-doc" "draw-doc")) (description . "PDF reading library. Read PDF documents into picts and bitmap%s. You can also gather text and layout information. Requires liboppler.") (implies . ()) (last-checked . 1522414511) (last-edit . 1391289735) (last-updated . 1502816245) (modules . ((lib "pdf-read/main.rkt") (lib "pdf-read/pdf-read.scrbl") (lib "pdf-read/ffi.rkt"))) (name . "pdf-read") (nix-sha256 . "0gppfa0qmaisj9k5bzjmaw1f33anfq25azwv18z0brz9q1nr7ixp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:gcr@sneakygcr.net . #t) (documents . #t) (graphics . #t) (io . #t) (media . #t) (pdf . #t) (ring:1 . #t))) (source . "git://github.com/gcr/pdf-read/") (tags . ("documents" "graphics" "io" "media" "pdf")) (versions . #hash((default . #hasheq((checksum . "088f8831864625b04c93dc5a52b927625400804e") (source . "git://github.com/gcr/pdf-read/") (source_url . "git://github.com/gcr/pdf-read/"))))))) ("slack-api" . #hasheq((author . "octotep@sdf.org") (authors . ("octotep@sdf.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/slack-api.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/slack-api.txt"))) (checksum . "af5e363e0aefbf05c4448ea82d8aef714c30ee78") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rfc6455")) (description . "Racket bindings for the Slack API") (implies . ()) (last-checked . 1522414679) (last-edit . 1461724096) (last-updated . 1502816431) (modules . ((lib "slack-api/main.rkt") (lib "slack-api/rtm.rkt") (lib "slack-api/webapi.rkt"))) (name . "slack-api") (nix-sha256 . "11sk22gskj1izn1fyxkjnc2vjw2sl4d7hg7hd2711d0jkn7j3krv") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (api . #t) (author:octotep@sdf.org . #t) (http . #t) (ring:1 . #t))) (source . "git://github.com/octotep/racket-slack-api.git") (tags . ("api" "http")) (versions . #hash((default . #hasheq((checksum . "af5e363e0aefbf05c4448ea82d8aef714c30ee78") (source . "git://github.com/octotep/racket-slack-api.git") (source_url . "http://github.com/octotep/racket-slack-api.git/tree/master"))))))) ("wort" . #hasheq((author . "gamecodeshark@gmail.com") (authors . ("gamecodeshark@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "wort" "doc/wort@wort/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/wort.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/wort.txt"))) (checksum . "d959ea32dcd1158af20db32c8e996149fa056820") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "brag" "beautiful-racket" "beautiful-racket-lib" "br-parser-tools-lib" "scribble-lib" "racket-doc")) (description . "A tiny concatenative language with polymorphic type inference") (implies . ()) (last-checked . 1522414702) (last-edit . 1492475159) (last-updated . 1502816529) (modules . ((lib "wort/eval.rkt") (lib "wort/scribblings/wort.scrbl") (lib "wort/examples/sum.rkt") (lib "wort/main.rkt") (lib "wort/examples/scope.rkt") (lib "wort/examples/shuffles.rkt") (lib "wort/tokenizer.rkt") (lib "wort/examples/higher-order.rkt") (lib "wort/examples/simple.rkt") (lib "wort/lexer.rkt") (lib "wort/expander.rkt") (lib "wort/parser.rkt") (lib "wort/ast.rkt") (lib "wort/infer.rkt"))) (name . "wort") (nix-sha256 . "0qm54gh3asnnrhsk8sc12hj23c0a3rajm94f1b8lwgcy70z3bp28") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:gamecodeshark@gmail.com . #t) (inference . #t) (lang . #t) (ring:1 . #t) (types . #t) (unification . #t))) (source . "git://github.com/robertkleffner/wort") (tags . ("inference" "lang" "types" "unification")) (versions . #hash((default . #hasheq((checksum . "d959ea32dcd1158af20db32c8e996149fa056820") (source . "git://github.com/robertkleffner/wort") (source_url . "http://github.com/robertkleffner/wort/tree/master"))))))) ("distributed-places" . #hash((author . "tewk@racket-lang.org") (checksum . "ededcefd72018d44379942cff2d1b53f19141a68") (dependencies . ("distributed-places-lib" "distributed-places-doc")) (description . "tewk@racket-lang.org") (modules . ()) (name . "distributed-places") (source . "https://download.racket-lang.org/releases/6.12/pkgs/distributed-places.zip") (tags . ()))) ("distributed-places-test" . #hash((author . "tewk@racket-lang.org") (authors . ("tewk@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/distributed-places-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/distributed-places-test.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . ("distributed-places-lib" "base")) (description . "tests for of \"distributed-places\"") (implies . ()) (last-checked . 1522414380) (last-edit . 1417659583) (last-updated . 1502815903) (modules . ((lib "distributed-places-test/test/racket/place/distributed/restarter.rkt") (lib "distributed-places-test/test/racket/place/distributed/tuple.rkt") (lib "distributed-places-test/test/racket/place/distributed/distributed.rkt") (lib "distributed-places-test/test/racket/place/distributed/bank.rkt"))) (name . "distributed-places-test") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:tewk@racket-lang.org . #t) (main-tests . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-tests")) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) (default . #hasheq((checksum . "7aea0f4329895638bac14c78c52de191827ed426") (source . "git://github.com/racket/distributed-places/?path=distributed-places-test") (source_url . "git://github.com/racket/distributed-places/?path=distributed-places-test"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("lti-freq-domain-toolbox" . #hasheq((author . "iastefan@outlook.com") (authors . ("iastefan@outlook.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lti-freq-domain-toolbox.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lti-freq-domain-toolbox.txt"))) (checksum . "955e4d40f46766f55750c99356b427327d4df5de") (checksum-error . #f) (conflicts . ()) (dependencies . ("plot-lib" "base" "math-lib" "plot-gui-lib")) (description . "Functions for dealing with lti dynamical systems in the frequency domain") (implies . ()) (last-checked . 1522414425) (last-edit . 1432138496) (last-updated . 1502816159) (modules . ((lib "lti-freq-domain-toolbox/functions.rkt") (lib "lti-freq-domain-toolbox/main.rkt") (lib "lti-freq-domain-toolbox/symbolic_algebra.rkt") (lib "lti-freq-domain-toolbox/arithmetic_analysis.rkt") (lib "lti-freq-domain-toolbox/lib.rkt"))) (name . "lti-freq-domain-toolbox") (nix-sha256 . "1cr4qcha4gw6k4qw866sb32yn1qp0iy7lvh6dp3f21hxyxw6m4a8") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:iastefan@outlook.com . #t) (engineering . #t) (ring:1 . #t))) (source . "git://github.com/iastefan/lti-freq-domain-toolbox") (tags . ("engineering")) (versions . #hash((default . #hasheq((checksum . "955e4d40f46766f55750c99356b427327d4df5de") (source . "git://github.com/iastefan/lti-freq-domain-toolbox") (source_url . "http://github.com/iastefan/lti-freq-domain-toolbox/tree/master"))))))) ("the-unicoder" . #hasheq((author . "willghatch@gmail.com") (authors . ("willghatch@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "the-unicoder" "doc/the-unicoder@the-unicoder/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/the-unicoder.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/the-unicoder.txt"))) (checksum . "51dfebb337dea81546d519fb6ab2f37c9a542eda") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "gui-lib" ("unix-socket-lib" #:version "1.1") "tex-table" "basedir" "scribble-lib" "racket-doc")) (description . "Universal unicode input system") (implies . ()) (last-checked . 1522414691) (last-edit . 1459550147) (last-updated . 1507930247) (modules . ((lib "the-unicoder/main.rkt") (lib "the-unicoder/config.rkt") (lib "the-unicoder/client.rkt") (lib "the-unicoder/server.rkt") (lib "the-unicoder/user-tables.rkt") (lib "the-unicoder/parse-unicode-data.rkt") (lib "the-unicoder/the-unicoder.scrbl") (lib "the-unicoder/prompter.rkt") (lib "the-unicoder/misc-tables.rkt"))) (name . "the-unicoder") (nix-sha256 . "12ga4qlp1ww30vav1snizk5kwl83r7x598spq7p8fwsxcsm5f854") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:willghatch@gmail.com . #t) (ring:1 . #t) (unicode . #t))) (source . "git://github.com/willghatch/the-unicoder.git") (tags . ("unicode")) (versions . #hash((default . #hasheq((checksum . "51dfebb337dea81546d519fb6ab2f37c9a542eda") (source . "git://github.com/willghatch/the-unicoder.git") (source_url . "http://github.com/willghatch/the-unicoder.git/tree/master"))))))) ("unix-socket" . #hash((author . "ryanc@racket-lang.org") (checksum . "dcda14ea91fed60006c3b7d1059c0ad2cb8a2c5c") (dependencies . ("unix-socket-lib" "unix-socket-doc")) (description . "ryanc@racket-lang.org") (modules . ()) (name . "unix-socket") (source . "https://download.racket-lang.org/releases/6.12/pkgs/unix-socket.zip") (tags . ()))) ("mockfighter" . #hasheq((author . "euler90h@gmail.com") (authors . ("euler90h@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/mockfighter.txt") (docs . (("main" "mockfighter" "doc/mockfighter@mockfighter/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mockfighter.txt") (test-failure-log . "server/built/test-fail/mockfighter.txt") (test-success-log . #f))) (checksum . "63906eff874e90644725dbff5365889d959e2294") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "stockfighter-racket" "scribble-lib" "racket-doc")) (description . "Stockfighter-like API for a limit order exchange") (implies . ()) (last-checked . 1522414436) (last-edit . 1450936598) (last-updated . 1502816182) (modules . ((lib "mockfighter/noise-trader.rkt") (lib "mockfighter/venue.rkt") (lib "mockfighter/game-master.rkt") (lib "mockfighter/server.rkt") (lib "mockfighter/main.rkt") (lib "mockfighter/scribblings/mockfighter.scrbl") (lib "mockfighter/websocket-test.rkt") (lib "mockfighter/matching-engine.rkt") (lib "mockfighter/mm.rkt") (lib "mockfighter/server-test.rkt") (lib "mockfighter/orderbook.rkt") (lib "mockfighter/utils.rkt") (lib "mockfighter/retail-trader.rkt"))) (name . "mockfighter") (nix-sha256 . "0682hmmd04r3a90d2510mhf092sa6nzvzq9qgclgp4hdp7324pk7") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:euler90h@gmail.com . #t) (finance . #t) (ring:1 . #t) (stockfighter . #t))) (source . "git://github.com/eu90h/mockfighter") (tags . ("finance" "stockfighter")) (versions . #hash((default . #hasheq((checksum . "63906eff874e90644725dbff5365889d959e2294") (source . "git://github.com/eu90h/mockfighter") (source_url . "http://github.com/eu90h/mockfighter/tree/master"))))))) ("pollen-rock" . #hasheq((author . "ljs.darkfish@gmail.com") (authors . ("ljs.darkfish@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/pollen-rock.txt") (docs . (("main" "pollen-rock" "doc/pollen-rock@pollen-rock/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pollen-rock.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pollen-rock.txt"))) (checksum . "5c2e993fa52e91e109089e7d40ceb6562633dc04") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "web-server-lib" "pollen" "sugar" "scribble-lib" "racket-doc")) (description . "An enhanced Pollen server and an in-browser editor for Pollen files") (implies . ()) (last-checked . 1522414534) (last-edit . 1505460056) (last-updated . 1518589534) (modules . ((lib "pollen-rock/pollen-rock/http-util.rkt") (lib "pollen-rock/pollen-rock/handlers/get-config-handler.rkt") (lib "pollen-rock/pollen-rock/handlers/dump-handler.rkt") (lib "pollen-rock/pollen-rock/handlers/fs-handler.rkt") (lib "pollen-rock/pollen-rock/tests/test.rkt") (lib "pollen-rock/pollen-rock/handlers/render-handler.rkt") (lib "pollen-rock/pollen-rock/scribblings/pollen-rock.scrbl") (lib "pollen-rock/pollen-rock/handlers/search-handler.rkt") (lib "pollen-rock/pollen-rock/restful.rkt") (lib "pollen-rock/pollen-rock/tests/test-utils.rkt") (lib "pollen-rock/pollen-rock/main.rkt") (lib "pollen-rock/pollen-rock/handlers/watch-handler.rkt") (lib "pollen-rock/pollen-rock/config.rkt") (lib "pollen-rock/pollen-rock/handlers/get-contents-handler.rkt") (lib "pollen-rock/pollen-rock/handlers/fs-watch.rkt") (lib "pollen-rock/pollen-rock/handlers/tags-handler.rkt") (lib "pollen-rock/pollen-rock/logger.rkt") (lib "pollen-rock/pollen-rock/handlers/expose-module.rkt"))) (name . "pollen-rock") (nix-sha256 . "17ncfmvjndcgil5zmzb75pqakdn5q9fyld3xz9gq8vg9j920j3s2") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:ljs.darkfish@gmail.com . #t) (pollen . #t) (ring:1 . #t))) (source . "https://github.com/lijunsong/pollen-rock.git") (tags . ("pollen")) (versions . #hash((default . #hasheq((checksum . "5c2e993fa52e91e109089e7d40ceb6562633dc04") (source . "https://github.com/lijunsong/pollen-rock.git") (source_url . "https://github.com/lijunsong/pollen-rock.git"))))))) ("struct-update-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/struct-update-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/struct-update-lib.txt"))) (checksum . "8ce456cde8764ae27c348123ec9e01e76826d536") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "syntax-classes-lib")) (description . "implementation (no documentation) for “struct-update”") (implies . ()) (last-checked . 1522414685) (last-edit . 1469648472) (last-updated . 1502816459) (modules . ((lib "struct-update/main.rkt"))) (name . "struct-update-lib") (nix-sha256 . "14bmg0lchqy198wmbx05a8w5rpgk4rqagfg9izyj4dgkii9wrgzh") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/struct-update.git?path=struct-update-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8ce456cde8764ae27c348123ec9e01e76826d536") (source . "git://github.com/lexi-lambda/struct-update.git?path=struct-update-lib") (source_url . "http://github.com/lexi-lambda/struct-update.git/tree/master?path=struct-update-lib"))))))) ("vector-struct" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "vector-struct" "doc/vector-struct@vector-struct/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/vector-struct.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/vector-struct.txt"))) (checksum . "f5137a445b567a213f20d9c35c60cea88f61c7b1") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "racket-doc" "scribble-lib")) (description . "A simple abstraction to use vectors like structs for performance") (implies . ()) (last-checked . 1522414700) (last-edit . 1421217111) (last-updated . 1502816518) (modules . ((lib "vector-struct/scribblings/vector-struct.scrbl") (lib "typed/scribblings/vector-struct.scrbl") (lib "typed/vector-struct.rkt") (lib "vector-struct/main.rkt"))) (name . "vector-struct") (nix-sha256 . "09bxjnv0722zpxny0mxi0w02m0kdyarqg5sxsrpjvmw2zzra88y4") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (deprecated . #t) (performance . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-vector-struct") (tags . ("deprecated" "performance")) (versions . #hash((default . #hasheq((checksum . "f5137a445b567a213f20d9c35c60cea88f61c7b1") (source . "git://github.com/lexi-lambda/racket-vector-struct") (source_url . "http://github.com/lexi-lambda/racket-vector-struct/tree/master"))))))) ("draw" . #hash((author . "mflatt@racket-lang.org") (checksum . "09e20fc7a9a105a3ea8547e38302fc4af00631ba") (dependencies . ("draw-lib" "draw-doc")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "draw") (source . "https://download.racket-lang.org/releases/6.12/pkgs/draw.zip") (tags . ()))) ("peg" . #hasheq((author . "rain1@airmail.cc") (authors . ("rain1@airmail.cc")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "peg" "doc/peg@peg/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/peg.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/peg.txt"))) (checksum . "9fdd57d52d1a35c307c64658aa1cedf229d38f70") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "PEG parser generator") (implies . ()) (last-checked . 1522414511) (last-edit . 1517945979) (last-updated . 1517945979) (modules . ((lib "peg/scribblings/peg.scrbl") (lib "peg/tests/docs-example-1.rkt") (lib "peg/test.rkt") (lib "peg/tests/peg-example-expr.rkt") (lib "peg/tests/test-regex-range.rkt") (lib "peg/push-pop-boxes.rkt") (lib "peg/tests/docs-example-2.rkt") (lib "peg/tests/docs-example-3.rkt") (lib "peg/tests/test-json.rkt") (lib "peg/tests/test-multibrack.rkt") (lib "peg/tests/test-etc-passwd.rkt") (lib "peg/tests/peg-test-expr.rkt") (lib "peg/tests/test-blg.rkt") (lib "peg/tests/test-cfunc.rkt") (lib "peg/main.rkt") (lib "peg/peg-result.rkt") (lib "peg/tests/test-tiny.rkt") (lib "peg/peg.rkt") (lib "peg/peg-in-peg.rkt"))) (name . "peg") (nix-sha256 . "1657h151dmyqcgfw22xjdr2rfa5s3r2yafi57v0kij5s906v3qr9") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:rain1@airmail.cc . #t) (parser . #t) (ring:2 . #t))) (source . "https://github.com/rain-1/racket-peg.git#9fdd57d52d1a35c307c64658aa1cedf229d38f70") (tags . ("parser")) (versions . #hash((default . #hasheq((checksum . "9fdd57d52d1a35c307c64658aa1cedf229d38f70") (source . "https://github.com/rain-1/racket-peg.git#9fdd57d52d1a35c307c64658aa1cedf229d38f70") (source_url . "https://github.com/rain-1/racket-peg.git#9fdd57d52d1a35c307c64658aa1cedf229d38f70"))))))) ("effection-doc" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "effection" "doc/effection@effection-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/effection-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/effection-doc.txt"))) (checksum . "617e5b4c76eab09a2cd2b4f47bca8d908f51d619") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "effection-lib" "parendown-lib" "racket-doc" "scribble-lib")) (description . "A library for deterministic concurrency and custom side effects. (doc)") (implies . ()) (last-checked . 1522414396) (last-edit . 1520307374) (last-updated . 1520513654) (modules . ((lib "effection/scribblings/effection.scrbl"))) (name . "effection-doc") (nix-sha256 . "1y75812hyfyv67nlcw2mdax6rb3rvzy4pma3wjp9v6qixhpvm76z") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:rokitna@hotmail.com . #t) (concurrency . #t) (effects . #t) (language . #t) (ring:2 . #t) (unstable . #t))) (source . "https://github.com/rocketnia/effection.git?path=effection-doc") (tags . ("concurrency" "effects" "language" "unstable")) (versions . #hash((default . #hasheq((checksum . "617e5b4c76eab09a2cd2b4f47bca8d908f51d619") (source . "https://github.com/rocketnia/effection.git?path=effection-doc") (source_url . "https://github.com/rocketnia/effection.git?path=effection-doc"))))))) ("learn-to-type" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/learn-to-type.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/learn-to-type.txt"))) (checksum . "e92730f9e7c1560a9f1dc82fbed6046c4532d167") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "gui-lib" "images-lib")) (description . "A very simple GUI program to learn to type by copying a text.") (implies . ()) (last-checked . 1522414423) (last-edit . 1383320998) (last-updated . 1516438252) (modules . ((lib "learn-to-type/ltt-gui.rkt") (lib "learn-to-type/main.rkt"))) (name . "learn-to-type") (nix-sha256 . "1spvn8vrd9yfj3vamaqa1ljm060kjnzc3j5qr9rhxgip33g9kjjh") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:laurent.orseau@gmail.com . #t) (gui . #t) (ring:1 . #t))) (source . "github://github.com/Metaxal/learn-to-type/master") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "e92730f9e7c1560a9f1dc82fbed6046c4532d167") (source . "github://github.com/Metaxal/learn-to-type/master") (source_url . "http://github.com/Metaxal/learn-to-type/tree/master"))))))) ("mzscheme-lib" . #hash((author . "mflatt@racket-lang.org") (checksum . "88e57e71150bcfcbf05ce549768aae10b89bb5ed") (dependencies . ("scheme-lib" ("base" #:version "6.5.0.2"))) (description . "mflatt@racket-lang.org") (modules . ()) (name . "mzscheme-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/mzscheme-lib.zip") (tags . ()))) ("dssl" . #hasheq((author . "jesse.tov@gmail.com") (authors . ("jesse.tov@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dssl" "doc/dssl@dssl/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dssl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dssl.txt"))) (checksum . "bb5040d0a608a3b6f7f16d6ae725b24388f6aa6c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "htdp-lib" "scribble-lib" "racket-doc" "htdp-doc" "at-exp-lib" "sandbox-lib" "compatibility-doc")) (description . "Data Structures Student Language: an extension of ASL for easier imperative programming.") (implies . ()) (last-checked . 1522414396) (last-edit . 1510931056) (last-updated . 1502815950) (modules . ((lib "dssl/main.rkt") (lib "dssl/tests/test.rkt") (lib "dssl/tests/mlang-test.rkt") (lib "dssl/classes.rkt") (lib "dssl/scribblings/common.rkt") (lib "dssl/dssl.rkt") (lib "dssl/scribblings/std-grammar.rkt") (lib "dssl/scribblings/prim-ops.rkt") (lib "dssl/lang/reader.rkt") (lib "dssl/scribblings/dssl.scrbl"))) (name . "dssl") (nix-sha256 . "0pchqm7w9pqsymjbm8cz0yrc7pd9vlmz6qdzfrscdsym425rycwj") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jesse.tov@gmail.com . #t) (data-structures . #t) (language . #t) (programming-languages . #t) (ring:1 . #t) (student . #t))) (source . "https://github.com/tov/dssl.git") (tags . ("data-structures" "language" "programming-languages" "student")) (versions . #hash((default . #hasheq((checksum . "bb5040d0a608a3b6f7f16d6ae725b24388f6aa6c") (source . "https://github.com/tov/dssl.git") (source_url . "https://github.com/tov/dssl.git"))))))) ("unstable-flonum-doc" . #hash((author . "ntoronto@racket-lang.org") (authors . ("ntoronto@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "unstable-flonum" "doc/unstable-flonum@unstable-flonum-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-flonum-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-flonum-doc.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "unstable" "unstable-flonum-lib" "plot" "math-doc" "racket-doc")) (description . "Experimental libraries for flonum computations (documentation)") (implies . ()) (last-checked . 1522414697) (last-edit . 1445382797) (last-updated . 1502816513) (modules . ((lib "unstable/unstable-flonum.scrbl"))) (name . "unstable-flonum-doc") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ntoronto@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("unstable")) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) (default . #hasheq((checksum . "7071d9a3ee0ad60f947c0a597ddd4b64bed3d94a") (source . "git://github.com/racket/unstable-flonum/?path=unstable-flonum-doc") (source_url . "git://github.com/racket/unstable-flonum/?path=unstable-flonum-doc"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("pollen-component" . #hasheq((author . "me@leafac.com") (authors . ("me@leafac.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pollen-component" "doc/pollen-component@pollen-component/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pollen-component.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pollen-component.txt"))) (checksum . "f06d67b55aa1a9b137c506464c5734b08fb06f2b") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "pollen" "sugar" "scribble-lib" "racket-doc")) (description . "Component-based development for Pollen") (implies . ()) (last-checked . 1522414533) (last-edit . 1486939841) (last-updated . 1520441922) (modules . ((lib "pollen-component/examples/with-css-expressions-and-urlang/pollen.rkt") (lib "pollen-component/examples/without-pollen-component/pollen.rkt") (lib "pollen-component/examples/with-pollen-component/pollen.rkt") (lib "pollen-component/documentation/pollen-component.scrbl") (lib "pollen-component/tests/pollen.rkt") (lib "pollen-component/main.rkt") (lib "pollen-component/tests/test.rkt"))) (name . "pollen-component") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:me@leafac.com . #t) (components . #t) (pollen . #t) (ring:1 . #t))) (source . "https://www.leafac.com/software/pollen-component/pollen-component.zip") (tags . ("components" "pollen")) (versions . #hash((default . #hasheq((checksum . "f06d67b55aa1a9b137c506464c5734b08fb06f2b") (source . "https://www.leafac.com/software/pollen-component/pollen-component.zip") (source_url . "https://www.leafac.com/software/pollen-component/pollen-component.zip"))))))) ("towers-lib" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/towers-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/towers-lib.txt"))) (checksum . "e1224228b5b5b514c7063b44810c1bdd5f8d5d14") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "bazaar")) (description . "Library for the Towers game.") (implies . ()) (last-checked . 1522414693) (last-edit . 1516442614) (last-updated . 1516476621) (modules . ((lib "towers-lib/player-ai-base.rkt") (lib "towers-lib/player-alpha-beta.rkt") (lib "towers-lib/connection.rkt") (lib "towers-lib/player.rkt") (lib "towers-lib/game.rkt") (lib "towers-lib/file.rkt") (lib "towers-lib/base.rkt") (lib "towers-lib/rules.rkt") (lib "towers-lib/player-ai1.rkt") (lib "towers-lib/player-base.rkt"))) (name . "towers-lib") (nix-sha256 . "1ip1sr61415zfg3pkcdx18zsxaknb1r8hna90f2ypcvag3wvbp0w") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:laurent.orseau@gmail.com . #t) (games . #t) (ring:1 . #t))) (source . "https://github.com/Metaxal/towers.git?path=towers-lib") (tags . ("games")) (versions . #hash((default . #hasheq((checksum . "e1224228b5b5b514c7063b44810c1bdd5f8d5d14") (source . "https://github.com/Metaxal/towers.git?path=towers-lib") (source_url . "https://github.com/Metaxal/towers.git?path=towers-lib"))))))) ("images-lib" . #hash((author . "ntoronto@racket-lang.org") (checksum . "06e3a61c590c27231019f070489ebf86caad2804") (dependencies . ("base" "draw-lib" "typed-racket-lib" "scribble-lib")) (description . "ntoronto@racket-lang.org") (modules . ()) (name . "images-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/images-lib.zip") (tags . ()))) ("pconvert-test" . #hash((author . "robby@racket-lang.org") (checksum . "5faa35c81557586ac964a590d40224437ffd0661") (dependencies . ("base" "compatibility-lib")) (description . "robby@racket-lang.org") (modules . ()) (name . "pconvert-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/pconvert-test.zip") (tags . ()))) ("deinprogramm-signature" . #hash((author . "sperber@racket-lang.org") (checksum . "d48f22b247b053b7510aa4826b1e30647e1578c1") (dependencies . ("base" "compatibility-lib" "drracket-plugin-lib" "gui-lib" "htdp-lib" "scheme-lib" "srfi-lib" "string-constants-lib")) (description . "sperber@racket-lang.org") (modules . ()) (name . "deinprogramm-signature") (source . "https://download.racket-lang.org/releases/6.12/pkgs/deinprogramm-signature.zip") (tags . ()))) ("semver" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "semver" "doc/semver@semver/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/semver.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/semver.txt"))) (checksum . "20f87e1c2d84b687b82dff3e58187df13f231d73") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "alexis-util" "racket-doc" "scribble-lib" "typed-racket-doc" "typed-racket-more")) (description . "An implementation of the semver (semantic versioning) specification") (implies . ()) (last-checked . 1522414677) (last-edit . 1422729008) (last-updated . 1502816424) (modules . ((lib "semver/scribblings/semver.scrbl") (lib "semver/main.rkt"))) (name . "semver") (nix-sha256 . "16p688kkwlyiaz9c9nriajw05jr0ck8qhvlwdfhvspmzl3lnf2vh") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-semver") (tags . ()) (versions . #hash(("6.1.1" . #hasheq((checksum . "220527934536b26476e652adf5340dd96e102d47") (source . "git://github.com/lexi-lambda/racket-semver#v6.1.1") (source_url . "http://github.com/lexi-lambda/racket-semver/tree/master#v6.1.1"))) (default . #hasheq((checksum . "20f87e1c2d84b687b82dff3e58187df13f231d73") (source . "git://github.com/lexi-lambda/racket-semver") (source_url . "http://github.com/lexi-lambda/racket-semver/tree/master"))))))) ("planet-test" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (checksum . "df76ec68149dad49dd18eded7fdcaef03300e582") (dependencies . ("base" "racket-index" "eli-tester" "planet-lib" "rackunit-lib" "scheme-lib")) (description . "mflatt@racket-lang.org robby@racket-lang.org") (modules . ()) (name . "planet-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/planet-test.zip") (tags . ()))) ("icfp-2014-contracts-talk" . #hasheq((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/icfp-2014-contracts-talk.txt") (test-failure-log . "server/built/test-fail/icfp-2014-contracts-talk.txt") (test-success-log . #f))) (checksum . "e1df17f23d7cd4fbb4fa78c15d6eb3f79c576ddf") (checksum-error . #f) (conflicts . ()) (dependencies . ("plot-lib" "base" "draw-lib" "gui-lib" "pict-lib" "plot-gui-lib" "rackunit-lib" "redex-gui-lib" "redex-lib" "slideshow-lib")) (description . "Slideshow implementation of ICFP 2014 Contracts Keynote Talk") (implies . ()) (last-checked . 1522414419) (last-edit . 1409943076) (last-updated . 1502816133) (modules . ((lib "icfp-2014-contracts-talk/color.rkt") (lib "icfp-2014-contracts-talk/boundaries-not-projections.rkt") (lib "icfp-2014-contracts-talk/redex-model.rkt") (lib "icfp-2014-contracts-talk/counts/time-vs-contracts.rkt") (lib "icfp-2014-contracts-talk/dep.rkt") (lib "icfp-2014-contracts-talk/talk.rkt") (lib "icfp-2014-contracts-talk/heap-slides.rkt") (lib "icfp-2014-contracts-talk/main.rkt") (lib "icfp-2014-contracts-talk/title-lib.rkt") (lib "icfp-2014-contracts-talk/boundary.rkt") (lib "icfp-2014-contracts-talk/random-generation.rkt") (lib "icfp-2014-contracts-talk/render-bytes.rkt") (lib "icfp-2014-contracts-talk/takeaways.rkt") (lib "icfp-2014-contracts-talk/model-lib.rkt") (lib "icfp-2014-contracts-talk/title.rkt") (lib "icfp-2014-contracts-talk/faces.rkt") (lib "icfp-2014-contracts-talk/intro.rkt") (lib "icfp-2014-contracts-talk/heap.rkt") (lib "icfp-2014-contracts-talk/function-machine.rkt") (lib "icfp-2014-contracts-talk/util.rkt") (lib "icfp-2014-contracts-talk/equations.rkt") (lib "icfp-2014-contracts-talk/redex-typeset.rkt") (lib "icfp-2014-contracts-talk/counts/contracts-vs-commits.rkt") (lib "icfp-2014-contracts-talk/code-combine.rkt"))) (name . "icfp-2014-contracts-talk") (nix-sha256 . "1slni73fvfwh2a57lcc2vf674gznzpqsg1dg975w4zwywwira26d") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:robby@racket-lang.org . #t) (ring:1 . #t) (slideshow . #t))) (source . "git://github.com/rfindler/icfp-2014-contracts-talk") (tags . ("slideshow")) (versions . #hash((default . #hasheq((checksum . "e1df17f23d7cd4fbb4fa78c15d6eb3f79c576ddf") (source . "git://github.com/rfindler/icfp-2014-contracts-talk") (source_url . "http://github.com/rfindler/icfp-2014-contracts-talk/tree/master"))))))) ("table-panel" . #hasheq((author . "spdegabrielle@gmail.com m.douglas.williams@gmail.com") (authors . ("spdegabrielle@gmail.com" "m.douglas.williams@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "table-panel" "doc/table-panel@table-panel/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/table-panel.txt") (test-failure-log . "server/built/test-fail/table-panel.txt") (test-success-log . #f))) (checksum . "45fcf335cf4b9fa6eaf38fa17d32657bb6d25d78") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "gui" "srfi-lib" "scribble-lib" "racket-doc")) (description . "This library provides a table-panel% class that specializes the panel% class to provide a panel that aligns its children to a grid. A simple demonstration program is also provided. Copyright(c) 2008, M. Douglas Williams.") (implies . ()) (last-checked . 1522414690) (last-edit . 1419869682) (last-updated . 1502816472) (modules . ((lib "table-panel/test-table-panel.rkt") (lib "table-panel/main.rkt") (lib "table-panel/scribblings/table-panel.scrbl"))) (name . "table-panel") (nix-sha256 . "087a2pd6x0a4lxfsqvv5p7iz2dd46pdvz9z2p9kwbcyhilp7cx5y") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:m.douglas.williams@gmail.com . #t) (author:spdegabrielle@gmail.com . #t) (gui . #t) (ring:1 . #t))) (source . "git://github.com/spdegabrielle/table-panel") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "45fcf335cf4b9fa6eaf38fa17d32657bb6d25d78") (source . "git://github.com/spdegabrielle/table-panel") (source_url . "http://github.com/spdegabrielle/table-panel/tree/master"))))))) ("asn1-lib" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/asn1-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/asn1-lib.txt"))) (checksum . "34802b6cc4f0f2200a2feb2aa724833fc17b157a") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "binaryio-lib")) (description . "ASN.1 library") (implies . ()) (last-checked . 1522417871) (last-edit . 1518435001) (last-updated . 1518435001) (modules . ((lib "asn1/private/base256.rkt") (lib "asn1/ber.rkt") (lib "asn1/private/base.rkt") (lib "asn1/private/ber-frame.rkt") (lib "asn1/main.rkt") (lib "asn1/private/ber.rkt") (lib "asn1/private/types.rkt"))) (name . "asn1-lib") (nix-sha256 . "1w8h4q0s82898961qsn4mf24fmbsszznvjhrcw1w4xigwdivw4y0") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (io . #t) (net . #t) (parser . #t) (parsing . #t) (ring:2 . #t))) (source . "https://github.com/rmculpepper/asn1.git?path=asn1-lib") (tags . ("io" "net" "parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "34802b6cc4f0f2200a2feb2aa724833fc17b157a") (source . "https://github.com/rmculpepper/asn1.git?path=asn1-lib") (source_url . "https://github.com/rmculpepper/asn1.git?path=asn1-lib"))))))) ("lipics" . #hasheq((author . "asumu@ccs.neu.edu stamourv@racket-lang.org") (authors . ("asumu@ccs.neu.edu" "stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "lipics" "doc/lipics@lipics/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lipics.txt") (test-failure-log . "server/built/test-fail/lipics.txt") (test-success-log . #f))) (checksum . "32a8cb9782493e237c25994f70aa7c572d7ea567") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "at-exp-lib" "sha" "racket-doc" "scribble-doc")) (description . "Scribble languages for the LIPIcs paper format") (implies . ()) (last-checked . 1522414425) (last-edit . 1425674877) (last-updated . 1504309961) (modules . ((lib "lipics/download.rkt") (lib "lipics/lipics.scrbl") (lib "lipics/example.scrbl") (lib "lipics/example-abstract.scrbl") (lib "lipics/main.rkt"))) (name . "lipics") (nix-sha256 . "1r37j9bvlcxdky9h00jdz6m2rfg7igl022ypzaj7q3zvnjb2329n") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (author:stamourv@racket-lang.org . #t) (ring:1 . #t) (scribble . #t))) (source . "git://github.com/takikawa/lipics-scribble") (tags . ("scribble")) (versions . #hash((default . #hasheq((checksum . "32a8cb9782493e237c25994f70aa7c572d7ea567") (source . "git://github.com/takikawa/lipics-scribble") (source_url . "http://github.com/takikawa/lipics-scribble/tree/master"))))))) ("r-lexer" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "r-lexer" "doc/r-lexer@r-lexer/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/r-lexer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/r-lexer.txt"))) (checksum . "0f19dd7364b69507a6f5d41ea4d77f85b24d5449") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "parser-tools-lib" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (last-checked . 1522414538) (last-edit . 1441985570) (last-updated . 1502816341) (modules . ((lib "r-lexer/lang/reader.rkt") (lib "r-lexer/main.rkt") (lib "r-lexer/scribblings/r-lexer.scrbl"))) (name . "r-lexer") (nix-sha256 . "13vvp9x2h2zzkkria9bvml585a39chx73y96ihv2wy6dhkx41h16") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t))) (source . "git://github.com/LeifAndersen/racket-r-lexer") (tags . ()) (versions . #hash((default . #hasheq((checksum . "0f19dd7364b69507a6f5d41ea4d77f85b24d5449") (source . "git://github.com/LeifAndersen/racket-r-lexer") (source_url . "http://github.com/LeifAndersen/racket-r-lexer/tree/master"))))))) ("gregor" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gregor.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gregor.txt"))) (checksum . "0d7c40c8d6ce6165419564df3b168821c322e3ae") (checksum-error . #f) (conflicts . ()) (dependencies . ("gregor-lib" "gregor-doc" "base")) (description . "Date and time library") (implies . ("gregor-lib" "gregor-doc")) (last-checked . 1522414406) (last-edit . 1427165095) (last-updated . 1502816090) (modules . ()) (name . "gregor") (nix-sha256 . "0ha4r1f28xnv52rx99ds9alnwlrl3xl8chs5a6qgnh8l0z2wbvb7") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:zeppieri@gmail.com . #t) (calendar . #t) (date . #t) (ring:1 . #t) (time . #t))) (source . "git://github.com/97jaz/gregor/?path=gregor") (tags . ("calendar" "date" "time")) (versions . #hash((default . #hasheq((checksum . "0d7c40c8d6ce6165419564df3b168821c322e3ae") (source . "git://github.com/97jaz/gregor/?path=gregor") (source_url . "git://github.com/97jaz/gregor/?path=gregor"))))))) ("ddict" . #hasheq((author . "pnwamk@gmail.com") (authors . ("pnwamk@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ddict" "doc/ddict@ddict/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ddict.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ddict.txt"))) (checksum . "44356f7784a12360f52261b3883c4446e0727ba4") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "rackunit-lib")) (description . "Deterministic Dictionaries") (implies . ()) (last-checked . 1522414378) (last-edit . 1485368541) (last-updated . 1502815888) (modules . ((lib "data/private/ddict.rkt") (lib "data/ddict/ddict.scrbl") (lib "tests/data/ddict.rkt") (lib "data/ddict.rkt") (lib "tests/data/ddict-perf.rkt"))) (name . "ddict") (nix-sha256 . "0szq8qfkqkgnls9yzm5i68s2iz3xyvk6rdxip67ab9lj91mqafl0") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:pnwamk@gmail.com . #t) (data . #t) (ring:1 . #t))) (source . "git://github.com/pnwamk/ddict.git") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "44356f7784a12360f52261b3883c4446e0727ba4") (source . "git://github.com/pnwamk/ddict.git") (source_url . "http://github.com/pnwamk/ddict.git/tree/master"))))))) ("racket-ppc-macosx-2" . #hash((author . "mflatt@racket-lang.org") (checksum . "d4ac85e121d5b242e6b5a45806d7cb8169e81dad") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "racket-ppc-macosx-2") (source . "https://download.racket-lang.org/releases/6.12/pkgs/racket-ppc-macosx-2.zip") (tags . ()))) ("paren-shape" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "paren-shape-pattern-expanders" "doc/paren-shape-pattern-expanders@paren-shape/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/paren-shape.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/paren-shape.txt"))) (checksum . "0ad6a34d3e93088e3e6c5a69b78a0724d5f4290f") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" ("syntax-classes-lib" #:version "1.1") "rackunit-lib" "scribble-lib" "racket-doc" "syntax-classes-doc")) (description . "Deprecated. Use syntax-classes-lib instead.") (implies . ()) (last-checked . 1522414509) (last-edit . 1486111652) (last-updated . 1502816241) (modules . ((lib "paren-shape/scribblings/paren-shape-pattern-expanders.scrbl") (lib "paren-shape/pattern-expander.rkt"))) (name . "paren-shape") (nix-sha256 . "059zasy5wc3ipn5krcn2masv9xvbfxva98570d7kicx0an1n46cw") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (deprecated . #t) (ring:1 . #t) (syntax-parse . #t))) (source . "git://github.com/AlexKnauth/paren-shape") (tags . ("deprecated" "syntax-parse")) (versions . #hash(("6.1.1" . #hasheq((checksum . "a3eba0a54826a9b3d7277fbd983d677fce6c7dd3") (source . "git://github.com/AlexKnauth/paren-shape#up-to-v6.2.1") (source_url . "http://github.com/AlexKnauth/paren-shape/tree/master#up-to-v6.2.1"))) ("6.2.1" . #hasheq((checksum . "a3eba0a54826a9b3d7277fbd983d677fce6c7dd3") (source . "git://github.com/AlexKnauth/paren-shape#up-to-v6.2.1") (source_url . "http://github.com/AlexKnauth/paren-shape/tree/master#up-to-v6.2.1"))) (default . #hasheq((checksum . "0ad6a34d3e93088e3e6c5a69b78a0724d5f4290f") (source . "git://github.com/AlexKnauth/paren-shape") (source_url . "http://github.com/AlexKnauth/paren-shape/tree/master"))) ("6.2" . #hasheq((checksum . "a3eba0a54826a9b3d7277fbd983d677fce6c7dd3") (source . "git://github.com/AlexKnauth/paren-shape#up-to-v6.2.1") (source_url . "http://github.com/AlexKnauth/paren-shape/tree/master#up-to-v6.2.1"))))))) ("cover-coveralls" . #hasheq((author . "spencer@florence.io plessner.ryan@gmail.com") (authors . ("spencer@florence.io" "plessner.ryan@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cover-coveralls.txt") (test-failure-log . "server/built/test-fail/cover-coveralls.txt") (test-success-log . #f))) (checksum . "d278a6998ceff1c5816f700d3cf4e8b76871a39c") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.1.1") "cover" "rackunit-lib")) (description . "") (implies . ()) (last-checked . 1522414368) (last-edit . 1455244920) (last-updated . 1506047337) (modules . ((lib "cover/coveralls.rkt") (lib "cover/private/tests/prog.rkt") (lib "cover/private/tests/not-run.rkt") (lib "cover/private/coveralls.rkt"))) (name . "cover-coveralls") (nix-sha256 . "1s1j44q13j13f97d1d5p21hzpy54knbs7vrl55rmdid1jaqxf22f") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:plessner.ryan@gmail.com . #t) (author:spencer@florence.io . #t) (ring:1 . #t) (testing . #t) (tools . #t))) (source . "git://github.com/rpless/cover-coveralls#release") (tags . ("testing" "tools")) (versions . #hash((default . #hasheq((checksum . "d278a6998ceff1c5816f700d3cf4e8b76871a39c") (source . "git://github.com/rpless/cover-coveralls#release") (source_url . "http://github.com/rpless/cover-coveralls/tree/master#release"))))))) ("automata-doc" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "automata" "doc/automata@automata-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/automata-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/automata-doc.txt"))) (checksum . "a82d4d3c94f55c6560ec14f76300811658ed05a6") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.2.900.4") "automata-lib" "scribble-lib" "racket-doc")) (description . "a library for defining efficient automata using match patterns") (implies . ()) (last-checked . 1522414287) (last-edit . 1504535586) (last-updated . 1502812274) (modules . ((lib "automata/scribblings/automata.scrbl") (lib "automata/scribblings/re.scrbl"))) (name . "automata-doc") (nix-sha256 . "06gwyy6zyz3p3rcq6vl893pg0ksz2pyn6a1la67d5an3hmkikj04") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (automata . #t) (match . #t) (regex . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/automata?path=automata-doc") (tags . ("automata" "match" "regex")) (versions . #hash((default . #hasheq((checksum . "a82d4d3c94f55c6560ec14f76300811658ed05a6") (source . "git://github.com/jeapostrophe/automata?path=automata-doc") (source_url . "http://github.com/jeapostrophe/automata/tree/master?path=automata-doc"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("rascas" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rascas" "doc/rascas@rascas/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rascas.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rascas.txt"))) (checksum . "1487a1b84893865c63cbefabee81264a94131b27") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "math-lib" "parser-tools-lib" "rackunit-lib" "srfi-lite-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Computer algebra system for Racket. Port of dharmatech/mpl without dependencies.") (implies . ()) (last-checked . 1522414666) (last-edit . 1518373792) (last-updated . 1519054202) (modules . ((lib "rascas/expand-trig.rkt") (lib "rascas/sub.rkt") (lib "rascas/infix-parser.rkt") (lib "rascas/misc.rkt") (lib "rascas/alg-polynomial-division.rkt") (lib "rascas/rational-variables.rkt") (lib "rascas/variables.rkt") (lib "rascas/alg-polynomial-gcd.rkt") (lib "rascas/leading-coefficient-gpe.rkt") (lib "rascas/coeff-var-monomial.rkt") (lib "rascas/polynomial-gcd.rkt") (lib "rascas/order-relation.rkt") (lib "rascas/simplify-trig.rkt") (lib "rascas/expand-main-op.rkt") (lib "rascas/arithmetic.rkt") (lib "rascas/sum-product-power.rkt") (lib "rascas/algebraic-expand.rkt") (lib "rascas/polynomial-expansion.rkt") (lib "rascas/coefficient-gpe.rkt") (lib "rascas/sqrt.rkt") (lib "rascas/substitute.rkt") (lib "rascas/automatic-simplify.rkt") (lib "rascas/separate-sin-cos.rkt") (lib "rascas/numerator.rkt") (lib "rascas/main.rkt") (lib "rascas/rational-expand.rkt") (lib "rascas/degree-gpe.rkt") (lib "rascas/sin.rkt") (lib "rascas/trig-substitute.rkt") (lib "rascas/partial-fraction-1.rkt") (lib "rascas/expand-power.rkt") (lib "rascas/tan.rkt") (lib "rascas/contains.rkt") (lib "rascas/tests.rkt") (lib "rascas/polynomial-gpe.rkt") (lib "rascas/div.rkt") (lib "rascas/denominator.rkt") (lib "rascas/exp.rkt") (lib "rascas/cos.rkt") (lib "rascas/expand-exp.rkt") (lib "rascas/expand-product.rkt") (lib "rascas/polynomial-division.rkt") (lib "rascas/contract-exp.rkt") (lib "rascas/rationalize-expression.rkt") (lib "rascas/collect-terms.rkt") (lib "rascas/extended-euclidean-algorithm.rkt") (lib "rascas/scribblings/rascas.scrbl") (lib "rascas/log.rkt") (lib "rascas/monomial-gpe.rkt") (lib "rascas/alge.rkt") (lib "rascas/factorial.rkt") (lib "rascas/derivative.rkt") (lib "rascas/contract-trig.rkt") (lib "rascas/rational-gre.rkt"))) (name . "rascas") (nix-sha256 . "1j6ni8hm0c2lf5y37ybvbyfkh78f1ii797p05f4hsdc4dz0jy1m9") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (algebra . #t) (author:laurent.orseau@gmail.com . #t) (math . #t) (ring:2 . #t))) (source . "https://github.com/Metaxal/rascas.git") (tags . ("algebra" "math")) (versions . #hash((default . #hasheq((checksum . "1487a1b84893865c63cbefabee81264a94131b27") (source . "https://github.com/Metaxal/rascas.git") (source_url . "https://github.com/Metaxal/rascas.git"))))))) ("stomp" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "stomp" "doc/stomp@stomp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/stomp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/stomp.txt"))) (checksum . "2faf3626440c744e792dff7b3e9d8bfc777628f8") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "STOMP messaging protocol codec and client") (implies . ()) (last-checked . 1522414684) (last-edit . 1441911242) (last-updated . 1502816456) (modules . ((lib "stomp/session.rkt") (lib "stomp/examples/stomp-tail-activemq.rkt") (lib "stomp/functional-queue.rkt") (lib "stomp/test-functional-queue.rkt") (lib "stomp/main.rkt") (lib "stomp/examples/rpc-server.rkt") (lib "stomp/test-packet.rkt") (lib "stomp/packet.rkt") (lib "stomp/examples/stomp-tail.rkt") (lib "stomp/scribblings/stomp.scrbl") (lib "stomp/examples/rpc-client.rkt"))) (name . "stomp") (nix-sha256 . "0rq1kgq9bq9q81sv9dnflf8w10l76kqkynzl2jqkijnps85jy40b") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:tonygarnockjones@gmail.com . #t) (communication . #t) (net . #t) (ring:1 . #t))) (source . "github://github.com/tonyg/racket-stomp/master") (tags . ("communication" "net")) (versions . #hash((default . #hasheq((checksum . "2faf3626440c744e792dff7b3e9d8bfc777628f8") (source . "github://github.com/tonyg/racket-stomp/master") (source_url . "http://github.com/tonyg/racket-stomp/tree/master"))))))) ("data-red-black" . #hasheq((author . "dyoo@hashcollision.org") (authors . ("dyoo@hashcollision.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "data-red-black" "doc/data-red-black@data-red-black/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/data-red-black.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/data-red-black.txt"))) (checksum . "d473dd82c5406c8954f70060fe3764bf72d92a90") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "data-lib" "data-doc" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "red-black trees.  Includes implementations of augmented red-black trees, positional red-black trees, and an ordered set backed by a rb-tree.") (implies . ()) (last-checked . 1522414373) (last-edit . 1359057406) (last-updated . 1502815880) (modules . ((lib "data/red-black/augmented.scrbl") (lib "data/red-black/biblio.scrbl") (lib "data/red-black/ordered-set.rkt") (lib "data/red-black/data-red-black.scrbl") (lib "data/red-black/positional.scrbl") (lib "data/red-black/augmented.rkt") (lib "data/red-black/ordered-set.scrbl") (lib "data/red-black/rb-token-tree.rkt") (lib "data/red-black/positional.rkt"))) (name . "data-red-black") (nix-sha256 . "1s19q718ac26cpzm0gqxp8n3ywqqp5pm9i96hnv9gyrfrh8836ah") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dyoo@hashcollision.org . #t) (data . #t) (ring:1 . #t))) (source . "github://github.com/dyoo/data-red-black/master/") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "d473dd82c5406c8954f70060fe3764bf72d92a90") (source . "github://github.com/dyoo/data-red-black/master/") (source_url . "http://github.com/dyoo/data-red-black/tree/master/"))))))) ("unstable-flonum-lib" . #hash((author . "ntoronto@racket-lang.org") (authors . ("ntoronto@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-flonum-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-flonum-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "Experimental libraries for flonum computations") (implies . ()) (last-checked . 1522414698) (last-edit . 1445382797) (last-updated . 1502816513) (modules . ((lib "unstable/flonum.rkt"))) (name . "unstable-flonum-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:ntoronto@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("unstable")) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) (default . #hasheq((checksum . "7071d9a3ee0ad60f947c0a597ddd4b64bed3d94a") (source . "git://github.com/racket/unstable-flonum/?path=unstable-flonum-lib") (source_url . "git://github.com/racket/unstable-flonum/?path=unstable-flonum-lib"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("pict-doc" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (checksum . "4e4e0df6882182ae2fdf53aab1910f7219f58bb8") (dependencies . ("base" "mzscheme-doc" "draw-doc" "gui-doc" "slideshow-doc" "draw-lib" "gui-lib" "scribble-lib" "slideshow-lib" "pict-lib" "racket-doc" "scribble-doc")) (description . "mflatt@racket-lang.org robby@racket-lang.org") (modules . ()) (name . "pict-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/pict-doc.zip") (tags . ()))) ("identikon" . #hasheq((author . "info@v25media.com") (authors . ("info@v25media.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "identikon" "doc/identikon@identikon/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/identikon.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/identikon.txt"))) (checksum . "197439f4e7022351ddc4f0ce47241452ed7e5dc7") (checksum-error . #f) (conflicts . ()) (dependencies . ("draw-lib" "gui-lib" "base" "sugar" "css-tools" "htdp-lib" "quickcheck" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Tiny framework for generating identicons") (implies . ()) (last-checked . 1522414419) (last-edit . 1444010690) (last-updated . 1505183360) (modules . ((lib "identikon/rules/angles2.rkt") (lib "identikon/rules/stars.rkt") (lib "identikon/transforms.rkt") (lib "identikon/rules/default.rkt") (lib "identikon/rules/circles.rkt") (lib "identikon/main.rkt") (lib "identikon/rules/qbert.rkt") (lib "identikon/utils.rkt") (lib "identikon/rules/angles.rkt") (lib "identikon/rules/nineblock.rkt") (lib "identikon/rules/rings.rkt") (lib "identikon/scribblings/identikon.scrbl") (lib "identikon/rules/squares.rkt"))) (name . "identikon") (nix-sha256 . "001kw734ak6igv1x4svrjz0yaws5jh53q9m4a7nwy6k7jq0jxq9m") (ring . 1) (search-terms . #hasheq((2htdp . #t) (:build-success: . #t) (:docs: . #t) (author:info@v25media.com . #t) (graphics . #t) (identicon . #t) (ring:1 . #t))) (source . "git://github.com/DarrenN/identikon.git") (tags . ("2htdp" "graphics" "identicon")) (versions . #hash(("1.0.1" . #hasheq((checksum . "") (source . "https://github.com/DarrenN/identikon/tree/1.0.1") (source_url . "https://github.com/DarrenN/identikon/tree/1.0.1"))) (default . #hasheq((checksum . "197439f4e7022351ddc4f0ce47241452ed7e5dc7") (source . "git://github.com/DarrenN/identikon.git") (source_url . "http://github.com/DarrenN/identikon.git/tree/master"))))))) ("mongodb" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mongodb" "doc/mongodb@mongodb/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mongodb.txt") (test-failure-log . "server/built/test-fail/mongodb.txt") (test-success-log . #f))) (checksum . "1a0d1ee82be28888d7cb9ca679b7598c5798f586") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.2.900.15") "web-server-lib" "srfi-lite-lib" "eli-tester" "racket-doc" "scribble-lib" "srfi-doc" "web-server-doc")) (description . "A native Racket interface to MongoDB & BSON") (implies . ()) (last-checked . 1522414436) (last-edit . 1353196115) (last-updated . 1521391496) (modules . ((lib "tests/db/mongodb/basic.rkt") (lib "net/bson/binio.rkt") (lib "tests/db/mongodb/wire.rkt") (lib "tests/net/bson.rkt") (lib "net/bson/write.rkt") (lib "db/mongodb/wire/driver.rkt") (lib "db/mongodb/orm/struct.rkt") (lib "net/bson.rkt") (lib "db/mongodb/orm/dict.rkt") (lib "net/bson/shared.rkt") (lib "db/mongodb.rkt") (lib "tests/db/mongodb/orm.rkt") (lib "net/bson/mapping.rkt") (lib "db/mongodb/basic/main.rkt") (lib "net/bson/read.rkt") (lib "db/mongodb/basic/driver.rkt") (lib "tests/db/mongodb/quick-start.rkt") (lib "db/mongodb/orm/main.rkt") (lib "net/bson/driver.rkt") (lib "db/mongodb/wire/format.rkt") (lib "db/mongodb/seq.rkt") (lib "db/mongodb/mongodb.scrbl") (lib "db/mongodb/wire/main.rkt") (lib "web-server/dispatch/mongodb.rkt") (lib "tests/db/mongodb/util.rkt"))) (name . "mongodb") (nix-sha256 . "1vv3aivr4x8ws7r8nnbxxdpipzg5ms397dwygyawvkbgmpazd1yy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (db . #t) (net . #t) (ring:1 . #t))) (source . "github://github.com/jeapostrophe/mongodb/master") (tags . ("db" "net")) (versions . #hash(("6.2.1" . #hasheq((checksum . "76b8b080be58e2f641b8bda12c6d08ebcff803a8") (source . "git://github.com/jeapostrophe/mongodb#76b8b080be58e2f641b8bda12c6d08ebcff803a8") (source_url . "http://github.com/jeapostrophe/mongodb/tree/master#76b8b080be58e2f641b8bda12c6d08ebcff803a8"))) (default . #hasheq((checksum . "1a0d1ee82be28888d7cb9ca679b7598c5798f586") (source . "github://github.com/jeapostrophe/mongodb/master") (source_url . "http://github.com/jeapostrophe/mongodb/tree/master"))))))) ("find-parent-dir" . #hasheq((author . "samth@ccs.neu.edu eric.hanchrow@gmail.com") (authors . ("samth@ccs.neu.edu" "eric.hanchrow@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/find-parent-dir.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/find-parent-dir.txt"))) (checksum . "e78d0277447d81934847166e8024edc5adea4b1c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "Find parent directories matching a criterion.") (implies . ()) (last-checked . 1522414401) (last-edit . 1381252407) (last-updated . 1502816067) (modules . ((lib "find-parent-dir/main.rkt"))) (name . "find-parent-dir") (nix-sha256 . "0h2ssvpc6iz1aw4j1lqcw7rdy2rjxm78rdq8gvap9m8vr0vsak2x") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:eric.hanchrow@gmail.com . #t) (author:samth@ccs.neu.edu . #t) (file-system . #t) (ring:1 . #t))) (source . "github://github.com/samth/find-parent-dir/master") (tags . ("file-system")) (versions . #hash((default . #hasheq((checksum . "e78d0277447d81934847166e8024edc5adea4b1c") (source . "github://github.com/samth/find-parent-dir/master") (source_url . "http://github.com/samth/find-parent-dir/tree/master"))))))) ("feature-profile" . #hasheq((author . "stamourv@racket-lang.org") (authors . ("stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "feature-profile" "doc/feature-profile@feature-profile/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/feature-profile.txt") (test-failure-log . "server/built/test-fail/feature-profile.txt") (test-success-log . #f))) (checksum . "cc96e3aa8efe71c013f662c60e2b0d9231b27f97") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.3") "contract-profile" "profile-lib" "rackunit-lib" "scribble-lib" "racket-doc" "sandbox-lib")) (description . "Profile that measures time spent in language/library features") (implies . ()) (last-checked . 1522414400) (last-edit . 1398968923) (last-updated . 1504303442) (modules . ((lib "feature-profile/main.rkt") (lib "feature-profile/examples/matrix-mult.rkt") (lib "feature-profile/tree-walker.rkt") (lib "feature-profile/examples/word-wrap.rkt") (lib "feature-profile/plug-in-lib.rkt") (lib "feature-profile/profile-helpers.rkt") (lib "feature-profile/scribblings/feature-profile.scrbl") (lib "feature-profile/utils.rkt") (lib "feature-profile/examples/run-all.rkt") (lib "feature-profile/structs.rkt") (lib "feature-profile/features.rkt") (lib "feature-profile/examples/fizzbuzz.rkt") (lib "feature-profile/examples/composition.rkt") (lib "feature-profile/raco.rkt"))) (name . "feature-profile") (nix-sha256 . "0yymgv192qfpy6smynk3xafzf9j95hjvhgg1h7gxnd3r4wg6hw91") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:stamourv@racket-lang.org . #t) (dev . #t) (performance . #t) (ring:1 . #t))) (source . "git://github.com/stamourv/feature-profile#master") (tags . ("dev" "performance")) (versions . #hash(("6.3" . #hasheq((checksum . "ef1ee21c9974b8c9b109a0bed5bff4655116c094") (source . "github://github.com/stamourv/feature-profile/racket-6.3") (source_url . "http://github.com/stamourv/feature-profile/tree/racket-6.3"))) (default . #hasheq((checksum . "cc96e3aa8efe71c013f662c60e2b0d9231b27f97") (source . "git://github.com/stamourv/feature-profile#master") (source_url . "http://github.com/stamourv/feature-profile/tree/master#master"))) ("6.2" . #hasheq((checksum . "fb1303c585ec4de440f325d21d21b9030bc742e5") (source . "github://github.com/stamourv/feature-profile/racket-6.2") (source_url . "http://github.com/stamourv/feature-profile/tree/racket-6.2"))))))) ("kitco" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "kitco" "doc/kitco@kitco/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/kitco.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/kitco.txt"))) (checksum . "f26e9472df8d0fd74c6128d9c342d205c4003916") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "overeasy")) (description . "Precious Metals Market Info. Access") (implies . ()) (last-checked . 1522414422) (last-edit . 1456713739) (last-updated . 1502816145) (modules . ((lib "kitco/main.rkt") (lib "kitco/kitco.scrbl"))) (name . "kitco") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (finance . #t) (ring:1 . #t) (sxml . #t))) (source . "http://www.neilvandyke.org/racket/kitco.zip") (tags . ("finance" "sxml")) (versions . #hash((default . #hasheq((checksum . "f26e9472df8d0fd74c6128d9c342d205c4003916") (source . "http://www.neilvandyke.org/racket/kitco.zip") (source_url . "http://www.neilvandyke.org/racket/kitco.zip"))))))) ("xe" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/xe.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xe.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/xe.txt"))) (checksum . "279efa337ba9cdc4e477dd057915009d366fe3c5") (checksum-error . #f) (conflicts . ()) (dependencies . ()) (description . "xexpr XML utilities, plus traversal and filtering") (implies . ()) (last-checked . 1522414703) (last-edit . 1522120283) (last-updated . 1522120283) (modules . ((lib "xe/main.rkt"))) (name . "xe") (nix-sha256 . "023w7mpch40k4n4gh2n2l7m8hgbdfk2sz63rcnk4y56s5538hvzc") (ring . 2) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:2 . #t) (xexpr . #t) (xml . #t))) (source . "https://github.com/tonyg/racket-xe.git") (tags . ("xexpr" "xml")) (versions . #hash((default . #hasheq((checksum . "279efa337ba9cdc4e477dd057915009d366fe3c5") (source . "https://github.com/tonyg/racket-xe.git") (source_url . "https://github.com/tonyg/racket-xe.git"))))))) ("lazy" . #hash((author . "eli@racket-lang.org stchang@racket-lang.org") (checksum . "311f73e5e9dc758f1f07719f06e2847b2a162d7f") (dependencies . ("base" "drracket-plugin-lib" "htdp-lib" "string-constants-lib" "compatibility-lib" "mzscheme-doc" "scheme-lib" "eli-tester" "racket-doc" "scribble-lib")) (description . "eli@racket-lang.org stchang@racket-lang.org") (modules . ()) (name . "lazy") (source . "https://download.racket-lang.org/releases/6.12/pkgs/lazy.zip") (tags . ()))) ("with-cache" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "with-cache" "doc/with-cache@with-cache/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/with-cache.txt") (test-failure-log . "server/built/test-fail/with-cache.txt") (test-success-log . #f))) (checksum . "09935a48d328ce59ab8320b6a9c7d2b128f22b0c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "basedir" "scribble-lib" "racket-doc" "rackunit-lib" "pict-lib")) (description . "Filesystem-based caching") (implies . ()) (last-checked . 1522414702) (last-edit . 1470291210) (last-updated . 1521771821) (modules . ((lib "with-cache/scribblings/with-cache.scrbl") (lib "with-cache/test/main.rkt") (lib "with-cache/main.rkt") (lib "with-cache/private/with-cache.rkt"))) (name . "with-cache") (nix-sha256 . "11f1j9jdyw6kmfy6b873j5sw2ma581ylngjml53zf5v19cbmi7z0") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (cache . #t) (ring:1 . #t))) (source . "git://github.com/bennn/with-cache") (tags . ("cache")) (versions . #hash((default . #hasheq((checksum . "09935a48d328ce59ab8320b6a9c7d2b128f22b0c") (source . "git://github.com/bennn/with-cache") (source_url . "http://github.com/bennn/with-cache/tree/master"))))))) ("ds-store" . #hash((author . "mflatt@racket-lang.org") (checksum . "e011736223cfd87066b109153f1c8148da55e3aa") (dependencies . ("ds-store-lib" "ds-store-doc" "base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "ds-store") (source . "https://download.racket-lang.org/releases/6.12/pkgs/ds-store.zip") (tags . ()))) ("whalesong-tools" . #hasheq((author . "stchang@racket-lang.org vyadav@ccs.neu.edu") (authors . ("stchang@racket-lang.org" "vyadav@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/whalesong-tools.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "980bd29cdb77749627f21edeeb6aa76a3f80750a") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "gui-lib" "drracket-plugin-lib" "whalesong")) (description . "DrRacket tool for compiling with Whalesong") (implies . ()) (last-checked . 1522414702) (last-edit . 1441723478) (last-updated . 1502816528) (modules . ((lib "whalesong-tools/tool.rkt"))) (name . "whalesong-tools") (nix-sha256 . "18nxrdv1yw9p54zbbfm88am2q8n0x3m3znc0srg6g0lg861p9wg0") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:stchang@racket-lang.org . #t) (author:vyadav@ccs.neu.edu . #t) (javascript . #t) (ring:1 . #t) (whalesong . #t))) (source . "git://github.com/vishesh/drracket-whalesong") (tags . ("javascript" "whalesong")) (versions . #hash((default . #hasheq((checksum . "980bd29cdb77749627f21edeeb6aa76a3f80750a") (source . "git://github.com/vishesh/drracket-whalesong") (source_url . "http://github.com/vishesh/drracket-whalesong/tree/master"))))))) ("csv" . #hasheq((author . "linjunhalida@gmail.com") (authors . ("linjunhalida@gmail.com")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . "server/built/deps/csv.txt") (docs . (("extract" "csv" "doc/csv@csv/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/csv.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/csv.txt"))) (checksum . "c21cf591926b8c978b3191671ca50570fc50d21b") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "csv file reader and writer") (implies . ()) (last-checked . 1522414371) (last-edit . 1455333284) (last-updated . 1502815874) (modules . ((lib "csv/main.rkt") (lib "csv/test.rkt") (lib "csv/scribblings/csv.scrbl"))) (name . "csv") (nix-sha256 . "0srzi7rghl10mg0xmpwwysbqjm524cfylvz9cr5l5pccw0wsab91") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-dep-fail: . #t) (:build-success: . #t) (:docs-error: . #t) (:docs: . #t) (:no-tag: . #t) (author:linjunhalida@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/halida/csv") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c21cf591926b8c978b3191671ca50570fc50d21b") (source . "git://github.com/halida/csv") (source_url . "http://github.com/halida/csv/tree/master"))))))) ("gui-i386-macosx" . #hash((author . "mflatt@racket-lang.org") (checksum . "3de5e363104f33d6e484d014999d4b695f25f157") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "gui-i386-macosx") (source . "https://download.racket-lang.org/releases/6.12/pkgs/gui-i386-macosx.zip") (tags . ()))) ("slideshow-repl" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "slideshow-repl" "doc/slideshow-repl@slideshow-repl/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/slideshow-repl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/slideshow-repl.txt"))) (checksum . "93246109d2dc471ab1ce28afda9f23305cf94efb") (checksum-error . #f) (conflicts . ()) (dependencies . ("errortrace-lib" "gui-lib" "slideshow-lib" "base" "pict-lib" "pict-snip-lib" "draw-doc" "draw-lib" "pict-doc" "racket-doc" "scribble-lib" "slideshow-doc")) (description . "") (implies . ()) (last-checked . 1522414680) (last-edit . 1383054198) (last-updated . 1502816436) (modules . ((lib "slideshow/repl.rkt") (lib "slideshow/private/editor.rkt") (lib "slideshow/scribblings/slideshow-repl.scrbl"))) (name . "slideshow-repl") (nix-sha256 . "0bigsi983ypbi1j6704waivj4z85dnn7pvcp71w5kas31m2b12g4") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (author:mflatt@cs.utah.edu . #t) (ring:1 . #t) (slideshow . #t))) (source . "github://github.com/mflatt/slideshow-repl/master") (tags . ("slideshow")) (versions . #hash((default . #hasheq((checksum . "93246109d2dc471ab1ce28afda9f23305cf94efb") (source . "github://github.com/mflatt/slideshow-repl/master") (source_url . "http://github.com/mflatt/slideshow-repl/tree/master"))))))) ("mode-lambda" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mode-lambda" "doc/mode-lambda@mode-lambda/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mode-lambda.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mode-lambda.txt"))) (checksum . "b5eaaf65765f08233a25bc8b9a9e3e269e666cb1") (checksum-error . #f) (conflicts . ()) (dependencies . ("gui-lib" "scheme-lib" "web-server-lib" "lux" "base" "srfi-lite-lib" "draw-lib" "opengl" "htdp-lib" "pict-lib" "draw-lib" "draw-doc" "racket-doc" "scribble-lib" "rackunit-lib")) (description . "2d sprite-based graphics engine") (implies . ()) (last-checked . 1522414436) (last-edit . 1431992260) (last-updated . 1519945558) (modules . ((lib "mode-lambda/korf-bin.rkt") (lib "mode-lambda/text/static.rkt") (lib "mode-lambda/util.rkt") (lib "mode-lambda/backend/software.rkt") (lib "mode-lambda/examples/transparency/open-gl-issue.rkt") (lib "mode-lambda/backend/software/2d-hash.rkt") (lib "mode-lambda/backend/gl.rkt") (lib "mode-lambda/examples/jens.rkt") (lib "mode-lambda/sprite-index.rkt") (lib "mode-lambda/scribblings/mode-lambda.scrbl") (lib "mode-lambda/backend/lib.rkt") (lib "mode-lambda/backend/gl/util.rkt") (lib "mode-lambda/examples/one.rkt") (lib "mode-lambda/color.rkt") (lib "mode-lambda/main.rkt") (lib "mode-lambda/static.rkt") (lib "mode-lambda/scribblings/backend-gl.scrbl") (lib "mode-lambda/shot.rkt") (lib "mode-lambda/scribblings/backend-software.scrbl") (lib "mode-lambda/text/runtime.rkt") (lib "mode-lambda/text.rkt") (lib "mode-lambda/core.rkt"))) (name . "mode-lambda") (nix-sha256 . "0ip93hbx7pj48kj5p5h87v4h6m6pyb6ahccy3wn62mvicg3mp20s") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (OpenGL . #t) (author:jay.mccarthy@gmail.com . #t) (graphics . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/mode-lambda") (tags . ("graphics" "OpenGL")) (versions . #hash((default . #hasheq((checksum . "b5eaaf65765f08233a25bc8b9a9e3e269e666cb1") (source . "git://github.com/jeapostrophe/mode-lambda") (source_url . "http://github.com/jeapostrophe/mode-lambda/tree/master"))))))) ("srfi-doc" . #hash((author . "mflatt@racket-lang.org noel@racket-lang.org chongkai@racket-lang.org jay@racket-lang.org") (checksum . "e7daeb684a3e427cb27524fb11d13a04a9078259") (dependencies . ("mzscheme-doc" "scheme-lib" "base" "scribble-lib" "srfi-lib" "racket-doc" "r5rs-doc" "r6rs-doc" "compatibility-lib")) (description . "mflatt@racket-lang.org noel@racket-lang.org chongkai@racket-lang.org jay@racket-lang.org") (modules . ()) (name . "srfi-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/srfi-doc.zip") (tags . ()))) ("planet2-example" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/planet2-example.txt") (test-failure-log . "server/built/test-fail/planet2-example.txt") (test-success-log . #f))) (checksum . "9d9e4dc77adfc7299987a4cbbe8ce43869eec53e") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "An example package for testing purposes") (implies . ()) (last-checked . 1522414514) (last-edit . 1504535384) (last-updated . 1502816265) (modules . ((lib "data/frob-nob.rkt"))) (name . "planet2-example") (nix-sha256 . "0w4wz77aka2bdx20w6f735qdl4xvapyy2hwiwzx2lrs4ax8wjpj9") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (examples . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/planet2-example") (tags . ("examples")) (versions . #hash((default . #hasheq((checksum . "9d9e4dc77adfc7299987a4cbbe8ce43869eec53e") (source . "git://github.com/jeapostrophe/planet2-example") (source_url . "http://github.com/jeapostrophe/planet2-example/tree/master"))))))) ("herbie" . #hasheq((author . "me@pavpanchekha.com") (authors . ("me@pavpanchekha.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/herbie.txt") (test-failure-log . "server/built/test-fail/herbie.txt") (test-success-log . #f))) (checksum . "7c32f81f8d25de9f599bf43ee74db50fcb732057") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.3") "math-lib" "plot-lib" "profile-lib" "rackunit-lib" "web-server-lib" "rackunit-lib")) (description . "A tool for automatically improving the accuracy of floating point expressions") (implies . ()) (last-checked . 1522414415) (last-edit . 1504172938) (last-updated . 1502816111) (modules . ((lib "herbie/reports/run.rkt") (lib "herbie/old/data.rkt") (lib "herbie/old/herbie.rkt") (lib "herbie/herbie.rkt") (lib "herbie/core/regimes.rkt") (lib "herbie/syntax/syntax.rkt") (lib "herbie/test/exacts-test.rkt") (lib "herbie/range-analysis.rkt") (lib "herbie/multi-command-line.rkt") (lib "herbie/formats/c.rkt") (lib "herbie/reports/common.rkt") (lib "herbie/glue.rkt") (lib "herbie/errors.rkt") (lib "herbie/web/demo.rkt") (lib "herbie/float.rkt") (lib "herbie/test/regimes-test.rkt") (lib "herbie/core/localize.rkt") (lib "herbie/syntax/rules.rkt") (lib "herbie/plot.rkt") (lib "herbie/old/inout.rkt") (lib "herbie/formats/test.rkt") (lib "herbie/points.rkt") (lib "herbie/core/enode.rkt") (lib "herbie/core/alt-table.rkt") (lib "herbie/reports/rerun.rkt") (lib "herbie/formats/datafile.rkt") (lib "herbie/mainloop.rkt") (lib "herbie/web/session.rkt") (lib "herbie/formats/tex.rkt") (lib "herbie/function-definitions.rkt") (lib "herbie/old/util.rkt") (lib "herbie/common.rkt") (lib "herbie/debug.rkt") (lib "herbie/web/common.rkt") (lib "herbie/reports/thread-pool.rkt") (lib "herbie/web/viz.rkt") (lib "herbie/core/egraph.rkt") (lib "herbie/reports/make-graph.rkt") (lib "herbie/sandbox.rkt") (lib "herbie/core/matcher.rkt") (lib "herbie/improve.rkt") (lib "herbie/config.rkt") (lib "herbie/programs.rkt") (lib "herbie/syntax/distributions.rkt") (lib "herbie/web/tools.rkt") (lib "herbie/core/ematch.rkt") (lib "herbie/core/taylor.rkt") (lib "herbie/core/reduce.rkt") (lib "herbie/reports/make-report.rkt") (lib "herbie/core/simplify.rkt") (lib "herbie/core/periodicity.rkt") (lib "herbie/shell.rkt") (lib "herbie/alternative.rkt"))) (name . "herbie") (nix-sha256 . "10h4qqsz6v9qlv7331qv51jq8dy51fxiasp3wi62zdjc05cjkv9d") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:me@pavpanchekha.com . #t) (floating-point . #t) (ring:1 . #t) (synthesis . #t))) (source . "git://github.com/uwplse/herbie?path=src") (tags . ("floating-point" "synthesis")) (versions . #hash((default . #hasheq((checksum . "7c32f81f8d25de9f599bf43ee74db50fcb732057") (source . "git://github.com/uwplse/herbie?path=src") (source_url . "http://github.com/uwplse/herbie/tree/master?path=src"))))))) ("db-win32-i386" . #hash((author . "mflatt@racket-lang.org") (checksum . "9a6be8613c958a25aeae8db26a0f082820f6ea7e") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "db-win32-i386") (source . "https://download.racket-lang.org/releases/6.12/pkgs/db-win32-i386.zip") (tags . ()))) ("unstable-latent-contract-lib" . #hash((author . "mflatt@racket-lang.org ntoronto@racket-lang.org") (authors . ("mflatt@racket-lang.org" "ntoronto@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-latent-contract-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-latent-contract-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" ("images-lib" #:version "1.2"))) (description . "Experimental libraries for contracts at definitions") (implies . ()) (last-checked . 1522414698) (last-edit . 1445382797) (last-updated . 1502816514) (modules . ((lib "unstable/latent-contract/defthing.rkt") (lib "unstable/latent-contract.rkt") (lib "unstable/latent-contract/serialize-syntax.rkt"))) (name . "unstable-latent-contract-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:mflatt@racket-lang.org . #t) (author:ntoronto@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("unstable")) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) (default . #hasheq((checksum . "3bd435890dae3365abe90fd1b5f7c62837e3801e") (source . "git://github.com/racket/unstable-latent-contract-lib") (source_url . "http://github.com/racket/unstable-latent-contract-lib/tree/master"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("mischief" . #hasheq((author . "cce@racket-lang.org") (authors . ("cce@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mischief" "doc/mischief@mischief/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mischief.txt") (test-failure-log . "server/built/test-fail/mischief.txt") (test-success-log . #f))) (checksum . "617f557630ad958c4f9cd3dcfc0326808b815528") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "macro-debugger" "macro-debugger-text-lib" "pconvert-lib" "sandbox-lib" "scribble-lib" "srfi-lib" "srfi-lite-lib" "compatibility-doc" "data-doc" "racket-doc" "scribble-doc" "racket-index" "rackunit-gui" "rackunit-lib")) (description . "Mischief: A Racketeer's Toolkit") (implies . ()) (last-checked . 1522414435) (last-edit . 1365619321) (last-updated . 1502816181) (modules . ((lib "debug/provide.rkt") (lib "debug/racket/lang/reader.rkt") (lib "no-debug/syntax.rkt") (lib "mischief/web.rkt") (lib "mischief/define.rkt") (lib "mischief/parse.rkt") (lib "mischief/scribblings/visitor.scrbl") (lib "mischief/string.rkt") (lib "no-debug/racket.rkt") (lib "mischief/scribblings/debugging.scrbl") (lib "mischief/list.rkt") (lib "mischief/scribblings/transform.scrbl") (lib "mischief/lang/config.rkt") (lib "debug/racket.rkt") (lib "mischief/phrase.rkt") (lib "mischief/lang/reader.rkt") (lib "mischief/match.rkt") (lib "mischief/scribblings/typesetting.scrbl") (lib "mischief/stylish/print.rkt") (lib "mischief/transform.rkt") (lib "mischief/scribblings/modular.scrbl") (lib "no-debug/racket/base.rkt") (lib "mischief/scribblings/debug.scrbl") (lib "debug/mischief.rkt") (lib "mischief/scope.rkt") (lib "mischief/visitor.rkt") (lib "mischief/quotation.rkt") (lib "mischief/place.rkt") (lib "debug/racket/base/lang/reader.rkt") (lib "mischief/scribblings/contract.scrbl") (lib "mischief/scribblings/metaprogramming.scrbl") (lib "mischief/scribblings/for.scrbl") (lib "mischief/require.rkt") (lib "mischief/id-table.rkt") (lib "mischief/private/render-expression.rkt") (lib "no-debug/racket/base/lang/reader.rkt") (lib "mischief/scribblings/no-debug.scrbl") (lib "mischief/stylish/expression.rkt") (lib "mischief/struct.rkt") (lib "mischief/scribblings/fold.scrbl") (lib "mischief/scribblings/dye-pack.scrbl") (lib "mischief/memoize.rkt") (lib "mischief/discrim.rkt") (lib "mischief/scribblings/bindings.scrbl") (lib "mischief/scribblings/stylish.scrbl") (lib "debug/main.rkt") (lib "mischief/scribblings/metaprogramming-simple.scrbl") (lib "mischief/stylish/print-style.rkt") (lib "mischief/scribblings/kernel-syntax.scrbl") (lib "mischief/stylish/format.rkt") (lib "mischief/scribblings/scope.scrbl") (lib "mischief/contract.rkt") (lib "mischief/symbol.rkt") (lib "mischief/main.rkt") (lib "mischief/scribblings/memoize.scrbl") (lib "mischief/scribblings/id-table.scrbl") (lib "mischief/scribblings/metaprogramming-complex.scrbl") (lib "mischief/maybe.rkt") (lib "debug/syntax.rkt") (lib "mischief/dye-pack.rkt") (lib "mischief/kernel-syntax.rkt") (lib "mischief/module.rkt") (lib "mischief/for.rkt") (lib "mischief/stylish/signatures.rkt") (lib "mischief/scribblings/web.scrbl") (lib "mischief/scribblings/metaprogramming-moderate.scrbl") (lib "mischief/dict.rkt") (lib "mischief/scribblings/mischief.scrbl") (lib "mischief/fold.rkt") (lib "mischief/error.rkt") (lib "mischief/scribblings/parse.scrbl") (lib "mischief/stylish/expr-style.rkt") (lib "mischief/stepper.rkt") (lib "debug/low-level.rkt") (lib "mischief/explode.rkt") (lib "mischief/preserve-expensive-metadata.rkt") (lib "mischief/stylish/stylish.rkt") (lib "mischief/sort.rkt") (lib "no-debug/mischief.rkt") (lib "mischief/stream.rkt") (lib "no-debug/main.rkt") (lib "mischief/scribblings/printing.scrbl") (lib "mischief/json.rkt") (lib "mischief/scribblings/higher-order.scrbl") (lib "mischief/shorthand.rkt") (lib "mischief/scribblings/datatypes.scrbl") (lib "mischief/lang/runtime.rkt") (lib "mischief/tests/stylish.rkt") (lib "mischief/scribblings/function.scrbl") (lib "mischief/props/lang/reader.rkt") (lib "mischief/scribblings/examples.scrbl") (lib "debug/racket/base.rkt") (lib "mischief/boolean.rkt") (lib "debug/mischief/lang/reader.rkt") (lib "no-debug/mischief/lang/reader.rkt") (lib "mischief/keyword.rkt") (lib "mischief/private/reify-value.rkt") (lib "no-debug/low-level.rkt") (lib "mischief/function.rkt") (lib "mischief/values.rkt") (lib "mischief/examples.rkt") (lib "no-debug/racket/lang/reader.rkt") (lib "mischief/stylish.rkt"))) (name . "mischief") (nix-sha256 . "10qnv88rl8a69vz67xfxhvamqisfc5287i6kp6x2x9f288c2cfl4") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:cce@racket-lang.org . #t) (data . #t) (debug . #t) (dev . #t) (documentation . #t) (language . #t) (ring:1 . #t) (syntax . #t))) (source . "github://github.com/carl-eastlund/mischief/stable") (tags . ("data" "debug" "dev" "documentation" "language" "syntax")) (versions . #hash((default . #hasheq((checksum . "617f557630ad958c4f9cd3dcfc0326808b815528") (source . "github://github.com/carl-eastlund/mischief/stable") (source_url . "http://github.com/carl-eastlund/mischief/tree/stable"))))))) ("drracket-paredit" . #hasheq((author . "yj_qww6@126.com") (authors . ("yj_qww6@126.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-paredit.txt") (test-failure-log . "server/built/test-fail/drracket-paredit.txt") (test-success-log . #f))) (checksum . "62514f243eb9c9d8502707ed7db39caf271039c1") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "drracket" "drracket-plugin-lib" "gui-lib" "srfi-lib")) (description . "paredit keybindings for DrRacket") (implies . ()) (last-checked . 1522414394) (last-edit . 1388410593) (last-updated . 1519298677) (modules . ((lib "drracket-paredit/tool.rkt") (lib "drracket-paredit/paredit.rkt"))) (name . "drracket-paredit") (nix-sha256 . "10254w06axg8zibcf7mpcxrk47ashzgalqdcg7jijr10gcvsai98") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:yj_qww6@126.com . #t) (ring:1 . #t))) (source . "github://github.com/yjqww6/drracket-paredit/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "62514f243eb9c9d8502707ed7db39caf271039c1") (source . "github://github.com/yjqww6/drracket-paredit/master") (source_url . "http://github.com/yjqww6/drracket-paredit/tree/master"))))))) ("typed-map-lib" . #hasheq((author . "georges.duperon@gmail.com") (authors . ("georges.duperon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-map-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-map-lib.txt"))) (checksum . "c9c5a236f4e32d9391df3edffdf9b1a55401fe31") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib")) (description . "Implementation of typed-map") (implies . ()) (last-checked . 1522414695) (last-edit . 1501078546) (last-updated . 1517062738) (modules . ((lib "typed-map/main.rkt"))) (name . "typed-map-lib") (nix-sha256 . "150agc51y1kvrarg0n6r2x6n3awnvivqj5k78gx9ngr8q31zl83f") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:georges.duperon@gmail.com . #t) (ring:1 . #t) (typed-map . #t))) (source . "https://github.com/jsmaniac/typed-map.git?path=typed-map-lib") (tags . ("typed-map")) (versions . #hash((default . #hasheq((checksum . "c9c5a236f4e32d9391df3edffdf9b1a55401fe31") (source . "https://github.com/jsmaniac/typed-map.git?path=typed-map-lib") (source_url . "https://github.com/jsmaniac/typed-map.git?path=typed-map-lib"))))))) ("readline-lib" . #hash((author . "mflatt@racket-lang.org") (checksum . "0e38086653ebacac7d227454df68f6b5e67efb06") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "readline-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/readline-lib.zip") (tags . ()))) ("get-bonus" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/get-bonus.txt") (test-failure-log . "server/built/test-fail/get-bonus.txt") (test-success-log . #f))) (checksum . "77b9cb6cbaf3f3f22d34a241aa2debda9fef8455") (checksum-error . #f) (conflicts . ()) (dependencies . ("3s" "openal" "lux" "dos" "fector" "opengl" "base" "compatibility-lib" "data-lib" "data-enumerate-lib" "draw-lib" "eli-tester" "gui-lib" "htdp-lib" "math" "pfds" "plot" "rackunit-lib" "redex-lib" "mode-lambda" "apse" "slideshow-lib" "typed-racket-lib" "racket-doc")) (description . "Get Bonus is a project about discovering the best way to program video games.") (implies . ()) (last-checked . 1522414404) (last-edit . 1351829436) (last-updated . 1512418008) (modules . ((lib "gb/data/fmatrix.rkt") (lib "games/tennis/main.rkt") (lib "gb/sys/menu.rkt") (lib "exp/des.rkt") (lib "gb/input/joystick.rkt") (lib "gb/lib/meta-q.rkt") (lib "gb/lib/evector.rkt") (lib "gb/lib/srs.rkt") (lib "exp/bsp-space.rkt") (lib "gb/lib/math.rkt") (lib "gb/main.rkt") (lib "gb/data/lifo-heap.rkt") (lib "gb/art.rkt") (lib "games/rpswar/graph.rkt") (lib "gb/lib/random.rkt") (lib "gb/lib/fstree.rkt") (lib "gb/lib/performance-log.rkt") (lib "gb/graphics/main.rkt") (lib "games/maze/main.rkt") (lib "gb/data/ltq.rkt") (lib "games/maze/map.rkt") (lib "gb/gui/os.rkt") (lib "gb/input/controller.rkt") (lib "gb/meta-help.rkt") (lib "gb/sys/menu-lib.rkt") (lib "gb/lib/tr-cheat.rkt") (lib "gb/lib/ffi/vector.rkt") (lib "gb/graphics/font-lib.rkt") (lib "exp/fern.rkt") (lib "gb/lib/gzip.rkt") (lib "gb/meta.rkt") (lib "gb/lib/skal.rkt") (lib "gb/ai/path-finding.rkt") (lib "gb/data/mvector.rkt") (lib "gb/physics/cd-narrow.rkt") (lib "gb/lib/component.rkt") (lib "games/rpswar/random.rkt") (lib "gb/lib/godel-seq.rkt") (lib "gb/physics/cd-broad.rkt") (lib "gb/lib/ffi.rkt") (lib "gb/gui/world.rkt") (lib "gb/data/fvector.rkt") (lib "games/rpswar/main.rkt") (lib "gb/input/keyboard.rkt") (lib "games/rpswar/fst.rkt") (lib "gb/data/psn.rkt") (lib "tools/log-display.rkt"))) (name . "get-bonus") (nix-sha256 . "01qfv32a7wd3js96p2y03hx643g31vjdq4hdn5yq3ym1adb86h2f") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (app . #t) (audio . #t) (author:jay.mccarthy@gmail.com . #t) (games . #t) (graphics . #t) (gui . #t) (opengl . #t) (ring:1 . #t))) (source . "github://github.com/get-bonus/get-bonus/master/") (tags . ("app" "audio" "games" "graphics" "gui" "opengl")) (versions . #hash((default . #hasheq((checksum . "77b9cb6cbaf3f3f22d34a241aa2debda9fef8455") (source . "github://github.com/get-bonus/get-bonus/master/") (source_url . "http://github.com/get-bonus/get-bonus/tree/master/"))))))) ("tr-immutable" . #hasheq((author . "georges.duperon@gmail.com") (authors . ("georges.duperon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "tr-immutable" "doc/tr-immutable@tr-immutable/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tr-immutable.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tr-immutable.txt"))) (checksum . "c6a03864eb5fcb4b66759edd6ea5e06839f8c15b") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "typed-map-lib" "scribble-lib" "racket-doc" "typed-racket-doc")) (description . "Helpers to write macros using typed/racket at phase 1. Heavily unstable, WIP, experimental, not documented yet. I'm currently dogfooding this to work out the best strategy.") (implies . ()) (last-checked . 1522414693) (last-edit . 1501078978) (last-updated . 1502816487) (modules . ((lib "tr-immutable/typed-syntax/typed-syntax-convert2.rkt") (lib "tr-immutable/test/test-vector.rkt") (lib "tr-immutable/typed-syntax/typed-prefab-declarations.rkt") (lib "tr-immutable/typed-syntax/typed-syntax-convert.rkt") (lib "tr-immutable/typed-syntax.rkt") (lib "tr-immutable/private/unsafe.rkt") (lib "tr-immutable/typed-syntax/typed-syntax-predicate.rkt") (lib "tr-immutable/typed-syntax/typed-pairof-predicate.rkt") (lib "tr-immutable/main.rkt") (lib "tr-immutable/scribblings/tr-immutable.scrbl"))) (name . "tr-immutable") (nix-sha256 . "1xqcvwcxcwcnxccs34n7qrjwymdh27wbf9w5i9f8wd3x307wi1jp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:georges.duperon@gmail.com . #t) (experimental . #t) (ring:1 . #t) (syntax . #t) (typed-racket . #t) (unstable . #t))) (source . "https://github.com/jsmaniac/tr-immutable.git") (tags . ("experimental" "syntax" "typed-racket" "unstable")) (versions . #hash((default . #hasheq((checksum . "c6a03864eb5fcb4b66759edd6ea5e06839f8c15b") (source . "https://github.com/jsmaniac/tr-immutable.git") (source_url . "https://github.com/jsmaniac/tr-immutable.git"))))))) ("compatibility-test" . #hash((author . "mflatt@racket-lang.org") (checksum . "5f48974e9d9e8ddca2bea2b85853708cda05b69a") (dependencies . ("base" "racket-test" "compatibility-lib" "drracket-tool-lib" "rackunit-lib" ("pconvert-lib" #:version "1.1"))) (description . "mflatt@racket-lang.org") (modules . ()) (name . "compatibility-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/compatibility-test.zip") (tags . ()))) ("unix-socket-lib" . #hash((author . "ryanc@racket-lang.org") (checksum . "50dfb2a17f0bdef98531b4f5aec5de9a9ebe3dbb") (dependencies . (("base" #:version "6.11.0.5"))) (description . "ryanc@racket-lang.org") (modules . ()) (name . "unix-socket-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/unix-socket-lib.zip") (tags . ()))) ("rackunit-gui" . #hash((author . "ryanc@racket-lang.org") (checksum . "7754e861d16beaba2949cb81109d3bfecb02208b") (dependencies . ("rackunit-lib" "class-iop-lib" "data-lib" "gui-lib" "base")) (description . "ryanc@racket-lang.org") (modules . ()) (name . "rackunit-gui") (source . "https://download.racket-lang.org/releases/6.12/pkgs/rackunit-gui.zip") (tags . ()))) ("positional-tree-utils" . #hasheq((author . "vincentnys@gmail.com") (authors . ("vincentnys@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/positional-tree-utils.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "1ef3b3d188660b4849788872d6a2b3eaf5d355df") (checksum-error . #f) (conflicts . ()) (dependencies . ("at-exp-lib" "base" "racket-doc" "rackunit-lib" "scribble-lib" ("list-utils" #:version "0.3"))) (description . "A collection of functions which I have found useful when working with positional trees.") (implies . ()) (last-checked . 1522414535) (last-edit . 1513667654) (last-updated . 1519916728) (modules . ((lib "positional-tree-utils/main.rkt") (lib "positional-tree-utils/scribblings/positional-tree-utils.scrbl") (lib "positional-tree-utils/printer.rkt"))) (name . "positional-tree-utils") (nix-sha256 . "0v61046kwmkhi9qx4a6j9svr5lqh8ryj729zmvdsrjs5jyd9gkgj") (ring . 2) (search-terms . #hasheq((:build-fail: . #t) (author:vincentnys@gmail.com . #t) (ring:2 . #t) (trees . #t) (utilities . #t))) (source . "https://github.com/v-nys/positional-tree-utils.git") (tags . ("trees" "utilities")) (versions . #hash((default . #hasheq((checksum . "1ef3b3d188660b4849788872d6a2b3eaf5d355df") (source . "https://github.com/v-nys/positional-tree-utils.git") (source_url . "https://github.com/v-nys/positional-tree-utils.git"))))))) ("pict-snip-test" . #hash((author . "robby@racket-lang.org") (checksum . "26a4dd9d72bc6791be5fdf453ff29c0db8172fb8") (dependencies . ("base" "pict-snip-lib" "draw-lib" "pict-lib" "rackunit-lib")) (description . "robby@racket-lang.org") (modules . ()) (name . "pict-snip-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/pict-snip-test.zip") (tags . ()))) ("json-pointer" . #hasheq((author . "jesse@lisp.sh") (authors . ("jesse@lisp.sh")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "json-pointer" "doc/json-pointer@json-pointer/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/json-pointer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/json-pointer.txt"))) (checksum . "a1d88a7835ddef70d4052c3ae396642661d2ac4a") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Parse, render, and evaluate JSON Pointers (RFC 6901).") (implies . ()) (last-checked . 1522414422) (last-edit . 1514274680) (last-updated . 1514266439) (modules . ((lib "json-pointer/json.rkt") (lib "json-pointer/scribblings/parse.scrbl") (lib "json-pointer/parser.rkt") (lib "json-pointer/eval.rkt") (lib "json-pointer/scribblings/license.scrbl") (lib "json-pointer/scribblings/expr.scrbl") (lib "json-pointer/scribblings/eval.scrbl") (lib "json-pointer/expr.rkt") (lib "json-pointer/escape.rkt") (lib "json-pointer/main.rkt") (lib "json-pointer/scribblings/json-pointer.scrbl"))) (name . "json-pointer") (nix-sha256 . "0ahg81g054qslws5nsgpyqdj0dq293isaiqfmqzb6n9x2fvl3ymv") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jesse@lisp.sh . #t) (json . #t) (ring:2 . #t))) (source . "https://github.com/jessealama/json-pointer.git") (tags . ("json")) (versions . #hash((default . #hasheq((checksum . "a1d88a7835ddef70d4052c3ae396642661d2ac4a") (source . "https://github.com/jessealama/json-pointer.git") (source_url . "https://github.com/jessealama/json-pointer.git"))))))) ("hygienic-quote-lang" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "hygienic-quote" "doc/hygienic-quote@hygienic-quote-lang/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hygienic-quote-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hygienic-quote-lang.txt"))) (checksum . "82963703d47bafd51c284067771f46ea410dc725") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "hygienic-reader-extension" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "hygienic versions of quote-like racket reader macros") (implies . ()) (last-checked . 1522414418) (last-edit . 1444966530) (last-updated . 1502816131) (modules . ((lib "hygienic-quote/reader.rkt") (lib "hygienic-quote/scribblings/hygienic-quote.scrbl") (lib "hygienic-quote/lang/reader.rkt") (lib "hygienic-quote/tests/test.rkt") (lib "hygienic-quote/private/make-quote-proc.rkt"))) (name . "hygienic-quote-lang") (nix-sha256 . "1rljr5l9c6ca37snz5li6sp2g2w0d7jghr017cnavihsmhmcbrrm") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (lang-extension . #t) (ring:1 . #t) (syntax . #t))) (source . "git://github.com/AlexKnauth/hygienic-quote-lang") (tags . ("lang-extension" "syntax")) (versions . #hash((default . #hasheq((checksum . "82963703d47bafd51c284067771f46ea410dc725") (source . "git://github.com/AlexKnauth/hygienic-quote-lang") (source_url . "http://github.com/AlexKnauth/hygienic-quote-lang/tree/master"))))))) ("racket-to" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/racket-to.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-to.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-to.txt"))) (checksum . "ca058fb78edb3f62e73a943ae6e67b769be74d04") (checksum-error . #f) (conflicts . ()) (dependencies . ()) (description . "A set of lightweight transpilers from racket to other languages.  Entirely for educational and in-class demo purposes.  Don't use this for anything important yet...") (implies . ()) (last-checked . 1522414656) (last-edit . 1515359748) (last-updated . 1516742302) (modules . ((lib "racket-to/python.rkt") (lib "racket-to/processing.rkt") (lib "racket-to/racket2blank.rkt") (lib "racket-to/javascript.rkt"))) (name . "racket-to") (nix-sha256 . "1nfqn9q24cfc3dg52sxz78b2896k61h1dgyf8s87rs6y6r4agb7b") (ring . 2) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:2 . #t))) (source . "https://github.com/thoughtstem/racket-to.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "ca058fb78edb3f62e73a943ae6e67b769be74d04") (source . "https://github.com/thoughtstem/racket-to.git") (source_url . "https://github.com/thoughtstem/racket-to.git"))))))) ("libvid-x86_64-linux" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libvid-x86_64-linux.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libvid-x86_64-linux.txt"))) (checksum . "e8fb290d38e90800ffa1d105dbb540d28f931807") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "Libvid for 64-bit linux") (implies . ()) (last-checked . 1522414425) (last-edit . 1504986223) (last-updated . 1521584341) (modules . ()) (name . "libvid-x86_64-linux") (nix-sha256 . "1h5nrhdlb9z89vx4irrzxcpc7zgpyjk1vy6yc598yfq1hskmwjvl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:leif@leifandersen.net . #t) (libvid . #t) (ring:1 . #t) (video . #t))) (source . "git://github.com/videolang/native-pkgs?path=libvid-x86_64-linux") (tags . ("libvid" "video")) (versions . #hash((default . #hasheq((checksum . "e8fb290d38e90800ffa1d105dbb540d28f931807") (source . "git://github.com/videolang/native-pkgs?path=libvid-x86_64-linux") (source_url . "http://github.com/videolang/native-pkgs/tree/master?path=libvid-x86_64-linux"))))))) ("compatibility-doc" . #hash((author . "eli@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org samth@racket-lang.org") (checksum . "10d4c9d0271d81355db8ee5df4e9351f09980635") (dependencies . ("base" "scribble-lib" "compatibility-lib" "pconvert-lib" "sandbox-lib" "compiler-lib" "gui-lib" "racket-doc" "data-doc" "mzscheme-doc" "scheme-lib")) (description . "eli@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org samth@racket-lang.org") (modules . ()) (name . "compatibility-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/compatibility-doc.zip") (tags . ()))) ("rackunit-chk" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rackunit-chk" "doc/rackunit-chk@rackunit-chk/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackunit-chk.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rackunit-chk.txt"))) (checksum . "62c80697d9e8c4a5f5b57832e3930313732836c4") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "rackunit-doc" "scribble-lib")) (description . "a short hand for writing rackunit tests") (implies . ()) (last-checked . 1522414663) (last-edit . 1383617264) (last-updated . 1504539027) (modules . ((lib "rackunit/chk.rkt") (lib "rackunit/chk/rackunit-chk.scrbl"))) (name . "rackunit-chk") (nix-sha256 . "1aj7iilhvm34y0a898fj5rz7m0b20qazsk3rlsp6lnipkadbixzs") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/jeapostrophe/rackunit-chk") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "62c80697d9e8c4a5f5b57832e3930313732836c4") (source . "git://github.com/jeapostrophe/rackunit-chk") (source_url . "http://github.com/jeapostrophe/rackunit-chk/tree/master"))))))) ("rex" . #hasheq((author . "ahedges@ethz.ch") (authors . ("ahedges@ethz.ch")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rex" "doc/rex@rex/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rex.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rex.txt"))) (checksum . "a419802796672a0046c4475a05bbc522ed8161a0") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "br-parser-tools-lib" "brag" "data-lib" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Language for deterministic finite state machines") (implies . ()) (last-checked . 1522414671) (last-edit . 1500317682) (last-updated . 1502816401) (modules . ((lib "rex/tests/test-cycles.rkt") (lib "rex/tests/test-branches.rkt") (lib "rex/tests/test-not.rkt") (lib "rex/reader.rkt") (lib "rex/tokenizer.rkt") (lib "rex/tests/helper.rkt") (lib "rex/main.rkt") (lib "rex/expander.rkt") (lib "rex/tests/test-expander.rkt") (lib "rex/scribblings/rex.scrbl") (lib "rex/tests/test-parser.rkt") (lib "rex/tests/test-basic.rkt") (lib "rex/parser.rkt"))) (name . "rex") (nix-sha256 . "1bfnkyrqw9kdn077ly2dr572agv9zd9wpdqqqhd0j56pgh3mbrgx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (DFA . #t) (author:ahedges@ethz.ch . #t) (dsl . #t) (ring:1 . #t))) (source . "https://github.com/alehed/rex.git") (tags . ("DFA" "dsl")) (versions . #hash((default . #hasheq((checksum . "a419802796672a0046c4475a05bbc522ed8161a0") (source . "https://github.com/alehed/rex.git") (source_url . "https://github.com/alehed/rex.git"))))))) ("cur" . #hasheq((author . "wjb@williamjbowman.com") (authors . ("wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cur.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cur.txt"))) (checksum . "c3e03ec6a017fcbaed9dcf1917e014f3cec345b9") (checksum-error . #f) (conflicts . ()) (dependencies . ("cur-lib" "cur-doc" "cur-test")) (description . "Dependent types and meta-programming") (implies . ("cur-lib" "cur-doc" "cur-test")) (last-checked . 1522414371) (last-edit . 1452470883) (last-updated . 1510758069) (modules . ()) (name . "cur") (nix-sha256 . "0ym25g3m8jryrbbm9rmm1ii5wkaar88zyy3c400ljxh25i0c7az8") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:wjb@williamjbowman.com . #t) (proofs . #t) (ring:1 . #t) (types . #t))) (source . "git://github.com/wilbowma/cur.git/?path=cur") (tags . ("proofs" "types")) (versions . #hash((default . #hasheq((checksum . "c3e03ec6a017fcbaed9dcf1917e014f3cec345b9") (source . "git://github.com/wilbowma/cur.git/?path=cur") (source_url . "git://github.com/wilbowma/cur.git/?path=cur"))))))) ("termination" . #hasheq((author . "pcn@cs.umd.edu") (authors . ("pcn@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "b2ce90efbcfce454e59d6202ec2b231d291929ec") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more")) (description . "Dynamic enforcement of size-change termination") (implies . ()) (last-checked . 1522417874) (last-edit . 1522411969) (last-updated . 1522417874) (modules . ((lib "termination/size-change-graph.rkt") (lib "termination/main.rkt") (lib "termination/test.rkt"))) (name . "termination") (nix-sha256 . "1qfiib8j4f17z27lfggn0669nbwp1df7p01hqkw5s6qzvpsnqimr") (ring . 2) (search-terms . #hasheq((author:pcn@cs.umd.edu . #t) (contracts . #t) (ring:2 . #t) (termination . #t))) (source . "https://github.com/philnguyen/termination.git?path=termination") (tags . ("contracts" "termination")) (versions . #hash((default . #hasheq((checksum . "b2ce90efbcfce454e59d6202ec2b231d291929ec") (source . "https://github.com/philnguyen/termination.git?path=termination") (source_url . "https://github.com/philnguyen/termination.git?path=termination"))))))) ("scratchy" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scratchy" "doc/scratchy@scratchy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scratchy.txt") (test-failure-log . "server/built/test-fail/scratchy.txt") (test-success-log . #f))) (checksum . "aef8883759fc962828bf977811697fccf06ef8b0") (checksum-error . #f) (conflicts . ()) (dependencies . ("algol60" "base" "draw-lib" "gui-lib" "parser-tools-lib" "slideshow-lib" "racket-doc" "scribble-lib")) (description . "Scratch-like runtime and language") (implies . ()) (last-checked . 1522414675) (last-edit . 1354463739) (last-updated . 1502816420) (modules . ((lib "scratchy/parser.rkt") (lib "scratchy/examples/other.rkt") (lib "scratchy/examples/fish.rkt") (lib "scratchy/examples/fish-text.rkt") (lib "scratchy/scratchy.scrbl") (lib "scratchy/examples/splash.rkt") (lib "scratchy/images.rkt") (lib "scratchy/reader.rkt") (lib "scratchy/runtime.rkt") (lib "scratchy/examples/costume.rkt") (lib "scratchy/examples/just-fish.rkt") (lib "scratchy/main.rkt") (lib "scratchy/scratchy.rkt"))) (name . "scratchy") (nix-sha256 . "0b274p7yhw3h0449sv7wkx82qrfpkbffyz3skfajw17nrv9lnx2c") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mflatt@cs.utah.edu . #t) (games . #t) (graphics . #t) (gui . #t) (ring:1 . #t))) (source . "github://github.com/mflatt/scratchy/master") (tags . ("games" "graphics" "gui")) (versions . #hash((default . #hasheq((checksum . "aef8883759fc962828bf977811697fccf06ef8b0") (source . "github://github.com/mflatt/scratchy/master") (source_url . "http://github.com/mflatt/scratchy/tree/master"))))))) ("racket-test-extra" . #hash((author . "eli@racket-lang.org jay@racket-lang.org matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org ryanc@racket-lang.org samth@racket-lang.org") (checksum . "12ff4c9e1e614034a0ac29623dce7fc0d0f847cc") (dependencies . ("base" "redex-lib" "scheme-lib" "rackunit-lib" "serialize-cstruct-lib")) (description . "eli@racket-lang.org jay@racket-lang.org matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org ryanc@racket-lang.org samth@racket-lang.org") (modules . ()) (name . "racket-test-extra") (source . "https://download.racket-lang.org/releases/6.12/pkgs/racket-test-extra.zip") (tags . ()))) ("jack-scribble-example" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scribble-example" "doc/scribble-example@jack-scribble-example/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/jack-scribble-example.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/jack-scribble-example.txt"))) (checksum . "aca984f3c07b5030f7f6d8c6c4c03e45254bfe82") (checksum-error . #f) (conflicts . ()) (dependencies . ("scribble-lib" "base" "sweet-exp-lib" "reprovide-lang" "fancy-app" "scribble-doc" "rackunit-lib" "racket-doc" "scribble-lib" "doc-coverage")) (description . "Deprecated. Use the built in scribble/example instead.") (implies . ()) (last-checked . 1522414421) (last-edit . 1468223203) (last-updated . 1502816141) (modules . ((lib "scribble-example/private/util/scribble-include-no-subsection.rkt") (lib "scribble-example/private/tests/doc-coverage.rkt") (lib "scribble-example/private/base.scrbl") (lib "scribble-example/main.rkt") (lib "scribble-example/private/util/doc.rkt") (lib "scribble-example/private/base.rkt") (lib "scribble-example/private/main.rkt") (lib "scribble-example/main.scrbl"))) (name . "jack-scribble-example") (nix-sha256 . "1mh997mrrvkylxb78chni3c0g18rys6rfgx230qq23xifmqvdrsh") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (deprecated . #t) (ring:1 . #t) (scribble . #t))) (source . "git://github.com/jackfirth/scribble-example") (tags . ("deprecated" "scribble")) (versions . #hash((default . #hasheq((checksum . "aca984f3c07b5030f7f6d8c6c4c03e45254bfe82") (source . "git://github.com/jackfirth/scribble-example") (source_url . "http://github.com/jackfirth/scribble-example/tree/master"))))))) ("job-queue-doc" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "job-queue" "doc/job-queue@job-queue-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/job-queue-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/job-queue-doc.txt"))) (checksum . "0a2c349636aa88b06c9c299ef201494df648b164") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "job-queue-lib" "racket-doc" "scribble-lib")) (description . "A library for managing sets of workers and their jobs. (doc)") (implies . ()) (last-checked . 1522414421) (last-edit . 1504535594) (last-updated . 1502816143) (modules . ((lib "job-queue/job-queue.scrbl"))) (name . "job-queue-doc") (nix-sha256 . "066m6rjc3qvlnr15jm6n5mdl4cgc5n12imwkj3aw56sc2cyhs1kd") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (concurrency . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/job-queue?path=job-queue-doc") (tags . ("concurrency")) (versions . #hash((default . #hasheq((checksum . "0a2c349636aa88b06c9c299ef201494df648b164") (source . "git://github.com/jeapostrophe/job-queue?path=job-queue-doc") (source_url . "http://github.com/jeapostrophe/job-queue/tree/master?path=job-queue-doc"))))))) ("multipath-daemon" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "multipath-daemon" "doc/multipath-daemon@multipath-daemon/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/multipath-daemon.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/multipath-daemon.txt"))) (checksum . "4d8a2644d2641e9d263e83caef28b3bf6af63b88") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1" "unix-socket-lib" "racket-doc" "unstable-doc" "unix-socket-doc")) (description . "Library for communication with the multipathd process via it's UNIX domain socket.") (implies . ()) (last-checked . 1522414437) (last-edit . 1384508962) (last-updated . 1502816189) (modules . ((lib "multipath-daemon/main.rkt") (lib "multipath-daemon/multipath-daemon.scrbl"))) (name . "multipath-daemon") (nix-sha256 . "0c8phvqx38201m7l8pza4g2rxlbpmign0pxmbcyx08x5wpfqqq83") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t))) (source . "github://github.com/mordae/racket-multipath-daemon/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4d8a2644d2641e9d263e83caef28b3bf6af63b88") (source . "github://github.com/mordae/racket-multipath-daemon/master") (source_url . "http://github.com/mordae/racket-multipath-daemon/tree/master"))))))) ("irc-client" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "irc-client" "doc/irc-client@irc-client/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/irc-client.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/irc-client.txt"))) (checksum . "201b5c2640c67eb7a16b7c38f7feb6e55462a8cb") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "irc" "typed-racket-lib" "typed-racket-more" "racket-doc" "scribble-lib" "typed-racket-doc")) (description . "A higher-level, typed wrapper around the irc package") (implies . ("irc")) (last-checked . 1522414421) (last-edit . 1422686391) (last-updated . 1512871625) (modules . ((lib "irc-client/main.rkt") (lib "irc-client/scribblings/irc-client.scrbl") (lib "irc-client/private/typed/irc.rkt"))) (name . "irc-client") (nix-sha256 . "0dnjcgdzdp479nmy4q348hax4nv2rznnm754bycd164c6s722z77") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (irc . #t) (net . #t) (ring:1 . #t) (typed-racket . #t))) (source . "git://github.com/lexi-lambda/racket-irc-client") (tags . ("irc" "net" "typed-racket")) (versions . #hash(("6.1.1" . #hasheq((checksum . "705713d2af18c54d176197873269fc7ce5cc2092") (source . "git://github.com/lexi-lambda/racket-irc-client#v6.1.1") (source_url . "http://github.com/lexi-lambda/racket-irc-client/tree/master#v6.1.1"))) (default . #hasheq((checksum . "201b5c2640c67eb7a16b7c38f7feb6e55462a8cb") (source . "git://github.com/lexi-lambda/racket-irc-client") (source_url . "http://github.com/lexi-lambda/racket-irc-client/tree/master"))))))) ("syntax-color-test" . #hash((author . "mflatt@racket-lang.org") (checksum . "52567612e566349ff249b49eb14caaa706bcb239") (dependencies . ("base" "rackunit-lib" "scheme-lib" "syntax-color-lib" "gui-lib")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "syntax-color-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/syntax-color-test.zip") (tags . ()))) ("no-vert-bar-lang" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "no-vert-bar-lang" "doc/no-vert-bar-lang@no-vert-bar-lang/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/no-vert-bar-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/no-vert-bar-lang.txt"))) (checksum . "65b67202199ab9a23e27c2d29c311b4edbb3339b") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit" "scribble-lib" "racket-doc")) (description . "a lang-extension that reads `|` as a normal character") (implies . ()) (last-checked . 1522414505) (last-edit . 1468330488) (last-updated . 1502816197) (modules . ((lib "no-backslash/reader.rkt") (lib "no-backslash/tests/test.rkt") (lib "no-vert-bar/tests/test.rkt") (lib "no-vert-bar/reader.rkt") (lib "no-vert-bar/lang/reader.rkt") (lib "no-backslash/lang/reader.rkt") (lib "no-vert-bar/scribblings/no-vert-bar-lang.scrbl"))) (name . "no-vert-bar-lang") (nix-sha256 . "14ssxvdsfb5kkr1i7wav989r6v70lsk7vs0lpyf0af2hwyy9xwy7") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (lang-extension . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/no-vert-bar-lang") (tags . ("lang-extension")) (versions . #hash((default . #hasheq((checksum . "65b67202199ab9a23e27c2d29c311b4edbb3339b") (source . "git://github.com/AlexKnauth/no-vert-bar-lang") (source_url . "http://github.com/AlexKnauth/no-vert-bar-lang/tree/master"))))))) ("hackett-test" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hackett-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hackett-test.txt"))) (checksum . "dfe5aa3442e1fa0a0dd0ceb75b78470212f0a97a") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "hackett-lib" "testing-util-lib")) (description . "") (implies . ()) (last-checked . 1522414415) (last-edit . 1483625619) (last-updated . 1518650697) (modules . ((lib "hackett/private/test.rkt") (lib "tests/hackett/integration/multi-param-typeclasses.rkt") (lib "tests/hackett/typecheck.rkt") (lib "tests/hackett/regression/github-issue-36.rkt") (lib "tests/hackett/regression/github-issue-60.rkt") (lib "tests/hackett/regression/lazy-case.rkt"))) (name . "hackett-test") (nix-sha256 . "06psy883j4kqyz42jybfyh8zcyki64wzyiw53dya8zwkxdx4g0n3") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/hackett?path=hackett-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "dfe5aa3442e1fa0a0dd0ceb75b78470212f0a97a") (source . "git://github.com/lexi-lambda/hackett?path=hackett-test") (source_url . "http://github.com/lexi-lambda/hackett/tree/master?path=hackett-test"))))))) ("megaparsack" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/megaparsack.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/megaparsack.txt"))) (checksum . "56cbda3e43c6b54c963a138330a55dcd1fb9b2d7") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "megaparsack-lib" "megaparsack-doc" "megaparsack-parser" "megaparsack-parser-tools")) (description . "practical parser combinators") (implies . ("megaparsack-lib" "megaparsack-doc" "megaparsack-parser" "megaparsack-parser-tools")) (last-checked . 1522414434) (last-edit . 1462746746) (last-updated . 1517249846) (modules . ()) (name . "megaparsack") (nix-sha256 . "0d9iylx1q420pk5p0abhwp7zmr7fd8a7kj100rqnfy8dvajlx0g7") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:lexi.lambda@gmail.com . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/megaparsack?path=megaparsack") (tags . ("parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "56cbda3e43c6b54c963a138330a55dcd1fb9b2d7") (source . "git://github.com/lexi-lambda/megaparsack?path=megaparsack") (source_url . "http://github.com/lexi-lambda/megaparsack/tree/master?path=megaparsack"))))))) ("fast-convert" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "fast-convert" "doc/fast-convert@fast-convert/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fast-convert.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fast-convert.txt"))) (checksum . "2420aeb2ce8c7fb3e14d0ee1d560c33e16aa1b80") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Fast conversion from bytes to string  for one-byte encoding") (implies . ()) (last-checked . 1522414400) (last-edit . 1407086328) (last-updated . 1502815959) (modules . ((lib "fast-convert/main.rkt") (lib "fast-convert/fast-convert.scrbl"))) (name . "fast-convert") (nix-sha256 . "1rnfvnm91r4pn099097k1hw70sjydh9jcmsjmfp2i2yakjzh4hgw") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (dev . #t) (performance . #t) (ring:1 . #t))) (source . "git://github.com/Kalimehtar/fast-convert") (tags . ("dev" "performance")) (versions . #hash((default . #hasheq((checksum . "2420aeb2ce8c7fb3e14d0ee1d560c33e16aa1b80") (source . "git://github.com/Kalimehtar/fast-convert") (source_url . "http://github.com/Kalimehtar/fast-convert/tree/master"))))))) ("data-test" . #hash((author . "ryanc@racket-lang.org") (checksum . "8ccad2a4d81c61cdf66ab917e49dbfd6813f9738") (dependencies . ("base" "data-enumerate-lib" "racket-index" "data-lib" "rackunit-lib" "math-lib")) (description . "ryanc@racket-lang.org") (modules . ()) (name . "data-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/data-test.zip") (tags . ()))) ("repeated-application" . #hasheq((author . "vincentnys@gmail.com") (authors . ("vincentnys@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "repeated-application" "doc/repeated-application@repeated-application/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/repeated-application.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/repeated-application.txt"))) (checksum . "6a5ef2192f38f01de98deb03532b4b3d83b09ed3") (checksum-error . #f) (conflicts . ()) (dependencies . ("at-exp-lib" "base" "racket-doc" "rackunit-lib" "scribble-lib" "sugar")) (description . "Variants of apply which compute a least fixpoint or run a number of consecutive applications.") (implies . ()) (last-checked . 1522414670) (last-edit . 1506784992) (last-updated . 1507098615) (modules . ((lib "repeated-application/main.rkt") (lib "repeated-application/scribblings/repeated-application.scrbl"))) (name . "repeated-application") (nix-sha256 . "0cdx2zv32fpixgzjxkmi5hq1fry7hi8qcb0jj989vd3h5zf29cn9") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (application . #t) (author:vincentnys@gmail.com . #t) (fixpoint . #t) (recursion . #t) (ring:2 . #t))) (source . "git://github.com/v-nys/repeated-application") (tags . ("application" "fixpoint" "recursion")) (versions . #hash((default . #hasheq((checksum . "6a5ef2192f38f01de98deb03532b4b3d83b09ed3") (source . "git://github.com/v-nys/repeated-application") (source_url . "http://github.com/v-nys/repeated-application/tree/master"))))))) ("video-testing" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (("extract" "video" "doc/video@video-testing/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/video-testing.txt") (test-failure-log . "server/built/test-fail/video-testing.txt") (test-success-log . #f))) (checksum . "88b62773d0b444ecf8581c92780b59ed2425b961") (checksum-error . #f) (conflicts . ("video")) (dependencies . (("base" "6.9.0.6") "rackunit-lib" "gui-lib" "draw-lib" "images-lib" "drracket-plugin-lib" "data-lib" "pict-lib" "wxme-lib" "sandbox-lib" "at-exp-lib" "scribble-lib" "bitsyntax" "opengl" "portaudio" "net-lib" ("graph" "0.3.1") ("libvid-x86_64-macosx" #:platform "x86_64-macosx") ("libvid-x86_64-win32" #:platform "win32\\x86_64") ("libvid-i386-win32" #:platform "win32\\i386") ("libvid-x86_64-linux" #:platform "x86_64-linux") ("libvid-i386-linux" #:platform "i386-linux") ("ffmpeg-x86_64-macosx" #:platform "x86_64-macosx") ("ffmpeg-x86_64-win32" #:platform "win32\\x86_64") ("ffmpeg-i386-win32" #:platform "win32\\i386") "scribble-lib" "racket-doc" "gui-doc" "draw-doc" "ppict" "reprovide-lang")) (description . "More stable than video-unstable, but updated less frequently.\r\nLess stable than video(-stable), but updated more frequently") (implies . ()) (last-checked . 1522414700) (last-edit . 1503003170) (last-updated . 1505939649) (modules . ((lib "video/private/camera-icon.rkt") (lib "video/render.rkt") (lib "video/private/ffmpeg-pipeline.rkt") (lib "video/private/init.rkt") (lib "video/devices.rkt") (lib "video/scribblings/core.scrbl") (lib "video/raco.rkt") (lib "video/private/ffmpeg/ffmpeg.rkt") (lib "video/core.rkt") (lib "video/convert.rkt") (lib "video/scribblings/installing.scrbl") (lib "video/scribblings/graphical.scrbl") (lib "video/tests/render.rkt") (lib "video/examples/11-include.rkt") (lib "video/private/surface.rkt") (lib "video/tests/video.rkt") (lib "video/examples/2-colorfade.rkt") (lib "video/private/opengl.rkt") (lib "video/lang/reader.rkt") (lib "video/examples/5-project.rkt") (lib "video/private/silence.rkt") (lib "video/examples/4-filters.rkt") (lib "video/private/ffmpeg/libvid.rkt") (lib "video/player.rkt") (lib "video/scribblings/intro.scrbl") (lib "video/examples/7-watermark.rkt") (lib "video/scribblings/viddoclang.rkt") (lib "video/scribblings/video.scrbl") (lib "video/private/ffmpeg/constants.rkt") (lib "video/init.rkt") (lib "video/private/ffmpeg/data.rkt") (lib "video/tests/editor.rkt") (lib "video/examples/12-cut.rkt") (lib "video/scribblings/api.scrbl") (lib "video/main.rkt") (lib "video/examples/8-image.rkt") (lib "video/private/debug-mixin.rkt") (lib "video/private/video-canvas.rkt") (lib "video/scribblings/render.scrbl") (lib "video/scribblings/player.scrbl") (lib "video/private/tool.rkt") (lib "video/scribblings/utils.rkt") (lib "video/scribblings/extend.scrbl") (lib "video/tests/ffmpeg.rkt") (lib "video/private/units.rkt") (lib "video/examples/1-hellocolor.rkt") (lib "video/private/devices.rkt") (lib "video/examples/10-properties.rkt") (lib "video/tests/player.rkt") (lib "video/units.rkt") (lib "video/private/ffmpeg/main.rkt") (lib "video/examples/9-doubletransition.rkt") (lib "video/private/editor.rkt") (lib "video/surface.rkt") (lib "video/examples/3-clips.rkt") (lib "video/private/render-settings.rkt") (lib "video/examples/6-multitrack.rkt") (lib "video/base.rkt") (lib "video/private/video.rkt") (lib "video/private/ffmpeg/lib.rkt") (lib "video/scribblings/templates.rkt") (lib "video/tests/test-utils.rkt") (lib "video/lib.rkt") (lib "video/private/utils.rkt") (lib "video/tests/unit-tests.rkt") (lib "video/private/lang.rkt") (lib "video/version.rkt") (lib "video/private/installer.rkt") (lib "video/lib/lang/reader.rkt") (lib "video/private/log.rkt"))) (name . "video-testing") (nix-sha256 . "1n36pz9m20mbb4ar643gkd01dvila41q57627x571cc2hym682ci") (ring . 2) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:conflicts: . #t) (:docs-error: . #t) (:docs: . #t) (author:leif@leifandersen.net . #t) (ring:2 . #t) (testing . #t) (video . #t) (vidlang . #t))) (source . "git://github.com/videolang/video#testing") (tags . ("testing" "video" "vidlang")) (versions . #hash((default . #hasheq((checksum . "88b62773d0b444ecf8581c92780b59ed2425b961") (source . "git://github.com/videolang/video#testing") (source_url . "http://github.com/videolang/video/tree/master#testing"))))))) ("gut" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "manual" "doc/manual@gut/index.html") ("salvage" "gut" "doc/gut@gut/index.html"))) (failure-log . "server/built/fail/gut.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "962ea196fade89b6da7a5d5cc07ea89137809373") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "srfi-lite-lib" "sxml" "typed-racket-lib" "typed-racket-more" "grip" "grommet" "html-parsing" "html-writing" "json-parsing" "racket-doc" "scribble-lib" "typed-racket-doc")) (description . "Web related functionality in Typed Racket.  Includes full HTTP 1.1 client, UUIDs, Consumer OAuth, Json, XML formats.") (implies . ()) (last-checked . 1522414414) (last-edit . 1369259740) (last-updated . 1502816109) (modules . ((lib "gut/format/xml/util.rkt") (lib "gut/http/parse.rkt") (lib "gut/http/scribblings/http.scrbl") (lib "gut/uri/parse.rkt") (lib "gut/uri/urichar.rkt") (lib "gut/format/xml/sxml.rkt") (lib "gut/format/json/tjson.rkt") (lib "gut/http/header.rkt") (lib "gut/uri/url/url.rkt") (lib "gut/oauth/oauth.rkt") (lib "gut/uri/parse-util.rkt") (lib "gut/http/param.rkt") (lib "gut/http/encode.rkt") (lib "gut/http/mimetype-const.rkt") (lib "gut/http/http11.rkt") (lib "gut/scribblings/gut.scrbl") (lib "gut/uri/url/show.rkt") (lib "gut/format/rss/rss20/rss.rkt") (lib "gut/http/encoding.rkt") (lib "gut/uri/scribblings/uri.scrbl") (lib "gut/oauth/encode.rkt") (lib "gut/http/scribblings/manual.scrbl") (lib "gut/http/cookie.rkt") (lib "gut/format/json/json.rkt") (lib "gut/http/proxy.rkt") (lib "gut/uri/show.rkt") (lib "gut/uri/url/parse.rkt") (lib "gut/uri/url/urlchar.rkt") (lib "gut/http/heading.rkt") (lib "gut/format/html/html.rkt") (lib "gut/http/mimetype.rkt") (lib "gut/uri/url/qparams.rkt") (lib "gut/uri/types.rkt") (lib "gut/http/scribblings/webkit.scrbl") (lib "gut/uuid/uuid.rkt") (lib "gut/uri/url/types.rkt") (lib "gut/uri/url/util.rkt"))) (name . "gut") (nix-sha256 . "179bb7xdwhs4r0c02dnh4dapg2nksvi4511zphvg5rx9xs5084l3") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (author:ray.racine@gmail.com . #t) (http . #t) (json . #t) (oauth . #t) (ring:1 . #t) (web . #t) (xml . #t))) (source . "https://gitlab.com/RayRacine/gut.git") (tags . ("http" "json" "oauth" "web" "xml")) (versions . #hash((default . #hasheq((checksum . "962ea196fade89b6da7a5d5cc07ea89137809373") (source . "https://gitlab.com/RayRacine/gut.git") (source_url . "http://gitlab.com/RayRacine/gut/tree/master"))))))) ("math-test" . #hash((author . "ntoronto@racket-lang.org") (checksum . "960d2a3b2fcba277f072e0e60c6481bd0f5bcddc") (dependencies . ("base" "math-lib" "racket-test" "rackunit-lib" "typed-racket-lib" "typed-racket-more")) (description . "ntoronto@racket-lang.org") (modules . ()) (name . "math-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/math-test.zip") (tags . ()))) ("racket-test" . #hash((author . "eli@racket-lang.org jay@racket-lang.org matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org ryanc@racket-lang.org samth@racket-lang.org") (checksum . "82c24f42e8a3d12aae18211ac847b32a773260f3") (dependencies . ("compiler-lib" "sandbox-lib" "compatibility-lib" "eli-tester" "planet-lib" "net-lib" "net-test" "serialize-cstruct-lib" "cext-lib" "pconvert-lib" "racket-test-core" "web-server-lib" "rackunit-lib" "at-exp-lib" "option-contract-lib" "srfi-lib" "scribble-lib" "racket-index" "scheme-lib" "base" "data-lib")) (description . "eli@racket-lang.org jay@racket-lang.org matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org ryanc@racket-lang.org samth@racket-lang.org") (modules . ()) (name . "racket-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/racket-test.zip") (tags . ()))) ("effection-test" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/effection-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/effection-test.txt"))) (checksum . "617e5b4c76eab09a2cd2b4f47bca8d908f51d619") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "effection-lib" "lathe-lib" "rackunit-lib" "parendown-lib")) (description . "A library for deterministic concurrency and custom side effects. (test)") (implies . ()) (last-checked . 1522414396) (last-edit . 1520307398) (last-updated . 1520513655) (modules . ((lib "effection/tests.rkt"))) (name . "effection-test") (nix-sha256 . "1y75812hyfyv67nlcw2mdax6rb3rvzy4pma3wjp9v6qixhpvm76z") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (concurrency . #t) (effects . #t) (language . #t) (ring:2 . #t) (unstable . #t))) (source . "https://github.com/rocketnia/effection.git?path=effection-test") (tags . ("concurrency" "effects" "language" "unstable")) (versions . #hash((default . #hasheq((checksum . "617e5b4c76eab09a2cd2b4f47bca8d908f51d619") (source . "https://github.com/rocketnia/effection.git?path=effection-test") (source_url . "https://github.com/rocketnia/effection.git?path=effection-test"))))))) ("com-win32-x86_64" . #hash((author . "mflatt@racket-lang.org") (checksum . "f0e3965784e99ce753e2d22d7d9a3ba067dbeab4") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "com-win32-x86_64") (source . "https://download.racket-lang.org/releases/6.12/pkgs/com-win32-x86_64.zip") (tags . ()))) ("compatibility" . #hash((author . "eli@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org samth@racket-lang.org") (checksum . "1e0f09985626cc419e9ecd9d6f850a001f2c9a8b") (dependencies . ("compatibility-lib" "compatibility-doc")) (description . "eli@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org samth@racket-lang.org") (modules . ()) (name . "compatibility") (source . "https://download.racket-lang.org/releases/6.12/pkgs/compatibility.zip") (tags . ()))) ("option-bind" . #hasheq((author . "jmj@fellowhuman.com") (authors . ("jmj@fellowhuman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "option-bind" "doc/option-bind@option-bind/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/option-bind.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/option-bind.txt"))) (checksum . "8d8346d612e401d7b44a04a121881f66e5a43cf6") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "scribble-lib" "racket-doc" "typed-racket-lib" "typed-racket-more")) (description . "Monadic shorthand for propagating #f in Option types") (implies . ()) (last-checked . 1522414508) (last-edit . 1439185026) (last-updated . 1502816238) (modules . ((lib "option-bind/scribblings/option-bind.scrbl") (lib "option-bind/main.rkt"))) (name . "option-bind") (nix-sha256 . "03p2s29r798pm72mfmnskq5s28zy8hm9szj7v024qdi37xv93way") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:jmj@fellowhuman.com . #t) (ring:1 . #t))) (source . "git://github.com/RenaissanceBug/option-bind") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8d8346d612e401d7b44a04a121881f66e5a43cf6") (source . "git://github.com/RenaissanceBug/option-bind") (source_url . "http://github.com/RenaissanceBug/option-bind/tree/master"))))))) ("vr-lang" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "vr-lang" "doc/vr-lang@vr-lang/index.html"))) (failure-log . "server/built/fail/vr-lang.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "e6e4d539a7792756ba8d02ec9266a79acc97c08f") (checksum-error . #f) (conflicts . ()) (dependencies . ("hostname" "simple-qr" "urlang")) (description . "Racket for Virtual Reality.  Compiles to A-frame.io.\r\n\r\nWe made this for educational purposes at ThoughtSTEM.  However, you could probably use this in production in some scenarios. ") (implies . ()) (last-checked . 1522414701) (last-edit . 1521245956) (last-updated . 1521391781) (modules . ((lib "vr-lang/demos/remote-component-demo4/vr-star-system-demo4.rkt") (lib "vr-lang/attribute-definer-test.rkt") (lib "vr-lang/demos/hello-world/vr-hello-world.rkt") (lib "vr-lang/vr.rkt") (lib "vr-lang/demos/hello-world2/vr-hello-world2.rkt") (lib "vr-lang/demos/remote-component-demo5/vr-star-system-demo.rkt") (lib "vr-lang/test.rkt") (lib "vr-lang/component-definer.rkt") (lib "vr-lang/demos/hello-world3/vr-hello-world3.rkt") (lib "vr-lang/main.rkt") (lib "vr-lang/demos/remote-component-demo3/remote-component-demo3.rkt") (lib "vr-lang/aframe-component-test.rkt") (lib "vr-lang/vr-lang.rkt") (lib "vr-lang/demos/remote-component-demo/vr-star-system-demo.rkt") (lib "vr-lang/demos/demo1/testvr.rkt") (lib "vr-lang/attribute-definer.rkt") (lib "vr-lang/my-ip-qr.rkt") (lib "vr-lang/demos/remote-component-demo2/vr-star-system-demo2.rkt") (lib "vr-lang/vr-lang.scrbl"))) (name . "vr-lang") (nix-sha256 . "1dp022a6vqs7c1gq0m9cd3rsmcvlg58vk191q55kj36qs1fmwmdy") (ring . 2) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (author:stephen@thoughtstem.com . #t) (education . #t) (games . #t) (ring:2 . #t) (vr . #t))) (source . "https://github.com/thoughtstem/vr-lang.git") (tags . ("education" "games" "vr")) (versions . #hash((default . #hasheq((checksum . "e6e4d539a7792756ba8d02ec9266a79acc97c08f") (source . "https://github.com/thoughtstem/vr-lang.git") (source_url . "https://github.com/thoughtstem/vr-lang.git"))))))) ("data" . #hash((author . "ryanc@racket-lang.org") (checksum . "6fbc955e2962cff075dfbf95fd61703e6ce62e2b") (dependencies . ("data-lib" "data-enumerate-lib" "data-doc")) (description . "ryanc@racket-lang.org") (modules . ()) (name . "data") (source . "https://download.racket-lang.org/releases/6.12/pkgs/data.zip") (tags . ()))) ("k-infix" . #hasheq((author . "macocio@gmail.com") (authors . ("macocio@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "k-infix" "doc/k-infix@k-infix/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/k-infix.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/k-infix.txt"))) (checksum . "07ed4c23905ea8b2b85a5f321d56ad038170766f") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "sandbox-lib" "scribble-lib" "racket-doc" "memoize")) (description . "Simple but versatile infix parsing for arbitrary expressions. Fully customizable. Comes with basic math expressions implemented.") (implies . ()) (last-checked . 1522414422) (last-edit . 1511202550) (last-updated . 1511489204) (modules . ((lib "k-infix/private/primitive.rkt") (lib "k-infix/scribblings/k-infix.scrbl") (lib "k-infix/private/default-parse-table.rkt") (lib "k-infix/define.rkt") (lib "k-infix/custom.rkt") (lib "k-infix/test.rkt") (lib "k-infix/main.rkt") (lib "k-infix/private/parse-lookup-entry.rkt") (lib "k-infix/private/helper.rkt"))) (name . "k-infix") (nix-sha256 . "0ig2m5syvxwx25nzw7w8dib512gy1wnydxykrhfbw3j59bkk4shw") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:macocio@gmail.com . #t) (infix . #t) (ring:2 . #t))) (source . "https://github.com/BourgondAries/k-infix.git") (tags . ("infix")) (versions . #hash((default . #hasheq((checksum . "07ed4c23905ea8b2b85a5f321d56ad038170766f") (source . "https://github.com/BourgondAries/k-infix.git") (source_url . "https://github.com/BourgondAries/k-infix.git"))))))) ("in-new-directory" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "in-new-directory" "doc/in-new-directory@in-new-directory/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/in-new-directory.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/in-new-directory.txt"))) (checksum . "f7020748288df28ed8371a521781a5d0986582a6") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "scribble-lib")) (description . "Run things in new directories") (implies . ()) (last-checked . 1522414420) (last-edit . 1405264770) (last-updated . 1502816137) (modules . ((lib "file/in-new-directory.rkt") (lib "file/in-new-directory.scrbl"))) (name . "in-new-directory") (nix-sha256 . "0jyaz7gpi3is016xzvy9xvlaapdkwpxqpldsj045hbhhcb2jkmjl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:samth@ccs.neu.edu . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/samth/in-new-directory") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "f7020748288df28ed8371a521781a5d0986582a6") (source . "git://github.com/samth/in-new-directory") (source_url . "http://github.com/samth/in-new-directory/tree/master"))))))) ("overeasy" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "overeasy" "doc/overeasy@overeasy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/overeasy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/overeasy.txt"))) (checksum . "01df274d364d0fd0925c50d87c4caeab19c37c6e") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "mcfly")) (description . "Racket Language Test Engine") (implies . ()) (last-checked . 1522414508) (last-edit . 1456463388) (last-updated . 1502816240) (modules . ((lib "overeasy/test-overeasy.rkt") (lib "overeasy/overeasy.rkt") (lib "overeasy/overeasy.scrbl") (lib "overeasy/main.rkt"))) (name . "overeasy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (ring:1 . #t) (testing . #t))) (source . "http://www.neilvandyke.org/racket/overeasy.zip") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "01df274d364d0fd0925c50d87c4caeab19c37c6e") (source . "http://www.neilvandyke.org/racket/overeasy.zip") (source_url . "http://www.neilvandyke.org/racket/overeasy.zip"))))))) ("acmart" . #hasheq((author . "leif@leifandersen.net Fare") (authors . ("leif@leifandersen.net" "Fare")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/acmart.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "4bf0828527818456e972b146be82e9cdda2dda6b") (checksum-error . #f) (conflicts . ("scribble-lib")) (dependencies . ("scheme-lib" "base" "compatibility-lib" "scribble-text-lib" "scribble-html-lib" "planet-lib" "net-lib" "at-exp-lib" "draw-lib" "syntax-color-lib" "sandbox-lib" "typed-racket-lib" "rackunit-lib")) (description . "#lang for the acmart paper format") (implies . ("scribble-html-lib")) (last-checked . 1522417868) (last-edit . 1493908591) (last-updated . 1522012562) (modules . ((lib "scribble/lp/lang/common.rkt") (lib "scribble/private/manual-bib.rkt") (lib "scribble/private/manual-unit.rkt") (lib "help/search.rkt") (lib "scriblib/private/counter.rkt") (lib "scribble/render-struct.rkt") (lib "scribble/private/manual-class-struct.rkt") (lib "scribble/markdown-render.rkt") (lib "scribble/private/manual-code.rkt") (lib "scribble/private/manual-tech.rkt") (lib "scribble/private/manual-vars.rkt") (lib "scribble/private/manual-bind.rkt") (lib "scribble/comment-reader.rkt") (lib "scribble/manual/lang/reader.rkt") (lib "scribble/lp/lang/lang.rkt") (lib "scribble/latex-render.rkt") (lib "scribble/private/provide-structs.rkt") (lib "scribble/private/manual-history.rkt") (lib "scribble/html-render.rkt") (lib "scribble/elsarticle/lang.rkt") (lib "scribble/urls.rkt") (lib "scribble/book/lang/reader.rkt") (lib "scribble/examples.rkt") (lib "scribble/elsarticle/lang/reader.rkt") (lib "scribble/private/on-demand.rkt") (lib "scribble/doc/reader.rkt") (lib "scribble/private/manual-form.rkt") (lib "scribble/contract-render.rkt") (lib "scribble/render.rkt") (lib "scribble/pdf-render.rkt") (lib "scribble/jfp/lang.rkt") (lib "scribble/private/manual-proc.rkt") (lib "scribble/private/render-utils.rkt") (lib "scribble/core.rkt") (lib "scribble/racket.rkt") (lib "scribble/base.rkt") (lib "scribble/manual-struct.rkt") (lib "scribble/private/manual-method.rkt") (lib "scribble/search.rkt") (lib "scribble/lp-include.rkt") (lib "scribble/manual.rkt") (lib "scriblib/private/gui-eval-exn.rkt") (lib "scribble/sigplan/lang.rkt") (lib "scribble/srcdoc.rkt") (lib "scribble/private/manual-utils.rkt") (lib "scribble/struct.rkt") (lib "scribble/example.rkt") (lib "scribble/base/lang.rkt") (lib "scribble/run.rkt") (lib "scribble/xref.rkt") (lib "scribble/private/manual-defaults.rkt") (lib "scribble/provide-doc-transform.rkt") (lib "scriblib/autobib.rkt") (lib "scribble/private/manual-class.rkt") (lib "scribble/private/serialize.rkt") (lib "scriblib/figure.rkt") (lib "scribble/html-properties.rkt") (lib "scribble/lp/lang/reader.rkt") (lib "scribble/private/manual-scheme.rkt") (lib "scribble/private/manual-mod.rkt") (lib "scribble/tag.rkt") (lib "scribble/private/defaults.rkt") (lib "scribble/jfp.rkt") (lib "scriblib/gui-eval.rkt") (lib "scribble/doc/main.rkt") (lib "scribble/latex-prefix.rkt") (lib "scribble/lp/lang/lang2.rkt") (lib "scribble/base/lang/reader.rkt") (lib "scribble/manual/lang.rkt") (lib "scriblib/footnote.rkt") (lib "scribble/extract.rkt") (lib "scribble/decode-struct.rkt") (lib "scribble/valid-blueboxes-info.rkt") (lib "scribble/doclang2.rkt") (lib "scriblib/render-cond.rkt") (lib "scribble/private/manual-sprop.rkt") (lib "scribble/private/manual-style.rkt") (lib "scribble/config.rkt") (lib "scribble/decode.rkt") (lib "scribble/eval.rkt") (lib "scriblib/bibtex.rkt") (lib "scribble/acmart.rkt") (lib "scribble/acmart/lang/reader.rkt") (lib "scribble/private/tag.rkt") (lib "scribble/lp2.rkt") (lib "scribble/report/lang/reader.rkt") (lib "scribble/jfp/lang/reader.rkt") (lib "scribble/private/run-pdflatex.rkt") (lib "scribble/bnf.rkt") (lib "scribble/book/lang.rkt") (lib "scribble/private/latex-index.rkt") (lib "scribble/sigplan.rkt") (lib "scribble/report/lang.rkt") (lib "scribble/lncs/lang/reader.rkt") (lib "scribble/blueboxes.rkt") (lib "scribble/scheme.rkt") (lib "scribble/lncs/lang.rkt") (lib "scribble/acmart/lang.rkt") (lib "scribble/sigplan/lang/reader.rkt") (lib "scribble/text-render.rkt") (lib "scribble/private/literal-anchor.rkt") (lib "scribble/private/indirect-renderer.rkt") (lib "scribble/latex-properties.rkt") (lib "scribble/private/qsloc.rkt") (lib "scribble/base-render.rkt") (lib "scriblib/book-index.rkt") (lib "help/help.rkt") (lib "scribble/doclang.rkt") (lib "scribble/lp.rkt") (lib "scribble/basic.rkt") (lib "scribble/private/manual-ex.rkt") (lib "scribble/private/lp.rkt") (lib "scribble/doc/lang/reader.rkt"))) (name . "acmart") (nix-sha256 . "173sa6l9phqhybs9vj42vbh387vzskfj5nmqkxisvz042w5nsz3q") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (:no-tag: . #t) (author:Fare . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t))) (source . "git://github.com/racket/scribble?path=scribble-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4bf0828527818456e972b146be82e9cdda2dda6b") (source . "git://github.com/racket/scribble?path=scribble-lib") (source_url . "http://github.com/racket/scribble/tree/master?path=scribble-lib"))) ("6.8" . #hasheq((checksum . "ce6738818e79515e57e2d554b801806b8b2833ae") (source . "git://github.com/fare/acmart") (source_url . "http://github.com/fare/acmart/tree/master"))))))) ("ruckus" . #hasheq((author . "code@cliffle.com") (authors . ("code@cliffle.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ruckus" "doc/ruckus@ruckus/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ruckus.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ruckus.txt"))) (checksum . "62cd4a00837783a88a007c2d5979909a4e86ca0f") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "gui-lib" "math-lib" "opengl" "racket-doc")) (description . "Procedural CAD system for solid modeling") (implies . ()) (last-checked . 1522414673) (last-edit . 1454611218) (last-updated . 1502816414) (modules . ((lib "ruckus/viz/shaderdump.rkt") (lib "ruckus/viz/view2d.rkt") (lib "ruckus/lang/colors.rkt") (lib "ruckus/lang/rktdump.rkt") (lib "ruckus/viz/two-viewer.rkt") (lib "ruckus/ex/multi/part-b.rkt") (lib "ruckus/viz/spheretrace-viewer.rkt") (lib "ruckus/lang/irdump.rkt") (lib "ruckus/ex/multi/top.rkt") (lib "ruckus/lang/mlang.rkt") (lib "ruckus/ex/two-d.rkt") (lib "ruckus/viz/glsl.rkt") (lib "ruckus/ex/reflect-distance.rkt") (lib "ruckus/out/outline.rkt") (lib "ruckus/lang/interpolation.rkt") (lib "ruckus/lang/state.rkt") (lib "ruckus/main.rkt") (lib "ruckus/doc/utils.rkt") (lib "ruckus/out/descent3.rkt") (lib "ruckus/viz/view3d.rkt") (lib "ruckus/out/marching-foo.rkt") (lib "ruckus/lang/evaluator.rkt") (lib "ruckus/ex/holography.rkt") (lib "ruckus/doc/internals/compiler.scrbl") (lib "ruckus/doc/internals.scrbl") (lib "ruckus/ex/interpolation-surface.rkt") (lib "ruckus/ex/multi/part-a.rkt") (lib "ruckus/ex/test.rkt") (lib "ruckus/out/marching-tets.rkt") (lib "ruckus/core/compiler/canon.rkt") (lib "ruckus/viz/viewer.rkt") (lib "ruckus/doc/basics.scrbl") (lib "ruckus/out/marching-squares.rkt") (lib "ruckus/ex/radial-repeat.rkt") (lib "ruckus/ex/capsule.rkt") (lib "ruckus/lang/loader.rkt") (lib "ruckus/doc/tools.scrbl") (lib "ruckus/doc/prereq.scrbl") (lib "ruckus/doc/internals/math.scrbl") (lib "ruckus/out/marching-cubes.rkt") (lib "ruckus/lang/edsl.rkt") (lib "ruckus/core/df-prims.rkt") (lib "ruckus/core/lazy-require.rkt") (lib "ruckus/core/math.rkt") (lib "ruckus/core/compiler/racket.rkt") (lib "ruckus/lang/reader.rkt") (lib "ruckus/ex/box.rkt") (lib "ruckus/core/compiler/lower.rkt") (lib "ruckus/core/compiler/enumerate.rkt") (lib "ruckus/core/model.rkt") (lib "ruckus/doc/ruckus.scrbl") (lib "ruckus/out/binary-stl.rkt") (lib "ruckus/doc/whirlwind.scrbl") (lib "ruckus/out/surface.rkt") (lib "ruckus/lang/astdump.rkt"))) (name . "ruckus") (nix-sha256 . "1zrxznyalfmhykmj1203pn56i804101c7jgwia0nbzddwwmii7na") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:code@cliffle.com . #t) (cad . #t) (graphics . #t) (ring:1 . #t) (scientific . #t))) (source . "git://github.com/cbiffle/ruckus") (tags . ("cad" "graphics" "scientific")) (versions . #hash((default . #hasheq((checksum . "62cd4a00837783a88a007c2d5979909a4e86ca0f") (source . "git://github.com/cbiffle/ruckus") (source_url . "http://github.com/cbiffle/ruckus/tree/master"))))))) ("unstable-options-lib" . #hash((author . "chrdimo@racket-lang.org robby@racket-lang.org") (authors . ("chrdimo@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-options-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-options-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "option-contract-lib")) (description . "Experimental libraries for option contracts") (implies . ()) (last-checked . 1522414698) (last-edit . 1445382797) (last-updated . 1502816515) (modules . ((lib "unstable/options.rkt"))) (name . "unstable-options-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:chrdimo@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("unstable")) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) (default . #hasheq((checksum . "1063efe9e8f02ecdf8aefd6200d759ba1f0e8d5c") (source . "git://github.com/racket/unstable-options-lib") (source_url . "http://github.com/racket/unstable-options-lib/tree/master"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("wavelet-transform-haar-1d" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "wavelet" "doc/wavelet@wavelet-transform-haar-1d/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/wavelet-transform-haar-1d.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/wavelet-transform-haar-1d.txt"))) (checksum . "a24d96252701f80dbd382fb4a0dccaf2d19160b1") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "math-lib" "plot-gui-lib" "typed-racket-lib" "typed-racket-more" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "A library to perform forward and reverse 1-d Haar Wavelet transforms") (implies . ()) (last-checked . 1522414701) (last-edit . 1450500903) (last-updated . 1502816521) (modules . ((lib "wavelet/haar-1d.rkt") (lib "wavelet/wavelet.scrbl") (lib "wavelet/tests.rkt") (lib "wavelet/main.rkt"))) (name . "wavelet-transform-haar-1d") (nix-sha256 . "130gs0z7ibcd02dbrzvy0n5l4z8jl8ql8fbfvapvyqxkk4q1ww2h") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audio . #t) (author:clements@racket-lang.org . #t) (math . #t) (ring:1 . #t))) (source . "git://github.com/jbclements/wavelet-transform-haar-1d") (tags . ("audio" "math")) (versions . #hash((default . #hasheq((checksum . "a24d96252701f80dbd382fb4a0dccaf2d19160b1") (source . "git://github.com/jbclements/wavelet-transform-haar-1d") (source_url . "http://github.com/jbclements/wavelet-transform-haar-1d/tree/master"))))))) ("iu-pict" . #hasheq((author . "david@davidchristiansen.dk") (authors . ("david@davidchristiansen.dk")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/iu-pict.txt") (docs . (("main" "iu-pict" "doc/iu-pict@iu-pict/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/iu-pict.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/iu-pict.txt"))) (checksum . "42072a907d65bbfd09077592a20bfb130fc5a35a") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (last-checked . 1522414421) (last-edit . 1484517979) (last-updated . 1502816141) (modules . ((lib "iu-pict/scribblings/iu-pict.scrbl") (lib "iu-pict/main.rkt"))) (name . "iu-pict") (nix-sha256 . "105ykgwfi4q9ckbswbb41yk859pflcid4mkayayzpzanpa4vjjw1") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:david@davidchristiansen.dk . #t) (ring:1 . #t))) (source . "git://github.com/david-christiansen/iu-pict") (tags . ()) (versions . #hash((default . #hasheq((checksum . "42072a907d65bbfd09077592a20bfb130fc5a35a") (source . "git://github.com/david-christiansen/iu-pict") (source_url . "http://github.com/david-christiansen/iu-pict/tree/master"))))))) ("pict-snip-doc" . #hash((author . "robby@racket-lang.org") (checksum . "dd0801d399bd929ba3d6b00c0454b753eb4918ef") (dependencies . ("base" "pict-snip-lib" "gui-doc" "pict-doc" "pict-lib" "racket-doc" "scribble-lib" "snip-lib")) (description . "robby@racket-lang.org") (modules . ()) (name . "pict-snip-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/pict-snip-doc.zip") (tags . ()))) ("gui-test" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (checksum . "936dc32f5c35a66ae003b042edd5f95eda2a494b") (dependencies . ("base" "racket-index" "scheme-lib" "draw-lib" "racket-test" "sgl" "snip-lib" "wxme-lib" "gui-lib" "rackunit-lib" "pconvert-lib" "compatibility-lib" "sandbox-lib")) (description . "mflatt@racket-lang.org robby@racket-lang.org") (modules . ()) (name . "gui-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/gui-test.zip") (tags . ()))) ("temp-c" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/temp-c.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/temp-c.txt"))) (checksum . "43f7f2141c81a301aa229ef4105f458eee070653") (checksum-error . #f) (conflicts . ()) (dependencies . ("temp-c-lib" "temp-c-doc")) (description . "temporal contracts") (implies . ("temp-c-lib" "temp-c-doc")) (last-checked . 1522414690) (last-edit . 1438288079) (last-updated . 1502816474) (modules . ()) (name . "temp-c") (nix-sha256 . "0wfidwr35dwx2hp22q0gp2cw5phnb72mczm68jbhfwzfxiiryd1b") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (contracts . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/temp-c/?path=temp-c") (tags . ("contracts")) (versions . #hash((default . #hasheq((checksum . "43f7f2141c81a301aa229ef4105f458eee070653") (source . "git://github.com/jeapostrophe/temp-c/?path=temp-c") (source_url . "git://github.com/jeapostrophe/temp-c/?path=temp-c"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("images-test" . #hash((author . "ntoronto@racket-lang.org") (checksum . "efde5829306932cb4053f8da736749008c54a67a") (dependencies . ("base" "images-lib" "pict-lib" "slideshow-lib" "racket-doc")) (description . "ntoronto@racket-lang.org") (modules . ()) (name . "images-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/images-test.zip") (tags . ()))) ("stockfighter-racket" . #hasheq((author . "euler90h@gmail.com") (authors . ("euler90h@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/stockfighter-racket.txt") (docs . (("main" "stockfighter-api" "doc/stockfighter-api@stockfighter-racket/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/stockfighter-racket.txt") (test-failure-log . "server/built/test-fail/stockfighter-racket.txt") (test-success-log . #f))) (checksum . "cf7669c2d79645a54ee287df14a3e704006e0096") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "rfc6455" "scribble-lib" "racket-doc")) (description . "Stockfighter API client") (implies . ()) (last-checked . 1522414684) (last-edit . 1450936553) (last-updated . 1502816456) (modules . ((lib "stockfighter-api/time.rkt") (lib "stockfighter-api/main.rkt") (lib "stockfighter-api/fills.rkt") (lib "stockfighter-api/orders.rkt") (lib "stockfighter-api/scribblings/stockfighter-api.scrbl") (lib "stockfighter-api/quotes.rkt") (lib "stockfighter-api/stockfighter.rkt") (lib "stockfighter-api/feed.rkt"))) (name . "stockfighter-racket") (nix-sha256 . "0mjy18a5nxjw1mvdnb973rf4nyfkkc7hyy8zq323iiad78xx88gb") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:euler90h@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/eu90h/stockfighter-racket") (tags . ()) (versions . #hash((default . #hasheq((checksum . "cf7669c2d79645a54ee287df14a3e704006e0096") (source . "git://github.com/eu90h/stockfighter-racket") (source_url . "http://github.com/eu90h/stockfighter-racket/tree/master"))))))) ("SAT" . #hasheq((author . "guannanwei@outlook.com") (authors . ("guannanwei@outlook.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "SAT" "doc/SAT@SAT/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/SAT.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/SAT.txt"))) (checksum . "596c1270c69d64c383851eeaf7d0f46845ba5fe3") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "A simple SAT solver based on DPLL.") (implies . ()) (last-checked . 1522414674) (last-edit . 1507859818) (last-updated . 1507859818) (modules . ((lib "SAT/test.rkt") (lib "SAT/scribblings/SAT.scrbl") (lib "SAT/lib/parser.rkt") (lib "SAT/main.rkt") (lib "SAT/lib/dpll.rkt"))) (name . "SAT") (nix-sha256 . "0dlp8h6g8nhvp14yifgd8ppazijsqxyryal4gsa5ilpd0m4c2qk4") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:guannanwei@outlook.com . #t) (ring:2 . #t))) (source . "git://github.com/Kraks/SAT.rkt") (tags . ()) (versions . #hash((default . #hasheq((checksum . "596c1270c69d64c383851eeaf7d0f46845ba5fe3") (source . "git://github.com/Kraks/SAT.rkt") (source_url . "http://github.com/Kraks/SAT.rkt/tree/master"))))))) ("net-cookies-lib" . #hash((author . "jay.mccarthy@gmail.com jmj@fellowhuman.com") (checksum . "96ff20cd91ba8d8082e46b60de737a34e0e7db90") (dependencies . ("srfi-lite-lib" "base")) (description . "jay.mccarthy@gmail.com jmj@fellowhuman.com") (modules . ()) (name . "net-cookies-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/net-cookies-lib.zip") (tags . ()))) ("chk" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/chk.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/chk.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/chk.txt"))) (checksum . "613dad8bf51d1b9d83bdbd99ca3fe52c18e62ff7") (checksum-error . #f) (conflicts . ()) (dependencies . ("chk-lib" "chk-doc" "chk-test")) (description . "a minimal tester") (implies . ("chk-lib" "chk-doc" "chk-test")) (last-checked . 1522414313) (last-edit . 1505750896) (last-updated . 1505750896) (modules . ()) (name . "chk") (nix-sha256 . "0kw3xb8316ygcczjpf90p9bpdfkgaddiwk4kr6jchnhgsh1ana46") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/jeapostrophe/chk?path=chk") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "613dad8bf51d1b9d83bdbd99ca3fe52c18e62ff7") (source . "git://github.com/jeapostrophe/chk?path=chk") (source_url . "http://github.com/jeapostrophe/chk/tree/master?path=chk"))))))) ("alexis-util" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "alexis-util" "doc/alexis-util@alexis-util/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/alexis-util.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/alexis-util.txt"))) (checksum . "0268afb688231e0d6d76ded3291538dd5d3db37c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "match-plus" "scribble-lib" "static-rename" "threading" "typed-racket-lib" "rackunit-lib" "at-exp-lib" "racket-doc" "typed-racket-doc" "sandbox-lib")) (description . "Various utilities and helper functions I've found useful") (implies . ()) (last-checked . 1522417870) (last-edit . 1423075905) (last-updated . 1502812269) (modules . ((lib "alexis/util/struct.rkt") (lib "alexis/util/abbreviations.rkt") (lib "alexis/scribblings/alexis-util-typed.scrbl") (lib "alexis/util/threading.rkt") (lib "alexis/private/test/comparator.rkt") (lib "alexis/scribblings/alexis-util-untyped.scrbl") (lib "alexis/scribblings/alexis-util.scrbl") (lib "alexis/scribblings/alexis-util-extras.scrbl") (lib "alexis/private/test/struct.rkt") (lib "alexis/util/wrap.rkt") (lib "alexis/bool.rkt") (lib "alexis/util/renamed.rkt") (lib "typed/alexis/bool.rkt") (lib "typed/alexis/util/comparator.rkt") (lib "alexis/util/comparator.rkt") (lib "alexis/util/match.rkt"))) (name . "alexis-util") (nix-sha256 . "076bpg6fxd914wjnb6dym729gcmysxxhrriy3fw6z54n55hmc3nl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t) (typed-racket . #t))) (source . "git://github.com/lexi-lambda/racket-alexis.git?path=alexis-util") (tags . ("typed-racket")) (versions . #hash(("6.0" . #hasheq((checksum . "c6baadb3668067eefc1b16eaf4cf97b0180aa13c") (source . "git://github.com/lexi-lambda/racket-alexis.git?path=alexis-util#util-v6.1.1") (source_url . "http://github.com/lexi-lambda/racket-alexis.git/tree/master?path=alexis-util#util-v6.1.1"))) ("6.1.1" . #hasheq((checksum . "c6baadb3668067eefc1b16eaf4cf97b0180aa13c") (source . "git://github.com/lexi-lambda/racket-alexis.git?path=alexis-util#util-v6.1.1") (source_url . "http://github.com/lexi-lambda/racket-alexis.git/tree/master?path=alexis-util#util-v6.1.1"))) ("6.2.1" . #hasheq((checksum . "f5e3cbad14ba951a302bc45d1b0e1c554a13b523") (source . "git://github.com/lexi-lambda/racket-alexis.git?path=alexis-util#v6.2") (source_url . "http://github.com/lexi-lambda/racket-alexis.git/tree/master?path=alexis-util#v6.2"))) (default . #hasheq((checksum . "0268afb688231e0d6d76ded3291538dd5d3db37c") (source . "git://github.com/lexi-lambda/racket-alexis.git?path=alexis-util") (source_url . "http://github.com/lexi-lambda/racket-alexis.git/tree/master?path=alexis-util"))) ("6.0.1" . #hasheq((checksum . "c6baadb3668067eefc1b16eaf4cf97b0180aa13c") (source . "git://github.com/lexi-lambda/racket-alexis.git?path=alexis-util#util-v6.1.1") (source_url . "http://github.com/lexi-lambda/racket-alexis.git/tree/master?path=alexis-util#util-v6.1.1"))) ("6.2" . #hasheq((checksum . "f5e3cbad14ba951a302bc45d1b0e1c554a13b523") (source . "git://github.com/lexi-lambda/racket-alexis.git?path=alexis-util#v6.2") (source_url . "http://github.com/lexi-lambda/racket-alexis.git/tree/master?path=alexis-util#v6.2"))) ("6.1" . #hasheq((checksum . "c6baadb3668067eefc1b16eaf4cf97b0180aa13c") (source . "git://github.com/lexi-lambda/racket-alexis.git?path=alexis-util#util-v6.1.1") (source_url . "http://github.com/lexi-lambda/racket-alexis.git/tree/master?path=alexis-util#util-v6.1.1"))))))) ("rackunit-spec" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rackunit-spec" "doc/rackunit-spec@rackunit-spec/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackunit-spec.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rackunit-spec.txt"))) (checksum . "96f9f48b2f4b004fafc67a3d26805983274568c4") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "rackunit-doc" "scribble-lib")) (description . "BDD test helpers for rackunit") (implies . ()) (last-checked . 1522414664) (last-edit . 1457809036) (last-updated . 1502816377) (modules . ((lib "rackunit/spec.rkt") (lib "rackunit/scribblings/rackunit-spec.scrbl"))) (name . "rackunit-spec") (nix-sha256 . "1nzkyc82w45xgzdcvlvhsp5qh6r1gsggjd3wf3c53l2dhpkwdqfb") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/lexi-lambda/rackunit-spec") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "96f9f48b2f4b004fafc67a3d26805983274568c4") (source . "git://github.com/lexi-lambda/rackunit-spec") (source_url . "http://github.com/lexi-lambda/rackunit-spec/tree/master"))))))) ("namespaced-transformer-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/namespaced-transformer-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/namespaced-transformer-lib.txt"))) (checksum . "4cdc1bdae09a07b78f23665267f2c7df4be5a7f6") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1522414438) (last-edit . 1473370346) (last-updated . 1502816193) (modules . ((lib "namespaced-transformer/info-key.rkt") (lib "namespaced-transformer/main.rkt"))) (name . "namespaced-transformer-lib") (nix-sha256 . "0lfcxyb76iadqh7vhxqzg5fdgd3pyx6nsjqdibgam10dlppck45y") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/namespaced-transformer?path=namespaced-transformer-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4cdc1bdae09a07b78f23665267f2c7df4be5a7f6") (source . "git://github.com/lexi-lambda/namespaced-transformer?path=namespaced-transformer-lib") (source_url . "http://github.com/lexi-lambda/namespaced-transformer/tree/master?path=namespaced-transformer-lib"))))))) ("quad" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "quad" "doc/quad@quad/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/quad.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/quad.txt"))) (checksum . "24ee66887970851b907356dc3aba4f1e7d4d90e7") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.0") "sugar" "csp" "rackunit-lib" "hyphenate" "at-exp-lib" "data-lib" "draw-lib" "gui-lib" "math-lib" "plot-gui-lib" "plot-lib" "profile-lib" "typed-racket-lib" "racket-doc" "scribble-lib" "draw-doc" "scribble-doc")) (description . "Document processor (unstable)") (implies . ()) (last-checked . 1522414538) (last-edit . 1466024459) (last-updated . 1502816340) (modules . ((lib "quad/experimental.rkt") (lib "quad/logger.rkt") (lib "quad/measure.rkt") (lib "quad/todo.rkt") (lib "quad/tests.rkt") (lib "quad/quick-sample.rkt") (lib "quad/stats.rkt") (lib "quad/foo3.rkt") (lib "quad/utils.rkt") (lib "quad/segfault.rkt") (lib "quad/scribblings/quad.scrbl") (lib "quad/test-render.rkt") (lib "quad/foo2.rkt") (lib "quad/foo.rkt") (lib "quad/world.rkt") (lib "quad/ocm.rkt") (lib "quad/test-quadlangmod.rkt") (lib "quad/main.rkt") (lib "quad/ffi/fc-bindings.rkt") (lib "quad/test-quadlang.rkt") (lib "quad/ffi/pango-bindings.rkt") (lib "quad/typeset.rkt") (lib "quad/render.rkt") (lib "quad/quads.rkt") (lib "quad/breaktester.rkt") (lib "quad/tests-ocm.rkt") (lib "quad/buttons.rkt") (lib "quad/wrap.rkt") (lib "quad/quick-test.rkt") (lib "quad/samples.rkt"))) (name . "quad") (nix-sha256 . "0s705gli529w1xx9nlpvkgcq8x6359i23bjccd0frn9j8832nh41") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mb@mbtype.com . #t) (ring:1 . #t))) (source . "git://github.com/mbutterick/quad#demo") (tags . ()) (versions . #hash((default . #hasheq((checksum . "24ee66887970851b907356dc3aba4f1e7d4d90e7") (source . "git://github.com/mbutterick/quad#demo") (source_url . "http://github.com/mbutterick/quad/tree/master#demo"))))))) ("video-samples" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/video-samples.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "ea6081e79309db035842406d29cbc85cce303d5c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "draw-lib" "gui-lib" "pict-lib" "video")) (description . "A package containing sample videos (with a license to use and redistribute), as well as video scripts to use them.") (implies . ()) (last-checked . 1522414700) (last-edit . 1507818372) (last-updated . 1507822283) (modules . ((lib "video-samples/bbb/running.rkt") (lib "video-samples/bbb/flying.rkt") (lib "video-samples/bbb/jumping.rkt") (lib "video-samples/bbb/chirping.rkt") (lib "video-samples/bbb/mos2.rkt") (lib "video-samples/bbb/jumpflytrans.rkt") (lib "video-samples/bbb/mosaic.rkt"))) (name . "video-samples") (nix-sha256 . "0h3kmm41qf6c5yhxns6g1wz8ngkgw6h6slj0pq9y0id05lav96ir") (ring . 2) (search-terms . #hasheq((:build-fail: . #t) (author:leif@leifandersen.net . #t) (ring:2 . #t) (samples . #t) (video . #t))) (source . "git://github.com/videolang/test-samples") (tags . ("samples" "video")) (versions . #hash((default . #hasheq((checksum . "ea6081e79309db035842406d29cbc85cce303d5c") (source . "git://github.com/videolang/test-samples") (source_url . "http://github.com/videolang/test-samples/tree/master"))))))) ("unstable-doc" . #hash((author . "jay@racket-lang.org samth@racket-lang.org cce@racket-lang.org ryanc@racket-lang.org") (authors . ("jay@racket-lang.org" "samth@racket-lang.org" "cce@racket-lang.org" "ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "unstable" "doc/unstable@unstable-doc/index.html") ("main" "unstable-gui" "doc/unstable-gui@unstable-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-doc.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-doc" "scheme-lib" "at-exp-lib" "compatibility-lib" "draw-lib" "gui-lib" "pict-lib" "racket-doc" "rackunit-lib" "scribble-lib" "slideshow-lib" "typed-racket-lib" "unstable-contract-lib" "unstable-debug-lib" "unstable-lib" "unstable-list-lib" "unstable-macro-testing-lib" "unstable-options-lib" "unstable-parameter-group-lib" "unstable-pretty-lib" "unstable-2d" "draw-doc" "gui-doc" "pict-doc" "scribble-doc" "slideshow-doc" "class-iop-doc" "automata-doc" "markparam-doc" "temp-c-doc" "unix-socket-doc" "2d-doc" "option-contract-doc")) (description . "documentation part of \"unstable\"") (implies . ()) (last-checked . 1522414697) (last-edit . 1445382797) (last-updated . 1502816513) (modules . ((lib "unstable/scribblings/recontract.scrbl") (lib "unstable/scribblings/open-place.scrbl") (lib "unstable/scribblings/automata.scrbl") (lib "unstable/scribblings/2d.scrbl") (lib "unstable/scribblings/gui/unstable-gui.scrbl") (lib "unstable/scribblings/gui/snip.scrbl") (lib "unstable/scribblings/options.scrbl") (lib "unstable/scribblings/custom-write.scrbl") (lib "unstable/scribblings/struct.scrbl") (lib "unstable/scribblings/unstable.scrbl") (lib "unstable/scribblings/gui/slideshow.scrbl") (lib "unstable/scribblings/socket.scrbl") (lib "unstable/scribblings/match.scrbl") (lib "unstable/scribblings/hash.scrbl") (lib "unstable/scribblings/function.scrbl") (lib "unstable/scribblings/future.scrbl") (lib "unstable/scribblings/gui/notify.scrbl") (lib "unstable/scribblings/define.scrbl") (lib "unstable/scribblings/logging.scrbl") (lib "unstable/scribblings/parameter-group.scrbl") (lib "unstable/scribblings/temp-c.scrbl") (lib "unstable/scribblings/debug.scrbl") (lib "unstable/scribblings/pretty.scrbl") (lib "unstable/scribblings/error.scrbl") (lib "unstable/scribblings/sequence.scrbl") (lib "unstable/scribblings/lazy-require.scrbl") (lib "unstable/scribblings/gui/scribble.scrbl") (lib "unstable/scribblings/list.scrbl") (lib "unstable/scribblings/contract.scrbl") (lib "unstable/scribblings/bytes.scrbl") (lib "unstable/scribblings/gui/prefs.scrbl") (lib "unstable/scribblings/sandbox.scrbl") (lib "unstable/scribblings/class-iop.scrbl") (lib "unstable/scribblings/find.scrbl") (lib "unstable/scribblings/wrapc.scrbl") (lib "unstable/scribblings/utils.rkt") (lib "unstable/scribblings/macro-testing.scrbl") (lib "unstable/scribblings/string.scrbl") (lib "unstable/scribblings/markparam.scrbl") (lib "unstable/scribblings/syntax.scrbl") (lib "unstable/scribblings/gui/pict.scrbl"))) (name . "unstable-doc") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:cce@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (author:ryanc@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("unstable")) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) (default . #hasheq((checksum . "6d2564bf725be9d56320cfa5bf438e8d3dafdb6e") (source . "git://github.com/racket/unstable/?path=unstable-doc") (source_url . "git://github.com/racket/unstable/?path=unstable-doc"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("gtp-util" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gtp-util" "doc/gtp-util@gtp-util/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gtp-util.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gtp-util.txt"))) (checksum . "a34e069bac0bfeff4a6cc1d770aae834ae2e7109") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "math-lib" "pict-lib" "rackunit-lib" "racket-doc" "scribble-lib" "scribble-doc" "rackunit-abbrevs")) (description . "22 helper functions you won't find anywhere else") (implies . ()) (last-checked . 1522414406) (last-edit . 1517356993) (last-updated . 1520663925) (modules . ((lib "gtp-util/scribblings/gtp-util.scrbl") (lib "gtp-util/main.rkt") (lib "gtp-util/system.rkt"))) (name . "gtp-util") (nix-sha256 . "10nx839a2sf59jmsj3wcii9kzk3rgjyc7bk9k03709m4ql1lh767") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (gtp . #t) (ring:2 . #t) (util . #t))) (source . "https://github.com/bennn/gtp-util.git") (tags . ("gtp" "util")) (versions . #hash((default . #hasheq((checksum . "a34e069bac0bfeff4a6cc1d770aae834ae2e7109") (source . "https://github.com/bennn/gtp-util.git") (source_url . "https://github.com/bennn/gtp-util.git"))))))) ("grommet" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "grommet" "doc/grommet@grommet/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/grommet.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/grommet.txt"))) (checksum . "bc3e2931a0e061187c0124ce32e1c10932c34da4") (checksum-error . #f) (conflicts . ()) (dependencies . ("grip" "typed-racket-lib" "base" "racket-doc" "typed-racket-doc" "scribble-lib")) (description . "Crypto routines, MD5, SHA-1, SHA-256, HMAC as native Typed Racket implementations.") (implies . ()) (last-checked . 1522414406) (last-edit . 1369839818) (last-updated . 1502816092) (modules . ((lib "grommet/scribblings/grommet.scrbl") (lib "grommet/crypto/hash/sha256.rkt") (lib "grommet/crypto/hmac.rkt") (lib "grommet/crypto/base64.rkt") (lib "grommet/crypto/private/util.rkt") (lib "grommet/crypto/hash/sha1.rkt") (lib "grommet/crypto/hash/md5.rkt"))) (name . "grommet") (nix-sha256 . "0qmfbn48ksp0kgwhbmc60pw0ayfk1cz3z1pwxi9aq19qrcb43rax") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ray.racine@gmail.com . #t) (crypto . #t) (ring:1 . #t))) (source . "https://gitlab.com/RayRacine/grommet.git") (tags . ("crypto")) (versions . #hash((default . #hasheq((checksum . "bc3e2931a0e061187c0124ce32e1c10932c34da4") (source . "https://gitlab.com/RayRacine/grommet.git") (source_url . "http://gitlab.com/RayRacine/grommet/tree/master"))))))) ("zeromq-r" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (("extract" "zeromq" "doc/zeromq@zeromq-r/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zeromq-r.txt") (test-failure-log . "server/built/test-fail/zeromq-r.txt") (test-success-log . #f))) (checksum . "2bf136f8b7b9a53ec0141a8b61fe8d874918a139") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.10") "zeromq-r-lib" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Bindings for ZeroMQ") (implies . ("zeromq-r-lib")) (last-checked . 1522414704) (last-edit . 1501792411) (last-updated . 1513754237) (modules . ((lib "zeromq/tests/hello.rkt") (lib "zeromq/tests/pub-sub.rkt") (lib "zeromq/zeromq.scrbl") (lib "zeromq/tests/rep-req.rkt"))) (name . "zeromq-r") (nix-sha256 . "06pmcxiwy7cmq6518xxnzx0p546fiav74nryvzyirasrcjmz6mdm") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:docs-error: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (net . #t) (ring:1 . #t))) (source . "git://github.com/rmculpepper/racket-zeromq?path=zeromq-r") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "2bf136f8b7b9a53ec0141a8b61fe8d874918a139") (source . "git://github.com/rmculpepper/racket-zeromq?path=zeromq-r") (source_url . "http://github.com/rmculpepper/racket-zeromq/tree/master?path=zeromq-r"))))))) ("r6rs" . #hash((author . "mflatt@racket-lang.org") (checksum . "02fddf29a24d1a7b14a75fabfc4abdf2be33d6a7") (dependencies . ("r6rs-lib" "r6rs-doc")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "r6rs") (source . "https://download.racket-lang.org/releases/6.12/pkgs/r6rs.zip") (tags . ()))) ("libvid-x86_64-win32" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libvid-x86_64-win32.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libvid-x86_64-win32.txt"))) (checksum . "e8fb290d38e90800ffa1d105dbb540d28f931807") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "64-bit windows build of the libvid library.") (implies . ()) (last-checked . 1522414425) (last-edit . 1503854804) (last-updated . 1521584420) (modules . ()) (name . "libvid-x86_64-win32") (nix-sha256 . "1h5nrhdlb9z89vx4irrzxcpc7zgpyjk1vy6yc598yfq1hskmwjvl") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (author:leif@leifandersen.net . #t) (libvid . #t) (ring:1 . #t) (video . #t))) (source . "git://github.com/videolang/native-pkgs?path=libvid-x86_64-win32") (tags . ("libvid" "video")) (versions . #hash((default . #hasheq((checksum . "e8fb290d38e90800ffa1d105dbb540d28f931807") (source . "git://github.com/videolang/native-pkgs?path=libvid-x86_64-win32") (source_url . "http://github.com/videolang/native-pkgs/tree/master?path=libvid-x86_64-win32"))))))) ("nat-traversal" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "nat-traversal" "doc/nat-traversal@nat-traversal/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/nat-traversal.txt") (test-failure-log . "server/built/test-fail/nat-traversal.txt") (test-success-log . #f))) (checksum . "3983b52e1e23b820da1b90f514ddbe7d6398e0cb") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "bitsyntax" "web-server-lib" "racket-doc" "scribble-lib")) (description . "NAT traversal utilities, including NAT-PMP and UPnP.") (implies . ()) (last-checked . 1522414439) (last-edit . 1520872802) (last-updated . 1520872930) (modules . ((lib "nat-traversal/examples/example-high-level-tcp.rkt") (lib "nat-traversal/interfaces.rkt") (lib "nat-traversal/main.rkt") (lib "nat-traversal/examples/example-high-level-udp.rkt") (lib "nat-traversal/high-level.rkt") (lib "nat-traversal/examples/example-upnp-ip-gateway.rkt") (lib "nat-traversal/timer.rkt") (lib "nat-traversal/upnp.rkt") (lib "nat-traversal/scribblings/nat-traversal.scrbl") (lib "nat-traversal/examples/map-udp-port.rkt") (lib "nat-traversal/mapping.rkt") (lib "nat-traversal/nat-pmp.rkt") (lib "nat-traversal/upnp-ip-gateway.rkt"))) (name . "nat-traversal") (nix-sha256 . "1jm51mxd8isg18lb7nrlzrszws92i7khk4b9g41bskmn8ka86ly4") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:tonygarnockjones@gmail.com . #t) (firewall . #t) (nat . #t) (net . #t) (network . #t) (ring:2 . #t))) (source . "https://github.com/tonyg/racket-nat-traversal.git") (tags . ("firewall" "nat" "net" "network")) (versions . #hash((default . #hasheq((checksum . "3983b52e1e23b820da1b90f514ddbe7d6398e0cb") (source . "https://github.com/tonyg/racket-nat-traversal.git") (source_url . "https://github.com/tonyg/racket-nat-traversal.git"))))))) ("superc" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "superc" "doc/superc@superc/index.html"))) (failure-log . #f) (min-failure-log . "server/built/min-fail/superc.txt") (success-log . "server/built/install/superc.txt") (test-failure-log . "server/built/test-fail/superc.txt") (test-success-log . #f))) (checksum . "929d3e32db7a5c69fa9e033db7b5707cff329672") (checksum-error . #f) (conflicts . ()) (dependencies . ("at-exp-lib" "base" "scribble-text-lib" "scheme-lib" "racket-doc" "scribble-lib")) (description . "A language for writing C with Racket macros and an easy interface to Racket") (implies . ()) (last-checked . 1522414686) (last-edit . 1353686056) (last-updated . 1502816461) (modules . ((lib "superc/scribblings/superc.scrbl") (lib "superc/lang/reader.rkt") (lib "superc/c-loader.rkt") (lib "tests/superc/bdb.rkt") (lib "tests/superc/hello.rkt") (lib "tests/superc/math.rkt") (lib "superc/lang.rkt") (lib "superc/lang-api.rkt"))) (name . "superc") (nix-sha256 . "1scsny08a2z7ivsc18lv7fdjcg93rkb2ci2h69k06rw4zmbkxcjn") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (ffi . #t) (language . #t) (ring:1 . #t))) (source . "github://github.com/jeapostrophe/superc/master") (tags . ("ffi" "language")) (versions . #hash((default . #hasheq((checksum . "929d3e32db7a5c69fa9e033db7b5707cff329672") (source . "github://github.com/jeapostrophe/superc/master") (source_url . "http://github.com/jeapostrophe/superc/tree/master"))))))) ("predicates" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "predicates" "doc/predicates@predicates/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/predicates.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/predicates.txt"))) (checksum . "ba6b82864a6bdb2b0aa42d3a493effe54d44e4e1") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "rackunit-lib" "racket-doc")) (description . "Deprecated. A library for constructing predicates in a point-free style. Unmaintained, and racket/function now supplies functions that make parts of this unnecessary.") (implies . ()) (last-checked . 1522414536) (last-edit . 1500077255) (last-updated . 1502816326) (modules . ((lib "predicates/test-helpers.rkt") (lib "predicates/logic.rkt") (lib "predicates/main.rkt") (lib "predicates/predicates.scrbl") (lib "predicates/contract-helpers.rkt") (lib "predicates/comparison.rkt") (lib "predicates/conditional.rkt") (lib "predicates/list.rkt"))) (name . "predicates") (nix-sha256 . "0lh33g9s7x8ac5q71xknnmkjp8nlc1qzyb8papxm8plq105ral94") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (deprecated . #t) (functional . #t) (ring:1 . #t))) (source . "git://github.com/jackfirth/predicates") (tags . ("deprecated" "functional")) (versions . #hash((default . #hasheq((checksum . "ba6b82864a6bdb2b0aa42d3a493effe54d44e4e1") (source . "git://github.com/jackfirth/predicates") (source_url . "http://github.com/jackfirth/predicates/tree/master"))))))) ("static-rename" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/static-rename.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/static-rename.txt"))) (checksum . "50f1ff9866a3ef116471eb1a483c1992480dcd45") (checksum-error . #f) (conflicts . ()) (dependencies . ("static-rename-doc" "static-rename-lib")) (description . "") (implies . ("static-rename-doc" "static-rename-lib")) (last-checked . 1522414684) (last-edit . 1490649794) (last-updated . 1502816455) (modules . ()) (name . "static-rename") (nix-sha256 . "09gzqnlilws5hm7ayg1cc82maz72syxa52p0r89ayazxhw0yfmyx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-static-rename?path=static-rename") (tags . ()) (versions . #hash((default . #hasheq((checksum . "50f1ff9866a3ef116471eb1a483c1992480dcd45") (source . "git://github.com/lexi-lambda/racket-static-rename?path=static-rename") (source_url . "http://github.com/lexi-lambda/racket-static-rename/tree/master?path=static-rename"))))))) ("wxme" . #hash((author . "mflatt@racket-lang.org") (checksum . "ee066e8fe91f4573ebc269c1366e3fcefebf5c1d") (dependencies . ("wxme-lib" "gui-doc")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "wxme") (source . "https://download.racket-lang.org/releases/6.12/pkgs/wxme.zip") (tags . ()))) ("alexis-collection-lens" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/alexis-collection-lens.txt") (docs . (("main" "alexis-collection-lens" "doc/alexis-collection-lens@alexis-collection-lens/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/alexis-collection-lens.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/alexis-collection-lens.txt"))) (checksum . "4f91587e8a5728b02c1ea9af9ac7476baf39b928") (checksum-error . #f) (conflicts . ()) (dependencies . ("alexis-collections" "base" "curly-fn" "lens" "scribble-lib" "at-exp-lib" "cover" "cover-coveralls" "doc-coverage" "rackunit-lib" "racket-doc")) (description . "Deprecated. Use the collections-lens package instead.") (implies . ()) (last-checked . 1522417869) (last-edit . 1451874470) (last-updated . 1502812267) (modules . ((lib "alexis/scribblings/main.scrbl") (lib "alexis/collection/lens/private/sandbox.rkt") (lib "alexis/collection/lens/private/test/doc-coverage.rkt") (lib "alexis/collection/lens.rkt"))) (name . "alexis-collection-lens") (nix-sha256 . "0qbvy3sc7miwf2bicxd1lqfc1adrykpajpjcfpmmsjdwqvhkq8sy") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (deprecated . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/alexis-collection-lens.git") (tags . ("deprecated")) (versions . #hash((default . #hasheq((checksum . "4f91587e8a5728b02c1ea9af9ac7476baf39b928") (source . "git://github.com/lexi-lambda/alexis-collection-lens.git") (source_url . "http://github.com/lexi-lambda/alexis-collection-lens.git/tree/master"))) ("6.2" . #hasheq((checksum . "42544c413a1b6c0d6b0c5cbeac93502d5f5e4857") (source . "git://github.com/lexi-lambda/alexis-collection-lens.git#v6.2") (source_url . "http://github.com/lexi-lambda/alexis-collection-lens.git/tree/master#v6.2"))))))) ("distro-build-test" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/distro-build-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/distro-build-test.txt"))) (checksum . "a1ddc164131f145c0ef776f7de44b273c265493b") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "remote-shell-lib" "web-server-lib")) (description . "Tests for \"distro-build\"") (implies . ()) (last-checked . 1522414381) (last-edit . 1509210348) (last-updated . 1510246882) (modules . ((lib "distro-build/tests/unix-installer.rkt"))) (name . "distro-build-test") (nix-sha256 . "191b1wy2b0gwlfq5pnzi8bk16an94aw6mks439ppkdf26c474aqr") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:2 . #t))) (source . "git://github.com/racket/distro-build/?path=distro-build-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a1ddc164131f145c0ef776f7de44b273c265493b") (source . "git://github.com/racket/distro-build/?path=distro-build-test") (source_url . "git://github.com/racket/distro-build/?path=distro-build-test"))))))) ("snappy" . #hasheq((author . "asumu@ccs.neu.edu stchang@racket-lang.org ") (authors . ("asumu@ccs.neu.edu" "stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "snappy" "doc/snappy@snappy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/snappy.txt") (test-failure-log . "server/built/test-fail/snappy.txt") (test-success-log . #f))) (checksum . "c97436037ff6600dc7df447a5aba3d59c3e7e011") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "FFI bindings to snappy, a fast compression library") (implies . ()) (last-checked . 1522414680) (last-edit . 1379708154) (last-updated . 1502816436) (modules . ((lib "snappy/snappy.rkt") (lib "snappy/snappy.scrbl") (lib "snappy/snappy-test.rkt") (lib "snappy/main.rkt"))) (name . "snappy") (nix-sha256 . "0v3s9c7ijrgxwgh388qjxi98zb9sv862vlq8azqk31wkwa6w82m9") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (author:stchang@racket-lang.org . #t) (compression . #t) (ring:1 . #t))) (source . "github://github.com/stchang/snappy/master") (tags . ("compression")) (versions . #hash((default . #hasheq((checksum . "c97436037ff6600dc7df447a5aba3d59c3e7e011") (source . "github://github.com/stchang/snappy/master") (source_url . "http://github.com/stchang/snappy/tree/master"))))))) ("draw-ttf-x86_64-linux-natipkg" . #hash((author . "mflatt@racket-lang.org") (checksum . "404000f99e40b106907c995aebe02366360044fe") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "draw-ttf-x86_64-linux-natipkg") (source . "https://download.racket-lang.org/releases/6.12/pkgs/draw-ttf-x86_64-linux-natipkg.zip") (tags . ()))) ("graph" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "graph" "doc/graph@graph/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/graph.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/graph.txt"))) (checksum . "f929cbead19b6930120592465239fc4f941d4b43") (checksum-error . #f) (conflicts . ()) (dependencies . (("racket" "5.3.2") "base" "data-lib" "math-lib" "rackunit-lib" "racket-doc" "scribble-lib" "data-doc" "math-doc")) (description . "Generic graph library.") (implies . ()) (last-checked . 1522414406) (last-edit . 1376368650) (last-updated . 1502816085) (modules . ((lib "graph/adjlist-utils.rkt") (lib "graph/graph-fns-allpairs-shortestpaths.rkt") (lib "graph/graph-fns-singlesource-shortestpaths.rkt") (lib "graph/tests/graph-fns-singlesource-shortestpaths-tests.rkt") (lib "graph/graph.scrbl") (lib "queue/priority.rkt") (lib "graph/graph-fns-maxflow.rkt") (lib "graph/graph-weighted.rkt") (lib "graph/main.rkt") (lib "graph/graph-fns-graphviz.rkt") (lib "graph/tests/boost-examples.rkt") (lib "graph/tests/graph-fns-coloring-tests.rkt") (lib "graph/tests/timing-test-in-neighbors.rkt") (lib "graph/tests/timing-tests.rkt") (lib "graph/tests/graph-fns-maxflow-tests.rkt") (lib "graph/hash-utils.rkt") (lib "queue/fifo.rkt") (lib "graph/tests/graph-fns-minspantree-tests.rkt") (lib "graph/graph-fns-minspantree.rkt") (lib "graph/gen-graph.rkt") (lib "graph/tests/graph-fns-basic-tests.rkt") (lib "graph/tests/graph-fns-allpairs-shortestpaths-tests.rkt") (lib "queue/gen-queue.rkt") (lib "graph/tests/test-utils.rkt") (lib "graph/tests/run-all-tests.rkt") (lib "graph/graph-fns-basic.rkt") (lib "graph/graph-property.rkt") (lib "graph/graph-matrix.rkt") (lib "graph/utils.rkt") (lib "graph/graph-fns-coloring.rkt") (lib "graph/graph-unweighted.rkt") (lib "graph/tests/graphviz.rkt") (lib "graph/tests/timing-test-scc.rkt"))) (name . "graph") (nix-sha256 . "1zcxwrz5kmnlkjrqawhmv09hkl0l5k3745ibnsysk9qg1cvb04id") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:stchang@racket-lang.org . #t) (data . #t) (graph . #t) (ring:1 . #t))) (source . "github://github.com/stchang/graph/master") (tags . ("data" "graph")) (versions . #hash((default . #hasheq((checksum . "f929cbead19b6930120592465239fc4f941d4b43") (source . "github://github.com/stchang/graph/master") (source_url . "http://github.com/stchang/graph/tree/master"))))))) ("x11" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/x11.txt") (test-failure-log . "server/built/test-fail/x11.txt") (test-success-log . #f))) (checksum . "b90ad3fd0eeafd617a6eb362e2edd9891c2876bd") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "compatibility-lib" "scheme-lib")) (description . "X11 bindings for Racket. Initially Jon Rafkind's work.") (implies . ()) (last-checked . 1522414702) (last-edit . 1385373872) (last-updated . 1516442403) (modules . ((lib "x11/xinerama.rkt") (lib "x11/xinput.rkt") (lib "xlambda/screenstack.rkt") (lib "xlambda/xlambda.rkt") (lib "x11/test/device.rkt") (lib "x11/fd.rkt") (lib "x11/x11.rkt") (lib "xlambda/rect.rkt") (lib "x11/keysym-util.rkt") (lib "x11/keysymdef.rkt") (lib "x11/utils.rkt") (lib "x11/test/xsnow.rkt") (lib "x11/x11-xpm.rkt") (lib "x11/test/wormhole.rkt") (lib "x11/test/test-x11.rkt"))) (name . "x11") (nix-sha256 . "059q9cvf85p442d8xiigi3kkdjkdfpj599h70a80jmzpnvsdxlz2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:laurent.orseau@gmail.com . #t) (ffi . #t) (linux . #t) (ring:1 . #t))) (source . "github://github.com/kazzmir/x11-racket/master/") (tags . ("ffi" "linux")) (versions . #hash((default . #hasheq((checksum . "b90ad3fd0eeafd617a6eb362e2edd9891c2876bd") (source . "github://github.com/kazzmir/x11-racket/master/") (source_url . "http://github.com/kazzmir/x11-racket/tree/master/"))))))) ("rsc3" . #hasheq((author . "mushk45@gmail.com mkhafate@calpoly.edu clements@racket-lang.org") (authors . ("mushk45@gmail.com" "mkhafate@calpoly.edu" "clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rsc3.txt") (test-failure-log . "server/built/test-fail/rsc3.txt") (test-success-log . #f))) (checksum . "a25985dab29ad951893cd7afa6d86a9371315871") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "gui-lib" "r6rs-lib" "srfi-lib" "srfi-lite-lib" "rackunit-lib")) (description . "The rsc3 SuperCollider client ported to Racket") (implies . ()) (last-checked . 1522414672) (last-edit . 1392515523) (last-updated . 1502816408) (modules . ((lib "oregano/routing.rkt") (lib "oregano/gui.rkt") (lib "oregano/examples/filters.rkt") (lib "rsc3/examples/bus-routing.rkt") (lib "rsc3/rsc3.scrbl") (lib "rhs/rhs.rkt") (lib "oregano/main.rkt") (lib "oregano/examples/gui-example.rkt") (lib "oregano/instrument.rkt") (lib "sosc/ip.rkt") (lib "rsc3/examples/rsc3-sine-play.rkt") (lib "sosc/transport.rkt") (lib "rsc3/main.rkt") (lib "rsc3/tests/regression-tests.rkt") (lib "rsc3/examples/ring3.rkt") (lib "oregano/sample.rkt") (lib "sosc/sosc.rkt") (lib "oregano/examples/instrument-example.rkt") (lib "rsc3/examples/moog-filter.rkt") (lib "sosc/bytevector.rkt") (lib "oregano/system.rkt"))) (name . "rsc3") (nix-sha256 . "0lyj710x7777liljyqyvcac7n95vwan35qpdh9806g8hwmiwq5h1") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (SuperCollider . #t) (audio . #t) (author:clements@racket-lang.org . #t) (author:mkhafate@calpoly.edu . #t) (author:mushk45@gmail.com . #t) (music . #t) (osc . #t) (ring:1 . #t))) (source . "git://github.com/quakehead/rsc3") (tags . ("audio" "music" "osc" "SuperCollider")) (versions . #hash((default . #hasheq((checksum . "a25985dab29ad951893cd7afa6d86a9371315871") (source . "git://github.com/quakehead/rsc3") (source_url . "http://github.com/quakehead/rsc3/tree/master"))))))) ("com-win32-i386" . #hash((author . "mflatt@racket-lang.org") (checksum . "2873249c0608b5836b2fbce82527a02beed5b552") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "com-win32-i386") (source . "https://download.racket-lang.org/releases/6.12/pkgs/com-win32-i386.zip") (tags . ()))) ("libnotify" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "libnotify" "doc/libnotify@libnotify/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libnotify.txt") (test-failure-log . "server/built/test-fail/libnotify.txt") (test-success-log . #f))) (checksum . "c1112e8095f53dde26da994c5d2025871cec9d12") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "draw-lib" "scribble-lib" "racket-doc" "draw-doc")) (description . "FFI bindings for libnotify (desktop notifications)") (implies . ()) (last-checked . 1522414424) (last-edit . 1428255877) (last-updated . 1502816155) (modules . ((lib "libnotify/ffi.rkt") (lib "libnotify/libnotify.rkt") (lib "libnotify/libnotify.scrbl") (lib "libnotify/ffi-test.rkt") (lib "libnotify/example.rkt") (lib "libnotify/main.rkt"))) (name . "libnotify") (nix-sha256 . "1jygjz6zd3f3pybglc5ljppzbxbpg9vssadpc9wxg934l7qirdr7") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (ffi . #t) (gui . #t) (ring:1 . #t))) (source . "git://github.com/takikawa/racket-libnotify") (tags . ("ffi" "gui")) (versions . #hash((default . #hasheq((checksum . "c1112e8095f53dde26da994c5d2025871cec9d12") (source . "git://github.com/takikawa/racket-libnotify") (source_url . "http://github.com/takikawa/racket-libnotify/tree/master"))))))) ("libvid-i386-win32" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libvid-i386-win32.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libvid-i386-win32.txt"))) (checksum . "e8fb290d38e90800ffa1d105dbb540d28f931807") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "32-bit windows build of libvid") (implies . ()) (last-checked . 1522414424) (last-edit . 1503854359) (last-updated . 1521584302) (modules . ()) (name . "libvid-i386-win32") (nix-sha256 . "1h5nrhdlb9z89vx4irrzxcpc7zgpyjk1vy6yc598yfq1hskmwjvl") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (author:leif@leifandersen.net . #t) (libvid . #t) (ring:1 . #t) (video . #t))) (source . "git://github.com/videolang/native-pkgs?path=libvid-i386-win32") (tags . ("libvid" "video")) (versions . #hash((default . #hasheq((checksum . "e8fb290d38e90800ffa1d105dbb540d28f931807") (source . "git://github.com/videolang/native-pkgs?path=libvid-i386-win32") (source_url . "http://github.com/videolang/native-pkgs/tree/master?path=libvid-i386-win32"))))))) ("pex" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pex" "doc/pex@pex/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pex.txt") (test-failure-log . "server/built/test-fail/pex.txt") (test-success-log . #f))) (checksum . "57997dcdcf5533249d65a9040d55763b22dda57a") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "typed-racket-lib" "mordae" "libserialport" "racket-doc" "typed-racket-doc" "typed-racket-lib")) (description . "Apollo Art PEx System Control") (implies . ()) (last-checked . 1522414511) (last-edit . 1439717819) (last-updated . 1502816246) (modules . ((lib "pex/regexp-read.rkt") (lib "pex/pex.scrbl") (lib "pex/main.rkt"))) (name . "pex") (nix-sha256 . "13k31cm89xp3nxiv022q0briaj0ndwc6qxlnwij7vhbv13riy1yd") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t))) (source . "git://github.com/mordae/racket-pex") (tags . ()) (versions . #hash((default . #hasheq((checksum . "57997dcdcf5533249d65a9040d55763b22dda57a") (source . "git://github.com/mordae/racket-pex") (source_url . "http://github.com/mordae/racket-pex/tree/master"))))))) ("spmatrix" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "spmatrix" "doc/spmatrix@spmatrix/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/spmatrix.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/spmatrix.txt"))) (checksum . "15e1c74f8763abbdfb4348702c98ca6043e52a1c") (checksum-error . #f) (conflicts . ()) (dependencies . ("spvector" "base" "compatibility-lib" "eli-tester" "racket-doc" "scribble-lib")) (description . "Semi-persistent matrices based on spvectors") (implies . ()) (last-checked . 1522414681) (last-edit . 1354135506) (last-updated . 1502816445) (modules . ((lib "tests/data/spmatrix.rkt") (lib "data/spmatrix/spmatrix.scrbl") (lib "data/spmatrix.rkt"))) (name . "spmatrix") (nix-sha256 . "11prqwhnkw0xl68yw3fdc25mg5mqynzzvbl77mwzqzr2fri3b6rj") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (data . #t) (ring:1 . #t))) (source . "github://github.com/jeapostrophe/matrix/master") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "15e1c74f8763abbdfb4348702c98ca6043e52a1c") (source . "github://github.com/jeapostrophe/matrix/master") (source_url . "http://github.com/jeapostrophe/matrix/tree/master"))))))) ("derp-3" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/derp-3.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/derp-3.txt"))) (checksum . "b26498d7bc7ab09a17b799c0e295f8e514930ca4") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "math-lib" "srfi-lib")) (description . "The Derp 3 parser, based on \"Parsing with Derivatives,\" code written by Michael D. Adams (www.michaeldadams.org)") (implies . ()) (last-checked . 1522414379) (last-edit . 1466453957) (last-updated . 1509055339) (modules . ((lib "derp-3/util/unsafe-struct.rkt") (lib "derp-3/util/define-case.rkt") (lib "derp-3/util/fast-for.rkt") (lib "derp-3/util/benchmark.rkt") (lib "derp-3/derp.rkt") (lib "derp-3/pyparse.rkt"))) (name . "derp-3") (nix-sha256 . "0lsqvn7p64q76v7c2xjcyz7yz2qp8l5yhlglcvkzsczx5khzplxr") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:clements@racket-lang.org . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "https://bitbucket.org/jbclements/derp-3.git") (tags . ("parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "b26498d7bc7ab09a17b799c0e295f8e514930ca4") (source . "https://bitbucket.org/jbclements/derp-3.git") (source_url . "https://bitbucket.org/jbclements/derp-3.git"))))))) ("define-with-spec" . #hasheq((author . "pnwamk@gmail.com") (authors . ("pnwamk@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "define-with-spec" "doc/define-with-spec@define-with-spec/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/define-with-spec.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/define-with-spec.txt"))) (checksum . "1b7050a848a853313abb5cdd4a0bfcb6705e5f9f") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "rackunit-lib")) (description . "Allows for function definitions with simple specifications that are enforced by checks at each call site. Functionality pales in comparison to racket/contract, but error messages w/ source info are provided for same-module violations of specifications.") (implies . ()) (last-checked . 1522414378) (last-edit . 1515785308) (last-updated . 1519874741) (modules . ((lib "define-with-spec/tests/tests.rkt") (lib "define-with-spec/main.rkt") (lib "define-with-spec/scribblings/define-with-spec.scrbl"))) (name . "define-with-spec") (nix-sha256 . "01xdc3j5qp6q316f6f0as1rggk40146l64gqy1adnl88cgbw3pa6") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:pnwamk@gmail.com . #t) (ring:2 . #t))) (source . "https://github.com/pnwamk/define-with-spec.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "1b7050a848a853313abb5cdd4a0bfcb6705e5f9f") (source . "https://github.com/pnwamk/define-with-spec.git") (source_url . "https://github.com/pnwamk/define-with-spec.git"))))))) ("http" . #hasheq((author . "greghendershott@gmail.com") (authors . ("greghendershott@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "http" "doc/http@http/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/http.txt") (test-failure-log . #f) (test-success-log . #f))) (checksum . "be8367169efc8c2b300cdb38c5f89602017a524b") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "html-lib" "rackunit-lib" "net-doc" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Support for HTTP 1.1 including automatic connection pooling.") (implies . ()) (last-checked . 1522414417) (last-edit . 1504135191) (last-updated . 1517937437) (modules . ((lib "http/request.rkt") (lib "http/http.scrbl") (lib "http/util.rkt") (lib "http/main.rkt") (lib "http/head.rkt"))) (name . "http") (nix-sha256 . "0xz6y511mnfna5205cm19sv8lhsjv4rh6zgkk12995p6kxmgnlix") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:greghendershott@gmail.com . #t) (http . #t) (net . #t) (ring:1 . #t) (web . #t))) (source . "git://github.com/greghendershott/http") (tags . ("http" "net" "web")) (versions . #hash((default . #hasheq((checksum . "be8367169efc8c2b300cdb38c5f89602017a524b") (source . "git://github.com/greghendershott/http") (source_url . "http://github.com/greghendershott/http/tree/master"))))))) ("asi64" . #hasheq((author . "pezi_pink@pinksquirrellabs.com") (authors . ("pezi_pink@pinksquirrellabs.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/asi64.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/asi64.txt") (test-failure-log . "server/built/test-fail/asi64.txt") (test-success-log . #f))) (checksum . "5f9f4220a518da8289f468783b0ec9beb780a3df") (checksum-error . #f) (conflicts . ()) (dependencies . ()) (description . "Extending Racket to become a 6502 assembler") (implies . ()) (last-checked . 1522417871) (last-edit . 1496242148) (last-updated . 1496527707) (modules . ((lib "asi64/expander.rkt") (lib "asi64/lang/language-info.rkt") (lib "asi64/samples/starfield.rkt") (lib "asi64/lang/reader.rkt") (lib "asi64/main.rkt") (lib "asi64/reader.rkt") (lib "asi64/lang/runtime-config.rkt"))) (name . "asi64") (nix-sha256 . "0jm969rh4gd33843bk4a613s9nb7l8dr2j79zqm19qbpnlyvdw3f") (ring . 1) (search-terms . #hasheq((|6502| . #t) (:build-dep-fail: . #t) (:build-success: . #t) (C64 . #t) (author:pezi_pink@pinksquirrellabs.com . #t) (ring:1 . #t))) (source . "git://github.com/pezipink/asi64") (tags . ("6502" "C64")) (versions . #hash((default . #hasheq((checksum . "5f9f4220a518da8289f468783b0ec9beb780a3df") (source . "git://github.com/pezipink/asi64") (source_url . "http://github.com/pezipink/asi64/tree/master"))))))) ("htdp-doc" . #hash((author . "matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org") (checksum . "a9a37ee0cf1ced7475bd937dbd418aee318a2454") (dependencies . ("base" "scribble-lib" "at-exp-lib" "draw-lib" "gui-lib" "htdp-lib" "plai" "sandbox-lib" "pict-lib" "mzscheme-doc" "scheme-lib" "compatibility-doc" "draw-doc" "drracket" "gui-doc" "pict-doc" "racket-doc")) (description . "matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org") (modules . ()) (name . "htdp-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/htdp-doc.zip") (tags . ()))) ("phc-adt-lib" . #hasheq((author . "georges.duperon@gmail.com") (authors . ("georges.duperon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/phc-adt-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/phc-adt-lib.txt"))) (checksum . "e2fe727b4ff84f0bb0212a6c103f0e0e2c955a4c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "hyper-literate" "multi-id" "phc-toolkit" "remember" "type-expander" "extensible-parser-specifications" "alexis-util" "typed-struct-props" "match-string" "xlist" "compatibility-lib" "generic-bind" "datatype" "at-exp-lib" "sandbox-lib" "scribble-enhanced" "scribble-lib" "scribble-math")) (description . "Implementation of phc-adt") (implies . ()) (last-checked . 1522414511) (last-edit . 1501077573) (last-updated . 1502816248) (modules . ((lib "phc-adt/main.rkt") (lib "phc-adt/tagged.hl.rkt") (lib "phc-adt/constructor.hl.rkt") (lib "phc-adt/structure.hl.rkt") (lib "phc-adt/tagged-supertype.hl.rkt") (lib "phc-adt/node-low-level.hl.rkt") (lib "phc-adt/adt.hl.rkt") (lib "phc-adt/check-no-overlap.rkt") (lib "phc-adt/adt-second-step.rkt") (lib "phc-adt/adt-init.rkt") (lib "phc-adt/declarations.rkt") (lib "phc-adt/ctx.hl.rkt") (lib "phc-adt/tagged-structure-low-level.hl.rkt") (lib "phc-adt/variant.hl.rkt"))) (name . "phc-adt-lib") (nix-sha256 . "18md2hanbx8812b2b3678zg5pblci409j2h6nkk8nhjkmvny1hzp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:georges.duperon@gmail.com . #t) (phc-adt . #t) (ring:1 . #t))) (source . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt-lib") (tags . ("phc-adt")) (versions . #hash((default . #hasheq((checksum . "e2fe727b4ff84f0bb0212a6c103f0e0e2c955a4c") (source . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt-lib") (source_url . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt-lib"))))))) ("python-tokenizer" . #hasheq((author . "clements@racket-lang.org dyoo@hashcollision.org") (authors . ("clements@racket-lang.org" "dyoo@hashcollision.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "python-tokenizer" "doc/python-tokenizer@python-tokenizer/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/python-tokenizer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/python-tokenizer.txt"))) (checksum . "beadda52525c78f4b3aa0c8adcf42bf5e1033c5a") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "data-lib" "while-loop" "at-exp-lib" "parser-tools-doc" "racket-doc" "scribble-lib")) (description . "A fairly direct translation of tokenize.py") (implies . ()) (last-checked . 1522414538) (last-edit . 1399597456) (last-updated . 1502816340) (modules . ((lib "python-tokenizer/python-tokenizer.rkt") (lib "python-tokenizer/main.rkt") (lib "python-tokenizer/test-tokenize.rkt") (lib "python-tokenizer/test-more.rkt") (lib "python-tokenizer/python-tokenizer.scrbl"))) (name . "python-tokenizer") (nix-sha256 . "1qgddyrn1qg3w51200rg7jvghfjv4mh2w156s8d48p2qg0w19z7p") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (author:dyoo@hashcollision.org . #t) (parser . #t) (ring:1 . #t))) (source . "github://github.com/jbclements/python-tokenizer/master/") (tags . ("parser")) (versions . #hash((default . #hasheq((checksum . "beadda52525c78f4b3aa0c8adcf42bf5e1033c5a") (source . "github://github.com/jbclements/python-tokenizer/master/") (source_url . "http://github.com/jbclements/python-tokenizer/tree/master/"))))))) ("math-x86_64-linux-natipkg" . #hash((author . "mflatt@racket-lang.org") (checksum . "ba42eea69eefdf1d3a46096567682f5d1cfdf6ea") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "math-x86_64-linux-natipkg") (source . "https://download.racket-lang.org/releases/6.12/pkgs/math-x86_64-linux-natipkg.zip") (tags . ()))) ("syntax-warn-doc" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "syntax-warn" "doc/syntax-warn@syntax-warn-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-warn-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-warn-doc.txt"))) (checksum . "f00b27f92656f60d32853831ee905ceeb00693d9") (checksum-error . #f) (conflicts . ()) (dependencies . ("syntax-warn-base" "scribble-lib" "scribble-text-lib" "base" "racket-doc" "scribble-lib" "syntax-warn-base")) (description . "Documentation for the syntax-warn packages") (implies . ()) (last-checked . 1522414689) (last-edit . 1500077547) (last-updated . 1502920414) (modules . ((lib "syntax-warn-doc/base.rkt") (lib "syntax-warn-doc/main.scrbl") (lib "syntax-warn-doc/reference.scrbl") (lib "syntax-warn-doc/cli.scrbl") (lib "syntax-warn-doc/lang.scrbl"))) (name . "syntax-warn-doc") (nix-sha256 . "0py8h9yxlxfnqlppcy1rwjj8bmnxymkavhpgcd68m1bj6ng4dhfn") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (docs . #t) (ring:1 . #t) (syntax . #t) (syntax-warn . #t))) (source . "git://github.com/jackfirth/syntax-warn?path=syntax-warn-doc") (tags . ("docs" "syntax" "syntax-warn")) (versions . #hash((default . #hasheq((checksum . "f00b27f92656f60d32853831ee905ceeb00693d9") (source . "git://github.com/jackfirth/syntax-warn?path=syntax-warn-doc") (source_url . "http://github.com/jackfirth/syntax-warn/tree/master?path=syntax-warn-doc"))))))) ("type-expander" . #hasheq((author . "georges.duperon@gmail.com") (authors . ("georges.duperon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "type-expander-implementation" "doc/type-expander-implementation@type-expander/index.html") ("main" "type-expander" "doc/type-expander@type-expander/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/type-expander.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/type-expander.txt"))) (checksum . "215036e059db349d91d54468dcd2c0ef4937236c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "typed-racket-lib" "typed-racket-more" "hyper-literate" "auto-syntax-e" "debug-scopes" "version-case" "scribble-lib" "racket-doc" "typed-racket-more" "typed-racket-doc" "scribble-enhanced" "mutable-match-lambda")) (description . "Type expanders for typed/racket, which work like match expanders for match") (implies . ()) (last-checked . 1522414694) (last-edit . 1471008019) (last-updated . 1517062737) (modules . ((lib "type-expander/test/readme.rkt") (lib "type-expander/test/base-lang-test-1.rkt") (lib "type-expander/base.rkt") (lib "type-expander/scribblings/type-expander.scrbl") (lib "type-expander/test/base-lang-test-2.rkt") (lib "type-expander/utils.rkt") (lib "type-expander/test/lang-test-2.rkt") (lib "type-expander/test/base-lang-test-3.rkt") (lib "type-expander/dbg.rkt") (lib "type-expander/test/lang-test-1.rkt") (lib "type-expander/contracts-to-types.rkt") (lib "type-expander/expander.rkt") (lib "type-expander/main.rkt") (lib "type-expander/lang/lang/reader.rkt") (lib "type-expander/identifiers.rkt") (lib "type-expander/lang.rkt") (lib "type-expander/scribblings/contracts-to-types.scrbl") (lib "type-expander/parameterize-lexical-context.rkt") (lib "type-expander/test/lang-test-3.rkt") (lib "type-expander/scribblings/type-expander-implementation.scrbl") (lib "type-expander/lang/reader.rkt") (lib "type-expander/test/test-contracts-to-types.rkt") (lib "type-expander/base/lang/reader.rkt") (lib "type-expander/scribblings/deprecated-colon.scrbl") (lib "type-expander/more-expanders.hl.rkt") (lib "type-expander/type-expander.hl.rkt") (lib "type-expander/test/type-expander-test.rkt") (lib "type-expander/lang/main.rkt"))) (name . "type-expander") (nix-sha256 . "06prc1638ly593q2ri8kkc1gr7h0gmsij684bpzv063940168b78") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:georges.duperon@gmail.com . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/jsmaniac/type-expander.git") (tags . ("typed-racket")) (versions . #hash((default . #hasheq((checksum . "215036e059db349d91d54468dcd2c0ef4937236c") (source . "https://github.com/jsmaniac/type-expander.git") (source_url . "https://github.com/jsmaniac/type-expander.git"))))))) ("lux" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "lux" "doc/lux@lux/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lux.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lux.txt"))) (checksum . "7f682a54613a888b3d9f11698e59c8c6505eadaa") (checksum-error . #f) (conflicts . ()) (dependencies . ("draw-lib" "drracket" ("gui-lib" #:version "1.13") "htdp-lib" "pict-lib" "base" "rackunit-lib" "draw-doc" "gui-doc" "htdp-doc" "pict-doc" "scribble-lib" "racket-doc")) (description . "brilliant interactive programs") (implies . ()) (last-checked . 1522414425) (last-edit . 1416699529) (last-updated . 1504538977) (modules . ((lib "lux/scribblings/lux.scrbl") (lib "lux/examples/val-demo.rkt") (lib "lux/chaos/gui/utils.rkt") (lib "lux/chaos/gui/key.rkt") (lib "lux/main.rkt") (lib "lux/chaos/gui/val.rkt") (lib "lux/chaos/pair.rkt") (lib "lux/chaos/gui.rkt") (lib "lux/word.rkt") (lib "lux/chaos.rkt") (lib "lux/chaos/gui/mouse.rkt") (lib "lux/examples/spin.rkt"))) (name . "lux") (nix-sha256 . "03x0hmdwqsdz7fi94yls6kbsmsk96cqp03p434kvni0ayz6kshhs") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (graphics . #t) (gui . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/lux") (tags . ("graphics" "gui")) (versions . #hash((default . #hasheq((checksum . "7f682a54613a888b3d9f11698e59c8c6505eadaa") (source . "git://github.com/jeapostrophe/lux") (source_url . "http://github.com/jeapostrophe/lux/tree/master"))))))) ("aws-cloudformation-template-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "aws-cloudformation-template"))) (failure-log . "server/built/fail/aws-cloudformation-template-doc.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "00f52274a5bfc03f23c9dd511db0c87e35cf80e5") (checksum-error . #f) (conflicts . ()) (dependencies . ("aws-cloudformation-template-lib" "base" "racket-doc" ("scribble-lib" #:version "1.16") "threading-lib" "turnstile")) (description . "documentation (no implementation) for “aws-cloudformation-template”") (implies . ()) (last-checked . 1522414288) (last-edit . 1485193282) (last-updated . 1502812276) (modules . ((lib "scribblings/aws/cloudformation/template.scrbl"))) (name . "aws-cloudformation-template-doc") (nix-sha256 . "0ndzv098xfx10a9dc1mp10kqwlhfngxj2i44nyrs0y4myz14wh0v") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/aws-cloudformation-template?path=aws-cloudformation-template-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "00f52274a5bfc03f23c9dd511db0c87e35cf80e5") (source . "git://github.com/lexi-lambda/aws-cloudformation-template?path=aws-cloudformation-template-doc") (source_url . "http://github.com/lexi-lambda/aws-cloudformation-template/tree/master?path=aws-cloudformation-template-doc"))))))) ("libserialport" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "libserialport" "doc/libserialport@libserialport/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libserialport.txt") (test-failure-log . "server/built/test-fail/libserialport.txt") (test-success-log . #f))) (checksum . "8729f3429a0337c6bb52b522d45cb29294123307") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1" "mordae" "typed-racket-lib" "racket-doc" "typed-racket-lib" "typed-racket-doc" "unstable-lib")) (description . "FFI bindings for the libserialport library.") (implies . ()) (last-checked . 1522414424) (last-edit . 1438605311) (last-updated . 1502816156) (modules . ((lib "libserialport/private/ffi.rkt") (lib "libserialport/libserialport.scrbl") (lib "libserialport/main.rkt"))) (name . "libserialport") (nix-sha256 . "1xzn3sbwp6vnmvfg2s3wm4gilf8jd14jrymsz5pq86911zkgnzc4") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mordae@anilinux.org . #t) (ffi . #t) (linux . #t) (ring:1 . #t) (windows . #t))) (source . "git://github.com/mordae/racket-libserialport") (tags . ("ffi" "linux" "windows")) (versions . #hash((default . #hasheq((checksum . "8729f3429a0337c6bb52b522d45cb29294123307") (source . "git://github.com/mordae/racket-libserialport") (source_url . "http://github.com/mordae/racket-libserialport/tree/master"))))))) ("option-contract-doc" . #hash((author . "chrdimo@seas.harvard.edu robby@racket-lang.org") (checksum . "2281f23855d1c56bda098498f53250b495c1444b") (dependencies . (("base" #:version "6.2.900.17") "option-contract-lib" "scribble-lib" "racket-doc")) (description . "chrdimo@seas.harvard.edu robby@racket-lang.org") (modules . ()) (name . "option-contract-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/option-contract-doc.zip") (tags . ()))) ("html-doc" . #hash((author . "jay@racket-lang.org mflatt@racket-lang.org") (checksum . "c7d655a24f878e5a50f0fe41e8eff25158d0ed43") (dependencies . ("base" "scribble-lib" "html-lib" "racket-doc")) (description . "jay@racket-lang.org mflatt@racket-lang.org") (modules . ()) (name . "html-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/html-doc.zip") (tags . ()))) ("ffi-utils" . #hasheq((author . "scott@thinkmoore.net") (authors . ("scott@thinkmoore.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "ffi-utils"))) (failure-log . "server/built/fail/ffi-utils.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "20fd038aad7978f6613a78cc48fae1358b90089d") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Helpful tools for writing FFI interfaces to C") (implies . ()) (last-checked . 1522414400) (last-edit . 1487854746) (last-updated . 1502815960) (modules . ((lib "ffi-utils/scribblings/ffi-utils.scrbl") (lib "ffi-utils/errno.rkt") (lib "ffi-utils/private/generate-errno.rkt") (lib "ffi-utils/data.rkt") (lib "ffi-utils/private/includes.rkt"))) (name . "ffi-utils") (nix-sha256 . "1g1v39s9czwb0qhjpxm00ssx1rw3dk0r6wbd7gkcd08sysxl07lx") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:scott@thinkmoore.net . #t) (ffi . #t) (ring:1 . #t))) (source . "git://github.com/thinkmoore/ffi-utils") (tags . ("ffi")) (versions . #hash((default . #hasheq((checksum . "20fd038aad7978f6613a78cc48fae1358b90089d") (source . "git://github.com/thinkmoore/ffi-utils") (source_url . "http://github.com/thinkmoore/ffi-utils/tree/master"))))))) ("opencl" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "opencl" "doc/opencl@opencl/index.html"))) (failure-log . #f) (min-failure-log . "server/built/min-fail/opencl.txt") (success-log . "server/built/install/opencl.txt") (test-failure-log . "server/built/test-fail/opencl.txt") (test-success-log . #f))) (checksum . "f984050b0c02beb6df186d1d531c4a92a98df1a1") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "superc" "at-exp-lib" "racket-doc")) (description . "A Racket interface to OpenCL using an FFI") (implies . ()) (last-checked . 1522414507) (last-edit . 1353449271) (last-updated . 1502816199) (modules . ((lib "tests/opencl/samples/nvidiaSamples/oclDotProduct/oclDotProduct.rkt") (lib "tests/opencl/samples/atiSamples/BinarySearch/BinarySearch.rkt") (lib "opencl/c/lib.rkt") (lib "opencl/c/constants.rkt") (lib "opencl/c/4-1.rkt") (lib "tests/opencl/samples/atiSamples/BitonicSort/BitonicSort.rkt") (lib "opencl/c/util.rkt") (lib "tests/opencl/test.rkt") (lib "opencl/c/include/cl.rkt") (lib "tests/opencl/examples/vmult/c-kernel.rkt") (lib "tests/opencl/samples/atiSamples/MatrixMultiplication/MatrixMultiplication.rkt") (lib "tests/opencl/examples/vmult/make-data.rkt") (lib "tests/opencl/samples/atiSamples/Template/Template.rkt") (lib "tests/opencl/samples/atiSamples/FloydWarshall/FloydWarshall.rkt") (lib "tests/opencl/samples/nvidiaSamples/oclDeviceQuery/oclDeviceQuery.rkt") (lib "opencl/c/5-10.rkt") (lib "tests/opencl/examples/pps/scan.rkt") (lib "opencl/scribblings/opencl.scrbl") (lib "opencl/c/syntax.rkt") (lib "opencl/c/5-5.rkt") (lib "tests/opencl/examples/vmult/racket-unsafe-vector.rkt") (lib "tests/opencl/samples/nvidiaSamples/oclBandwidthTest/oclBandwidthTest.rkt") (lib "opencl/c/5-3.rkt") (lib "tests/opencl/samples/atiSamples/MatrixTranspose/MatrixTranspose.rkt") (lib "tests/opencl/samples/atiSamples/BlackScholes/BlackScholes.rkt") (lib "tests/opencl/examples/vmult/racket-vector.rkt") (lib "opencl/racket.rkt") (lib "opencl/c/5-6.rkt") (lib "opencl/c/tsyntax.rkt") (lib "opencl/c/5-2.rkt") (lib "opencl/scribblings/c/4.scrbl") (lib "opencl/c/5.rkt") (lib "opencl/c/4-2.rkt") (lib "tests/opencl/examples/vmult/opencl.rkt") (lib "tests/opencl/samples/atiSamples/FastWalshTransform/FastWalshTransform.rkt") (lib "tests/opencl/samples/atiSamples/EigenValue/EigenValue.rkt") (lib "tests/opencl/samples/atiSamples/DwtHaar1D/DwtHaar1D.rkt") (lib "opencl/c/5-7.rkt") (lib "opencl/scribblings/c/types.scrbl") (lib "tests/opencl/samples/atiSamples/BinomialOption/BinomialOption.rkt") (lib "tests/opencl/samples/nvidiaSamples/oclTranspose/oclTranspose.rkt") (lib "opencl/c/5-1.rkt") (lib "tests/opencl/samples/nvidiaSamples/oclVectorAdd/oclVectorAdd.rkt") (lib "opencl/scribblings/c/5.scrbl") (lib "tests/opencl/examples/vmult/racket-list.rkt") (lib "tests/opencl/samples/nvidiaSamples/utils/utils.rkt") (lib "opencl/scribblings/c.scrbl") (lib "opencl/c/5-4.rkt") (lib "tests/opencl/examples/matrix-transpose/transpose.rkt") (lib "opencl/c/4.rkt") (lib "opencl/c/include/extract-defines.rkt") (lib "opencl/c/5-9.rkt") (lib "opencl/c/4-3.rkt") (lib "opencl/c/types.rkt") (lib "tests/opencl/samples/nvidiaSamples/oclMatVecMul/oclMatVecMul.rkt") (lib "opencl/c/5-8.rkt") (lib "tests/opencl/samples/atiSamples/atiUtils/utils.rkt") (lib "opencl/c.rkt") (lib "tests/opencl/examples/vmult/c-loop.rkt"))) (name . "opencl") (nix-sha256 . "1q4agl1125ksyps616q58lglzymp7dp7qw63jbvfja2zcn947yb1") (ring . 1) (search-terms . #hasheq((|| . #t) (:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (ffi . #t) (parallel . #t) (ring:1 . #t))) (source . "github://github.com/jeapostrophe/opencl/master") (tags . ("" "ffi" "parallel")) (versions . #hash((default . #hasheq((checksum . "f984050b0c02beb6df186d1d531c4a92a98df1a1") (source . "github://github.com/jeapostrophe/opencl/master") (source_url . "http://github.com/jeapostrophe/opencl/tree/master"))))))) ("expr-in-racket" . #hasheq((author . "kevin2059@163.com") (authors . ("kevin2059@163.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/expr-in-racket.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "fa8266d311df18010da4e56648e06a9fe53c6b0b") (checksum-error . #f) (conflicts . ()) (dependencies . ()) (description . "embed expr like \"x+1\" in racket.") (implies . ()) (last-checked . 1522414399) (last-edit . 1518140329) (last-updated . 1518140134) (modules . ((lib "expr-in-racket/lang/configure-runtime.rkt") (lib "expr-in-racket/grammar/ast.rkt") (lib "expr-in-racket/grammar/lex.rkt") (lib "expr-in-racket/main.rkt") (lib "expr-in-racket/grammar/yacc.rkt") (lib "expr-in-racket/syntax.rkt") (lib "expr-in-racket/lang/reader.rkt") (lib "expr-in-racket/srcloc.rkt") (lib "expr-in-racket/compiler.rkt") (lib "expr-in-racket/lang/lang-info.rkt") (lib "expr-in-racket/lib.rkt"))) (name . "expr-in-racket") (nix-sha256 . "1x8fmy6a9hwbpd4gxpic3cy2ywnh1kw4xamfqlksmv5blzfhzdsa") (ring . 2) (search-terms . #hasheq((:build-fail: . #t) (author:kevin2059@163.com . #t) (lang-extension . #t) (ring:2 . #t))) (source . "https://github.com/connor2059/expr-in-racket.git") (tags . ("lang-extension")) (versions . #hash((default . #hasheq((checksum . "fa8266d311df18010da4e56648e06a9fe53c6b0b") (source . "https://github.com/connor2059/expr-in-racket.git") (source_url . "https://github.com/connor2059/expr-in-racket.git"))))))) ("future-visualizer-typed" . #hash((author . "jamesswaine@racket-lang.org") (checksum . "903259a1cb98cd73b8c1de45df20885bd8868aaa") (dependencies . ("base" "future-visualizer" "typed-racket-lib")) (description . "jamesswaine@racket-lang.org") (modules . ()) (name . "future-visualizer-typed") (source . "https://download.racket-lang.org/releases/6.12/pkgs/future-visualizer-typed.zip") (tags . ()))) ("phc-toolkit" . #hasheq((author . "georges.duperon@gmail.com") (authors . ("georges.duperon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "phc-toolkit" "doc/phc-toolkit@phc-toolkit/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/phc-toolkit.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/phc-toolkit.txt"))) (checksum . "4694f870859cd33f46f493a70bb722ca05faa99f") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "alexis-util" "typed-racket-lib" "typed-racket-more" "reprovide-lang" "type-expander" "hyper-literate" "scribble-lib" "racket-doc" "typed-racket-doc" "predicates" "rackunit-doc" "scribble-math" "drracket")) (description . "Personal collection of utilities. Somewhat unstable and sparsely documented (for now).") (implies . ()) (last-checked . 1522414511) (last-edit . 1501078642) (last-updated . 1517062659) (modules . ((lib "phc-toolkit/scribblings/set-untyped.scrbl") (lib "phc-toolkit/contract.rkt") (lib "phc-toolkit/scribblings/ids-untyped.scrbl") (lib "phc-toolkit/test/test-percent2.rkt") (lib "phc-toolkit/scribblings/for-star-list-star.scrbl") (lib "phc-toolkit/require-provide.rkt") (lib "phc-toolkit/scribblings/format-id-record-untyped.scrbl") (lib "phc-toolkit/scribblings/cond-let.scrbl") (lib "phc-toolkit/scribblings/multiassoc-syntax-untyped.scrbl") (lib "phc-toolkit/untyped-only/format-id-record.rkt") (lib "phc-toolkit/untyped-only/quasitemplate.rkt") (lib "phc-toolkit/ids.rkt") (lib "phc-toolkit/scribblings/backtrace-untyped.scrbl") (lib "phc-toolkit/cond-let.rkt") (lib "phc-toolkit/typed-rackunit.rkt") (lib "phc-toolkit/scribblings/repeat-stx.scrbl") (lib "phc-toolkit/scribblings/require-provide-untyped.scrbl") (lib "phc-toolkit/untyped-only/for-star-list-star.rkt") (lib "phc-toolkit/scribblings/multiassoc-syntax.scrbl") (lib "phc-toolkit/untyped/main.rkt") (lib "phc-toolkit/scribblings/backtrace.scrbl") (lib "phc-toolkit/scribblings/aliases-untyped.scrbl") (lib "phc-toolkit/scribblings/template.scrbl") (lib "phc-toolkit/scribblings/contract-untyped.scrbl") (lib "phc-toolkit/untyped/type-inference-helpers.rkt") (lib "phc-toolkit/scribblings/stx-patching-srcloc.scrbl") (lib "phc-toolkit/scribblings/list.scrbl") (lib "phc-toolkit/backtrace.rkt") (lib "phc-toolkit/scribblings/meta-struct.scrbl") (lib "phc-toolkit/scribblings/in-untyped.scrbl") (lib "phc-toolkit/untyped/compat.rkt") (lib "phc-toolkit/untyped/ids.rkt") (lib "phc-toolkit/scribblings/percent.scrbl") (lib "phc-toolkit/scribblings/cond-let-untyped.scrbl") (lib "phc-toolkit/threading.rkt") (lib "phc-toolkit/generate-indices.rkt") (lib "phc-toolkit/partial-include.rkt") (lib "phc-toolkit/untyped/backtrace.rkt") (lib "phc-toolkit/typed-rackunit-extensions.rkt") (lib "phc-toolkit/scribblings/fixnum-untyped.scrbl") (lib "phc-toolkit/test/meta-struct-test.rkt") (lib "phc-toolkit/scribblings/typed-rackunit.scrbl") (lib "phc-toolkit/untyped/require-provide.rkt") (lib "phc-toolkit/todo.rkt") (lib "phc-toolkit/sequence.rkt") (lib "phc-toolkit/untyped/syntax-parse.rkt") (lib "phc-toolkit/scribblings/repeat-stx-untyped.scrbl") (lib "phc-toolkit/scribblings/tmpl-multiassoc-syntax-untyped.scrbl") (lib "phc-toolkit/untyped/values.rkt") (lib "phc-toolkit/list-lang.rkt") (lib "phc-toolkit/scribblings/tmpl-untyped.scrbl") (lib "phc-toolkit/scribblings/test-framework-untyped.scrbl") (lib "phc-toolkit/scribblings/in.scrbl") (lib "phc-toolkit/test/list-test.rkt") (lib "phc-toolkit/scribblings/sequence-untyped.scrbl") (lib "phc-toolkit/test/test-format-id-record-inject.rkt") (lib "phc-toolkit/scribblings/generate-indices-untyped.scrbl") (lib "phc-toolkit/untyped/sequence.rkt") (lib "phc-toolkit/untyped/threading.rkt") (lib "phc-toolkit/test/test-syntax-parse.rkt") (lib "phc-toolkit/scribblings/generate-indices.scrbl") (lib "phc-toolkit/stx/fold.rkt") (lib "phc-toolkit/scribblings/utils.rkt") (lib "phc-toolkit/scribblings/set.scrbl") (lib "phc-toolkit/scribblings/syntax-parse-pattern-expanders.scrbl") (lib "phc-toolkit/type-inference-helpers.rkt") (lib "phc-toolkit/untyped/set.rkt") (lib "phc-toolkit/scribblings/sequence.scrbl") (lib "phc-toolkit/untyped.rkt") (lib "phc-toolkit/scribblings/not-implemented-yet-untyped.scrbl") (lib "phc-toolkit/test/test-ids.rkt") (lib "phc-toolkit/scribblings/test-framework.scrbl") (lib "phc-toolkit/scribblings/percent-untyped.scrbl") (lib "phc-toolkit/percent.rkt") (lib "phc-toolkit/scribblings/fixnum.scrbl") (lib "phc-toolkit/scribblings/require-provide.scrbl") (lib "phc-toolkit/list.rkt") (lib "phc-toolkit/multiassoc-syntax.rkt") (lib "phc-toolkit/test/test-define-temp-ids.rkt") (lib "phc-toolkit/scribblings/type-inference-helpers-untyped.scrbl") (lib "phc-toolkit/untyped-only/syntax-parse.rkt") (lib "phc-toolkit/scribblings/tmpl-multiassoc-syntax.scrbl") (lib "phc-toolkit/untyped/generate-indices.rkt") (lib "phc-toolkit/scribblings/eval-get-values.scrbl") (lib "phc-toolkit/untyped/aliases.rkt") (lib "phc-toolkit/untyped/cond-let.rkt") (lib "phc-toolkit/untyped/tmpl.rkt") (lib "phc-toolkit/scribblings/list-lang.scrbl") (lib "phc-toolkit/tmpl.rkt") (lib "phc-toolkit/stx/prefab.rkt") (lib "phc-toolkit/scribblings/stx-untyped.scrbl") (lib "phc-toolkit/fixnum.rkt") (lib "phc-toolkit/aliases.rkt") (lib "phc-toolkit/untyped/format-id-record.rkt") (lib "phc-toolkit/unstable.rkt") (lib "phc-toolkit/scribblings/logn-id.scrbl") (lib "phc-toolkit/untyped/not-implemented-yet.rkt") (lib "phc-toolkit/scribblings/type-inference-helpers.scrbl") (lib "phc-toolkit/untyped/typed-rackunit.rkt") (lib "phc-toolkit/scribblings/typed-rackunit-untyped.scrbl") (lib "phc-toolkit/light-no-check.rkt") (lib "phc-toolkit/untyped/misc.rkt") (lib "phc-toolkit/scribblings/list-untyped.scrbl") (lib "phc-toolkit/scribblings/meta-struct-untyped.scrbl") (lib "phc-toolkit/scribblings/typed-untyped-untyped.scrbl") (lib "phc-toolkit/repeat-stx.rkt") (lib "phc-toolkit/scribblings/not-implemented-yet.scrbl") (lib "phc-toolkit/untyped/test-framework.rkt") (lib "phc-toolkit/untyped/fixnum.rkt") (lib "phc-toolkit/scribblings/compat-untyped.scrbl") (lib "phc-toolkit/scribblings/eval-get-values-untyped.scrbl") (lib "phc-toolkit/untyped/in.rkt") (lib "phc-toolkit/scribblings/phc-toolkit.scrbl") (lib "phc-toolkit/scribblings/values.scrbl") (lib "phc-toolkit/untyped/logn-id.rkt") (lib "phc-toolkit/untyped/typed-untyped.rkt") (lib "phc-toolkit/in.rkt") (lib "phc-toolkit/typed-untyped.rkt") (lib "phc-toolkit/untyped/for-star-list-star.rkt") (lib "phc-toolkit/eval-get-values.rkt") (lib "phc-toolkit/untyped/meta-struct.rkt") (lib "phc-toolkit/scribblings/threading-untyped.scrbl") (lib "phc-toolkit/percent2.rkt") (lib "phc-toolkit/scribblings/stx.scrbl") (lib "phc-toolkit/scribblings/logn-id-untyped.scrbl") (lib "phc-toolkit/scribblings/ids.scrbl") (lib "phc-toolkit/scribblings/values-untyped.scrbl") (lib "phc-toolkit/scribblings/threading.scrbl") (lib "phc-toolkit/tmpl-multiassoc-syntax.rkt") (lib "phc-toolkit/test/test-format-id-record.rkt") (lib "phc-toolkit/untyped/tmpl-multiassoc-syntax.rkt") (lib "phc-toolkit/untyped-only/stx.rkt") (lib "phc-toolkit/untyped/multiassoc-syntax.rkt") (lib "phc-toolkit/scribblings/misc.scrbl") (lib "phc-toolkit/scribblings/compat.scrbl") (lib "phc-toolkit/is-untyped.rkt") (lib "phc-toolkit/scribblings/syntax-parse.scrbl") (lib "phc-toolkit/test/list-lang-test.rkt") (lib "phc-toolkit/untyped/typed-rackunit-extensions.rkt") (lib "phc-toolkit/is-typed.rkt") (lib "phc-toolkit/scribblings/stx-untyped-only.scrbl") (lib "phc-toolkit/scribblings/misc-untyped.scrbl") (lib "phc-toolkit/syntax-parse.rkt") (lib "phc-toolkit/test/test-fixnum.rkt") (lib "phc-toolkit/scribblings/tmpl.scrbl") (lib "phc-toolkit/untyped/repeat-stx.rkt") (lib "phc-toolkit/untyped/eval-get-values.rkt") (lib "phc-toolkit/scribblings/untyped.scrbl") (lib "phc-toolkit/untyped/contract.rkt") (lib "phc-toolkit/misc.rkt") (lib "phc-toolkit/untyped/list.rkt") (lib "phc-toolkit/scribblings/typed-rackunit-extensions-untyped.scrbl") (lib "phc-toolkit/test/test-stx.rkt") (lib "phc-toolkit/values.rkt") (lib "phc-toolkit/logn-id.rkt") (lib "phc-toolkit/stx.rkt") (lib "phc-toolkit/scribblings/typed-rackunit-extensions.scrbl") (lib "phc-toolkit/scribblings/typed-untyped.scrbl") (lib "phc-toolkit/untyped/percent.rkt") (lib "phc-toolkit/main.rkt") (lib "phc-toolkit/untyped/stx.rkt") (lib "phc-toolkit/meta-struct.rkt") (lib "phc-toolkit/compat.rkt") (lib "phc-toolkit/test-framework.rkt") (lib "phc-toolkit/set.rkt") (lib "phc-toolkit/untyped-only.rkt") (lib "phc-toolkit/scribblings/syntax-parse-untyped.scrbl") (lib "phc-toolkit/scribblings/aliases.scrbl") (lib "phc-toolkit/not-implemented-yet.rkt") (lib "phc-toolkit/scribblings/contract.scrbl"))) (name . "phc-toolkit") (nix-sha256 . "1181d8zh971llrdaq8mnm122p6gzn58vawj8df091c02d023bfas") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:georges.duperon@gmail.com . #t) (experimental . #t) (ring:1 . #t) (util . #t))) (source . "https://github.com/jsmaniac/phc-toolkit.git") (tags . ("experimental" "util")) (versions . #hash((default . #hasheq((checksum . "4694f870859cd33f46f493a70bb722ca05faa99f") (source . "https://github.com/jsmaniac/phc-toolkit.git") (source_url . "https://github.com/jsmaniac/phc-toolkit.git"))))))) ("drracket-tool-lib" . #hash((author . "robby@racket-lang.org") (checksum . "b0f41f1943e6d410cce78104ea0e62f50b258502") (dependencies . (("base" #:version "6.2.900.10") "scribble-lib" ("string-constants-lib" #:version "1.12") "scribble-lib" "racket-index" "gui-lib" "at-exp-lib" "rackunit-lib")) (description . "robby@racket-lang.org") (modules . ()) (name . "drracket-tool-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/drracket-tool-lib.zip") (tags . ()))) ("curly-fn" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/curly-fn.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/curly-fn.txt"))) (checksum . "d64cd71d5b386be85f5979edae6f6b6469a4df86") (checksum-error . #f) (conflicts . ()) (dependencies . ("curly-fn-doc" "curly-fn-lib")) (description . "") (implies . ("curly-fn-doc" "curly-fn-lib")) (last-checked . 1522414371) (last-edit . 1475259842) (last-updated . 1502815877) (modules . ()) (name . "curly-fn") (nix-sha256 . "1llxaykp1sbbqnm89ay6lcswfwjn594xsx491hw70l9g83yyivl1") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:lexi.lambda@gmail.com . #t) (lambda . #t) (lang-extension . #t) (language . #t) (ring:1 . #t) (syntax . #t))) (source . "git://github.com/lexi-lambda/racket-curly-fn?path=curly-fn") (tags . ("lambda" "lang-extension" "language" "syntax")) (versions . #hash(("6.1.1" . #hasheq((checksum . "e44ab25b4340b3907f800c998596949e10307448") (source . "git://github.com/lexi-lambda/racket-curly-fn#version-exception--old-macroexpander") (source_url . "http://github.com/lexi-lambda/racket-curly-fn/tree/master#version-exception--old-macroexpander"))) ("6.2.1" . #hasheq((checksum . "e44ab25b4340b3907f800c998596949e10307448") (source . "git://github.com/lexi-lambda/racket-curly-fn#version-exception--old-macroexpander") (source_url . "http://github.com/lexi-lambda/racket-curly-fn/tree/master#version-exception--old-macroexpander"))) (default . #hasheq((checksum . "d64cd71d5b386be85f5979edae6f6b6469a4df86") (source . "git://github.com/lexi-lambda/racket-curly-fn?path=curly-fn") (source_url . "http://github.com/lexi-lambda/racket-curly-fn/tree/master?path=curly-fn"))) ("6.2" . #hasheq((checksum . "e44ab25b4340b3907f800c998596949e10307448") (source . "git://github.com/lexi-lambda/racket-curly-fn#version-exception--old-macroexpander") (source_url . "http://github.com/lexi-lambda/racket-curly-fn/tree/master#version-exception--old-macroexpander"))))))) ("signature" . #hasheq((author . "scott@thinkmoore.net") (authors . ("scott@thinkmoore.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "signature" "doc/signature@signature/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/signature.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/signature.txt"))) (checksum . "c8be60858474259d27f94b23214f7397d9653eb1") (checksum-error . #f) (conflicts . ()) (dependencies . ("kw-utils" "racklog" "base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Syntax and utilities for writing function contracts as signatures") (implies . ()) (last-checked . 1522414678) (last-edit . 1493742329) (last-updated . 1502816428) (modules . ((lib "signature/syntax.rkt") (lib "signature/utils.rkt") (lib "signature/scribblings/signature.scrbl") (lib "signature/main.rkt"))) (name . "signature") (nix-sha256 . "1wk5d61npy1j2iyf636ny069mmd02nc9n28g05qba6x75dzcjv33") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:scott@thinkmoore.net . #t) (contracts . #t) (ring:1 . #t))) (source . "git://github.com/thinkmoore/signature") (tags . ("contracts")) (versions . #hash((default . #hasheq((checksum . "c8be60858474259d27f94b23214f7397d9653eb1") (source . "git://github.com/thinkmoore/signature") (source_url . "http://github.com/thinkmoore/signature/tree/master"))))))) ("crypto" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/crypto.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/crypto.txt"))) (checksum . "07610cabe6c318809b3b9022d88cfe1cc386852e") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "crypto-lib" "crypto-doc")) (description . "Cryptography library") (implies . ("crypto-lib" "crypto-doc")) (last-checked . 1522414369) (last-edit . 1519093684) (last-updated . 1519100632) (modules . ()) (name . "crypto") (nix-sha256 . "08wdlzgz7grhyfzx9yk69nby2fams7y1vjdhdcrwddw9xmxvflxm") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (crypto . #t) (ring:2 . #t))) (source . "https://github.com/rmculpepper/crypto.git?path=crypto") (tags . ("crypto")) (versions . #hash((default . #hasheq((checksum . "07610cabe6c318809b3b9022d88cfe1cc386852e") (source . "https://github.com/rmculpepper/crypto.git?path=crypto") (source_url . "https://github.com/rmculpepper/crypto.git?path=crypto"))))))) ("racket-win32-i386" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for \"base\" package") (implies . ()) (last-checked . 1522414656) (last-edit . 1452304685) (last-updated . 1502816355) (modules . ()) (name . "racket-win32-i386") (ring . 0) (search-terms . #hasheq((:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ()) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) (default . #hasheq((checksum . "c57a6dae91081a4284d329364ad566c108d84747") (source . "https://pkg-sources.racket-lang.org/pkgs/c57a6dae91081a4284d329364ad566c108d84747/racket-win32-i386.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/c57a6dae91081a4284d329364ad566c108d84747/racket-win32-i386.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("mboxrd-read" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mboxrd-read" "doc/mboxrd-read@mboxrd-read/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mboxrd-read.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mboxrd-read.txt"))) (checksum . "b123593ab3a67f46d816c9c31a6d98fce46c9b18") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "rackunit-lib" "scribble-lib" "net-doc" "racket-doc")) (description . "Racket functions for reading mboxrd format") (implies . ()) (last-checked . 1522414433) (last-edit . 1383247833) (last-updated . 1502816173) (modules . ((lib "mboxrd-read/main.rkt") (lib "mboxrd-read/mboxrd-read.scrbl") (lib "mboxrd-read/tests.rkt") (lib "mboxrd-read/mboxrd.rkt") (lib "mboxrd-read/mboxcl2.rkt"))) (name . "mboxrd-read") (nix-sha256 . "0ihdmr3yckg9gfm3xc4kz3dvx50jarvjfp65yiwy7bbrl2kkfdvv") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (io . #t) (ring:1 . #t))) (source . "github://github.com/jbclements/mboxrd-read/master") (tags . ("io")) (versions . #hash((default . #hasheq((checksum . "b123593ab3a67f46d816c9c31a6d98fce46c9b18") (source . "github://github.com/jbclements/mboxrd-read/master") (source_url . "http://github.com/jbclements/mboxrd-read/tree/master"))))))) ("forth" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "forth" "doc/forth@forth/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/forth.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/forth.txt"))) (checksum . "0949a40185d6db771d1eefe1877b45de48664c8b") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib" "rackunit-abbrevs")) (description . "Forth emulator, as a Racket #lang") (implies . ()) (last-checked . 1522414402) (last-edit . 1447139635) (last-updated . 1516774619) (modules . ((lib "forth/lang/reader.rkt") (lib "forth/examples/exit.rkt") (lib "forth/examples/arithmetic.rkt") (lib "forth/examples/define.rkt") (lib "forth/scribblings/forth.scrbl") (lib "forth/main.rkt") (lib "forth/private/command.rkt") (lib "forth/examples/two-and-two-make-four.rkt") (lib "forth/private/stack.rkt"))) (name . "forth") (nix-sha256 . "0sp9b7fvwv78d43515y2chfblp991v4g0nzwy6k8nggjzbv91d3z") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (repl . #t) (ring:1 . #t))) (source . "git://github.com/bennn/forth") (tags . ("repl")) (versions . #hash((default . #hasheq((checksum . "0949a40185d6db771d1eefe1877b45de48664c8b") (source . "git://github.com/bennn/forth") (source_url . "http://github.com/bennn/forth/tree/master"))))))) ("effection" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/effection.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/effection.txt"))) (checksum . "617e5b4c76eab09a2cd2b4f47bca8d908f51d619") (checksum-error . #f) (conflicts . ()) (dependencies . ("effection-doc" "effection-lib")) (description . "A library for deterministic concurrency and custom side effects.") (implies . ("effection-doc" "effection-lib")) (last-checked . 1522414396) (last-edit . 1520307285) (last-updated . 1520513654) (modules . ()) (name . "effection") (nix-sha256 . "1y75812hyfyv67nlcw2mdax6rb3rvzy4pma3wjp9v6qixhpvm76z") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (concurrency . #t) (effects . #t) (language . #t) (ring:2 . #t) (unstable . #t))) (source . "https://github.com/rocketnia/effection.git?path=effection") (tags . ("concurrency" "effects" "language" "unstable")) (versions . #hash((default . #hasheq((checksum . "617e5b4c76eab09a2cd2b4f47bca8d908f51d619") (source . "https://github.com/rocketnia/effection.git?path=effection") (source_url . "https://github.com/rocketnia/effection.git?path=effection"))))))) ("markparam-doc" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "markparam" "doc/markparam@markparam-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/markparam-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/markparam-doc.txt"))) (checksum . "f6393494334318ef497606001f2e83bab2c8c15d") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.2.900.4") "markparam-lib" "scribble-lib" "racket-doc")) (description . "a convenience library for continuation marks like parameters") (implies . ()) (last-checked . 1522414427) (last-edit . 1504535618) (last-updated . 1502816163) (modules . ((lib "markparam/scribblings/markparam.scrbl"))) (name . "markparam-doc") (nix-sha256 . "1fj9xn8s5b1n3qz881qibj29dhzbyjgkj2g0yxaav02580qgvxs0") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (continuation-marks . #t) (ring:1 . #t) (utility . #t))) (source . "git://github.com/jeapostrophe/markparam?path=markparam-doc") (tags . ("continuation-marks" "utility")) (versions . #hash((default . #hasheq((checksum . "f6393494334318ef497606001f2e83bab2c8c15d") (source . "git://github.com/jeapostrophe/markparam?path=markparam-doc") (source_url . "http://github.com/jeapostrophe/markparam/tree/master?path=markparam-doc"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("traces" . #hasheq((author . "pcn@cs.umd.edu") (authors . ("pcn@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/traces.txt") (test-failure-log . "server/built/test-fail/traces.txt") (test-success-log . #f))) (checksum . "c5d393c46346163210a1d77068f9fcabc6daaf73") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "redex-gui-lib")) (description . "Tracing utilities for functions and hash-tables, similar to `traces` from `redex`") (implies . ()) (last-checked . 1522414693) (last-edit . 1520015300) (last-updated . 1520025072) (modules . ((lib "traces/main.rkt") (lib "traces/typed.rkt") (lib "traces/test.rkt"))) (name . "traces") (nix-sha256 . "1fhg2n8m39x48zbg34wqifykk5d0d3qik0c6d1zcfgn4ixv9h4nh") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (author:pcn@cs.umd.edu . #t) (debugging . #t) (graph . #t) (ring:2 . #t) (traces . #t))) (source . "https://github.com/philnguyen/traces.git?path=traces") (tags . ("debugging" "graph" "traces")) (versions . #hash((default . #hasheq((checksum . "c5d393c46346163210a1d77068f9fcabc6daaf73") (source . "https://github.com/philnguyen/traces.git?path=traces") (source_url . "https://github.com/philnguyen/traces.git?path=traces"))))))) ("r7rs-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/r7rs-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/r7rs-lib.txt"))) (checksum . "56832593210ed748569da39c2c2023bc493e614b") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "r5rs-lib" "r6rs-lib" "rackunit-lib")) (description . "") (implies . ()) (last-checked . 1522414539) (last-edit . 1446266165) (last-updated . 1502816347) (modules . ((lib "r7rs/main.rkt") (lib "r7rs/time.rkt") (lib "r7rs/private/mutability.rkt") (lib "r7rs/private/cond-expand.rkt") (lib "r7rs/private/record.rkt") (lib "r7rs/private/math.rkt") (lib "r7rs/lang/reader.rkt") (lib "r7rs/private/vector.rkt") (lib "r7rs/private/import.rkt") (lib "r7rs/lang/private/directive.rkt") (lib "r7rs/private/library.rkt") (lib "r7rs/eval.rkt") (lib "r7rs/r5rs.rkt") (lib "r7rs/lang/private/char.rkt") (lib "r7rs/file.rkt") (lib "r7rs/process-context.rkt") (lib "r7rs/inexact.rkt") (lib "r7rs/private/exception.rkt") (lib "r7rs/complex.rkt") (lib "r7rs/repl.rkt") (lib "r7rs/load/lang/language.rkt") (lib "r7rs/private/string.rkt") (lib "r7rs/load/lang/reader.rkt") (lib "r7rs/lang/private/bytevector.rkt") (lib "r7rs/lazy.rkt") (lib "r7rs/private/case.rkt") (lib "r7rs/load.rkt") (lib "r7rs/read.rkt") (lib "r7rs/cxr.rkt") (lib "r7rs/lang/private/string.rkt") (lib "r7rs/private/strip-prefix.rkt") (lib "r7rs/private/bytevector.rkt") (lib "r7rs/private/define-values.rkt") (lib "r7rs/write.rkt") (lib "r7rs/case-lambda.rkt") (lib "r7rs/char.rkt") (lib "r7rs/lang/private/symbol.rkt") (lib "r7rs/base.rkt") (lib "r7rs/private/export.rkt") (lib "r7rs/private/list.rkt"))) (name . "r7rs-lib") (nix-sha256 . "00imxm7cpd6z30jj2gamm43b9axpgvldal32ddkfh3w4znn5d5zi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-r7rs?path=r7rs-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "56832593210ed748569da39c2c2023bc493e614b") (source . "git://github.com/lexi-lambda/racket-r7rs?path=r7rs-lib") (source_url . "http://github.com/lexi-lambda/racket-r7rs/tree/master?path=r7rs-lib"))))))) ("whalesong" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "manual"))) (failure-log . "server/built/fail/whalesong.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "03c99841a3c4b40220ed5f05a2a772ed5d527b20") (checksum-error . #f) (conflicts . ()) (dependencies . ()) (description . "") (implies . ()) (last-checked . 1522414702) (last-edit . 1426409933) (last-updated . 1502816526) (modules . ((lib "whalesong/tests/more-tests/isolating-bug.rkt") (lib "whalesong/resource.rkt") (lib "whalesong/selfhost/js-assembler/assemble-helpers.rkt") (lib "whalesong/lang/private/match/define-forms.rkt") (lib "whalesong/make/make-structs.rkt") (lib "whalesong/call-with-timeout.rkt") (lib "whalesong/resource/racket-impl.rkt") (lib "whalesong/examples/snip.rkt") (lib "whalesong/tests/more-tests/map.rkt") (lib "whalesong/web-world/event.rkt") (lib "whalesong/tests/more-tests/printing.rkt") (lib "whalesong/tests/more-tests/exn-1.rkt") (lib "whalesong/tests/more-tests/cont-marks-1.rkt") (lib "whalesong/world.rkt") (lib "whalesong/tests/older-tests/moby-programs/continuation-marks.rkt") (lib "whalesong/repl-prototype/sandboxed-server.rkt") (lib "whalesong/tests/test-parse.rkt") (lib "whalesong/parser/parse-bytecode-5.1.2.rkt") (lib "whalesong/tests/module-test/m2.rkt") (lib "whalesong/lang/private/match/legacy-match.rkt") (lib "whalesong/js-assembler/assemble-structs.rkt") (lib "whalesong/lang/base.rkt") (lib "whalesong/tests/more-tests/nqueens.rkt") (lib "whalesong/tests/more-tests/simple-functions.rkt") (lib "whalesong/tests/more-tests/nestedloop.rkt") (lib "whalesong/world/racket-impl.rkt") (lib "whalesong/tests/older-tests/moby-programs/more-jsworld.rkt") (lib "whalesong/tests/test-images.rkt") (lib "whalesong/web-world/examples/forward-backward/forward-backward.rkt") (lib "whalesong/tests/older-tests/require-test/m.rkt") (lib "whalesong/tests/more-tests/booleans.rkt") (lib "whalesong/tests/older-tests/moby-programs/double-client.rkt") (lib "whalesong/tests/older-tests/moby-programs/display-and-write.rkt") (lib "whalesong/tests/more-tests/fft.rkt") (lib "whalesong/web-world/examples/dwarves-with-remove/dwarves-with-remove.rkt") (lib "whalesong/lang/posn.rkt") (lib "whalesong/sandbox/cloth-simulation.rkt") (lib "whalesong/tests/older-tests/benchmarks/conform.rkt") (lib "whalesong/tests/more-tests/hello-bf.rkt") (lib "whalesong/resource/compile-time.rkt") (lib "whalesong/resource/query.rkt") (lib "whalesong/examples/cs019/hello.rkt") (lib "whalesong/tests/older-tests/moby-programs/continuation-prompts-3.rkt") (lib "whalesong/lang/whalesong.rkt") (lib "whalesong/tests/older-tests/moby-programs/permissions.rkt") (lib "whalesong/storage.rkt") (lib "whalesong/tests/more-tests/weird-cc.rkt") (lib "whalesong/tests/more-tests/earley.rkt") (lib "whalesong/tests/older-tests/moby-programs/repeating-decimals.rkt") (lib "whalesong/tests/older-tests/moby-programs/seconds.rkt") (lib "whalesong/resource/coerse-content-bytes.rkt") (lib "whalesong/bf/language.rkt") (lib "whalesong/selfhost/base64.rkt") (lib "whalesong/tool/tool-ui.rkt") (lib "whalesong/tests/older-tests/moby-programs/with-handlers-2.rkt") (lib "whalesong/tests/more-tests/cont-marks-2.rkt") (lib "whalesong/examples/mathjax.rkt") (lib "whalesong/selfhost/js-assembler/find-primitive-implemented.rkt") (lib "whalesong/js-assembler/package.rkt") (lib "whalesong/compiler/expression-structs.rkt") (lib "whalesong/make/get-dependencies.rkt") (lib "whalesong/js-assembler/check-valid-module-source.rkt") (lib "whalesong/tests/test-assemble.rkt") (lib "whalesong/web-world.rkt") (lib "whalesong/lang/match.rkt") (lib "whalesong/tests/more-tests/chars.rkt") (lib "whalesong/js/racket-impl.rkt") (lib "whalesong/tests/older-tests/moby-programs/list.rkt") (lib "whalesong/sandbox/monty-hall/monty-hall.rkt") (lib "whalesong/tests/older-tests/moby-programs/sleep.rkt") (lib "whalesong/tests/older-tests/moby-programs/random.rkt") (lib "whalesong/js-assembler/assemble-helpers.rkt") (lib "whalesong/selfhost/js-assembler/get-js-vm-implemented-primitives.rkt") (lib "whalesong/private/command.rkt") (lib "whalesong/tests/older-tests/mz-tests/testing.rkt") (lib "whalesong/web-world/examples/dwarves/dwarves.rkt") (lib "whalesong/lang/private/match/stxtime.rkt") (lib "whalesong/lang/private/match/split-rows.rkt") (lib "whalesong/tests/older-tests/benchmarks/nucleic2.rkt") (lib "whalesong/tests/more-tests/simple-loop.rkt") (lib "whalesong/examples/alert.rkt") (lib "whalesong/tests/more-tests/exn-3.rkt") (lib "whalesong/parser/parse-bytecode-5.2.1.rkt") (lib "whalesong/tests/older-tests/moby-programs/define-struct.rkt") (lib "whalesong/tests/test-parse-bytecode-on-collects.rkt") (lib "whalesong/world/types.rkt") (lib "whalesong/simply-scheme/lang/reader.rkt") (lib "whalesong/tests/more-tests/gauss-sum-with-prompts.rkt") (lib "whalesong/tests/older-tests/benchmarks/tak.rkt") (lib "whalesong/compiler/bootstrapped-primitives.rkt") (lib "whalesong/tests/older-tests/benchmarks/graphs.rkt") (lib "whalesong/tests/older-tests/moby-programs/arity.rkt") (lib "whalesong/tests/more-tests/sharing-cs019.rkt") (lib "whalesong/tests/more-tests/hello.rkt") (lib "whalesong/examples/google-maps/test-maps.rkt") (lib "whalesong/parser/baby-parser.rkt") (lib "whalesong/compiler/compiler-structs.rkt") (lib "whalesong/web-world/examples/phases/phases.rkt") (lib "whalesong/js-assembler/collect-jump-targets.rkt") (lib "whalesong/selfhost/selfhost-lang.rkt") (lib "whalesong/tests/more-tests/sk-generator-2.rkt") (lib "whalesong/web-world/examples/where-am-i/where-am-i.rkt") (lib "whalesong/examples/drag-and-drop/drag-and-drop-2.rkt") (lib "whalesong/web-world/impl.rkt") (lib "whalesong/lang/private/match/match.rkt") (lib "whalesong/tests/older-tests/benchmarks/run-benchmark.rkt") (lib "whalesong/cs019/teach-runtime.rkt") (lib "whalesong/tests/older-tests/moby-programs/exn.rkt") (lib "whalesong/lang/bool.rkt") (lib "whalesong/tests/older-tests/moby-programs/apply.rkt") (lib "whalesong/storage/storage.rkt") (lib "whalesong/cs019/lang/reader.rkt") (lib "whalesong/image/private/racket-impl.rkt") (lib "whalesong/tests/older-tests/mz-tests/list.rkt") (lib "whalesong/tests/older-tests/moby-programs/and-or.rkt") (lib "whalesong/cs019/cs019.rkt") (lib "whalesong/compiler/compiler-helper.rkt") (lib "whalesong/expand-out-images.rkt") (lib "whalesong/compiler/il-structs.rkt") (lib "whalesong/scribblings/manual.scrbl") (lib "whalesong/selfhost/js-assembler/hash-cache.rkt") (lib "whalesong/lang/private/match/compiler.rkt") (lib "whalesong/tests/older-tests/benchmarks/nboyer.rkt") (lib "whalesong/logger.rkt") (lib "whalesong/selfhost/compiler/expression-structs.rkt") (lib "whalesong/experiments/gauss/gauss.rkt") (lib "whalesong/lang/check-expect/check-expect.rkt") (lib "whalesong/tests/older-tests/moby-programs/require.rkt") (lib "whalesong/lang/private/match/parameters.rkt") (lib "whalesong/get-module-bytecode.rkt") (lib "whalesong/web-world/examples/tick-tock-2/tick-tock-2.rkt") (lib "whalesong/scribblings/internals.scrbl") (lib "whalesong/tests/test-compiler-2.rkt") (lib "whalesong/union-find.rkt") (lib "whalesong/tests/older-tests/moby-programs/atan.rkt") (lib "whalesong/js/world/test-geo.rkt") (lib "whalesong/repl-prototype/write-runtime.rkt") (lib "whalesong/lang/private/call-ec.rkt") (lib "whalesong/tests/browser-harness.rkt") (lib "whalesong/tests/older-tests/moby-programs/falling-ball.rkt") (lib "whalesong/make-launcher.rkt") (lib "whalesong/compiler/optimize-il.rkt") (lib "whalesong/selfhost/compiler/il-structs.rkt") (lib "whalesong/tests/more-tests/quasi.rkt") (lib "whalesong/tests/more-tests/lists-cs019.rkt") (lib "whalesong/tests/older-tests/moby-programs/exercise-control.rkt") (lib "whalesong/js/world/racket-impl.rkt") (lib "whalesong/lang/unsafe/racket-impl.rkt") (lib "whalesong/tests/more-tests/ramanujan-pi.rkt") (lib "whalesong/examples/js-get-message/js-get-message-child.rkt") (lib "whalesong/tests/older-tests/benchmarks/run-do-measures.rkt") (lib "whalesong/js.rkt") (lib "whalesong/js-assembler/hash-cache.rkt") (lib "whalesong/compiler/compiler.rkt") (lib "whalesong/selfhost/js-assembler/assemble-structs.rkt") (lib "whalesong/lang/js/query.rkt") (lib "whalesong/korean/lang/reader.rkt") (lib "whalesong/selfhost/compiler/compiler-helper.rkt") (lib "whalesong/tests/more-tests/sk-generator.rkt") (lib "whalesong/parser/modprovide.rkt") (lib "whalesong/simply-scheme/semantics.rkt") (lib "whalesong/lang/for.rkt") (lib "whalesong/js-assembler/get-runtime.rkt") (lib "whalesong/lang/private/traced-app.rkt") (lib "whalesong/tests/more-tests/simple-apply.rkt") (lib "whalesong/image/private/color.rkt") (lib "whalesong/tests/test-parse-bytecode.rkt") (lib "whalesong/tests/clipart-test/clipart.rkt") (lib "whalesong/lang/private/match/struct.rkt") (lib "whalesong/tests/older-tests/require-test/test.rkt") (lib "whalesong/world/main.rkt") (lib "whalesong/web-world/examples/field/field.rkt") (lib "whalesong/tests/older-tests/moby-programs/local.rkt") (lib "whalesong/tests/older-tests/moby-programs/continuation-prompts-2.rkt") (lib "whalesong/examples/mouse.rkt") (lib "whalesong/resource/structs.rkt") (lib "whalesong/tests/older-tests/moby-programs/case-lambda.rkt") (lib "whalesong/js/world/world-event-handler.rkt") (lib "whalesong/web-world/examples/hello2/hello2.rkt") (lib "whalesong/selfhost/compiler/bootstrapped-primitives.rkt") (lib "whalesong/lang/list.rkt") (lib "whalesong/image/main.rkt") (lib "whalesong/resource/main.rkt") (lib "whalesong/tests/more-tests/js-binding.rkt") (lib "whalesong/tests/older-tests/moby-programs/misc.rkt") (lib "whalesong/tests/test-compiler.rkt") (lib "whalesong/tests/more-tests/module-scoping.rkt") (lib "whalesong/tests/more-tests/simple-structs.rkt") (lib "whalesong/tests/older-tests/moby-programs/raise.rkt") (lib "whalesong/lang/private/list.rkt") (lib "whalesong/lang/private/match/gen-match.rkt") (lib "whalesong/tests/module-test/m1.rkt") (lib "whalesong/tests/older-tests/moby-programs/recur.rkt") (lib "whalesong/tests/more-tests/fringe.rkt") (lib "whalesong/tests/older-tests/run-all-tests.rkt") (lib "whalesong/selfhost/compiler/compiler-structs.rkt") (lib "whalesong/sandbox/todo-storage/todo.rkt") (lib "whalesong/web-world/examples/todo/todo.rkt") (lib "whalesong/whalesong-gui.rkt") (lib "whalesong/tests/older-tests/moby-programs/vararity.rkt") (lib "whalesong/js-assembler/assemble-open-coded.rkt") (lib "whalesong/lang/reader.rkt") (lib "whalesong/tests/older-tests/mz-tests/basic.rkt") (lib "whalesong/lang/private/stx.rkt") (lib "whalesong/selfhost/js-assembler/quote-cdata.rkt") (lib "whalesong/lang/kernel.rkt") (lib "whalesong/js-assembler/cache.rkt") (lib "whalesong/parser/parse-bytecode-5.3.rkt") (lib "whalesong/selfhost/js-assembler/package.rkt") (lib "whalesong/examples/pacman.rkt") (lib "whalesong/scribblings/scribble-helpers.rkt") (lib "whalesong/tests/more-tests/dots-should-be-syntax-error.rkt") (lib "whalesong/tests/older-tests/moby-programs/location.rkt") (lib "whalesong/web-world/helpers.rkt") (lib "whalesong/selfhost/js-assembler/collect-jump-targets.rkt") (lib "whalesong/tests/more-tests/colors.rkt") (lib "whalesong/selfhost/compiler/analyzer.rkt") (lib "whalesong/tests/older-tests/moby-programs/42.rkt") (lib "whalesong/lang/private/match/parse-quasi.rkt") (lib "whalesong/tests/coersing/fact.rkt") (lib "whalesong/tests/more-tests/scheme-whalesong.rkt") (lib "whalesong/examples/expanding-circle.rkt") (lib "whalesong/selfhost/js-assembler/get-runtime.rkt") (lib "whalesong/selfhost/parameters.rkt") (lib "whalesong/tests/older-tests/moby-programs/required-4.rkt") (lib "whalesong/examples/list-length.rkt") (lib "whalesong/cs019/teachhelp.rkt") (lib "whalesong/resource/record.rkt") (lib "whalesong/selfhost/js-assembler/assemble-expression.rkt") (lib "whalesong/tests/more-tests/numbers.rkt") (lib "whalesong/lang/private/shared-body.rkt") (lib "whalesong/selfhost/compiler/optimize-il.rkt") (lib "whalesong/examples/cs019/where-am-i/where-am-i.rkt") (lib "whalesong/wescheme/lang/reader.rkt") (lib "whalesong/tests/older-tests/moby-programs/image-equality.rkt") (lib "whalesong/tests/older-tests/moby-programs/images.rkt") (lib "whalesong/parser/where-is-collects.rkt") (lib "whalesong/repl-prototype/repl-compile.rkt") (lib "whalesong/js-assembler/module-knowledge.rkt") (lib "whalesong/tests/older-tests/moby-programs/jsworld-effects.rkt") (lib "whalesong/examples/hello-css.rkt") (lib "whalesong/tests/older-tests/moby-programs/compose.rkt") (lib "whalesong/cs019/teach.rkt") (lib "whalesong/tests/more-tests/view.rkt") (lib "whalesong/examples/shuffling.rkt") (lib "whalesong/examples/read-bytes.rkt") (lib "whalesong/wescheme/lang/semantics.rkt") (lib "whalesong/selfhost/compiler/analyzer-structs.rkt") (lib "whalesong/tests/older-tests/moby-programs/values.rkt") (lib "whalesong/parser/parse-bytecode-5.1.1.rkt") (lib "whalesong/js-assembler/quote-cdata.rkt") (lib "whalesong/lang/parameters.rkt") (lib "whalesong/tests/test-all.rkt") (lib "whalesong/tests/more-tests/simple.rkt") (lib "whalesong/js/world/geo.rkt") (lib "whalesong/tests/older-tests/require-test/m3.rkt") (lib "whalesong/lang/private/match/runtime.rkt") (lib "whalesong/tests/more-tests/module-scoping-helper.rkt") (lib "whalesong/parser/parse-bytecode-5.3.3.7.rkt") (lib "whalesong/examples/google-maps/maps.rkt") (lib "whalesong/compiler/analyzer.rkt") (lib "whalesong/tests/older-tests/moby-programs/rotate.rkt") (lib "whalesong/resource/runtime.rkt") (lib "whalesong/scribblings/cs019.scrbl") (lib "whalesong/tests/older-tests/moby-programs/vector.rkt") (lib "whalesong/examples/using-resources.rkt") (lib "whalesong/make/make.rkt") (lib "whalesong/tests/older-tests/mz-tests/number.rkt") (lib "whalesong/cs019/rewrite-error-message.rkt") (lib "whalesong/web-world/examples/tick-tock/tick-tock.rkt") (lib "whalesong/web-world/main.rkt") (lib "whalesong/lang/base/reader.rkt") (lib "whalesong/js-assembler/fracture.rkt") (lib "whalesong/helpers.rkt") (lib "whalesong/tests/older-tests/moby-programs/math.rkt") (lib "whalesong/lang/private/match/patterns.rkt") (lib "whalesong/lang/private/match/reorder.rkt") (lib "whalesong/lang/private/match/parse-helper.rkt") (lib "whalesong/tests/older-tests/moby-programs/required-3.rkt") (lib "whalesong/examples/rain-world-program.rkt") (lib "whalesong/tests/older-tests/moby-programs/required-5.rkt") (lib "whalesong/js-assembler/get-js-vm-implemented-primitives.rkt") (lib "whalesong/web-world/examples/boid/boid.rkt") (lib "whalesong/tests/older-tests/moby-programs/when-unless.rkt") (lib "whalesong/type-helpers.rkt") (lib "whalesong/examples/sierpinski-carpet.rkt") (lib "whalesong/lang/private/match/match-expander.rkt") (lib "whalesong/resource/munge-path.rkt") (lib "whalesong/parameters.rkt") (lib "whalesong/generate-c-star-d.rkt") (lib "whalesong/selfhost/selfhost-parameters.rkt") (lib "whalesong/sandbox/sample-run.rkt") (lib "whalesong/tests/older-tests/mz-tests/all-tests.rkt") (lib "whalesong/tests/more-tests/exn-2.rkt") (lib "whalesong/tests/test-get-dependencies.rkt") (lib "whalesong/tests/older-tests/benchmarks/do-measures.rkt") (lib "whalesong/parser/path-rewriter.rkt") (lib "whalesong/selfhost/compiler/lexical-structs.rkt") (lib "whalesong/world/impl.rkt") (lib "whalesong/tests/older-tests/moby-programs/for-each.rkt") (lib "whalesong/tests/test-browser-evaluate.rkt") (lib "whalesong/whalesong-helpers.rkt") (lib "whalesong/tests/more-tests/fact.rkt") (lib "whalesong/parser/parse-bytecode-5.2.rkt") (lib "whalesong/tests/more-tests/divide-by-zero-with-handlers.rkt") (lib "whalesong/tests/older-tests/mz-tests/numstrs.rkt") (lib "whalesong/examples/image-library-example.rkt") (lib "whalesong/tests/more-tests/conform.rkt") (lib "whalesong/compiler/kernel-primitives.rkt") (lib "whalesong/lang/private/qq-and-or.rkt") (lib "whalesong/tests/more-tests/booleans-cs019.rkt") (lib "whalesong/web-world/racket-impl.rkt") (lib "whalesong/selfhost/js-assembler/assemble-open-coded.rkt") (lib "whalesong/tests/older-tests/moby-programs/eof.rkt") (lib "whalesong/image/private/main.rkt") (lib "whalesong/examples/raphael-demo.rkt") (lib "whalesong/examples/hello-kr.rkt") (lib "whalesong/examples/window-size.rkt") (lib "whalesong/tests/run-more-tests.rkt") (lib "whalesong/tests/more-tests/hash-code.rkt") (lib "whalesong/examples/logo.rkt") (lib "whalesong/compiler/lexical-structs.rkt") (lib "whalesong/selfhost/compiler/arity-structs.rkt") (lib "whalesong/web-world/examples/color-buttons/color-buttons.rkt") (lib "whalesong/tests/older-tests/benchmarks/run-nboyer.rkt") (lib "whalesong/tests/more-tests/checking.rkt") (lib "whalesong/lang/js/record.rkt") (lib "whalesong/tests/older-tests/moby-programs/continuation-prompts.rkt") (lib "whalesong/bump-version.rkt") (lib "whalesong/js/main.rkt") (lib "whalesong/tests/older-tests/moby-programs/run-all-tests.rkt") (lib "whalesong/tests/more-tests/sigs-cs019.rkt") (lib "whalesong/selfhost/js-assembler/cache.rkt") (lib "whalesong/lang/korean.rkt") (lib "whalesong/resource/specialize/racket-impl.rkt") (lib "whalesong/selfhost/compiler/compiler.rkt") (lib "whalesong/cs019/lists.rkt") (lib "whalesong/tests/older-tests/require-test/m1.rkt") (lib "whalesong/tests/older-tests/benchmarks/sboyer.rkt") (lib "whalesong/tests/more-tests/man-vs-boy.rkt") (lib "whalesong/js-assembler/assemble-expression.rkt") (lib "whalesong/selfhost/parser/modprovide.rkt") (lib "whalesong/js/world.rkt") (lib "whalesong/lang/private/match/parse-legacy.rkt") (lib "whalesong/lang/private/hash.rkt") (lib "whalesong/tests/older-tests/moby-programs/identity.rkt") (lib "whalesong/examples/cs019/tick-tock/tick-tock.rkt") (lib "whalesong/selfhost/helpers.rkt") (lib "whalesong/language-namespace.rkt") (lib "whalesong/tool/button-with-alternatives.rkt") (lib "whalesong/tests/more-tests/nucleic2.rkt") (lib "whalesong/tests/older-tests/moby-programs/with-handlers-1.rkt") (lib "whalesong/tests/older-tests/mz-tests/run-all-tests.rkt") (lib "whalesong/examples/drag-and-drop/drag-and-drop-1.rkt") (lib "whalesong/resource/specialize/impl.rkt") (lib "whalesong/web-world/examples/hot-cross-buns/hot-cross-buns.rkt") (lib "whalesong/repl-prototype/server.rkt") (lib "whalesong/selfhost/sets.rkt") (lib "whalesong/tests/older-tests/moby-programs/ffi-2.rkt") (lib "whalesong/tests/older-tests/moby-programs/cycles.rkt") (lib "whalesong/examples/dom-play.rkt") (lib "whalesong/examples/hello.rkt") (lib "whalesong/tests/older-tests/all-tests.rkt") (lib "whalesong/selfhost/js-assembler/assemble-perform-statement.rkt") (lib "whalesong/selfhost/selfhost-strings.rkt") (lib "whalesong/tests/more-tests/sharing.rkt") (lib "whalesong/image.rkt") (lib "whalesong/bf/semantics.rkt") (lib "whalesong/js/world/main.rkt") (lib "whalesong/image/private/image.rkt") (lib "whalesong/tests/test-earley.rkt") (lib "whalesong/tests/more-tests/images.rkt") (lib "whalesong/tests/more-tests/lists.rkt") (lib "whalesong/selfhost/js-assembler/check-valid-module-source.rkt") (lib "whalesong/selfhost/union-find.rkt") (lib "whalesong/tests/older-tests/moby-programs/ffi.rkt") (lib "whalesong/tests/older-tests/require-test/m2.rkt") (lib "whalesong/experiments/racket-expander.rkt") (lib "whalesong/js/world/test.rkt") (lib "whalesong/lang/private/match/parse.rkt") (lib "whalesong/lang/js/js.rkt") (lib "whalesong/tests/more-tests/basics-cs019.rkt") (lib "whalesong/tests/more-tests/graphs.rkt") (lib "whalesong/selfhost/js-assembler/module-knowledge.rkt") (lib "whalesong/examples/hello-bf.rkt") (lib "whalesong/tests/test-package.rkt") (lib "whalesong/cs019/cs019-pre-base.rkt") (lib "whalesong/selfhost/js-assembler/assemble.rkt") (lib "whalesong/examples/eli-number-puzzle.rkt") (lib "whalesong/tests/test-helpers.rkt") (lib "whalesong/web-world/examples/attr-animation/attr-animation.rkt") (lib "whalesong/whalesong-cmd.rkt") (lib "whalesong/tests/older-tests/moby-programs/js-big-bang-timer.rkt") (lib "whalesong/tests/older-tests/moby-programs/double.rkt") (lib "whalesong/tests/older-tests/moby-programs/required-2.rkt") (lib "whalesong/examples/select.rkt") (lib "whalesong/compiler/analyzer-structs.rkt") (lib "whalesong/web-world/examples/redirected/redirected.rkt") (lib "whalesong/tests/older-tests/benchmarks/nfa.rkt") (lib "whalesong/tests/older-tests/moby-programs/js-input.rkt") (lib "whalesong/cs019/get-cs019-names.rkt") (lib "whalesong/tests/more-tests/checking-cs019.rkt") (lib "whalesong/tests/older-tests/moby-programs/jsworld.rkt") (lib "whalesong/tests/older-tests/check-coverage.rkt") (lib "whalesong/compiler/arity-structs.rkt") (lib "whalesong/tests/older-tests/moby-programs/begin.rkt") (lib "whalesong/lang/private/map.rkt") (lib "whalesong/lang/unsafe/ops.rkt") (lib "whalesong/selfhost/compiler/kernel-primitives.rkt") (lib "whalesong/tests/older-tests/moby-programs/quasiquote.rkt") (lib "whalesong/repl-prototype/modularize-input-port.rkt") (lib "whalesong/lang/private/shared.rkt") (lib "whalesong/tests/older-tests/moby-programs/required.rkt") (lib "whalesong/examples/whale.rkt") (lib "whalesong/parser/parse-bytecode.rkt") (lib "whalesong/examples/iron-puzzle/iron-puzzle.rkt") (lib "whalesong/bf/lang/reader.rkt") (lib "whalesong/version.rkt") (lib "whalesong/version-case/version-case.rkt") (lib "whalesong/private/prefix-dispatcher.rkt") (lib "whalesong/compiler/lexical-env.rkt") (lib "whalesong/tests/older-tests/moby-programs/letrec.rkt") (lib "whalesong/js-assembler/assemble-perform-statement.rkt") (lib "whalesong/tests/older-tests/moby-programs/setbang.rkt") (lib "whalesong/whalesong.rkt") (lib "whalesong/tests/older-tests/moby-programs/all-tests.rkt") (lib "whalesong/tests/test-simulator.rkt") (lib "whalesong/bf/parser.rkt") (lib "whalesong/tests/older-tests/moby-programs/struct.rkt") (lib "whalesong/tests/more-tests/hashes.rkt") (lib "whalesong/sandbox/test-storage.rkt") (lib "whalesong/selfhost/js-assembler/fracture.rkt") (lib "whalesong/cs019/firstorder.rkt") (lib "whalesong/tests/older-tests/moby-programs/check-error.rkt") (lib "whalesong/sets.rkt") (lib "whalesong/promise.rkt") (lib "whalesong/tests/more-tests/string-tests.rkt") (lib "whalesong/web-world/examples/field2/field2.rkt") (lib "whalesong/lang/private/with-handlers.rkt") (lib "whalesong/examples/fact.rkt") (lib "whalesong/tests/test-conform.rkt") (lib "whalesong/selfhost/compiler/lexical-env.rkt") (lib "whalesong/web-world/examples/hello/hello.rkt") (lib "whalesong/js-assembler/find-primitive-implemented.rkt") (lib "whalesong/cs019/private/sigs-patched.rkt") (lib "whalesong/base/lang/reader.rkt") (lib "whalesong/js-assembler/assemble.rkt"))) (name . "whalesong") (nix-sha256 . "0907d2ilsz5ljhqc0l426y7p33164nysll5vj4nrz9hrwj0nc6zg") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:jensaxel@soegaard.net . #t) (ring:1 . #t))) (source . "git://github.com/soegaard/whalesong") (tags . ()) (versions . #hash((default . #hasheq((checksum . "03c99841a3c4b40220ed5f05a2a772ed5d527b20") (source . "git://github.com/soegaard/whalesong") (source_url . "http://github.com/soegaard/whalesong/tree/master"))))))) ("schema" . #hasheq((author . "juzhenliang@gmail.com") (authors . ("juzhenliang@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "schema" "doc/schema@schema/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/schema.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/schema.txt"))) (checksum . "34471df6945fe74b6bd48e749ccd5849d71881ae") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "db-lib" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc")) (description . "A data modeling tool for Typed Racket") (implies . ()) (last-checked . 1522414675) (last-edit . 1488244163) (last-updated . 1502816418) (modules . ((lib "schema/digitama/normalize.rkt") (lib "schema/tamer/normalize.rkt") (lib "schema/digitama/shadow.rkt") (lib "schema/tamer/uupk.rkt") (lib "schema/tamer/schema.scrbl") (lib "schema/tamer/sqlite3.rkt") (lib "schema/uupk.rkt") (lib "schema/digitama/message.rkt") (lib "schema/digitama/virtual-sql.rkt") (lib "schema/sqlite3.rkt") (lib "schema/digitama/cheat.rkt") (lib "schema/digitama/schema.rkt") (lib "schema/main.rkt") (lib "schema/message.rkt") (lib "schema/digitama/syntax.rkt") (lib "schema/digitama/misc.rkt"))) (name . "schema") (nix-sha256 . "02npawksic8s6305icsxc13hx1jd362yc9m1yyvj8l0fin9djj99") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:juzhenliang@gmail.com . #t) (database . #t) (db . #t) (ring:1 . #t) (sql . #t) (typed-racket . #t) (unstable . #t))) (source . "git://github.com/wargrey/schema.git") (tags . ("database" "db" "sql" "typed-racket" "unstable")) (versions . #hash((default . #hasheq((checksum . "34471df6945fe74b6bd48e749ccd5849d71881ae") (source . "git://github.com/wargrey/schema.git") (source_url . "http://github.com/wargrey/schema.git/tree/master"))))))) ("hackett-demo" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hackett-demo.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hackett-demo.txt"))) (checksum . "dfe5aa3442e1fa0a0dd0ceb75b78470212f0a97a") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "draw-lib" "hackett-lib" "htdp-lib" "pict-lib" "threading-lib" "web-server-lib")) (description . "") (implies . ()) (last-checked . 1522414414) (last-edit . 1495923287) (last-updated . 1518650696) (modules . ((lib "hackett/demo/web-server.rkt") (lib "hackett/demo/pict.rkt") (lib "hackett/demo/pict/universe.rkt"))) (name . "hackett-demo") (nix-sha256 . "06psy883j4kqyz42jybfyh8zcyki64wzyiw53dya8zwkxdx4g0n3") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/hackett?path=hackett-demo") (tags . ()) (versions . #hash((default . #hasheq((checksum . "dfe5aa3442e1fa0a0dd0ceb75b78470212f0a97a") (source . "git://github.com/lexi-lambda/hackett?path=hackett-demo") (source_url . "http://github.com/lexi-lambda/hackett/tree/master?path=hackett-demo"))))))) ("hackett-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hackett-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hackett-lib.txt"))) (checksum . "dfe5aa3442e1fa0a0dd0ceb75b78470212f0a97a") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.7.0.900") "curly-fn-lib" "data-lib" "syntax-classes-lib" "threading-lib")) (description . "") (implies . ()) (last-checked . 1522414415) (last-edit . 1483625566) (last-updated . 1518650697) (modules . ((lib "hackett/private/type-reqprov.rkt") (lib "hackett/private/util/cond-expand.rkt") (lib "hackett/private/prim/type.rkt") (lib "hackett/private/provide.rkt") (lib "hackett/private/prim/base.rkt") (lib "hackett/private/prim/type-provide.rkt") (lib "hackett/private/adt.rkt") (lib "hackett/private/base.rkt") (lib "hackett/private/reader.rkt") (lib "hackett/monad/error.rkt") (lib "hackett/data/either.rkt") (lib "hackett/private/class.rkt") (lib "hackett/private/util/stx.rkt") (lib "hackett/private/util/require.rkt") (lib "hackett/main.rkt") (lib "hackett/private/kernel.rkt") (lib "hackett/monad/reader.rkt") (lib "hackett/prelude.rkt") (lib "hackett/base.rkt") (lib "hackett/data/identity.rkt") (lib "hackett/private/toplevel.rkt") (lib "hackett/private/infix.rkt") (lib "hackett/private/prim/op.rkt") (lib "hackett/monad/trans.rkt") (lib "hackett/private/prim.rkt") (lib "hackett/private/util/list.rkt") (lib "hackett/private/typecheck.rkt") (lib "hackett/data/maybe.rkt") (lib "hackett/data/list.rkt"))) (name . "hackett-lib") (nix-sha256 . "06psy883j4kqyz42jybfyh8zcyki64wzyiw53dya8zwkxdx4g0n3") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/hackett?path=hackett-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "dfe5aa3442e1fa0a0dd0ceb75b78470212f0a97a") (source . "git://github.com/lexi-lambda/hackett?path=hackett-lib") (source_url . "http://github.com/lexi-lambda/hackett/tree/master?path=hackett-lib"))))))) ("automata-test" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/automata-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/automata-test.txt"))) (checksum . "a82d4d3c94f55c6560ec14f76300811658ed05a6") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.2.900.4") "automata-lib" "eli-tester")) (description . "a library for defining efficient automata using match patterns") (implies . ()) (last-checked . 1522414288) (last-edit . 1504535506) (last-updated . 1502812275) (modules . ((lib "automata/tests/dfa-test.rkt") (lib "automata/tests/nfa-ep-test.rkt") (lib "automata/tests/nfa-test.rkt") (lib "automata/tests/nfa-star-test.rkt") (lib "automata/tests/re-test.rkt") (lib "automata/tests/explain.rkt"))) (name . "automata-test") (nix-sha256 . "06gwyy6zyz3p3rcq6vl893pg0ksz2pyn6a1la67d5an3hmkikj04") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (automata . #t) (match . #t) (regex . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/automata?path=automata-test") (tags . ("automata" "match" "regex")) (versions . #hash((default . #hasheq((checksum . "a82d4d3c94f55c6560ec14f76300811658ed05a6") (source . "git://github.com/jeapostrophe/automata?path=automata-test") (source_url . "http://github.com/jeapostrophe/automata/tree/master?path=automata-test"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("brush" . #hasheq((author . "david@davidchristiansen.dk") (authors . ("david@davidchristiansen.dk")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "brush" "doc/brush@brush/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/brush.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/brush.txt"))) (checksum . "91b83cda313f77f2068f0c02753c55c2563680d5") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble" "at-exp-lib" "scribble-lib" "racket-doc")) (description . "A semi-literate programming package for Scribble") (implies . ()) (last-checked . 1522414311) (last-edit . 1509742249) (last-updated . 1510218058) (modules . ((lib "brush/scribblings/brush.scrbl") (lib "brush/lp/lang/common.rkt") (lib "brush/main.rkt") (lib "brush/lp/lang/lang2.rkt") (lib "brush/private/lp.rkt"))) (name . "brush") (nix-sha256 . "17rg5z7vmpqmdprssrif96wm5k775s1fmafchnbysc38xr15j4cw") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:david@davidchristiansen.dk . #t) (literate-programming . #t) (ring:2 . #t) (scribble . #t))) (source . "https://github.com/david-christiansen/brush.git") (tags . ("literate-programming" "scribble")) (versions . #hash((default . #hasheq((checksum . "91b83cda313f77f2068f0c02753c55c2563680d5") (source . "https://github.com/david-christiansen/brush.git") (source_url . "https://github.com/david-christiansen/brush.git"))))))) ("zmq" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "zmq" "doc/zmq@zmq/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zmq.txt") (test-failure-log . "server/built/test-fail/zmq.txt") (test-success-log . #f))) (checksum . "5d936df13adce486ac23c5e921099de10ad9bf61") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1" "mordae" "typed-racket-lib" "racket-doc" "typed-racket-lib" "typed-racket-doc")) (description . "Minimal Racket ZeroMQ Bindings") (implies . ()) (last-checked . 1522414704) (last-edit . 1397821983) (last-updated . 1502816537) (modules . ((lib "zmq/main.rkt") (lib "zmq/private/ffi.rkt") (lib "zmq/zmq.scrbl"))) (name . "zmq") (nix-sha256 . "1bzzv0gmlb6insqq3cnjam90r2vkaa3mh6ndndn0b40zp7frkzaf") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mordae@anilinux.org . #t) (ffi . #t) (ipc . #t) (linux . #t) (ring:1 . #t))) (source . "github://github.com/mordae/racket-zmq/master") (tags . ("ffi" "ipc" "linux")) (versions . #hash((default . #hasheq((checksum . "5d936df13adce486ac23c5e921099de10ad9bf61") (source . "github://github.com/mordae/racket-zmq/master") (source_url . "http://github.com/mordae/racket-zmq/tree/master"))))))) ("punctaffy" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/punctaffy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/punctaffy.txt"))) (checksum . "7165a2fa50ae3d631753652671cb4a19df1f02c4") (checksum-error . #f) (conflicts . ()) (dependencies . ("punctaffy-lib")) (description . "A library for manipulating higher-degree notions of brackets, such as quasiquotation syntax.") (implies . ("punctaffy-lib")) (last-checked . 1522414537) (last-edit . 1509266768) (last-updated . 1520926807) (modules . ()) (name . "punctaffy") (nix-sha256 . "0gmnwwxc1aigfgpv2p59apg1g93r2acgx9x2za5i6nk22f1ydw0h") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (experimental . #t) (extensible . #t) (macro . #t) (quasiquotation . #t) (ring:2 . #t) (syntax . #t) (unstable . #t))) (source . "git://github.com/rocketnia/punctaffy?path=punctaffy") (tags . ("experimental" "extensible" "macro" "quasiquotation" "syntax" "unstable")) (versions . #hash((default . #hasheq((checksum . "7165a2fa50ae3d631753652671cb4a19df1f02c4") (source . "git://github.com/rocketnia/punctaffy?path=punctaffy") (source_url . "http://github.com/rocketnia/punctaffy/tree/master?path=punctaffy"))))))) ("msgpack" . #hasheq((author . "hiphish@openmailbox.org") (authors . ("hiphish@openmailbox.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "msgpack" "doc/msgpack@msgpack/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/msgpack.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/msgpack.txt"))) (checksum . "9bb02d4b89303a027ced9ae6c12c9e0e764763aa") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "quickcheck" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Implementation of the MessagePack protocol.") (implies . ()) (last-checked . 1522414436) (last-edit . 1518809314) (last-updated . 1518866721) (modules . ((lib "msgpack/test/pack/string.rkt") (lib "msgpack/main.rkt") (lib "msgpack/test/unpack/map.rkt") (lib "msgpack/test/unpack/boolean.rkt") (lib "msgpack/test/pack/nil.rkt") (lib "msgpack/test/unpack/float.rkt") (lib "msgpack/test/unpack/array.rkt") (lib "msgpack/test/unpack/extension.rkt") (lib "msgpack/packable.rkt") (lib "msgpack/test/pack/extension.rkt") (lib "msgpack/test/pack/integers.rkt") (lib "msgpack/pack.rkt") (lib "msgpack/ext.rkt") (lib "msgpack/test/unpack/nil.rkt") (lib "msgpack/test/unpack/binary.rkt") (lib "msgpack/test/pack/float.rkt") (lib "msgpack/test/pack/map.rkt") (lib "msgpack/test/pack/boolean.rkt") (lib "msgpack/test/unpack/string.rkt") (lib "msgpack/test/ext.rkt") (lib "msgpack/unpack.rkt") (lib "msgpack/scribblings/msgpack.scrbl") (lib "msgpack/test/pack/array.rkt") (lib "msgpack/test/pack/binary.rkt") (lib "msgpack/test/unpack/integers.rkt"))) (name . "msgpack") (nix-sha256 . "0dn4n3ciky9spc60avf0asj8md6qxrhwkdd6a3vg423zy2ax7xsy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:hiphish@openmailbox.org . #t) (binary . #t) (messagepack . #t) (msgpack . #t) (protocol . #t) (ring:1 . #t))) (source . "https://gitlab.com/HiPhish/MsgPack.rkt.git?path=msgpack") (tags . ("binary" "messagepack" "msgpack" "protocol")) (versions . #hash((default . #hasheq((checksum . "9bb02d4b89303a027ced9ae6c12c9e0e764763aa") (source . "https://gitlab.com/HiPhish/MsgPack.rkt.git?path=msgpack") (source_url . "https://gitlab.com/HiPhish/MsgPack.rkt.git?path=msgpack"))))))) ("rackjure" . #hasheq((author . "greghendershott@gmail.com") (authors . ("greghendershott@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rackjure" "doc/rackjure@rackjure/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackjure.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rackjure.txt"))) (checksum . "d2c792ee5354b9c203b30c3f60c65f0bb81100fc") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" ("racket" "6.0") "rackunit-lib" ("threading" "1.1") "rackunit-lib" "racket-doc" "sandbox-lib" "scribble-lib")) (description . "Some Clojure-inspired idioms.") (implies . ()) (last-checked . 1522414662) (last-edit . 1396443212) (last-updated . 1502816372) (modules . ((lib "rackjure/alist.rkt") (lib "rackjure/main.rkt") (lib "rackjure/lang/language-info.rkt") (lib "rackjure/dict.rkt") (lib "rackjure/bench.rkt") (lib "rackjure/str.rkt") (lib "rackjure/base/lang/reader.rkt") (lib "rackjure/lambda-reader.rkt") (lib "rackjure/base.rkt") (lib "rackjure/app.rkt") (lib "rackjure/egal.rkt") (lib "rackjure/rackjure.rkt") (lib "rackjure/lang/runtime-config.rkt") (lib "rackjure/lang/reader.rkt") (lib "rackjure/conditionals.rkt") (lib "rackjure/rackjure.scrbl") (lib "rackjure/threading.rkt") (lib "rackjure/check-expansion.rkt") (lib "rackjure/utils.rkt") (lib "rackjure/test.rkt"))) (name . "rackjure") (nix-sha256 . "17859fwajb08kn72sm1f6xf0cx4zp0qzn7972swr5vjhhp97924z") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:greghendershott@gmail.com . #t) (language . #t) (ring:1 . #t))) (source . "github://github.com/greghendershott/rackjure/master") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "d2c792ee5354b9c203b30c3f60c65f0bb81100fc") (source . "github://github.com/greghendershott/rackjure/master") (source_url . "http://github.com/greghendershott/rackjure/tree/master"))))))) ("uri-template" . #hasheq((author . "jesse@lisp.sh") (authors . ("jesse@lisp.sh")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "uri-template" "doc/uri-template@uri-template/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/uri-template.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/uri-template.txt"))) (checksum . "ce544ed024ba0157c8ea26261a1ed13bd2d52429") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "brag" "beautiful-racket-lib" "br-parser-tools-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Implementation of RFC 6570 (URI Template).") (implies . ()) (last-checked . 1522414700) (last-edit . 1514528380) (last-updated . 1515734346) (modules . ((lib "uri-template/main.rkt") (lib "uri-template/scribblings/library.scrbl") (lib "uri-template/assignment.rkt") (lib "uri-template/value.rkt") (lib "uri-template/template.rkt") (lib "uri-template/variable.rkt") (lib "uri-template/parse.rkt") (lib "uri-template/util.rkt") (lib "uri-template/template-lexer.rkt") (lib "uri-template/expression.rkt") (lib "uri-template/scribblings/uri-template.scrbl") (lib "uri-template/expand.rkt"))) (name . "uri-template") (nix-sha256 . "1lgxikis0lljxy05inn97xlzf7p748njbx7jk34slfjxgnb4fvck") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jesse@lisp.sh . #t) (ring:2 . #t) (template . #t))) (source . "https://github.com/jessealama/uri-template.git") (tags . ("template")) (versions . #hash((default . #hasheq((checksum . "ce544ed024ba0157c8ea26261a1ed13bd2d52429") (source . "https://github.com/jessealama/uri-template.git") (source_url . "https://github.com/jessealama/uri-template.git"))))))) ("racket-index" . #hash((author . "eli@racket-lang.org jay@racket-lang.org matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org ryanc@racket-lang.org samth@racket-lang.org") (checksum . "076ceb0a724e381eaa3d1b790919206c705ad730") (dependencies . ("base" "scribble-lib" "scheme-lib" "at-exp-lib")) (description . "eli@racket-lang.org jay@racket-lang.org matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org ryanc@racket-lang.org samth@racket-lang.org") (modules . ()) (name . "racket-index") (source . "https://download.racket-lang.org/releases/6.12/pkgs/racket-index.zip") (tags . ()))) ("plt-service-monitor" . #hasheq((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "plt-service-monitor" "doc/plt-service-monitor@plt-service-monitor/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plt-service-monitor.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plt-service-monitor.txt"))) (checksum . "1cfb827cd812361d3c348aad18625e4aa98b2ee2") (checksum-error . #f) (conflicts . ()) (dependencies . ("net-lib" "base" ("aws" #:version "1.6") "http" "racket-doc" "scribble-lib")) (description . "service-monitoring and \"heartbeat\" tools") (implies . ()) (last-checked . 1522414516) (last-edit . 1422308276) (last-updated . 1502816273) (modules . ((lib "plt-service-monitor/plt-service-monitor.scrbl") (lib "plt-service-monitor/config.rkt") (lib "plt-service-monitor/take-pulse.rkt") (lib "plt-service-monitor/private/email.rkt") (lib "plt-service-monitor/beat.rkt"))) (name . "plt-service-monitor") (nix-sha256 . "1riwyjyw08pajbh352rgxjz9xvwcxwkljccdqlyip32nw8h031hf") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/racket/plt-service-monitor") (tags . ()) (versions . #hash((default . #hasheq((checksum . "1cfb827cd812361d3c348aad18625e4aa98b2ee2") (source . "git://github.com/racket/plt-service-monitor") (source_url . "http://github.com/racket/plt-service-monitor/tree/master"))))))) ("racklog" . #hash((author . "jay@racket-lang.org") (checksum . "9260c3586f319b36d9f3c484b4b6c9b85d0915fe") (dependencies . ("base" "datalog" "eli-tester" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "jay@racket-lang.org") (modules . ()) (name . "racklog") (source . "https://download.racket-lang.org/releases/6.12/pkgs/racklog.zip") (tags . ()))) ("php-parser" . #hasheq((author . "antoine.brand@sfr.fr") (authors . ("antoine.brand@sfr.fr")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/php-parser.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/php-parser.txt"))) (checksum . "159665a9078e46f1ea7712363f83cb8e5d9a2703") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "parser-tools" "rackunit-lib" "scribble-lib")) (description . "A php parser") (implies . ()) (last-checked . 1522414511) (last-edit . 1392482623) (last-updated . 1516648640) (modules . ((lib "php-parser/utils.rkt") (lib "php-parser/parser-utils.rkt") (lib "php-parser/parser.rkt") (lib "php-parser/main.rkt") (lib "php-parser/php-parser.scrbl"))) (name . "php-parser") (nix-sha256 . "18d5g095fb7d2kz0bq8wrfhadxlwhgl0nxp8v58l7z1vc1pr0zj3") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:antoine.brand@sfr.fr . #t) (parser . #t) (ring:1 . #t))) (source . "git://github.com/antoineb/php-parser") (tags . ("parser")) (versions . #hash((default . #hasheq((checksum . "159665a9078e46f1ea7712363f83cb8e5d9a2703") (source . "git://github.com/antoineb/php-parser") (source_url . "http://github.com/antoineb/php-parser/tree/master"))))))) ("glu-tessellate" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "glu-tessellate" "doc/glu-tessellate@glu-tessellate/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/glu-tessellate.txt") (test-failure-log . "server/built/test-fail/glu-tessellate.txt") (test-success-log . #f))) (checksum . "8efe65b35a2554be6dc613c016791ef2bf5ffb82") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "draw-doc" ("gui-lib" #:version "1.8") "racket-doc" "scribble-lib")) (description . "Converts a set of closed paths to a set of covering triangles covering the region enclosed by the curves") (implies . ()) (last-checked . 1522414405) (last-edit . 1443652898) (last-updated . 1502816084) (modules . ((lib "glu-tessellate/glu-tessellate.scrbl") (lib "glu-tessellate/main.rkt"))) (name . "glu-tessellate") (nix-sha256 . "0dpnvzg4zqkwd8lvxw0fxarph6fswmbl02gycjxwcw8vs3aymm3g") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mflatt@cs.utah.edu . #t) (graphics . #t) (ring:1 . #t))) (source . "git://github.com/mflatt/glu-tessellate") (tags . ("graphics")) (versions . #hash((default . #hasheq((checksum . "8efe65b35a2554be6dc613c016791ef2bf5ffb82") (source . "git://github.com/mflatt/glu-tessellate") (source_url . "http://github.com/mflatt/glu-tessellate/tree/master"))))))) ("slideshow-doc" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (checksum . "f3d6fbf761236b71d077e7e118f6b1b88c608d9a") (dependencies . ("scheme-lib" "draw-doc" "gui-doc" "pict-doc" "scribble-doc" "web-server-doc" "base" "gui-lib" "pict-lib" "scribble-lib" "slideshow-lib" "racket-doc")) (description . "mflatt@racket-lang.org robby@racket-lang.org") (modules . ()) (name . "slideshow-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/slideshow-doc.zip") (tags . ()))) ("br-parser-tools-lib" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/br-parser-tools-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/br-parser-tools-lib.txt"))) (checksum . "747c760eb56eaddd9c5aca1ab2a93bd1da4b5713") (checksum-error . #f) (conflicts . ()) (dependencies . ("scheme-lib" "base" "compatibility-lib" "rackunit-lib")) (description . "") (implies . ()) (last-checked . 1522414311) (last-edit . 1487700464) (last-updated . 1521839802) (modules . ((lib "br-parser-tools/private-yacc/input-file-parser.rkt") (lib "br-parser-tools/yacc-to-scheme.rkt") (lib "br-parser-tools/lex-plt-v200.rkt") (lib "br-parser-tools/private-yacc/lr0.rkt") (lib "br-parser-tools/private-lex/stx.rkt") (lib "br-parser-tools/private-lex/actions.rkt") (lib "br-parser-tools/private-yacc/lalr.rkt") (lib "br-parser-tools/private-lex/util.rkt") (lib "br-parser-tools/private-lex/token-syntax.rkt") (lib "br-parser-tools/private-yacc/yacc-helper.rkt") (lib "br-parser-tools/lex-sre.rkt") (lib "br-parser-tools/private-yacc/parser-actions.rkt") (lib "br-parser-tools/private-yacc/grammar.rkt") (lib "br-parser-tools/private-yacc/graph.rkt") (lib "br-parser-tools/private-yacc/parser-builder.rkt") (lib "br-parser-tools/private-lex/deriv.rkt") (lib "br-parser-tools/private-lex/unicode-chars.rkt") (lib "br-parser-tools/private-yacc/table.rkt") (lib "br-parser-tools/private-lex/front.rkt") (lib "br-parser-tools/examples/read.rkt") (lib "br-parser-tools/private-lex/re.rkt") (lib "br-parser-tools/private-lex/error-tests.rkt") (lib "br-parser-tools/yacc.rkt") (lib "br-parser-tools/examples/calc.rkt") (lib "br-parser-tools/lex.rkt") (lib "br-parser-tools/private-lex/token.rkt") (lib "br-parser-tools/cfg-parser.rkt"))) (name . "br-parser-tools-lib") (nix-sha256 . "05mh65bmx86181jlf376nnz85xs20si3nrapn71hh4v370iwrgi7") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:mb@mbtype.com . #t) (ring:1 . #t))) (source . "git://github.com/mbutterick/brag/?path=br-parser-tools/br-parser-tools-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "747c760eb56eaddd9c5aca1ab2a93bd1da4b5713") (source . "git://github.com/mbutterick/brag/?path=br-parser-tools/br-parser-tools-lib") (source_url . "git://github.com/mbutterick/brag/?path=br-parser-tools/br-parser-tools-lib"))))))) ("fme" . #hasheq((author . "sgtamk@gmail.com") (authors . ("sgtamk@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "fme" "doc/fme@fme/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fme.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fme.txt"))) (checksum . "63075d432e7803b2822a78568306c29a6fde557c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Fourier-Motzkin elimination for integer inequality satisfiability") (implies . ()) (last-checked . 1522414401) (last-edit . 1476382380) (last-updated . 1502816068) (modules . ((lib "fme/main.rkt") (lib "fme/private/fme.rkt") (lib "fme/private/leq.rkt") (lib "fme/private/fme-utils.rkt") (lib "fme/private/benchmarks.rkt") (lib "fme/fme.scrbl") (lib "fme/private/lexp.rkt"))) (name . "fme") (nix-sha256 . "09yf25ffg893845ri79if6gqdpzbipvkvxl58gbdgg408y75f7bi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sgtamk@gmail.com . #t) (math . #t) (ring:1 . #t))) (source . "git://github.com/pnwamk/fme#master") (tags . ("math")) (versions . #hash((default . #hasheq((checksum . "63075d432e7803b2822a78568306c29a6fde557c") (source . "git://github.com/pnwamk/fme#master") (source_url . "http://github.com/pnwamk/fme/tree/master#master"))))))) ("scratch" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scratch" "doc/scratch@scratch/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scratch.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scratch.txt"))) (checksum . "85b2849abbff838d8cca01bc107671ffda7db4b3") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "reprovide-lang" "at-exp-lib" "gui-lib" "pict-lib" "plot-gui-lib" "draw-lib" "data-lib" "profile-lib" "wxme-lib" "sandbox-lib" "syntax-color-lib" "zo-lib" "with-cache" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (last-checked . 1522414675) (last-edit . 1488564673) (last-updated . 1522266793) (modules . ((lib "scratch/scribblings/scratch.scrbl") (lib "scratch/private/reader-submod.rkt") (lib "scratch/main.rkt") (lib "scratch/ng.rkt") (lib "scratch/no-gui.rkt"))) (name . "scratch") (nix-sha256 . "0h791laqbd33715zj1zic5v7fczka60swdwqqnmm95ly76c2kvij") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t))) (source . "git://github.com/LeifAndersen/racket-scratch") (tags . ()) (versions . #hash((default . #hasheq((checksum . "85b2849abbff838d8cca01bc107671ffda7db4b3") (source . "git://github.com/LeifAndersen/racket-scratch") (source_url . "http://github.com/LeifAndersen/racket-scratch/tree/master"))))))) ("sha" . #hasheq((author . "greghendershott@gmail.com") (authors . ("greghendershott@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sha" "doc/sha@sha/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sha.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sha.txt"))) (checksum . "051124a89cbe09ab91cf27449ff86973eb8af1d2") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "SHA-1 and SHA-2, via FFI to OpenSSL.") (implies . ()) (last-checked . 1522414678) (last-edit . 1396443625) (last-updated . 1502816427) (modules . ((lib "sha/sha.scrbl") (lib "sha/main.rkt"))) (name . "sha") (nix-sha256 . "14m7kgk17whw62k85g40wna6sbsb98ryjgqmnjaa5329fjaqg6yq") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:greghendershott@gmail.com . #t) (crypto . #t) (ring:1 . #t) (web . #t))) (source . "github://github.com/greghendershott/sha/master") (tags . ("crypto" "web")) (versions . #hash((default . #hasheq((checksum . "051124a89cbe09ab91cf27449ff86973eb8af1d2") (source . "github://github.com/greghendershott/sha/master") (source_url . "http://github.com/greghendershott/sha/tree/master"))))))) ("plot" . #hash((author . "ntoronto@racket-lang.org") (checksum . "669bd805a1d0ccd0e20b592eaddf894b21dd021a") (dependencies . ("plot-lib" "plot-gui-lib" "plot-doc")) (description . "ntoronto@racket-lang.org") (modules . ()) (name . "plot") (source . "https://download.racket-lang.org/releases/6.12/pkgs/plot.zip") (tags . ()))) ("drracket-tool-doc" . #hash((author . "robby@racket-lang.org") (checksum . "a49e1114afe966b6ca4496d52639c6c10094d262") (dependencies . ("base" "scribble-lib" "drracket-tool-lib" "racket-doc" "gui-doc" "gui-lib" "drracket")) (description . "robby@racket-lang.org") (modules . ()) (name . "drracket-tool-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/drracket-tool-doc.zip") (tags . ()))) ("errortrace-lib" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org florence@racket-lang.org") (checksum . "f7873118981ce8f2e132d643cbf00cf9c03505ec") (dependencies . (("base" #:version "6.6.0.3") "source-syntax")) (description . "mflatt@racket-lang.org robby@racket-lang.org florence@racket-lang.org") (modules . ()) (name . "errortrace-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/errortrace-lib.zip") (tags . ()))) ("3s" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "3s" "doc/3s@3s/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/3s.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/3s.txt"))) (checksum . "d18ff22b6b7d2e86434bae73ca8969e5d709eb8c") (checksum-error . #f) (conflicts . ()) (dependencies . ("lux" "base" "openal" "racket-doc" "scribble-lib")) (description . "positional sound and mixing for lux and other programs") (implies . ()) (last-checked . 1522417867) (last-edit . 1447778167) (last-updated . 1502812264) (modules . ((lib "3s/3s.scrbl") (lib "lux/chaos/3s.rkt") (lib "3s/main.rkt"))) (name . "3s") (nix-sha256 . "035n6q8nqiw1i6r6p4np3sx6vxshwf30cnxj17nl4hf1ybvr1m8s") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audio . #t) (author:jay.mccarthy@gmail.com . #t) (games . #t) (k . #t) (ring:1 . #t) (s . #t))) (source . "git://github.com/jeapostrophe/3s") (tags . ("audio" "games" "k" "s")) (versions . #hash((default . #hasheq((checksum . "d18ff22b6b7d2e86434bae73ca8969e5d709eb8c") (source . "git://github.com/jeapostrophe/3s") (source_url . "http://github.com/jeapostrophe/3s/tree/master"))))))) ("aws-cloudformation-deploy" . #hasheq((author . "michaelaarnold@gmail.com") (authors . ("michaelaarnold@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/aws-cloudformation-deploy.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "00d1107fe8c08712d9011c9bb46d3f4ab9d0cc70") (checksum-error . #f) (conflicts . ()) (dependencies . ()) (description . "core AWS Cloudformation deployment scripting library") (implies . ()) (last-checked . 1522414288) (last-edit . 1496699628) (last-updated . 1497036810) (modules . ((lib "aws-cloudformation-deploy/main.rkt") (lib "aws-cloudformation-deploy/test/test-core.rkt") (lib "aws-cloudformation-deploy/src/core.rkt"))) (name . "aws-cloudformation-deploy") (nix-sha256 . "0w30j4zz3lzb8r4qh45371z3p5rm7gfqpnk8n8h2cd434vvzq4yx") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:michaelaarnold@gmail.com . #t) (aws . #t) (cloudformation . #t) (deploy . #t) (ring:1 . #t) (script . #t))) (source . "git://github.com/cjdev/aws-cloudformation-deploy") (tags . ("aws" "cloudformation" "deploy" "script")) (versions . #hash((default . #hasheq((checksum . "00d1107fe8c08712d9011c9bb46d3f4ab9d0cc70") (source . "git://github.com/cjdev/aws-cloudformation-deploy") (source_url . "http://github.com/cjdev/aws-cloudformation-deploy/tree/master"))))))) ("sxml-intro" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sxml-intro" "doc/sxml-intro@sxml-intro/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sxml-intro.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sxml-intro.txt"))) (checksum . "f3ad1b1a3be60c165f74c0d8668de44fbf8a9137") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib")) (description . "SXML in Racket: Tools for XML and HTML") (implies . ()) (last-checked . 1522414686) (last-edit . 1456463466) (last-updated . 1502816463) (modules . ((lib "sxml-intro/sxml-intro.scrbl"))) (name . "sxml-intro") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (html . #t) (ring:1 . #t) (sxml . #t) (web . #t) (xml . #t))) (source . "http://www.neilvandyke.org/racket/sxml-intro.zip") (tags . ("html" "sxml" "web" "xml")) (versions . #hash((default . #hasheq((checksum . "f3ad1b1a3be60c165f74c0d8668de44fbf8a9137") (source . "http://www.neilvandyke.org/racket/sxml-intro.zip") (source_url . "http://www.neilvandyke.org/racket/sxml-intro.zip"))))))) ("html-lib" . #hash((author . "jay@racket-lang.org mflatt@racket-lang.org") (checksum . "95fc62eba84556b5994baebe680ae76f1fb45ec5") (dependencies . ("base")) (description . "jay@racket-lang.org mflatt@racket-lang.org") (modules . ()) (name . "html-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/html-lib.zip") (tags . ()))) ("unstable-2d" . #hash((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-2d.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-2d.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "2d-lib")) (description . "Experimental 2d syntax") (implies . ()) (last-checked . 1522414697) (last-edit . 1445382797) (last-updated . 1502816512) (modules . ((lib "unstable/2d/lang/reader.rkt") (lib "unstable/2d/cond.rkt") (lib "unstable/2d/match.rkt") (lib "unstable/2d/tabular.rkt") (lib "unstable/2d/dir-chars.rkt"))) (name . "unstable-2d") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:robby@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("unstable")) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) (default . #hasheq((checksum . "abe368e38bf860c607a6b11c212e86519ac8f80e") (source . "git://github.com/racket/unstable-2d") (source_url . "http://github.com/racket/unstable-2d/tree/master"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("bystroTeX" . #hasheq((author . "amkhlv@gmail.com") (authors . ("amkhlv@gmail.com")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . "server/built/deps/bystroTeX.txt") (docs . (("extract" "manual" "doc/manual@bystroTeX/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bystroTeX.txt") (test-failure-log . "server/built/test-fail/bystroTeX.txt") (test-success-log . #f))) (checksum . "7c5a8e46440298a05b9df392f8729ca23a7d8302") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "db-lib" "scheme-lib" "scribble-lib" "racket-doc" "rackunit-lib" "scribble-doc" "at-exp-lib")) (description . "A tool for preparing HTML slides with LaTeX formulas, based on Scribble") (implies . ()) (last-checked . 1522414312) (last-edit . 1434482454) (last-updated . 1502812285) (modules . ((lib "bystroTeX/slides.rkt") (lib "bystroTeX/xmlconf.rkt") (lib "bystroTeX/utils.rkt") (lib "bystroTeX/manual.scrbl") (lib "bystroTeX/bibtex.rkt") (lib "bystroTeX/biblib/bibtex.rkt") (lib "bystroTeX/common.rkt") (lib "bystroTeX/biblib/autobib.rkt") (lib "bystroTeX/slides_for-syntax.rkt") (lib "bystroTeX/bystrotex.rkt"))) (name . "bystroTeX") (nix-sha256 . "1v2m04rla8ll3xh9psf7gxbyha69m0679ns7nrhbbij0kb5brvg5") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-dep-fail: . #t) (:build-success: . #t) (:docs-error: . #t) (:docs: . #t) (LaTeX . #t) (academic . #t) (author:amkhlv@gmail.com . #t) (ring:1 . #t) (slides . #t))) (source . "git://github.com/amkhlv/amkhlv/?path=bystroTeX") (tags . ("academic" "LaTeX" "slides")) (versions . #hash((default . #hasheq((checksum . "7c5a8e46440298a05b9df392f8729ca23a7d8302") (source . "git://github.com/amkhlv/amkhlv/?path=bystroTeX") (source_url . "git://github.com/amkhlv/amkhlv/?path=bystroTeX"))))))) ("openh264-x86_64-macosx" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/openh264-x86_64-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/openh264-x86_64-macosx.txt"))) (checksum . "e8fb290d38e90800ffa1d105dbb540d28f931807") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1522414507) (last-edit . 1499546884) (last-updated . 1521584462) (modules . ()) (name . "openh264-x86_64-macosx") (nix-sha256 . "1h5nrhdlb9z89vx4irrzxcpc7zgpyjk1vy6yc598yfq1hskmwjvl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (openh264 . #t) (ring:1 . #t) (video . #t))) (source . "git://github.com/videolang/native-pkgs?path=openh264-x86_64-macosx") (tags . ("openh264" "video")) (versions . #hash((default . #hasheq((checksum . "e8fb290d38e90800ffa1d105dbb540d28f931807") (source . "git://github.com/videolang/native-pkgs?path=openh264-x86_64-macosx") (source_url . "http://github.com/videolang/native-pkgs/tree/master?path=openh264-x86_64-macosx"))))))) ("plot-gui-lib" . #hash((author . "ntoronto@racket-lang.org") (checksum . "796d08b9475be0dd39d7f48881984adc5db777b8") (dependencies . ("base" "plot-lib" "math-lib" ("gui-lib" #:version "1.18") "snip-lib" "typed-racket-lib" "typed-racket-more")) (description . "ntoronto@racket-lang.org") (modules . ()) (name . "plot-gui-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/plot-gui-lib.zip") (tags . ()))) ("distro-build-lib" . #hash((author . "mflatt@racket-lang.org") (checksum . "731b56857ef3caec289d3217e1aca7bd6100a0cb") (dependencies . ("distro-build-client" "distro-build-server")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "distro-build-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/distro-build-lib.zip") (tags . ()))) ("subtemplate" . #hasheq((author . "georges.duperon@gmail.com") (authors . ("georges.duperon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "subtemplate" "doc/subtemplate@subtemplate/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/subtemplate.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/subtemplate.txt"))) (checksum . "1653e461398434fdbfe7a9459ffe5b0b99de27af") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "backport-template-pr1514" "phc-toolkit" "srfi-lite-lib" "stxparse-info" "alexis-util" "scope-operations" "auto-syntax-e" "version-case" "scribble-lib" "racket-doc" "scribble-math")) (description . "Experimental. In a syntax template, auto-generate yᵢ … from xᵢ … . Also includes several improvements, like ellipses outside of syntax templates, and ellipsis-preserving unsyntax.") (implies . ()) (last-checked . 1522414685) (last-edit . 1501079107) (last-updated . 1522101488) (modules . ((lib "subtemplate/test/test-ddd-forms.rkt") (lib "subtemplate/test/test-ddd-top.rkt") (lib "subtemplate/scribblings/orig.rkt") (lib "subtemplate/private/override.rkt") (lib "subtemplate/private/patch-arrows.rkt") (lib "subtemplate/test/assumption-local-expand-reuse-let-bound-id.rkt") (lib "subtemplate/test/test-ddd.rkt") (lib "subtemplate/scribblings/subtemplate.scrbl") (lib "subtemplate/private/top-subscripts.rkt") (lib "subtemplate/scribblings/examples.scrbl") (lib "subtemplate/test/test-performance.rkt") (lib "subtemplate/test/test-use-before-definition.rkt") (lib "subtemplate/private/cross-phase-splicing-list.rkt") (lib "subtemplate/test/test-optional.rkt") (lib "subtemplate/private/subscripts.rkt") (lib "subtemplate/private/optcontract.rkt") (lib "subtemplate/test/assumption-free-identifier-equal.rkt") (lib "subtemplate/private/copy-attribute.rkt") (lib "subtemplate/test/test-splice.rkt") (lib "subtemplate/test/test-subtemplate.rkt") (lib "subtemplate/test/test-subtemplate-detect-stxinfo.rkt") (lib "subtemplate/test/test-splice-append.rkt") (lib "subtemplate/test/assumption-weak-hash.rkt") (lib "subtemplate/private/template-subscripts.rkt") (lib "subtemplate/test/test-copy-attribute-template-problem.rkt") (lib "subtemplate/test/test-copy-attribute.rkt") (lib "subtemplate/private/fully-expanded-grammar.rkt") (lib "subtemplate/test/test-missing-nested.rkt") (lib "subtemplate/private/unsyntax-preparse.rkt") (lib "subtemplate/override.rkt") (lib "subtemplate/test/test-or-syntax.rkt") (lib "subtemplate/test/bug-5.rkt") (lib "subtemplate/test/test-syntax-case-as-syntax-parse.rkt") (lib "subtemplate/private/ddd.rkt") (lib "subtemplate/private/find-defined-pvars.rkt") (lib "subtemplate/private/lifted-variables-communication.rkt") (lib "subtemplate/light.rkt") (lib "subtemplate/scribblings/light.scrbl") (lib "subtemplate/test/test-or.rkt") (lib "subtemplate/private/ddd-forms.rkt") (lib "subtemplate/test/test-unsyntax2.rkt") (lib "subtemplate/main.rkt") (lib "subtemplate/private/fully-expanded-grammar-extract-bindings.rkt") (lib "subtemplate/test/test-unsyntax.rkt") (lib "subtemplate/private/syntax-case-as-syntax-parse.rkt"))) (name . "subtemplate") (nix-sha256 . "1ivvixg9rxsgpglw937lqb115rcn0c6j7viadrrypmwi8clrq5ac") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:georges.duperon@gmail.com . #t) (experimental . #t) (ring:1 . #t) (syntax . #t) (syntax-parse . #t) (template . #t))) (source . "https://github.com/jsmaniac/subtemplate.git") (tags . ("experimental" "syntax" "syntax-parse" "template")) (versions . #hash((default . #hasheq((checksum . "1653e461398434fdbfe7a9459ffe5b0b99de27af") (source . "https://github.com/jsmaniac/subtemplate.git") (source_url . "https://github.com/jsmaniac/subtemplate.git"))))))) ("axe" . #hasheq((author . "lotabout@gmail.com") (authors . ("lotabout@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "axe" "doc/axe@axe/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/axe.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/axe.txt"))) (checksum . "234c2d1f6849f3719c3fc3c2354a4d257e53943b") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "collections" "rackunit-lib" "scribble-lib" "racket-doc" "scribble-code-examples" "scribble-doc")) (description . "Handy utilities(macros/functions) for racket") (implies . ()) (last-checked . 1522414288) (last-edit . 1493200577) (last-updated . 1502812277) (modules . ((lib "axe/lang/reader.rkt") (lib "axe/app.rkt") (lib "axe/main.rkt") (lib "axe/test.rkt") (lib "axe/base/lang/reader-no-wrap.rkt") (lib "axe/base/lang/runtime-config.rkt") (lib "axe/scribblings/axe.scrbl") (lib "axe/threading.rkt") (lib "axe/escape.rkt") (lib "axe/base/lang/language-info.rkt") (lib "axe/lang/reader-no-wrap.rkt") (lib "axe/base/axe-reader.rkt") (lib "axe/conditionals.rkt") (lib "axe/base.rkt") (lib "axe/dict.rkt") (lib "axe/base/lang/reader.rkt"))) (name . "axe") (nix-sha256 . "1d5d37x79igyl3kcg1z88ip2mlpq4llmwwawg7qfa4zcr7h2gdrp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lotabout@gmail.com . #t) (ring:1 . #t) (utility . #t))) (source . "git://github.com/lotabout/axe") (tags . ("utility")) (versions . #hash((default . #hasheq((checksum . "234c2d1f6849f3719c3fc3c2354a4d257e53943b") (source . "git://github.com/lotabout/axe") (source_url . "http://github.com/lotabout/axe/tree/master"))))))) ("check-sexp-equal" . #hasheq((author . "zenspider@gmail.com") (authors . ("zenspider@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "check-sexp-equal" "doc/check-sexp-equal@check-sexp-equal/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/check-sexp-equal.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/check-sexp-equal.txt"))) (checksum . "5c90361aa4b6f11333b39620cfd0062cdaa062dc") (checksum-error . #f) (conflicts . ()) (dependencies . (("sexp-diff" #:version "0.1") "base" "rackunit-lib" "racket-doc" "scribble-lib" "racket-doc")) (description . "A simple extension for rackunit that provides s-expression diffs on failure.") (implies . ()) (last-checked . 1522414313) (last-edit . 1502757399) (last-updated . 1502757399) (modules . ((lib "check-sexp-equal/check-sexp-equal.scrbl") (lib "check-sexp-equal/main.rkt"))) (name . "check-sexp-equal") (nix-sha256 . "1nr4qcvsgz2shp9hh8231b26z5573ya7b56n8c4965siknih4q28") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:zenspider@gmail.com . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/zenspider/check-sexp-equal") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "5c90361aa4b6f11333b39620cfd0062cdaa062dc") (source . "git://github.com/zenspider/check-sexp-equal") (source_url . "http://github.com/zenspider/check-sexp-equal/tree/master"))))))) ("pfds" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "functional-data-structures" "doc/functional-data-structures@pfds/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pfds.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pfds.txt"))) (checksum . "3c407496bcb5ff90ec8d3f43212e32b54feee54c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-compatibility" "scheme-lib" "at-exp-lib" "htdp-lib" "racket-doc" "scribble-lib" "typed-racket-more")) (description . "Purely functional data structures for Typed Racket") (implies . ()) (last-checked . 1522414511) (last-edit . 1355169108) (last-updated . 1513883753) (modules . ((lib "pfds/scribblings/treap.scrbl") (lib "pfds/ralist/skew.rkt") (lib "pfds/deque/real-time.rkt") (lib "pfds/scribblings/implicitqueue.scrbl") (lib "pfds/stream.rkt") (lib "pfds/tests/tests-main.rkt") (lib "pfds/tests/bankers-deque-tests.rkt") (lib "pfds/tests/realtimedeque-tests.rkt") (lib "pfds/trie.rkt") (lib "pfds/scribblings/vlist.scrbl") (lib "pfds/scribblings/catenable-list.scrbl") (lib "pfds/tests/physicists-queue-tests.rkt") (lib "pfds/scribblings/realtimedeque.scrbl") (lib "pfds/tests/hood-melville-queue-tests.rkt") (lib "pfds/heap/bootstrapped.rkt") (lib "pfds/heap/lazy-pairing.rkt") (lib "pfds/scribblings/queues.scrbl") (lib "pfds/tests/stream-tests.rkt") (lib "pfds/heap/splay.rkt") (lib "pfds/scribblings/pairingheap.scrbl") (lib "pfds/tests/lazypairingheap-test.rkt") (lib "pfds/queue/bootstrapped.rkt") (lib "pfds/tests/bankers-queue-benchmarks.rkt") (lib "pfds/treap.rkt") (lib "pfds/scribblings/deques.scrbl") (lib "pfds/queue/physicists.rkt") (lib "pfds/tests/skewbinaryrandomaccesslist-tests.rkt") (lib "pfds/scribblings/randomaccesslist.scrbl") (lib "pfds/queue/hood-melville.rkt") (lib "pfds/scribblings/bankers-deque.scrbl") (lib "pfds/tests/pairingheap-test.rkt") (lib "pfds/tests/binomialheap-tests.rkt") (lib "pfds/scribblings/binaryrandomaccesslist.scrbl") (lib "pfds/tests/vlist-tests.rkt") (lib "pfds/scribblings/splayheap.scrbl") (lib "pfds/delay.rkt") (lib "pfds/scribblings/physicists-queue.scrbl") (lib "pfds/scribblings/hood-melville-queue.scrbl") (lib "pfds/tests/splayheap-tests.rkt") (lib "pfds/tests/partialstream-tests.rkt") (lib "pfds/scribblings/realtimequeue.scrbl") (lib "pfds/tests/catenablelist-tests.rkt") (lib "pfds/scribblings/queue.scrbl") (lib "pfds/scribblings/bootstrapedqueue.scrbl") (lib "pfds/scribblings/binomialheap.scrbl") (lib "pfds/tests/bootstrapedheap-tests.rkt") (lib "pfds/deque/implicit.rkt") (lib "pfds/partialstream.rkt") (lib "pfds/scribblings/helper.rkt") (lib "pfds/heap/skew-binomial.rkt") (lib "pfds/deque/bankers.rkt") (lib "pfds/tests/leftistheaps-tests.rkt") (lib "pfds/tests/binary-ran-access-list-tests.rkt") (lib "pfds/red-black-tree.rkt") (lib "pfds/queue/bankers.rkt") (lib "pfds/scribblings/redblacktrees.scrbl") (lib "pfds/scribblings/bootstrapedheap.scrbl") (lib "pfds/queue/real-time.rkt") (lib "pfds/tests/skewbinomialheap-tests.rkt") (lib "pfds/heap/leftist.rkt") (lib "pfds/scribblings/tries.scrbl") (lib "pfds/tests/realtimequeue-tests.rkt") (lib "pfds/scribblings/functional-data-structures.scrbl") (lib "pfds/scribblings/lazypairingheap.scrbl") (lib "pfds/scribblings/skewbinomialheap.scrbl") (lib "pfds/tests/implicitdeque-performance-tests.rkt") (lib "pfds/scribblings/streams.scrbl") (lib "pfds/tests/bankers-deque-benchmarks.rkt") (lib "pfds/tests/implicitqueue-performance-tests.rkt") (lib "pfds/tests/tries-test.rkt") (lib "pfds/tests/redblacktrees-tests.rkt") (lib "pfds/tests/implicitdeque-tests.rkt") (lib "pfds/scribblings/skewbinaryrandomaccesslist.scrbl") (lib "pfds/vlist.rkt") (lib "pfds/tests/bootstrapedqueue-tests.rkt") (lib "pfds/scribblings/heaps.scrbl") (lib "pfds/queue/implicit.rkt") (lib "pfds/tests/treap-tests.rkt") (lib "pfds/catenable-list.rkt") (lib "pfds/heap/pairing.rkt") (lib "pfds/tests/bankers-queue-tests.rkt") (lib "pfds/ralist/binary.rkt") (lib "pfds/scribblings/leftistheap.scrbl") (lib "pfds/scribblings/implicitdeque.scrbl") (lib "pfds/tests/implicitqueue-tests.rkt") (lib "pfds/heap/binomial.rkt"))) (name . "pfds") (nix-sha256 . "1mfvwjyrsx79df4fhbh6k958b7jmqm1000nfq1mxknc3s6nql4d8") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (data . #t) (ring:1 . #t))) (source . "github://github.com/takikawa/tr-pfds/master") (tags . ("data")) (versions . #hash(("6.0" . #hasheq((checksum . "cf67d14fc35d21e6f2a33551386bb4dd20599129") (source . "github://github.com/takikawa/tr-pfds/v6.0") (source_url . "http://github.com/takikawa/tr-pfds/tree/v6.0"))) (default . #hasheq((checksum . "3c407496bcb5ff90ec8d3f43212e32b54feee54c") (source . "github://github.com/takikawa/tr-pfds/master") (source_url . "http://github.com/takikawa/tr-pfds/tree/master"))))))) ("markdown" . #hasheq((author . "greghendershott@gmail.com") (authors . ("greghendershott@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "markdown" "doc/markdown@markdown/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/markdown.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/markdown.txt"))) (checksum . "7c1bbc52f6dbd1c4312c9e4953bcbd7ec21643e6") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" ("parsack" "0.4") ("racket" "6.0") ("rackjure" "0.9") "sandbox-lib" "scribble-lib" "srfi-lite-lib" "at-exp-lib" "html-lib" "racket-doc" "rackunit-lib" "redex-lib" "scribble-doc" "sexp-diff")) (description . "Markdown format parser.") (implies . ()) (last-checked . 1522414427) (last-edit . 1504135050) (last-updated . 1505690979) (modules . ((lib "markdown/toc.rkt") (lib "markdown/redex-test.rkt") (lib "markdown/main.rkt") (lib "markdown/test.rkt") (lib "markdown/scrib.rkt") (lib "markdown/suite-test.rkt") (lib "markdown/display-xexpr.rkt") (lib "markdown/xexpr.rkt") (lib "markdown/xexpr2text.rkt") (lib "markdown/html.rkt") (lib "markdown/markdown.scrbl") (lib "markdown/ci-environment.rkt") (lib "markdown/entity.rkt") (lib "markdown/parse.rkt") (lib "markdown/random-test.rkt") (lib "markdown/perf-test.rkt") (lib "markdown/example.rkt") (lib "markdown/parsack.rkt"))) (name . "markdown") (nix-sha256 . "0rq8zww9rh9xwy93l0g2z4v7sj72hq7z59vxaciv4550xiracsj7") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:greghendershott@gmail.com . #t) (markdown . #t) (parser . #t) (ring:1 . #t))) (source . "git://github.com/greghendershott/markdown") (tags . ("markdown" "parser")) (versions . #hash((default . #hasheq((checksum . "7c1bbc52f6dbd1c4312c9e4953bcbd7ec21643e6") (source . "git://github.com/greghendershott/markdown") (source_url . "http://github.com/greghendershott/markdown/tree/master"))))))) ("dropbox" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dropbox" "doc/dropbox@dropbox/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dropbox.txt") (test-failure-log . "server/built/test-fail/dropbox.txt") (test-success-log . #f))) (checksum . "fc978c6c2feca00a74c4e5f9f7213a55585abe68") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "SDK for Dropbox") (implies . ()) (last-checked . 1522414393) (last-edit . 1374792929) (last-updated . 1502815932) (modules . ((lib "dropbox/dropbox.scrbl") (lib "dropbox/dropbox.rkt") (lib "dropbox/tests.rkt") (lib "dropbox/main.rkt"))) (name . "dropbox") (nix-sha256 . "00bms50mivzllnm9xhqq9sn4zqmbz0pxl4ny2i14s0vbxd7zazsb") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (API . #t) (author:stchang@racket-lang.org . #t) (dropbox . #t) (net . #t) (ring:1 . #t) (web . #t))) (source . "github://github.com/stchang/dropbox/master") (tags . ("API" "dropbox" "net" "web")) (versions . #hash((default . #hasheq((checksum . "fc978c6c2feca00a74c4e5f9f7213a55585abe68") (source . "github://github.com/stchang/dropbox/master") (source_url . "http://github.com/stchang/dropbox/tree/master"))))))) ("handy" . #hasheq((author . "david.storrs@gmail.com") (authors . ("david.storrs@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/handy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/handy.txt"))) (checksum . "b6b765a8da264d2cf535aa3a134dbf564ccf4146") (checksum-error . #f) (conflicts . ()) (dependencies . ("html-parsing" "base" "db-lib" "rackunit-lib" "sxml" "at-exp-lib")) (description . "Utility functions that are missing from Racket -- e.g. 'say' (variadic displayln), 'multi-partition' (partition into more than two lists), better exception creation / trapping, database management, etc") (implies . ()) (last-checked . 1522414415) (last-edit . 1517612022) (last-updated . 1521070736) (modules . ((lib "handy/sql.rkt") (lib "handy/test-more.rkt") (lib "handy/db.rkt") (lib "handy/main.rkt") (lib "handy/list-utils.rkt") (lib "handy/json.rkt") (lib "handy/try.rkt") (lib "handy/fsmonitor.rkt") (lib "handy/web.rkt") (lib "handy/struct.rkt") (lib "handy/utils.rkt") (lib "handy/thread.rkt") (lib "handy/HTML-Element.rkt") (lib "handy/exceptions.rkt"))) (name . "handy") (nix-sha256 . "0pvp20r9876j3hjcjv4ncgvbapc5vq00fw87vy6d1gyv8gwz9pi1") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (author:david.storrs@gmail.com . #t) (database . #t) (exceptions . #t) (ring:2 . #t) (utility . #t) (web . #t))) (source . "https://github.com/dstorrs/racket-dstorrs-libs.git") (tags . ("database" "exceptions" "utility" "web")) (versions . #hash((default . #hasheq((checksum . "b6b765a8da264d2cf535aa3a134dbf564ccf4146") (source . "https://github.com/dstorrs/racket-dstorrs-libs.git") (source_url . "https://github.com/dstorrs/racket-dstorrs-libs.git"))))))) ("statsd" . #hasheq((author . "me@apgwoz.com") (authors . ("me@apgwoz.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/statsd.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/statsd.txt"))) (checksum . "39a640686053be83442bfb129a279b8d00d6a177") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "statsd client for racket") (implies . ()) (last-checked . 1522414684) (last-edit . 1494310113) (last-updated . 1502816455) (modules . ((lib "scribblings/net/statsd.scrbl") (lib "net/statsd/main.rkt") (lib "net/statsd.rkt"))) (name . "statsd") (nix-sha256 . "1za8gi3gbcl5sshqnx23wgpsanrmk6k4dxrscxcrgnqcb5g74w3j") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:me@apgwoz.com . #t) (metrics . #t) (net . #t) (ring:1 . #t) (statsd . #t))) (source . "git://github.com/apg/statsd-rkt") (tags . ("metrics" "net" "statsd")) (versions . #hash((default . #hasheq((checksum . "39a640686053be83442bfb129a279b8d00d6a177") (source . "git://github.com/apg/statsd-rkt") (source_url . "http://github.com/apg/statsd-rkt/tree/master"))))))) ("game-engine-style-demos" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/game-engine-style-demos.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "268ffe506cdc21f751a83c5d1b5d9c02f54c6a54") (checksum-error . #f) (conflicts . ()) (dependencies . ("game-engine-demos-common")) (description . "Package containing demos of using the game-engine package to explore different styles for simple games.") (implies . ()) (last-checked . 1522414403) (last-edit . 1520970874) (last-updated . 1522201925) (modules . ((lib "game-engine-style-demos/main.rkt") (lib "game-engine-style-demos/style_demo_2.rkt") (lib "game-engine-style-demos/style_demo_4.rkt") (lib "game-engine-style-demos/style_demo_5.rkt") (lib "game-engine-style-demos/style_demo_1.rkt") (lib "game-engine-style-demos/style_demo_3.rkt") (lib "game-engine-style-demos/style_demo_7.rkt") (lib "game-engine-style-demos/style_demo_6.rkt"))) (name . "game-engine-style-demos") (nix-sha256 . "0bzv7hc0yzwa3lx0xrgpsqpfdgb95lk1r6qgykb5kkgj4vnzam3q") (ring . 2) (search-terms . #hasheq((:build-fail: . #t) (author:stephen@thoughtstem.com . #t) (demos . #t) (game-engine . #t) (ring:2 . #t))) (source . "https://github.com/srfoster/game-engine-demos.git?path=style-demos") (tags . ("demos" "game-engine")) (versions . #hash((default . #hasheq((checksum . "268ffe506cdc21f751a83c5d1b5d9c02f54c6a54") (source . "https://github.com/srfoster/game-engine-demos.git?path=style-demos") (source_url . "https://github.com/srfoster/game-engine-demos.git?path=style-demos"))))))) ("errortrace-test" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org florence@racket-lang.org") (checksum . "b838ebf008219626c54bc8aee3a5a324303712a9") (dependencies . ("errortrace-lib" "eli-tester" "rackunit-lib" "base" "compiler-lib" "at-exp-lib")) (description . "mflatt@racket-lang.org robby@racket-lang.org florence@racket-lang.org") (modules . ()) (name . "errortrace-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/errortrace-test.zip") (tags . ()))) ("opencv" . #hasheq((author . "petersamarin@gmail.com") (authors . ("petersamarin@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/opencv.txt") (test-failure-log . "server/built/test-fail/opencv.txt") (test-success-log . #f))) (checksum . "8124eb6b620769137656547e83f9d9587ab37c23") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "FFI bindings to the OpenCV library") (implies . ()) (last-checked . 1522414507) (last-edit . 1496527503) (last-updated . 1502816199) (modules . ((lib "tutorials/08_objdetect/CascadeClassifier.rkt") (lib "tutorials/03_imgproc/01-smoothing-images.rkt") (lib "opencv/objdetect.rkt") (lib "opencv/types.rkt") (lib "tutorials/03_imgproc/VideoSimple.rkt") (lib "tutorials/06_feature2d/01-Harris-corner-detector.rkt") (lib "opencv/main.rkt") (lib "opencv/core.rkt") (lib "opencv/imgproc.rkt") (lib "opencv/calib3d.rkt") (lib "tutorials/03_imgproc/VideoSobel.rkt") (lib "tutorials/03_imgproc/SimpleImageProcessing.rkt") (lib "tutorials/03_imgproc/20-2-finding-contours-in-your-video.rkt") (lib "opencv/utilities.rkt") (lib "tutorials/01_introduction/02-load-save-image.rkt") (lib "opencv/videoio.rkt") (lib "tutorials/01_introduction/01-display-image.rkt") (lib "tutorials/03_imgproc/VideoCanny.rkt") (lib "opencv/highgui.rkt"))) (name . "opencv") (nix-sha256 . "0qis0gbcchhxi7f3v4ijrdyh3wbdnf10v0vvam2pqx6m53i59hfr") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:petersamarin@gmail.com . #t) (computer-vision . #t) (ffi . #t) (ring:1 . #t))) (source . "git://github.com/oetr/racket-opencv") (tags . ("computer-vision" "ffi")) (versions . #hash((default . #hasheq((checksum . "8124eb6b620769137656547e83f9d9587ab37c23") (source . "git://github.com/oetr/racket-opencv") (source_url . "http://github.com/oetr/racket-opencv/tree/master"))))))) ("scripty-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scripty" "doc/scripty@scripty-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scripty-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scripty-doc.txt"))) (checksum . "09a0e2fd24dfcd5942177d4a328821534ee60ded") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "scripty-lib")) (description . "") (implies . ()) (last-checked . 1522414677) (last-edit . 1476917300) (last-updated . 1502816422) (modules . ((lib "scribblings/scripty.scrbl"))) (name . "scripty-doc") (nix-sha256 . "0ib233dr7vlm6vwkxzb24vpgj5f9my894dd2ja0ry5ykl75cvzia") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t) (scripting . #t))) (source . "git://github.com/lexi-lambda/scripty.git?path=scripty-doc") (tags . ("scripting")) (versions . #hash((default . #hasheq((checksum . "09a0e2fd24dfcd5942177d4a328821534ee60ded") (source . "git://github.com/lexi-lambda/scripty.git?path=scripty-doc") (source_url . "http://github.com/lexi-lambda/scripty.git/tree/master?path=scripty-doc"))))))) ("ansi" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (checksum . "c2454badf7d9401425bab91ba44e4287e690607b") (dependencies . ("base" "dynext-lib" "make" "rackunit-lib")) (description . "ANSI and VT10x escape sequences for Racket.") (name . "ansi") (nix-sha256 . "1rm4bm8h04paa23j059w7fak2gim3zkxcq4dy65rq4r6xqyvwdln") (source . "github://github.com/tonyg/racket-ansi/master"))) ("plai-typed" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "plai-typed" "doc/plai-typed@plai-typed/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plai-typed.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plai-typed.txt"))) (checksum . "e11e7e4cd655b958296055f490ea8eadf5ea5ce7") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "plai" "racket-doc" "rackunit-lib" ("scribble-lib" #:version "1.16"))) (description . "The `plai-typed' language for use with Programming Languages: Application and Interpretation, Second Edition\r\n") (implies . ()) (last-checked . 1522414514) (last-edit . 1404888844) (last-updated . 1502816262) (modules . ((lib "plai-typed/tests/repl.rkt") (lib "plai-typed/tests/hygiene.rkt") (lib "plai-typed/private/fixup-quote.rkt") (lib "plai-typed/tests/ta-scope.rkt") (lib "plai-typed/tests/parse.rkt") (lib "plai-typed/private/s-exp.rkt") (lib "plai-typed/tests/basic.rkt") (lib "plai-typed/main.rkt") (lib "plai-typed/tests/submod3.rkt") (lib "plai-typed/plai-typed.scrbl") (lib "plai-typed/tests/use-untyped.rkt") (lib "plai-typed/tests/rename.rkt") (lib "plai-typed/tests/use-typed-basic.rkt") (lib "plai-typed/tests/submod.rkt") (lib "plai-typed/private/collapse.rkt") (lib "plai-typed/tests/submod2.rkt") (lib "plai-typed/private/types.rkt") (lib "plai-typed/tests/untyped-use-untyped.rkt") (lib "plai-typed/untyped.rkt") (lib "plai-typed/tests/untyped.rkt") (lib "plai-typed/untyped.scrbl") (lib "plai-typed/tests/synerror.rkt") (lib "plai-typed/tests/use-basic.rkt"))) (name . "plai-typed") (nix-sha256 . "1sc9xjnqrkq1fv6ymlbln1cnbpw8sxzlwwi93scl8ngqq1wdvff2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mflatt@cs.utah.edu . #t) (language . #t) (ring:1 . #t) (textbook . #t))) (source . "github://github.com/mflatt/plai-typed/no-deps") (tags . ("language" "textbook")) (versions . #hash((default . #hasheq((checksum . "582728d7a724674b58c6af8d2b20a6513947152a") (source . "github://github.com/mflatt/plai-typed/master") (source_url . "http://github.com/mflatt/plai-typed/tree/master"))) ("5.3.6" . #hasheq((checksum . "e11e7e4cd655b958296055f490ea8eadf5ea5ce7") (source . "github://github.com/mflatt/plai-typed/no-deps") (source_url . "http://github.com/mflatt/plai-typed/tree/no-deps"))) ("5.3.5" . #hasheq((checksum . "e11e7e4cd655b958296055f490ea8eadf5ea5ce7") (source . "github://github.com/mflatt/plai-typed/no-deps") (source_url . "http://github.com/mflatt/plai-typed/tree/no-deps"))))))) ("rosetta" . #hasheq((author . "antonio.menezes.leitao@gmail.com") (authors . ("antonio.menezes.leitao@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/rosetta.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "c1a1b8043a93694a273dccae836b61bce214e4df") (checksum-error . #f) (conflicts . ()) (dependencies . ()) (description . "") (implies . ()) (last-checked . 1522414672) (last-edit . 1444488892) (last-updated . 1522147993) (modules . ((lib "rosetta/base/connection.rkt") (lib "rosetta/archicad/protobuf1/protobuf.rkt") (lib "rosetta/simulation/materials.rkt") (lib "rosetta/autocad/ac-com.rkt") (lib "rosetta/main.rkt") (lib "rosetta/archicad/objects.rkt") (lib "rosetta/archicad/protobuf1/encoding.rkt") (lib "rosetta/robot/robot-com.rkt") (lib "rosetta/simulation/simulation.rkt") (lib "rosetta/lighting-simulation.rkt") (lib "rosetta/sketchup/backend.rkt") (lib "rosetta/autocad-server/backend.rkt") (lib "rosetta/revit/pbContracts.rkt") (lib "rosetta/base/coord.rkt") (lib "rosetta/base/bim-families.rkt") (lib "rosetta/rhino.rkt") (lib "rosetta/base/enums.rkt") (lib "rosetta/autocad/ac-enums.rkt") (lib "rosetta/tikz/backend.rkt") (lib "rosetta/tikz/primops.rkt") (lib "rosetta/revit-server.rkt") (lib "rosetta/util/delaunay.rkt") (lib "rosetta/revit/main.rkt") (lib "rosetta/revit/rosetta/protobuf1/protobuf.rkt") (lib "rosetta/revit/backend.rkt") (lib "rosetta/autocad/main.rkt") (lib "rosetta/autocad-server/primitives.rkt") (lib "rosetta/robot/robot-enums.rkt") (lib "rosetta/archicad.rkt") (lib "rosetta/revit-server/backend.rkt") (lib "rosetta/archicad/protobuf1/syntax.rkt") (lib "rosetta/robot/backend.rkt") (lib "rosetta/revit/rosetta/protobuf1/encoding.rkt") (lib "rosetta/base/utils.rkt") (lib "rosetta/revit/racketSide.rkt") (lib "rosetta/autocad/backend.rkt") (lib "rosetta/autocad-native.rkt") (lib "rosetta/base/com.rkt") (lib "rosetta/base/bim-operations.rkt") (lib "rosetta/rhinoceros/rh-com.rkt") (lib "rosetta/base/raw-connection.rkt") (lib "rosetta/util/geometry.rkt") (lib "rosetta/revit/rosetta/protobuf1/reflection.rkt") (lib "rosetta/autocad.rkt") (lib "rosetta/revit.rkt") (lib "rosetta/rhinoceros/backend.rkt") (lib "rosetta/revit-server/primitives.rkt") (lib "rosetta/autocad-server.rkt") (lib "rosetta/tikz.rkt") (lib "rosetta/sketchup/primops.rkt") (lib "rosetta/archicad/protobuf1/reflection.rkt") (lib "rosetta/archicad/geometry.rkt") (lib "rosetta/util/excel.rkt") (lib "rosetta/base/shapes.rkt") (lib "rosetta/base/typed-com.rkt") (lib "rosetta/archicad/communication.rkt") (lib "rosetta/archicad/messages.rkt") (lib "rosetta/archicad/backend.rkt") (lib "rosetta/tikz/main.rkt") (lib "rosetta/archicad/inspector.rkt") (lib "rosetta/archicad/install.rkt") (lib "rosetta/revit/rosetta/protobuf1/syntax.rkt") (lib "rosetta/sketchup.rkt"))) (name . "rosetta") (nix-sha256 . "1n2ryw23qsn6xnhhi3siafdzz2c4g0y6k08i74id6zjgpg53cbqc") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:antonio.menezes.leitao@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/aptmcl/rosetta") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c1a1b8043a93694a273dccae836b61bce214e4df") (source . "git://github.com/aptmcl/rosetta") (source_url . "http://github.com/aptmcl/rosetta/tree/master"))))))) ("mf-apply" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mf-apply" "doc/mf-apply@mf-apply/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mf-apply.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mf-apply.txt"))) (checksum . "4eb71579d1813ddddf3060d9a52a245a40b9f92c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "redex-lib" "scribble-lib" "racket-doc" "rackunit-lib" "redex-doc")) (description . "PLT Redex lang-extension for checked metafunction application") (implies . ()) (last-checked . 1522414435) (last-edit . 1488257334) (last-updated . 1516774659) (modules . ((lib "mf-apply/docs/mf-apply.scrbl") (lib "mf-apply/lang/reader.rkt"))) (name . "mf-apply") (nix-sha256 . "02sr2wymr2nd64kfbz7r78lbdwaijlz3a1jbhzvrwm1csfpghf96") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (lang-extension . #t) (redex . #t) (ring:1 . #t) (utility . #t))) (source . "git://github.com/bennn/mf-apply") (tags . ("lang-extension" "redex" "utility")) (versions . #hash((default . #hasheq((checksum . "4eb71579d1813ddddf3060d9a52a245a40b9f92c") (source . "git://github.com/bennn/mf-apply") (source_url . "http://github.com/bennn/mf-apply/tree/master"))))))) ("arguments" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "arguments" "doc/arguments@arguments/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/arguments.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/arguments.txt"))) (checksum . "1a27bb7a1444effc034bf8b2df4ba1845f51478f") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "A simple data structure for a group of function arguments. Used by the mock package.") (implies . ()) (last-checked . 1522417871) (last-edit . 1500074225) (last-updated . 1508914852) (modules . ((lib "arguments/main.scrbl") (lib "arguments/tests/syntax.rkt") (lib "arguments/main.rkt"))) (name . "arguments") (nix-sha256 . "1d7y7f08ys0lg3m89zy66whkzpd7vdn4xhkp5nv99vg0pdl2zilm") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (data . #t) (reflection . #t) (ring:1 . #t))) (source . "git://github.com/jackfirth/racket-mock?path=arguments") (tags . ("data" "reflection")) (versions . #hash((default . #hasheq((checksum . "1a27bb7a1444effc034bf8b2df4ba1845f51478f") (source . "git://github.com/jackfirth/racket-mock?path=arguments") (source_url . "http://github.com/jackfirth/racket-mock/tree/master?path=arguments"))))))) ("compiler-lib" . #hash((author . "mflatt@racket-lang.org") (checksum . "8921c26c498e920aca398df7afb0ab486636430f") (dependencies . (("base" #:version "6.5.0.2") "scheme-lib" "rackunit-lib" "zo-lib")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "compiler-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/compiler-lib.zip") (tags . ()))) ("draw-ppc-macosx" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for \"draw\" package") (implies . ()) (last-checked . 1522414383) (last-edit . 1452304685) (last-updated . 1502815914) (modules . ()) (name . "draw-ppc-macosx") (ring . 0) (search-terms . #hasheq((:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ()) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) (default . #hasheq((checksum . "552c18b393b3377b051da48aef8b8d6883615029") (source . "https://pkg-sources.racket-lang.org/pkgs/552c18b393b3377b051da48aef8b8d6883615029/draw-ppc-macosx.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/552c18b393b3377b051da48aef8b8d6883615029/draw-ppc-macosx.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("dbm" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dbm" "doc/dbm@dbm/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dbm.txt") (test-failure-log . "server/built/test-fail/dbm.txt") (test-success-log . #f))) (checksum . "5db7d6d0dc7c1d9256cfc62cced7050b11dd52a6") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "An interface to UNIX dbm files using a libdbm FFI") (implies . ()) (last-checked . 1522414377) (last-edit . 1354108626) (last-updated . 1502815888) (modules . ((lib "file/dbm/dbm.rkt") (lib "file/dbm/dbm.scrbl") (lib "file/dbm/test.rkt") (lib "file/dbm/dbm-ffi.rkt") (lib "file/dbm.rkt"))) (name . "dbm") (nix-sha256 . "18rcmgch0ldwwdwma8b7bjd3l6cfmfrfjc8n1c34212cwmh4vymh") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (db . #t) (ffi . #t) (ring:1 . #t))) (source . "github://github.com/jeapostrophe/dbm/master") (tags . ("db" "ffi")) (versions . #hash((default . #hasheq((checksum . "5db7d6d0dc7c1d9256cfc62cced7050b11dd52a6") (source . "github://github.com/jeapostrophe/dbm/master") (source_url . "http://github.com/jeapostrophe/dbm/tree/master"))))))) ("redex-pict-lib" . #hash((author . "robby@racket-lang.org bfetscher@racket-lang.org") (checksum . "e2368eeaac3cd36d539dd73803e0fa0257619c4f") (dependencies . ("scheme-lib" "base" "draw-lib" "data-lib" "profile-lib" "redex-lib" "pict-lib" "rackunit-lib")) (description . "robby@racket-lang.org bfetscher@racket-lang.org") (modules . ()) (name . "redex-pict-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/redex-pict-lib.zip") (tags . ()))) ("dan-scheme" . #hasheq((author . "david@davidchristiansen.dk") (authors . ("david@davidchristiansen.dk")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dan-scheme" "doc/dan-scheme@dan-scheme/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dan-scheme.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dan-scheme.txt"))) (checksum . "f24fdf3569b718449b7dd64a14f5c53311dea057") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "A very little language for situations where simplicity is desired over convenience") (implies . ()) (last-checked . 1522414372) (last-edit . 1484148866) (last-updated . 1502815879) (modules . ((lib "dan-scheme/test.rkt") (lib "dan-scheme/main.rkt") (lib "dan-scheme/scribblings/dan-scheme.scrbl"))) (name . "dan-scheme") (nix-sha256 . "0c7rm16srx98qzdnyv4p6w0w5wi2v35wsg29cdcggjhiicy6by5r") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:david@davidchristiansen.dk . #t) (ring:1 . #t))) (source . "git://github.com/david-christiansen/dan-scheme") (tags . ()) (versions . #hash((default . #hasheq((checksum . "f24fdf3569b718449b7dd64a14f5c53311dea057") (source . "git://github.com/david-christiansen/dan-scheme") (source_url . "http://github.com/david-christiansen/dan-scheme/tree/master"))))))) ("parsack" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "parsack" "doc/parsack@parsack/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parsack.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/parsack.txt"))) (checksum . "b45f0f5ed5f8dd3f1ccebaaec3204b27032843c6") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "A basic Parsec (Haskell's monadic parser combinator library) implementation.") (implies . ()) (last-checked . 1522414509) (last-edit . 1374792748) (last-updated . 1502816242) (modules . ((lib "parsack/examples/http-request-parser.rkt") (lib "parsack/examples/url-query-parser.rkt") (lib "parsack/examples/tests/json-parser-tests.rkt") (lib "parsack/examples/csv-parser-quoted.rkt") (lib "parsack/parsack.scrbl") (lib "parsack/tests/run-all-tests.rkt") (lib "parsack/tests/test-utils.rkt") (lib "parsack/examples/tests/http-request-parser-tests.rkt") (lib "parsack/tests/bytestring-tests.rkt") (lib "parsack/examples/csv-parser-sepBy.rkt") (lib "parsack/examples/tests/csv-parser-quoted-tests.rkt") (lib "parsack/parsack.rkt") (lib "parsack/examples/json-parser.rkt") (lib "parsack/main.rkt") (lib "parsack/examples/tests/json-perf-test.rkt") (lib "parsack/examples/tests/url-query-parser-tests.rkt") (lib "parsack/examples/scheme-parser.rkt") (lib "parsack/tests/parsack-tests.rkt") (lib "parsack/examples/tests/csv-parser-sepBy-tests.rkt") (lib "parsack/examples/csv-parser-basic.rkt") (lib "parsack/string-helpers.rkt") (lib "parsack/examples/tests/csv-parser-basic-tests.rkt") (lib "parsack/tests/parse-result-tests.rkt"))) (name . "parsack") (nix-sha256 . "05gv7pmcj0hfk42q1fjbz2l2lymv1m2azxrrq2scsfdwvfwz96xq") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:stchang@racket-lang.org . #t) (parsing . #t) (ring:1 . #t))) (source . "github://github.com/stchang/parsack/master/") (tags . ("parsing")) (versions . #hash((default . #hasheq((checksum . "b45f0f5ed5f8dd3f1ccebaaec3204b27032843c6") (source . "github://github.com/stchang/parsack/master/") (source_url . "http://github.com/stchang/parsack/tree/master/"))))))) ("rackdis" . #hasheq((author . "euler90h@gmail.com") (authors . ("euler90h@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rackdis" "doc/rackdis@rackdis/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackdis.txt") (test-failure-log . "server/built/test-fail/rackdis.txt") (test-success-log . #f))) (checksum . "975aeb46b6432d2359fb1c625f69ae5b97f450d1") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Redis bindings") (implies . ()) (last-checked . 1522414539) (last-edit . 1440124617) (last-updated . 1502816347) (modules . ((lib "rackdis/main.rkt") (lib "rackdis/test.rkt") (lib "rackdis/scribblings/rackdis.scrbl") (lib "rackdis/resp.rkt"))) (name . "rackdis") (nix-sha256 . "0qsrswz1dm1dsp0rd7b1257lpkr37cgg2mizzciy1317qh1fvfwb") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (Redis . #t) (author:euler90h@gmail.com . #t) (db . #t) (ring:1 . #t))) (source . "git://github.com/eu90h/rackdis") (tags . ("db" "Redis")) (versions . #hash((default . #hasheq((checksum . "975aeb46b6432d2359fb1c625f69ae5b97f450d1") (source . "git://github.com/eu90h/rackdis") (source_url . "http://github.com/eu90h/rackdis/tree/master"))))))) ("db-lib" . #hash((author . "ryanc@racket-lang.org") (checksum . "1058272a18f1c6785635653abe7852035b64b501") (dependencies . ("srfi-lite-lib" ("base" #:version "6.2.900.17") "unix-socket-lib" "sasl-lib")) (description . "ryanc@racket-lang.org") (modules . ()) (name . "db-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/db-lib.zip") (tags . ()))) ("argo" . #hasheq((author . "jesse@lisp.sh") (authors . ("jesse@lisp.sh")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "argo" "doc/argo@argo/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/argo.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/argo.txt"))) (checksum . "0c0a016b96b0ffbcbe8049808c0171932d60c1da") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "http" "sugar" "beautiful-racket-lib" "web-server-lib" "json-pointer" "uri-template" "scribble-lib" "racket-doc" "rackunit-lib" "beautiful-racket-lib")) (description . "Validate JSON data using JSON Schema.") (implies . ()) (last-checked . 1522417871) (last-edit . 1503942758) (last-updated . 1514696378) (modules . ((lib "argo/scribblings/command-pp.scrbl") (lib "argo/scribblings/running.scrbl") (lib "argo/format.rkt") (lib "argo/json.rkt") (lib "argo/pp.rkt") (lib "argo/scribblings/command-validate.scrbl") (lib "argo/ip.rkt") (lib "argo/scribblings/command-oneline.scrbl") (lib "argo/oneline.rkt") (lib "argo/schema.rkt") (lib "argo/regexp.rkt") (lib "argo/scribblings/installation.scrbl") (lib "argo/command.rkt") (lib "argo/scribblings/references.scrbl") (lib "argo/validate.rkt") (lib "argo/parse.rkt") (lib "argo/scribblings/argo.scrbl") (lib "argo/scribblings/command-equal.scrbl") (lib "argo/scribblings/limitations.scrbl") (lib "argo/scribblings/command-schema.scrbl") (lib "argo/util.rkt") (lib "argo/scribblings/technical.scrbl") (lib "argo/main.rkt") (lib "argo/resolve.rkt") (lib "argo/parameters.rkt") (lib "argo/tests/schema/negative/test.rkt") (lib "argo/scribblings/interface.scrbl") (lib "argo/scribblings/command-point.scrbl"))) (name . "argo") (nix-sha256 . "1cqpli1j0ralzn4g1jskr3sj0aa4zvn04jkdjmykxa1v4scx3vbf") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jesse@lisp.sh . #t) (data . #t) (json . #t) (ring:1 . #t) (validation . #t))) (source . "git://github.com/jessealama/argo") (tags . ("data" "json" "validation")) (versions . #hash((default . #hasheq((checksum . "0c0a016b96b0ffbcbe8049808c0171932d60c1da") (source . "git://github.com/jessealama/argo") (source_url . "http://github.com/jessealama/argo/tree/master"))))))) ("poppler-win32-i386" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/poppler-win32-i386.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/poppler-win32-i386.txt"))) (checksum . "e063f0463664e0fe4943135020826ff5bbbd3ce9") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for \"racket-poppler\" package") (implies . ()) (last-checked . 1522414534) (last-edit . 1409089839) (last-updated . 1502816310) (modules . ()) (name . "poppler-win32-i386") (nix-sha256 . "1wq635670nyzh5y46bd2hkv8vmizxxqfk30469flm8fvijrzb465") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jensaxel@soegaard.net . #t) (poppler . #t) (ring:1 . #t))) (source . "git://github.com/soegaard/poppler-libs?path=poppler-win32-i386") (tags . ("poppler")) (versions . #hash((default . #hasheq((checksum . "e063f0463664e0fe4943135020826ff5bbbd3ce9") (source . "git://github.com/soegaard/poppler-libs?path=poppler-win32-i386") (source_url . "http://github.com/soegaard/poppler-libs/tree/master?path=poppler-win32-i386"))))))) ("collections-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/collections-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/collections-lib.txt"))) (checksum . "5b3ec9b3ea3ca493f3fcda4994b81bc804f29870") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.3") "curly-fn-lib" ("functional-lib" #:version "0.3.1") "match-plus" "static-rename" "unstable-list-lib")) (description . "") (implies . ()) (last-checked . 1522414314) (last-edit . 1475261199) (last-updated . 1502812297) (modules . ((lib "data/collection/private/util.rkt") (lib "data/collection/sequence.rkt") (lib "data/collection/match.rkt") (lib "data/collection/countable.rkt") (lib "data/collection.rkt") (lib "data/collection/experimental/quasi.rkt") (lib "data/collection/private/random-access.rkt") (lib "data/collection/indexable.rkt") (lib "data/collection/contract.rkt") (lib "data/collection/collection.rkt"))) (name . "collections-lib") (nix-sha256 . "0vh781q0iw0wv1a741qp7s9havc030p5wahz6vcdhfn9azv00znp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-collections?path=collections-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "5b3ec9b3ea3ca493f3fcda4994b81bc804f29870") (source . "git://github.com/lexi-lambda/racket-collections?path=collections-lib") (source_url . "http://github.com/lexi-lambda/racket-collections/tree/master?path=collections-lib"))))))) ("Quaternion" . #hasheq((author . "andreas8001@hotmail.com") (authors . ("andreas8001@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "quaternion" "doc/quaternion@Quaternion/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/Quaternion.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/Quaternion.txt"))) (checksum . "96591d338f423f741f712150d0e20da93500f1e8") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "typed-racket-lib" "typed-racket-more" "math-lib" "typed-racket-doc" "racket-doc" "math-doc")) (description . "Quaternion procedures for rotation of vectors and koordinates, avoids gimbal-lock.") (implies . ()) (last-checked . 1522414538) (last-edit . 1507668291) (last-updated . 1507879815) (modules . ((lib "quaternion/quaternion.scrbl") (lib "quaternion/main.rkt") (lib "quaternion/quaternion.rkt"))) (name . "Quaternion") (nix-sha256 . "03pr0fk9lyyizdzxc7ilvgcdjcrccbnkb8jnhx0z9x0wyyv7cgmx") (ring . 2) (search-terms . #hasheq((3D . #t) (:build-success: . #t) (:docs: . #t) (author:andreas8001@hotmail.com . #t) (math . #t) (pict3d . #t) (quaternion . #t) (ring:2 . #t))) (source . "git://github.com/APOS80/Quaternion") (tags . ("3D" "math" "pict3d" "quaternion")) (versions . #hash((default . #hasheq((checksum . "96591d338f423f741f712150d0e20da93500f1e8") (source . "git://github.com/APOS80/Quaternion") (source_url . "http://github.com/APOS80/Quaternion/tree/master"))))))) ("backport-template-pr1514" . #hasheq((author . "georges.duperon@gmail.com") (authors . ("georges.duperon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "backport-template-pr1514" "doc/backport-template-pr1514@backport-template-pr1514/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/backport-template-pr1514.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/backport-template-pr1514.txt"))) (checksum . "d8e8913904737052b1fb576274f9679289f0db85") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Backports syntax-local-template-metafunction-introduce as a package, so that it can be used in older versions. Require backport-template-pr1514/experimental/template instead of syntax/parse/experimental/template to use it.") (implies . ()) (last-checked . 1522414288) (last-edit . 1500985887) (last-updated . 1502812277) (modules . ((lib "backport-template-pr1514/experimental/private/substitute.rkt") (lib "backport-template-pr1514/experimental/dset.rkt") (lib "backport-template-pr1514/main.rkt") (lib "backport-template-pr1514/experimental/template.rkt") (lib "backport-template-pr1514/scribblings/backport-template-pr1514.scrbl"))) (name . "backport-template-pr1514") (nix-sha256 . "1qyy8j1aqd1jlhzlqzik81v5psdfnylph15z2bqb3qm9bgyc42yw") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:georges.duperon@gmail.com . #t) (backport . #t) (ring:1 . #t) (syntax-parse . #t))) (source . "https://github.com/jsmaniac/backport-template-pr1514.git") (tags . ("backport" "syntax-parse")) (versions . #hash((default . #hasheq((checksum . "d8e8913904737052b1fb576274f9679289f0db85") (source . "https://github.com/jsmaniac/backport-template-pr1514.git") (source_url . "https://github.com/jsmaniac/backport-template-pr1514.git"))))))) ("medic" . #hasheq((author . "artlessu@gmail.com") (authors . ("artlessu@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "medic" "doc/medic@medic/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/medic.txt") (test-failure-log . "server/built/test-fail/medic.txt") (test-success-log . #f))) (checksum . "0920090d3c77d6873b8481841622a5f2d13a732c") (checksum-error . #f) (conflicts . ()) (dependencies . ("at-exp-lib" "base" "scheme-lib" "compatibility-lib" "gui-lib" "images-lib" "pict-lib" "draw-lib" "racket-doc" "scribble-lib" "redex-pict-lib")) (description . "A debugging tool for better printf") (implies . ()) (last-checked . 1522414434) (last-edit . 1422318926) (last-updated . 1502816176) (modules . ((lib "medic/trace-browser/time-slider.rkt") (lib "medic/demos/same/same-medic.rkt") (lib "medic/demos/aggregate/debug.rkt") (lib "medic/scribblings/demo.scrbl") (lib "medic/demos/factorial/fact.rkt") (lib "medic/scribblings/medic.scrbl") (lib "medic/trace-util.rkt") (lib "medic/trace-browser/tooltip.rkt") (lib "medic/demos/timeline-event/debug.rkt") (lib "medic/demos/demo2/debug.rkt") (lib "medic/demos/demo1/debug.rkt") (lib "medic/demos/find-path/debug.rkt") (lib "medic/demos/count-length/debug.rkt") (lib "medic/medic-structs.rkt") (lib "medic/demos/factorial/debug.rkt") (lib "medic/syntax-traversal.rkt") (lib "medic/trace-browser/graph-pasteboard.rkt") (lib "medic/demos/doubly-linked-list/doubly-linked-list-medic.rkt") (lib "medic/demos/demo4/src4.rkt") (lib "medic/insert.rkt") (lib "medic/trace-browser/scrub-slider.rkt") (lib "medic/trace.rkt") (lib "medic/demos/doubly-linked-list/doubly-linked-list.rkt") (lib "medic/demos/demo5/src5-medic.rkt") (lib "medic/demos/same/debug.rkt") (lib "medic/demos/demo5/src5.rkt") (lib "medic/demos/demo2/src2-medic.rkt") (lib "medic/demos/doubly-linked-list/debug.rkt") (lib "medic/trace-browser/browser.rkt") (lib "medic/demos/demo4/src4-medic.rkt") (lib "medic/trace-browser/log-text.rkt") (lib "medic/demos/timeline-event/event-medic.rkt") (lib "medic/trace-browser/aggregate-editor.rkt") (lib "medic/demos/count-length/count.rkt") (lib "medic/demos/timeline-event/se.rkt") (lib "medic/core.rkt") (lib "medic/trace-browser/timeline-canvas.rkt") (lib "medic/demos/aggregate/fact-iter.rkt") (lib "medic/main.rkt") (lib "medic/demos/demo5/f.rkt") (lib "medic/demos/demo2/src2.rkt") (lib "medic/demos/demo3/debug.rkt") (lib "medic/demos/demo3/src3-medic.rkt") (lib "medic/demos/demo5/debug.rkt") (lib "medic/demos/demo4/debug.rkt") (lib "medic/trace-browser/quadtree.rkt") (lib "medic/demos/factorial/fact-medic.rkt") (lib "medic/demos/find-path/find-path.rkt") (lib "medic/load-annotator.rkt") (lib "medic/demos/demo1/src1.rkt") (lib "medic/demos/find-path/find-path-medic.rkt") (lib "medic/demos/demo1/src1-medic.rkt") (lib "medic/demos/demo3/src3.rkt") (lib "medic/scribblings/language.scrbl") (lib "medic/demos/aggregate/fact-iter-medic.rkt") (lib "medic/demos/count-length/count-medic.rkt") (lib "medic/trace-browser/time-frame.rkt") (lib "medic/demos/same/same.rkt"))) (name . "medic") (nix-sha256 . "01as5556dkrxxfj3awff3a4d7z5hj8vnx5p182hmk5vmnlq5sj9w") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:artlessu@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lixiangqi/medic") (tags . ()) (versions . #hash((default . #hasheq((checksum . "0920090d3c77d6873b8481841622a5f2d13a732c") (source . "git://github.com/lixiangqi/medic") (source_url . "http://github.com/lixiangqi/medic/tree/master"))))))) ("simply-scheme" . #hasheq((author . "clements@racket-lang.org dyoo@hashcollision.org") (authors . ("clements@racket-lang.org" "dyoo@hashcollision.org")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (("extract" "manual" "doc/manual@simply-scheme/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/simply-scheme.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/simply-scheme.txt"))) (checksum . "8b8ba2b50d8688c0db30a772c5eac7bb2f6400a7") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "drracket-plugin-lib" "gui-lib" "string-constants-lib" "racket-doc" "sandbox-lib" "scribble-lib")) (description . "Danny Yoo's \"Simply Scheme\" package, allowing the use of Racket for the \"Simply Scheme\" curriculum") (implies . ()) (last-checked . 1522414679) (last-edit . 1508730653) (last-updated . 1508778723) (modules . ((lib "simply-scheme/lang/reader.rkt") (lib "simply-scheme/manual.scrbl") (lib "simply-scheme/simply-scheme.rkt") (lib "simply-scheme/tool.rkt") (lib "simply-scheme/private/check-bound.rkt") (lib "simply-scheme/main.rkt"))) (name . "simply-scheme") (nix-sha256 . "0zm1m28j301yf72c0iwclqqzbnjwcl4d59ladw35h2ys46p6g48f") (ring . 2) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:docs-error: . #t) (:docs: . #t) (:no-tag: . #t) (author:clements@racket-lang.org . #t) (author:dyoo@hashcollision.org . #t) (ring:2 . #t))) (source . "git://github.com/jbclements/simply-scheme") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8b8ba2b50d8688c0db30a772c5eac7bb2f6400a7") (source . "git://github.com/jbclements/simply-scheme") (source_url . "http://github.com/jbclements/simply-scheme/tree/master"))))))) ("ralist" . #hasheq((author . "dvanhorn@racket-lang.org") (authors . ("dvanhorn@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ralist" "doc/ralist@ralist/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ralist.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ralist.txt"))) (checksum . "c197119c46f37b29bffa2ed8bc4a2b82ca2beb92") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "rackunit-doc" "scribble-lib" "racket-doc" "rackunit-doc")) (description . "Purely Functional Random Access Lists") (implies . ()) (last-checked . 1522414665) (last-edit . 1354594625) (last-updated . 1513624598) (modules . ((lib "data/ralist.rkt") (lib "data/ralist/benchmarks/ra-list.rkt") (lib "data/ralist/tests/ra-list.rkt") (lib "data/ralist/benchmarks/garden-fence.rkt") (lib "data/ralist/scribblings/bindings.scrbl") (lib "data/ralist/scribblings/run-tests.scrbl") (lib "data/ralist/scribblings/ralist.scrbl") (lib "data/ralist/scribblings/run-benchmarks.scrbl") (lib "data/ralist/contract.rkt") (lib "data/ralist/benchmarks/contract.rkt") (lib "data/ralist/run-tests.rkt") (lib "data/ralist/tests/private/ra-list-uncontracted.rkt") (lib "data/ralist/tests/freq-count.rkt") (lib "data/ralist/tests/private/ra-list-contracted.rkt") (lib "data/ralist/run-benchmarks.rkt") (lib "data/ralist/benchmarks/freq-count.rkt") (lib "data/ralist/tests/garden-fence.rkt") (lib "data/ralist/scribblings/contract.scrbl") (lib "data/ralist/tests/tree.rkt"))) (name . "ralist") (nix-sha256 . "01hk51hg17r0ybrl8wivw5r2y9bj1n4p0z58xx36jyqc4hzwxs05") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dvanhorn@racket-lang.org . #t) (data . #t) (ring:1 . #t))) (source . "github://github.com/dvanhorn/ralist/master") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "c197119c46f37b29bffa2ed8bc4a2b82ca2beb92") (source . "github://github.com/dvanhorn/ralist/master") (source_url . "http://github.com/dvanhorn/ralist/tree/master"))))))) ("testing-util-lib" . #hash((author . "florence@racket-lang.org") (checksum . "1112804826cb2106dcd195cde2ee3d7f60ce6586") (dependencies . ("base")) (description . "florence@racket-lang.org") (modules . ()) (name . "testing-util-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/testing-util-lib.zip") (tags . ()))) ("redex-aam-tutorial" . #hasheq((author . "dvanhorn@racket-lang.org") (authors . ("dvanhorn@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/redex-aam-tutorial.txt") (docs . (("main" "tutorial" "doc/tutorial@redex-aam-tutorial/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/redex-aam-tutorial.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/redex-aam-tutorial.txt"))) (checksum . "26b15183c827fe2390fdab7aa692548c3637bfb0") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "redex-lib" "scheme-lib" "scribble-lib" "redex-gui-lib" "sandbox-lib")) (description . "A brief introduction to the Redex  and Abstracting Abstract Machines.") (implies . ()) (last-checked . 1522414667) (last-edit . 1511547178) (last-updated . 1511676496) (modules . ((lib "redex-aam-tutorial/tutorial.rkt") (lib "redex-aam-tutorial/shared.rkt") (lib "redex-aam-tutorial/ex.rkt") (lib "redex-aam-tutorial/tutorial.scrbl") (lib "redex-aam-tutorial/subst.rkt") (lib "redex-aam-tutorial/counter.rkt") (lib "redex-aam-tutorial/bib.rkt"))) (name . "redex-aam-tutorial") (nix-sha256 . "01jhgh6ai3q1fswkfwqglbkd0vdjx24pjarznb3wfqv0nwgxv9hi") (ring . 2) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:dvanhorn@racket-lang.org . #t) (redex . #t) (ring:2 . #t))) (source . "https://github.com/dvanhorn/redex-aam-tutorial.git") (tags . ("redex")) (versions . #hash((default . #hasheq((checksum . "26b15183c827fe2390fdab7aa692548c3637bfb0") (source . "https://github.com/dvanhorn/redex-aam-tutorial.git") (source_url . "https://github.com/dvanhorn/redex-aam-tutorial.git"))))))) ("mzcom" . #hash((author . "mflatt@racket-lang.org") (checksum . "f67f4ca73b6c8918f0cf0fb446029c176a5c2197") (dependencies . ("base" "compatibility-lib" "scheme-lib" "racket-doc" "mysterx" "scribble-lib")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "mzcom") (source . "https://download.racket-lang.org/releases/6.12/pkgs/mzcom.zip") (tags . ()))) ("javascript" . #hasheq((author . "samth@racket-lang.org") (authors . ("samth@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "javascript" "doc/javascript@javascript/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/javascript.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/javascript.txt"))) (checksum . "cd5eba471fef243a1103762cdfa774dbdbc1aec1") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "drracket-plugin-lib" "gui-lib" "parameter" "parser-tools-lib" "planet-lib" "scheme-lib" "set" "srfi-lite-lib" "string-constants-lib" "unstable-contract-lib" "pprint" "in-new-directory" "parser-tools-doc" "racket-doc" "rackunit-lib" "scribble-lib" "unstable-doc")) (description . "An implementation of JavaScript") (implies . ()) (last-checked . 1522414421) (last-edit . 1451684329) (last-updated . 1502816142) (modules . ((lib "javascript/scribblings/parse.scrbl") (lib "javascript/private/runtime/value.rkt") (lib "javascript/private/config.rkt") (lib "javascript/parse.rkt") (lib "javascript/drscheme/debug-console.rkt") (lib "javascript/private/compiler/hoist.rkt") (lib "javascript/private/syntax/exceptions.rkt") (lib "javascript/private/runtime/runtime.rkt") (lib "javascript/private/tests/pretty-print.rkt") (lib "javascript/ast.rkt") (lib "javascript/runtime.rkt") (lib "javascript/private/runtime/operator.rkt") (lib "javascript/private/syntax/lex.rkt") (lib "javascript/private/syntax/cursor.rkt") (lib "javascript/drscheme/tool.rkt") (lib "javascript/private/tests/array.rkt") (lib "javascript/private/syntax/syntax.rkt") (lib "javascript/private/syntax/regexps.rkt") (lib "javascript/scribblings/runtime.scrbl") (lib "javascript/private/syntax/abstract-regexps.rkt") (lib "javascript/debug.rkt") (lib "javascript/pjs.rkt") (lib "javascript/config.rkt") (lib "javascript/drscheme/syntax-color.rkt") (lib "javascript/private/runtime/standard-library.rkt") (lib "javascript/private/syntax/parse.rkt") (lib "javascript/scribblings/history.scrbl") (lib "javascript/lang/reader.rkt") (lib "javascript/private/compiler/hoist-monad.rkt") (lib "javascript/main.rkt") (lib "javascript/private/syntax/token.rkt") (lib "javascript/scribblings/javascript.scrbl") (lib "javascript/scribblings/config.scrbl") (lib "javascript/scribblings/eval.scrbl") (lib "javascript/private/runtime/object.rkt") (lib "javascript/scribblings/ast.scrbl") (lib "javascript/private/runtime/namespace.rkt") (lib "javascript/private/compiler/helpers.rkt") (lib "javascript/compile.rkt") (lib "javascript/private/tests/util.rkt") (lib "javascript/private/runtime/exceptions.rkt") (lib "javascript/private/compiler/context.rkt") (lib "javascript/scribblings/compile.scrbl") (lib "javascript/print.rkt") (lib "javascript/private/evector.rkt") (lib "javascript/private/tests/parse.rkt") (lib "javascript/private/runtime/gui-library.rkt") (lib "javascript/scribblings/pjs.scrbl") (lib "javascript/scribblings/intro.scrbl") (lib "javascript/eval.rkt") (lib "javascript/scribblings/utils.rkt") (lib "javascript/lang/lang.rkt") (lib "javascript/lang/module.rkt") (lib "javascript/private/tests/eval.rkt") (lib "javascript/private/syntax/ast-core.rkt") (lib "javascript/scribblings/print.scrbl") (lib "javascript/private/tests/test.rkt") (lib "javascript/private/syntax/input.rkt") (lib "javascript/drscheme/module-forms.rkt") (lib "javascript/private/runtime/native.rkt") (lib "javascript/private/compiler/compile.rkt") (lib "javascript/private/planet.rkt") (lib "javascript/private/syntax/ast-utils.rkt"))) (name . "javascript") (nix-sha256 . "02pw5ywpyllbx74b2f72vnj1n99d1lym1ffpjziszd7hdyazgwx0") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:samth@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/samth/javascript.plt") (tags . ()) (versions . #hash((default . #hasheq((checksum . "cd5eba471fef243a1103762cdfa774dbdbc1aec1") (source . "git://github.com/samth/javascript.plt") (source_url . "http://github.com/samth/javascript.plt/tree/master"))))))) ("plot-doc" . #hash((author . "ntoronto@racket-lang.org") (checksum . "170581bc9986a932d0c0a0d71e0200969f341942") (dependencies . ("base" "plot-lib" "plot-gui-lib" "db-doc" "db-lib" "draw-doc" "draw-lib" "gui-doc" "gui-lib" "pict-doc" "pict-lib" "plot-compat" "racket-doc" "scribble-lib" "slideshow-doc" "slideshow-lib" "srfi-doc")) (description . "ntoronto@racket-lang.org") (modules . ()) (name . "plot-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/plot-doc.zip") (tags . ()))) ("fancy-app" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "fancy-app" "doc/fancy-app@fancy-app/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fancy-app.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fancy-app.txt"))) (checksum . "d137c55d5d29f4bc0dd2c8f316dc30521c1cb592") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "Scala-style anonymous functions") (implies . ()) (last-checked . 1522414400) (last-edit . 1410271467) (last-updated . 1503265114) (modules . ((lib "fancy-app/main.scrbl") (lib "fancy-app/main.rkt"))) (name . "fancy-app") (nix-sha256 . "0jx4qa449ysz9li19gg6mhg070hyvp7lrvcva8337r1nc1bakdxc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:samth@ccs.neu.edu . #t) (ring:1 . #t) (syntax . #t))) (source . "github://github.com/samth/fancy-app/master") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "d137c55d5d29f4bc0dd2c8f316dc30521c1cb592") (source . "github://github.com/samth/fancy-app/master") (source_url . "http://github.com/samth/fancy-app/tree/master"))))))) ("anaphoric" . #hasheq((author . "georges.duperon@gmail.com ") (authors . ("georges.duperon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "anaphoric" "doc/anaphoric@anaphoric/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/anaphoric.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/anaphoric.txt"))) (checksum . "2afaf908032c1df2111b61e82c728e8a31173cf7") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Anaphoric versions of `if`, `when` and `cond`. They bind the value of the condition expression to `it`.") (implies . ()) (last-checked . 1522417870) (last-edit . 1460111353) (last-updated . 1517055373) (modules . ((lib "anaphoric/test/if-let-test.rkt") (lib "anaphoric/scribblings/anaphoric.scrbl") (lib "anaphoric/test/when-let-test.rkt") (lib "anaphoric/awhen.rkt") (lib "anaphoric/acond.rkt") (lib "anaphoric/test/aif-test.rkt") (lib "anaphoric/aand.rkt") (lib "anaphoric/test/cond-let-test.rkt") (lib "anaphoric/cond-let.rkt") (lib "anaphoric/and-let.rkt") (lib "anaphoric/test/acond-test.rkt") (lib "anaphoric/it.rkt") (lib "anaphoric/test/awhen-test.rkt") (lib "anaphoric/if-let.rkt") (lib "anaphoric/main.rkt") (lib "anaphoric/aif.rkt") (lib "anaphoric/when-let.rkt"))) (name . "anaphoric") (nix-sha256 . "0lxrmaxvk77l7vrvfasdjrlrpy8vr98lbabi1vpg79wa2j9r7msd") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:georges.duperon@gmail.com . #t) (ring:1 . #t) (utility . #t))) (source . "git://github.com/jsmaniac/anaphoric") (tags . ("utility")) (versions . #hash((default . #hasheq((checksum . "2afaf908032c1df2111b61e82c728e8a31173cf7") (source . "git://github.com/jsmaniac/anaphoric") (source_url . "http://github.com/jsmaniac/anaphoric/tree/master"))))))) ("icfp2017-minikanren" . #hasheq((author . "alexander@knauth.org greg.weiqi@gmail.com") (authors . ("alexander@knauth.org" "greg.weiqi@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/icfp2017-minikanren.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/icfp2017-minikanren.txt"))) (checksum . "7273fd537cec87aa68b7180f4fe064f15a506ac1") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "r6rs-lib")) (description . "A racket port of the version of minikanren from the artifact of the ICFP 2017 Pearl, A Unified Approach to Solving Seven Programming Problems by William E. Byrd, Michael Ballantyne, Gregory Rosenblatt, and Matthew Might. Includes evalo-optimized.") (implies . ()) (last-checked . 1522414419) (last-edit . 1508085965) (last-updated . 1517807908) (modules . ((lib "icfp2017-minikanren/mk/test-type-infer.rkt") (lib "icfp2017-minikanren/mk/test-all.rkt") (lib "icfp2017-minikanren/mk/test-quines.rkt") (lib "icfp2017-minikanren/intro-examples.rkt") (lib "icfp2017-minikanren/mk/test-arithmetic.rkt") (lib "icfp2017-minikanren/mk/type-infer.rkt") (lib "icfp2017-minikanren/mk/mk.rkt") (lib "icfp2017-minikanren/evalo-standard.rkt") (lib "icfp2017-minikanren/mk/test-check.rkt") (lib "icfp2017-minikanren/evalo-scoping.rkt") (lib "icfp2017-minikanren/racket-scheme-compat/specialized-scheme-compat.rkt") (lib "icfp2017-minikanren/evalo-small.rkt") (lib "icfp2017-minikanren/evalo-optimized.rkt") (lib "icfp2017-minikanren/mk/evalo.rkt") (lib "icfp2017-minikanren/mk/test-interp.rkt") (lib "icfp2017-minikanren/mk/arithmetic.rkt") (lib "icfp2017-minikanren/racket-scheme-compat/lang/reader.rkt"))) (name . "icfp2017-minikanren") (nix-sha256 . "17viawc561fhc59gj8asnbm6ajdbqrw49sljcw16380dqladmsdm") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (author:greg.weiqi@gmail.com . #t) (logic . #t) (ring:2 . #t))) (source . "git://github.com/AlexKnauth/icfp2017-artifact-auas7pp?path=src#racket") (tags . ("logic")) (versions . #hash((default . #hasheq((checksum . "7273fd537cec87aa68b7180f4fe064f15a506ac1") (source . "git://github.com/AlexKnauth/icfp2017-artifact-auas7pp?path=src#racket") (source_url . "http://github.com/AlexKnauth/icfp2017-artifact-auas7pp/tree/master?path=src#racket"))))))) ("logbook" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/logbook.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "6772003b5e8663426559d245451b82ec748c07c7") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "plot-gui-lib" "plot-lib" "web-server-lib" "csv-reading")) (description . "Tool for recording a database of experimental results") (implies . ()) (last-checked . 1522414425) (last-edit . 1482289778) (last-updated . 1502816159) (modules . ((lib "logbook/private/raco-logbook-serve.rkt") (lib "logbook/private/raco-logbook.rkt") (lib "logbook/main.rkt") (lib "logbook/private/raco-logbook-launcher.rkt") (lib "logbook/notes.rkt") (lib "logbook/plot-utils.rkt") (lib "logbook/store.rkt") (lib "logbook/machine-info.rkt") (lib "logbook/private/raco-logbook-plot.rkt") (lib "logbook/export.rkt"))) (name . "logbook") (nix-sha256 . "080rapi6hbsi8baw3wi1xhawgyfmplaqb5nlak2awcsgdjwkddf8") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/tonyg/racket-logbook") (tags . ()) (versions . #hash((default . #hasheq((checksum . "6772003b5e8663426559d245451b82ec748c07c7") (source . "git://github.com/tonyg/racket-logbook") (source_url . "http://github.com/tonyg/racket-logbook/tree/master"))))))) ("disposable-test" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/disposable-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/disposable-test.txt"))) (checksum . "843d3e224fd874b9c463b74cb5ef13d8a0b5766a") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" ("disposable" #:version "0.2") "doc-coverage" "fixture" "rackunit-lib")) (description . "Tests for the \"disposable\" package") (implies . ("disposable")) (last-checked . 1522414380) (last-edit . 1502812668) (last-updated . 1509166857) (modules . ((lib "disposable/tests/main.rkt") (lib "disposable/tests/transient.rkt") (lib "disposable/tests/util.rkt") (lib "disposable/tests/testing.rkt") (lib "disposable/tests/pool.rkt") (lib "disposable/tests/file.rkt"))) (name . "disposable-test") (nix-sha256 . "1dbh2nrknlbq9cy9h3hhyc21xix33ck84zxw915y3yvmm7klxbk2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jackhfirth@gmail.com . #t) (concurrency . #t) (disposable . #t) (experimental . #t) (io . #t) (ring:1 . #t) (tests . #t))) (source . "git://github.com/jackfirth/racket-disposable?path=disposable-test") (tags . ("concurrency" "disposable" "experimental" "io" "tests")) (versions . #hash((default . #hasheq((checksum . "843d3e224fd874b9c463b74cb5ef13d8a0b5766a") (source . "git://github.com/jackfirth/racket-disposable?path=disposable-test") (source_url . "http://github.com/jackfirth/racket-disposable/tree/master?path=disposable-test"))))))) ("pie" . #hasheq((author . "david@davidchristiansen.dk dfried00@gmail.com") (authors . ("david@davidchristiansen.dk" "dfried00@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pie" "doc/pie@pie/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pie.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pie.txt"))) (checksum . "ce463246ed61de7d13cb10a72dac47f20f1880f3") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.5") "data-lib" "gui-lib" "slideshow-lib" "pict-lib" "typed-racket-lib" "typed-racket-more" "parser-tools-lib" "syntax-color-lib" "todo-list" "scribble-lib" "racket-doc" "sandbox-lib")) (description . "The Pie language, used in The Little Typer") (implies . ()) (last-checked . 1522414513) (last-edit . 1515171354) (last-updated . 1521481414) (modules . ((lib "pie/pie-info.rkt") (lib "pie/main.rkt") (lib "pie/parser.rkt") (lib "pie/typechecker.rkt") (lib "pie/pie.scrbl") (lib "pie/alpha.rkt") (lib "pie/resugar.rkt") (lib "pie/pie-err.rkt") (lib "pie/gui/pie-styles.rkt") (lib "pie/pretty.rkt") (lib "pie/normalize.rkt") (lib "pie/rep.rkt") (lib "pie/tooltip.rkt") (lib "pie/serialization.rkt") (lib "pie/basics.rkt") (lib "pie/tests.rkt") (lib "pie/gui/main.rkt") (lib "pie/gui/print-gui.rkt") (lib "pie/fresh.rkt") (lib "pie/gui/pie-lexer.rkt") (lib "pie/locations.rkt") (lib "pie/interactive-editing.rkt") (lib "pie/slideshow.rkt"))) (name . "pie") (nix-sha256 . "1vvs6vq1s6y0mlzxdwnv6h55l1pdw4pzv4ja1adr7vghx7g17xb3") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:david@davidchristiansen.dk . #t) (author:dfried00@gmail.com . #t) (lang . #t) (language . #t) (ring:2 . #t) (types . #t))) (source . "https://github.com/the-little-typer/pie.git") (tags . ("lang" "language" "types")) (versions . #hash((default . #hasheq((checksum . "ce463246ed61de7d13cb10a72dac47f20f1880f3") (source . "https://github.com/the-little-typer/pie.git") (source_url . "https://github.com/the-little-typer/pie.git"))))))) ("multi-file-lang" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "multi-file-lang" "doc/multi-file-lang@multi-file-lang/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/multi-file-lang.txt") (test-failure-log . "server/built/test-fail/multi-file-lang.txt") (test-success-log . #f))) (checksum . "c75ab36d3fd7ac43dc3c899a579e479cb96fc156") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "lang-file" "rackunit-lib" "typed-racket-lib" "scribble-lib" "racket-doc")) (description . "a #lang language for multiple files in one") (implies . ()) (last-checked . 1522414437) (last-edit . 1501823181) (last-updated . 1512688042) (modules . ((lib "multi-file/scribblings/multi-file-lang.scrbl") (lib "multi-file/lang/reader.rkt") (lib "multi-file/tests/multi-test.rkt") (lib "multi-file/lang.rkt") (lib "multi-file/tests/d.rkt"))) (name . "multi-file-lang") (nix-sha256 . "116zghm8285f60pirl8rga0h1liwwwbkvdzli6kriaghw3klhz3f") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (lang . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/multi-file-lang") (tags . ("lang")) (versions . #hash((default . #hasheq((checksum . "c75ab36d3fd7ac43dc3c899a579e479cb96fc156") (source . "git://github.com/AlexKnauth/multi-file-lang") (source_url . "http://github.com/AlexKnauth/multi-file-lang/tree/master"))))))) ("sudo" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sudo" "doc/sudo@sudo/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sudo.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sudo.txt"))) (checksum . "b0fdd9113b261b7e117773be749e9c198f12f47d") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "overeasy")) (description . "Sudo Command Processes") (implies . ()) (last-checked . 1522414685) (last-edit . 1456469637) (last-updated . 1502816460) (modules . ((lib "sudo/sudo.scrbl") (lib "sudo/main.rkt"))) (name . "sudo") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:neil@neilvandyke.org . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/sudo.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b0fdd9113b261b7e117773be749e9c198f12f47d") (source . "http://www.neilvandyke.org/racket/sudo.zip") (source_url . "http://www.neilvandyke.org/racket/sudo.zip"))))))) ("gui-win32-x86_64" . #hash((author . "mflatt@racket-lang.org") (checksum . "ab70d5a9687dcc1e507b0c2a19aa7df4ea3deef3") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "gui-win32-x86_64") (source . "https://download.racket-lang.org/releases/6.12/pkgs/gui-win32-x86_64.zip") (tags . ()))) ("java-lexer" . #hasheq((author . "stamourv@racket-lang.org") (authors . ("stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/java-lexer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/java-lexer.txt"))) (checksum . "83e12122919d4582d63bea5b051cbeab6ee32c57") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "profj" "scribble-lib")) (description . "Java syntax highlighting for Scribble.") (implies . ()) (last-checked . 1522414421) (last-edit . 1422290537) (last-updated . 1502816142) (modules . ((lib "java-lexer/lang/reader.rkt") (lib "java-lexer/main.rkt"))) (name . "java-lexer") (nix-sha256 . "1a5dapfl7bwm2cqxgzlbv65ympgr19rmr530z4nzw0mmfbz2hzrp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:stamourv@racket-lang.org . #t) (java . #t) (ring:1 . #t) (scribble . #t))) (source . "git://github.com/stamourv/java-lexer") (tags . ("java" "scribble")) (versions . #hash((default . #hasheq((checksum . "83e12122919d4582d63bea5b051cbeab6ee32c57") (source . "git://github.com/stamourv/java-lexer") (source_url . "http://github.com/stamourv/java-lexer/tree/master"))))))) ("rmacs" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rmacs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rmacs.txt"))) (checksum . "a6017a0995084d94614b166d5bc870af574712a3") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "ansi" "syntax-color-lib" "gui-lib" "unix-signals" "web-server-lib" "profile-lib" "rackunit-lib")) (description . "An EMACS written in Racket. Runs in ANSI-compatible terminals.") (implies . ()) (last-checked . 1522414671) (last-edit . 1420183943) (last-updated . 1502816403) (modules . ((lib "rmacs/keys.rkt") (lib "rmacs/syntax.rkt") (lib "rmacs/wrap.rkt") (lib "rmacs/timing.rkt") (lib "rmacs/history.rkt") (lib "rmacs/buffer.rkt") (lib "rmacs/lists.rkt") (lib "rmacs/local.rkt") (lib "rmacs/strings.rkt") (lib "rmacs/diff.rkt") (lib "rmacs/main.rkt") (lib "rmacs/display-terminal.rkt") (lib "rmacs/colorize.rkt") (lib "rmacs/ring.rkt") (lib "rmacs/circular-list.rkt") (lib "rmacs/display.rkt") (lib "rmacs/render.rkt") (lib "rmacs/mode.rkt") (lib "rmacs/file.rkt") (lib "rmacs/topsort.rkt") (lib "rmacs/api.rkt") (lib "rmacs/display-gui-check.rkt") (lib "rmacs/mode/fundamental.rkt") (lib "rmacs/display-gui.rkt") (lib "rmacs/editor.rkt") (lib "rmacs/window.rkt") (lib "rmacs/minibuf.rkt") (lib "rmacs/rope.rkt") (lib "rmacs/search.rkt"))) (name . "rmacs") (nix-sha256 . "090kzxyiwsqsflhpyzalm6a9ll64yla0rjnv5wvqv5626xsfpwya") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:tonygarnockjones@gmail.com . #t) (editor . #t) (ring:1 . #t) (terminal . #t))) (source . "github://github.com/tonyg/rmacs/master") (tags . ("editor" "terminal")) (versions . #hash((default . #hasheq((checksum . "a6017a0995084d94614b166d5bc870af574712a3") (source . "github://github.com/tonyg/rmacs/master") (source_url . "http://github.com/tonyg/rmacs/tree/master"))))))) ("simple-http" . #hasheq((author . "info@v25media.com") (authors . ("info@v25media.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "simple-http" "doc/simple-http@simple-http/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/simple-http.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/simple-http.txt"))) (checksum . "6f7d91bb03f93b654a5a0482e8b9c1b729fed31c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "html-parsing" "scribble-lib" "racket-doc")) (description . "Very small lib for making HTTP requests, usually to APIs.") (implies . ()) (last-checked . 1522414679) (last-edit . 1494770663) (last-updated . 1520556811) (modules . ((lib "simple-http/main.rkt") (lib "simple-http/scribblings/simple-http.scrbl"))) (name . "simple-http") (nix-sha256 . "13i8n9q6v6f0lzx547bfdbf5yrggmahfcvalgncbi35qwf9v9p9i") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:info@v25media.com . #t) (http . #t) (net . #t) (ring:1 . #t))) (source . "git://github.com/DarrenN/simple-http") (tags . ("http" "net")) (versions . #hash((default . #hasheq((checksum . "6f7d91bb03f93b654a5a0482e8b9c1b729fed31c") (source . "git://github.com/DarrenN/simple-http") (source_url . "http://github.com/DarrenN/simple-http/tree/master"))))))) ("plt-web-lib" . #hash((author . "eli@racket-lang.org mflatt@racket-lang.org samth@racket-lang.org") (checksum . "d65a2b1fd200c389678d1f4a176bc2a5f1c8189f") (dependencies . ("base" "at-exp-lib" "scribble-html-lib")) (description . "eli@racket-lang.org mflatt@racket-lang.org samth@racket-lang.org") (modules . ()) (name . "plt-web-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/plt-web-lib.zip") (tags . ()))) ("operational-transformation-demo" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/operational-transformation-demo.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/operational-transformation-demo.txt"))) (checksum . "88b2f0370b945814135cff01fac9c714a5558ab0") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "operational-transformation-lib" "gui-lib")) (description . "Demo collaborative editor using Operational Transformation (OT).") (implies . ()) (last-checked . 1522414508) (last-edit . 1469237883) (last-updated . 1502816237) (modules . ((lib "operational-transformation-demo/client.rkt") (lib "operational-transformation-demo/server.rkt") (lib "operational-transformation-demo/multiserver.rkt") (lib "operational-transformation-demo/multiclient.rkt"))) (name . "operational-transformation-demo") (nix-sha256 . "03k215288mlv0bapy5frg80xwvlw54lrns0ffg4x0s0jzl038bxf") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/tonyg/racket-operational-transformation?path=operational-transformation-demo") (tags . ()) (versions . #hash((default . #hasheq((checksum . "88b2f0370b945814135cff01fac9c714a5558ab0") (source . "git://github.com/tonyg/racket-operational-transformation?path=operational-transformation-demo") (source_url . "http://github.com/tonyg/racket-operational-transformation/tree/master?path=operational-transformation-demo"))))))) ("semilit" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/semilit.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/semilit.txt"))) (checksum . "51a4c9d2bc1d2307a732c488745b7d2cdda22f98") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "datalog" "scribble-lib")) (description . "Semi-literate programming for any Racket language") (implies . ()) (last-checked . 1522414677) (last-edit . 1353018353) (last-updated . 1502816423) (modules . ((lib "semilit/main.rkt") (lib "semilit/scribble-example.rkt") (lib "semilit/example.rkt") (lib "semilit/ancestor.rkt"))) (name . "semilit") (nix-sha256 . "1fas98gwfav7janmaz2svz1ld8g607z8pbvvvqv4ky1ch8s7ngsf") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (dev . #t) (documentation . #t) (language . #t) (ring:1 . #t))) (source . "github://github.com/samth/semilit/master") (tags . ("dev" "documentation" "language")) (versions . #hash((default . #hasheq((checksum . "51a4c9d2bc1d2307a732c488745b7d2cdda22f98") (source . "github://github.com/samth/semilit/master") (source_url . "http://github.com/samth/semilit/tree/master"))))))) ("racket-cord" . #hasheq((author . "ben@bensimms.moe") (authors . ("ben@bensimms.moe")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "racket-cord" "doc/racket-cord@racket-cord/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-cord.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-cord.txt"))) (checksum . "463568de9a356782a0ff5d34d00022b25ae4aa32") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "simple-http" "rfc6455" "rackunit-lib" "html-parsing" "srfi-lite-lib" "scribble-lib" "racket-doc")) (description . "Racket bindings for discord.") (implies . ()) (last-checked . 1522414556) (last-edit . 1509839705) (last-updated . 1510783006) (modules . ((lib "racket-cord/patched-simple-http.rkt") (lib "racket-cord/http.rkt") (lib "racket-cord/gateway.rkt") (lib "racket-cord/events.rkt") (lib "racket-cord/data.rkt") (lib "racket-cord/scribblings/racket-cord.scrbl") (lib "racket-cord/main.rkt") (lib "racket-cord/utils.rkt"))) (name . "racket-cord") (nix-sha256 . "1326cmwcg9yav68mw6jag4iwfpa18105wy7wr7y9pism9gx9232f") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ben@bensimms.moe . #t) (discord . #t) (http . #t) (net . #t) (ring:2 . #t))) (source . "https://github.com/nitros12/racket-cord.git") (tags . ("discord" "http" "net")) (versions . #hash((default . #hasheq((checksum . "463568de9a356782a0ff5d34d00022b25ae4aa32") (source . "https://github.com/nitros12/racket-cord.git") (source_url . "https://github.com/nitros12/racket-cord.git"))))))) ("string-constants" . #hash((author . "robby@racket-lang.org") (checksum . "a7e7cb3b7c490de1754416c390b9ef34e82daed0") (dependencies . ("string-constants-lib" "string-constants-doc")) (description . "robby@racket-lang.org") (modules . ()) (name . "string-constants") (source . "https://download.racket-lang.org/releases/6.12/pkgs/string-constants.zip") (tags . ()))) ("profile-test" . #hash((author . "eli@racket-lang.org") (checksum . "9acfa7efc207aa463af7ff654aebf4c9bd78758d") (dependencies . ("base" "eli-tester" "profile-lib")) (description . "eli@racket-lang.org") (modules . ()) (name . "profile-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/profile-test.zip") (tags . ()))) ("draw-ppc-macosx-2" . #hash((author . "mflatt@racket-lang.org") (checksum . "a43d692bb9dabf1d18e215eefe5f65d50ae560a2") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "draw-ppc-macosx-2") (source . "https://download.racket-lang.org/releases/6.12/pkgs/draw-ppc-macosx-2.zip") (tags . ()))) ("point-free" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "point-free" "doc/point-free@point-free/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/point-free.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/point-free.txt"))) (checksum . "d294a342466d5071dd2c8f16ba9e50f9006b54af") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "doc-coverage" "cover" "doc-coverage" "scribble-lib" "rackunit-lib" "racket-doc")) (description . "A library for easier and more powerful function composition") (implies . ()) (last-checked . 1522414533) (last-edit . 1500077286) (last-updated . 1511370592) (modules . ((lib "point-free/definition-forms.rkt") (lib "point-free/thrush.rkt") (lib "point-free/module-doc-test.rkt") (lib "point-free/arg-count-syntax.rkt") (lib "point-free/fixpoint.rkt") (lib "point-free/main.rkt") (lib "point-free/point-free.scrbl") (lib "point-free/parallel-composition.rkt"))) (name . "point-free") (nix-sha256 . "043p1zrvidw3mv6qmwkyr36hdsdbb1wwaw3fbv2ghn4fwd2wglir") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (functional . #t) (ring:1 . #t))) (source . "git://github.com/jackfirth/point-free") (tags . ("functional")) (versions . #hash((default . #hasheq((checksum . "d294a342466d5071dd2c8f16ba9e50f9006b54af") (source . "git://github.com/jackfirth/point-free") (source_url . "http://github.com/jackfirth/point-free/tree/master"))))))) ("2d-lib" . #hash((author . "robby@racket-lang.org") (checksum . "5e607f0a11ff0af7e8f40c7a846f0b355e0d045f") (dependencies . (("base" #:version "6.6.0.3") "scribble-lib" "syntax-color-lib")) (description . "robby@racket-lang.org") (modules . ()) (name . "2d-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/2d-lib.zip") (tags . ()))) ("fulmar" . #hasheq((author . "earl.christopher@gmail.com") (authors . ("earl.christopher@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "fulmar-doc" "doc/fulmar-doc@fulmar/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fulmar.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fulmar.txt"))) (checksum . "4cf60699558b3bb28fa813443456993d1563bfb2") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "typed-racket-lib" "rackunit-lib" "sandbox-lib" "at-exp-lib" "at-exp-lib")) (description . "Generate C++ code from S-expressions") (implies . ()) (last-checked . 1522414402) (last-edit . 1398957977) (last-updated . 1502816071) (modules . ((lib "fulmar/FulmarAbbreviations.rkt") (lib "fulmar/private/doc/doc-gen.rkt") (lib "fulmar/private/core-chunk.rkt") (lib "fulmar/standard-chunk.rkt") (lib "fulmar/private/generate.rkt") (lib "fulmar/private/utility.rkt") (lib "fulmar/private/doc/document.rkt") (lib "fulmar/meta.rkt") (lib "fulmar/generate.rkt") (lib "fulmar/type-decls.rkt") (lib "fulmar/tests/main.rkt") (lib "fulmar/tests/standard-chunk-tests.rkt") (lib "fulmar/private/fulmar-core.rkt") (lib "fulmar/private/doc/doc-scraper.rkt") (lib "fulmar/tests/fulmar-core-tests.rkt") (lib "fulmar/main.rkt") (lib "fulmar/doc/fulmar-doc.scrbl") (lib "fulmar/tests/core-chunk-tests.rkt") (lib "fulmar/doc.rkt") (lib "fulmar/verify.rkt") (lib "fulmar/version.rkt") (lib "fulmar/apply.rkt"))) (name . "fulmar") (nix-sha256 . "04gfs1gi1gj2ya01f32a2r3m9fy4f1vpf0bx4lq9h4f9p2w847s1") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:earl.christopher@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/cwearl/fulmar.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4cf60699558b3bb28fa813443456993d1563bfb2") (source . "git://github.com/cwearl/fulmar.git") (source_url . "http://github.com/cwearl/fulmar.git/tree/master"))))))) ("megaparsack-parser-tools" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/megaparsack-parser-tools.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/megaparsack-parser-tools.txt"))) (checksum . "56cbda3e43c6b54c963a138330a55dcd1fb9b2d7") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "functional-lib" "megaparsack-lib" "parser-tools-lib")) (description . "helpers for using megaparsack with parser-tools") (implies . ()) (last-checked . 1522414434) (last-edit . 1462746839) (last-updated . 1517249847) (modules . ((lib "megaparsack/parser-tools/lex.rkt"))) (name . "megaparsack-parser-tools") (nix-sha256 . "0d9iylx1q420pk5p0abhwp7zmr7fd8a7kj100rqnfy8dvajlx0g7") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:lexi.lambda@gmail.com . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/megaparsack?path=megaparsack-parser-tools") (tags . ("parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "56cbda3e43c6b54c963a138330a55dcd1fb9b2d7") (source . "git://github.com/lexi-lambda/megaparsack?path=megaparsack-parser-tools") (source_url . "http://github.com/lexi-lambda/megaparsack/tree/master?path=megaparsack-parser-tools"))))))) ("syntax-warn-cli" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-warn-cli.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-warn-cli.txt"))) (checksum . "f00b27f92656f60d32853831ee905ceeb00693d9") (checksum-error . #f) (conflicts . ()) (dependencies . ("rackunit-lib" "syntax-warn-lang" "base" "compiler-lib" "syntax-warn-base" "rackunit-lib")) (description . "Command line raco tools for checking and fixing syntax warnings") (implies . ()) (last-checked . 1522414689) (last-edit . 1473746160) (last-updated . 1502920414) (modules . ((lib "syntax/warn/test-no-warnings/main.rkt") (lib "syntax/warn/private/read.rkt") (lib "syntax/warn/private/module.rkt") (lib "syntax/warn/private/command.rkt") (lib "syntax/warn/test-warnings/main.rkt") (lib "syntax/warn/private/read-test.rkt") (lib "syntax/warn/private/string-delta.rkt") (lib "syntax/warn/private/test.rkt") (lib "syntax/warn/raco-fix.rkt") (lib "syntax/warn/private/syntax-string.rkt") (lib "syntax/warn/test-warnings-suppressed/main.rkt") (lib "syntax/warn/private/config.rkt") (lib "syntax/warn/raco-warn.rkt"))) (name . "syntax-warn-cli") (nix-sha256 . "0py8h9yxlxfnqlppcy1rwjj8bmnxymkavhpgcd68m1bj6ng4dhfn") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jackhfirth@gmail.com . #t) (raco . #t) (ring:1 . #t) (syntax . #t) (syntax-warn . #t))) (source . "git://github.com/jackfirth/syntax-warn?path=syntax-warn-cli") (tags . ("raco" "syntax" "syntax-warn")) (versions . #hash((default . #hasheq((checksum . "f00b27f92656f60d32853831ee905ceeb00693d9") (source . "git://github.com/jackfirth/syntax-warn?path=syntax-warn-cli") (source_url . "http://github.com/jackfirth/syntax-warn/tree/master?path=syntax-warn-cli"))))))) ("restore" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/restore.txt") (test-failure-log . "server/built/test-fail/restore.txt") (test-success-log . #f))) (checksum . "c38049acd1bde962453977d2469cf2ae8b99acb7") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.2.900.15") "unstable-lib")) (description . "protocol for restore program state") (implies . ()) (last-checked . 1522414671) (last-edit . 1504535420) (last-updated . 1502816401) (modules . ((lib "restore/tests/client.rkt") (lib "restore/tests/server.rkt") (lib "restore/main.rkt"))) (name . "restore") (nix-sha256 . "0w93j42rq3dh66686qnv74vhmb8vw9s9yhs4chmb531mk0qmh51c") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (data . #t) (environment . #t) (filesystem . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/restore") (tags . ("data" "environment" "filesystem")) (versions . #hash((default . #hasheq((checksum . "c38049acd1bde962453977d2469cf2ae8b99acb7") (source . "git://github.com/jeapostrophe/restore") (source_url . "http://github.com/jeapostrophe/restore/tree/master"))))))) ("temp-c-test" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/temp-c-test.txt") (test-failure-log . "server/built/test-fail/temp-c-test.txt") (test-success-log . #f))) (checksum . "43f7f2141c81a301aa229ef4105f458eee070653") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.2.900.4") "temp-c-lib" "eli-tester" "errortrace-lib" "racket-test")) (description . "temporal contracts") (implies . ()) (last-checked . 1522414690) (last-edit . 1504535435) (last-updated . 1502816475) (modules . ((lib "automata/tests/ttt-bench-com.rkt") (lib "automata/tests/ex-matthias-b.rkt") (lib "automata/tests/ex-dsl.rkt") (lib "automata/tests/dr-err-help.rkt") (lib "automata/tests/bench.rkt") (lib "automata/tests/ex-matthias-a.rkt") (lib "automata/tests/bench-affine.rkt") (lib "automata/tests/test-temporal-no-call-after-return.rkt") (lib "automata/tests/dr-err.rkt") (lib "automata/tests/ex-memclass.rkt") (lib "automata/tests/ex-matthias-ctc.rkt") (lib "automata/tests/ttt-bench.rkt") (lib "automata/tests/ttt.rkt") (lib "automata/tests/ex-con.rkt") (lib "automata/tests/ex-mem.rkt") (lib "automata/tests/ttt-bench-raw.rkt") (lib "automata/tests/ex-lock.rkt") (lib "automata/tests/ex-matthias.rkt") (lib "automata/tests/ttt-players.rkt") (lib "automata/tests/ttt-bench-ctc.rkt") (lib "automata/tests/test-temporal-no-call-after-return2.rkt") (lib "automata/tests/id-bench.rkt") (lib "automata/tests/future-ctc.rkt"))) (name . "temp-c-test") (nix-sha256 . "0wfidwr35dwx2hp22q0gp2cw5phnb72mczm68jbhfwzfxiiryd1b") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (contracts . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/temp-c?path=temp-c-test") (tags . ("contracts")) (versions . #hash((default . #hasheq((checksum . "43f7f2141c81a301aa229ef4105f458eee070653") (source . "git://github.com/jeapostrophe/temp-c?path=temp-c-test") (source_url . "http://github.com/jeapostrophe/temp-c/tree/master?path=temp-c-test"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("2d-doc" . #hash((author . "robby@racket-lang.org") (checksum . "e16514a841aa513668b7a2eed3a6ed125084e960") (dependencies . ("base" "2d-lib" "scribble-lib" "racket-doc" "syntax-color-doc" "syntax-color-lib")) (description . "robby@racket-lang.org") (modules . ()) (name . "2d-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/2d-doc.zip") (tags . ()))) ("libscrypt" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "libscrypt" "doc/libscrypt@libscrypt/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libscrypt.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libscrypt.txt"))) (checksum . "544c692f6d492275002d55fc933049e4abff56d8") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "unstable-lib" "racket-doc" "unstable-lib")) (description . "Colin Percival's scrypt bindings for Racket, uses system library.") (implies . ()) (last-checked . 1522414424) (last-edit . 1406302416) (last-updated . 1502816156) (modules . ((lib "libscrypt/libscrypt.scrbl") (lib "libscrypt/private/ffi.rkt") (lib "libscrypt/main.rkt"))) (name . "libscrypt") (nix-sha256 . "0fagb1871a89rxvjlj4mazz41cpq5cb010n5ffh7r2iq93p4bb1g") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mordae@anilinux.org . #t) (crypto . #t) (ffi . #t) (ring:1 . #t))) (source . "github://github.com/mordae/racket-libscrypt/master") (tags . ("crypto" "ffi")) (versions . #hash((default . #hasheq((checksum . "544c692f6d492275002d55fc933049e4abff56d8") (source . "github://github.com/mordae/racket-libscrypt/master") (source_url . "http://github.com/mordae/racket-libscrypt/tree/master"))))))) ("retry" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "retry" "doc/retry@retry/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/retry.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/retry.txt"))) (checksum . "2a6ba58ab5f14707305e75063c3ee4519fc6dc7d") (checksum-error . #f) (conflicts . ()) (dependencies . ("compose-app" "fancy-app" "gregor-lib" "reprovide-lang" ("base" #:version "6.5") ("mock" #:version "2.1") "at-exp-lib" "gregor-doc" "scribble-text-lib" "racket-doc" "scribble-lib" "rackunit-lib" "mock-rackunit")) (description . "Composable configurable retryers for flakily failing operations.") (implies . ()) (last-checked . 1522414671) (last-edit . 1500073485) (last-updated . 1512454089) (modules . ((lib "retry/private/retryers.rkt") (lib "retry/private/gregor.rkt") (lib "retry/main.rkt") (lib "retry/scribblings/base.rkt") (lib "retry/private/higher-order.rkt") (lib "retry/scribblings/reference.scrbl") (lib "retry/scribblings/main.scrbl") (lib "retry/private/inject.rkt") (lib "retry/scribblings/guide.scrbl") (lib "retry/private/base.rkt"))) (name . "retry") (nix-sha256 . "1hqk1zp41yzqnk3djkx3b51ax9mnh5dpbq8admqyzvcwd5v6x358") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (concurrency . #t) (ring:1 . #t))) (source . "git://github.com/jackfirth/racket-retry") (tags . ("concurrency")) (versions . #hash((default . #hasheq((checksum . "2a6ba58ab5f14707305e75063c3ee4519fc6dc7d") (source . "git://github.com/jackfirth/racket-retry") (source_url . "http://github.com/jackfirth/racket-retry/tree/master"))))))) ("ffi-definer-convention" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ffi-definer-convention" "doc/ffi-definer-convention@ffi-definer-convention/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ffi-definer-convention.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ffi-definer-convention.txt"))) (checksum . "5b6a361adeb1f079b9fabc80055ce592152a9d9a") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "No longer necessary in 6.9.0.5 and newer (it's built-in to the ffi library now)") (implies . ()) (last-checked . 1522414400) (last-edit . 1504809486) (last-updated . 1502815960) (modules . ((lib "ffi-definer-convention/ffi-definer-convention.scrbl") (lib "ffi-definer-convention/main.rkt") (lib "ffi-definer-convention/conventions.rkt") (lib "ffi-definer-convention/test.rkt"))) (name . "ffi-definer-convention") (nix-sha256 . "0076lrl9hmdnmy0n0yn1dk6kriwv46lmi0vr0ljsm4kz6s4c9lz3") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (ffi . #t) (ring:1 . #t))) (source . "git://github.com/takikawa/racket-ffi-definer-convention") (tags . ("ffi")) (versions . #hash((default . #hasheq((checksum . "5b6a361adeb1f079b9fabc80055ce592152a9d9a") (source . "git://github.com/takikawa/racket-ffi-definer-convention") (source_url . "http://github.com/takikawa/racket-ffi-definer-convention/tree/master"))))))) ("dssl2" . #hasheq((author . "jesse.tov@gmail.com jesse@eecs.northwestern.edu") (authors . ("jesse.tov@gmail.com" "jesse@eecs.northwestern.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dssl2" "doc/dssl2@dssl2/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dssl2.txt") (test-failure-log . "server/built/test-fail/dssl2.txt") (test-success-log . #f))) (checksum . "5614acefab49efa575264ff1e1aa84556ce170be") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "parser-tools-lib" "sandbox-lib" "scribble-lib" "racket-doc")) (description . "A language for data structures students") (implies . ()) (last-checked . 1522414396) (last-edit . 1510932023) (last-updated . 1519233870) (modules . ((lib "dssl2/grader.rkt") (lib "dssl2/private/rte.rkt") (lib "dssl2/test/dssl2/expt.rkt") (lib "dssl2/test/dssl2/positive-huh-fail.rkt") (lib "dssl2/test/dssl2/and.rkt") (lib "dssl2/test/dssl2/quotient_remainder.rkt") (lib "dssl2/test/dssl2/fifo.rkt") (lib "dssl2/test/dssl2/defstruct.rkt") (lib "dssl2/test/dssl2/vector-oob-fail.rkt") (lib "dssl2/test/dssl2/fifo_contract.rkt") (lib "dssl2/test/dssl2/float.rkt") (lib "dssl2/test/dssl2/if2.rkt") (lib "dssl2/private/syntax-color.rkt") (lib "dssl2/test/dssl2/if1.rkt") (lib "dssl2/test/dssl2/negative-huh-fail.rkt") (lib "dssl2/private/printer.rkt") (lib "dssl2/test/grader/0_of_0_crashes.rkt") (lib "dssl2/test/dssl2/plus-fail.rkt") (lib "dssl2/test/dssl2/max_min.rkt") (lib "dssl2/test/grader/1_of_2_out_of_memory.rkt") (lib "dssl2/test/grader/2_of_3.rkt") (lib "dssl2/test/grader/0_of_0_loads_crashes.rkt") (lib "dssl2/test/dssl2/vector-comprehension.rkt") (lib "dssl2/test/dssl2/bitwise.rkt") (lib "dssl2/test/dssl2/comparisons-fail.rkt") (lib "dssl2/private/equal.rkt") (lib "dssl2/test/dssl2/vec-huh.rkt") (lib "dssl2/private/indent.rkt") (lib "dssl2/private/operators.rkt") (lib "dssl2/test/dssl2/while.rkt") (lib "dssl2/test/dssl2/if5.rkt") (lib "dssl2/test/grader.rkt") (lib "dssl2/test/dssl2/lt.rkt") (lib "dssl2/test/grader/0_of_0_infinite_loop.rkt") (lib "dssl2/test/dssl2/odd-huh-fail.rkt") (lib "dssl2/test/dssl2/bitwise-fail.rkt") (lib "dssl2/test/dssl2/float-huh.rkt") (lib "dssl2/test/dssl2/int.rkt") (lib "dssl2/test/dssl2/vector.rkt") (lib "dssl2/test/dssl2/continue.rkt") (lib "dssl2/test/grader/0_of_0.rkt") (lib "dssl2/test/dssl2/subtract.rkt") (lib "dssl2/lib/array.rkt") (lib "dssl2/test/dssl2/even-huh-fail.rkt") (lib "dssl2/test/dssl2/filter.rkt") (lib "dssl2/test/dssl2/negative-huh.rkt") (lib "dssl2/test/grader/0_of_0_cheater.rkt") (lib "dssl2/test/dssl2/or.rkt") (lib "dssl2/test/grader/4_of_4_prints.rkt") (lib "dssl2/test/dssl2/array.rkt") (lib "dssl2/test/dssl2/ceiling.rkt") (lib "dssl2/test/dssl2/parametric.rkt") (lib "dssl2/test/dssl2/map.rkt") (lib "dssl2/test/dssl2/posn-fail.rkt") (lib "dssl2/test/dssl2/lambda.rkt") (lib "dssl2/test/dssl2/promise.rkt") (lib "dssl2/test/dssl2/test.rkt") (lib "dssl2/test/dssl2/format.rkt") (lib "dssl2/lib/fifo.rkt") (lib "dssl2/test/dssl2/comparisons.rkt") (lib "dssl2/test/dssl2/if6.rkt") (lib "dssl2/test/dssl2/explode.rkt") (lib "dssl2/test/dssl2/implode.rkt") (lib "dssl2/test/dssl2/strlen.rkt") (lib "dssl2/test/parser.rkt") (lib "dssl2/lang/reader.rkt") (lib "dssl2/test/dssl2/len.rkt") (lib "dssl2/scribblings/util.rkt") (lib "dssl2/test/dssl2/zero-huh-fail.rkt") (lib "dssl2/test/run-dssl2-tests.rkt") (lib "dssl2/test/dssl2/dll-for-each.rkt") (lib "dssl2/test/dssl2/int-huh.rkt") (lib "dssl2/test/dssl2/int-huh-ctc.rkt") (lib "dssl2/test/dssl2/if4.rkt") (lib "dssl2/test/dssl2/break.rkt") (lib "dssl2/test/dssl2/floor.rkt") (lib "dssl2/test/grader/1_of_1.rkt") (lib "dssl2/lib/cons.rkt") (lib "dssl2/test/dssl2/print_cycle.rkt") (lib "dssl2/test/dssl2/assert_error.rkt") (lib "dssl2/test/dssl2/def.rkt") (lib "dssl2/test/dssl2/print.rkt") (lib "dssl2/test/grader/0_of_0_malicious.rkt") (lib "dssl2/test/dssl2/stream.rkt") (lib "dssl2/private/lexer.rkt") (lib "dssl2/test/dssl2/positive-huh.rkt") (lib "dssl2/test/dssl2/error-fail.rkt") (lib "dssl2/main.rkt") (lib "dssl2/test/dssl2/struct-set.rkt") (lib "dssl2/test/dssl2/str-huh.rkt") (lib "dssl2/test/grader/2_of_2.rkt") (lib "dssl2/test/dssl2/arithmetic.rkt") (lib "dssl2/test/dssl2/num-huh.rkt") (lib "dssl2/test/dssl2/posn-assign-fail.rkt") (lib "dssl2/private/struct.rkt") (lib "dssl2/test/dssl2/posn.rkt") (lib "dssl2/lib/dll.rkt") (lib "dssl2/lib/promise.rkt") (lib "dssl2/test/dssl2/odd-huh.rkt") (lib "dssl2/test/dssl2/equal.rkt") (lib "dssl2/lib/stream.rkt") (lib "dssl2/test/dssl2/modulo.rkt") (lib "dssl2/private/prims.rkt") (lib "dssl2/test/dssl2/proc-huh.rkt") (lib "dssl2/language.rkt") (lib "dssl2/test/dssl2/even-huh.rkt") (lib "dssl2/test/dssl2/int-huh-ctc-fail.rkt") (lib "dssl2/test/dssl2/plus.rkt") (lib "dssl2/test/dssl2/make-vector.rkt") (lib "dssl2/private/find-lib.rkt") (lib "dssl2/lib/sbox_hash.rkt") (lib "dssl2/test/dssl2/if3.rkt") (lib "dssl2/scribblings/dssl2.scrbl") (lib "dssl2/test/dssl2/zero-huh.rkt") (lib "dssl2/test/dssl2/dll.rkt") (lib "dssl2/private/parser.rkt") (lib "dssl2/test/dssl2/eq.rkt") (lib "dssl2/private/errors.rkt"))) (name . "dssl2") (nix-sha256 . "1mspv8hnpxv4b9alh045l45jv0c1lm275a6273fg5aqy064vjscj") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jesse.tov@gmail.com . #t) (author:jesse@eecs.northwestern.edu . #t) (data-structures . #t) (language . #t) (programming-languages . #t) (ring:1 . #t) (student . #t))) (source . "https://github.com/tov/dssl2.git") (tags . ("data-structures" "language" "programming-languages" "student")) (versions . #hash((default . #hasheq((checksum . "5614acefab49efa575264ff1e1aa84556ce170be") (source . "https://github.com/tov/dssl2.git") (source_url . "https://github.com/tov/dssl2.git"))))))) ("syntax-lang" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "syntax-lang" "doc/syntax-lang@syntax-lang/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-lang.txt"))) (checksum . "50897fef061bcf8640110a7695c81a3a06e38e6d") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "Mini-library for creating new #lang languages from simple macros") (implies . ()) (last-checked . 1522414689) (last-edit . 1500077461) (last-updated . 1502816469) (modules . ((lib "syntax/lang.rkt") (lib "syntax/lang/main.scrbl") (lib "syntax/lang/main.rkt"))) (name . "syntax-lang") (nix-sha256 . "14ai9r55vfnsfhr6662l1agrnwvmh92ffnhq1yq674drr1049nz0") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (experimental . #t) (lang . #t) (ring:1 . #t) (sugar . #t) (syntax . #t))) (source . "git://github.com/jackfirth/racket-syntax-lang") (tags . ("experimental" "lang" "sugar" "syntax")) (versions . #hash((default . #hasheq((checksum . "50897fef061bcf8640110a7695c81a3a06e38e6d") (source . "git://github.com/jackfirth/racket-syntax-lang") (source_url . "http://github.com/jackfirth/racket-syntax-lang/tree/master"))))))) ("macro-debugger-text-lib" . #hash((author . "ryanc@racket-lang.org") (checksum . "98415d32fa1472da5327b3eee5fd1fc28d1c27ba") (dependencies . ("base" "class-iop-lib" "parser-tools-lib")) (description . "ryanc@racket-lang.org") (modules . ()) (name . "macro-debugger-text-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/macro-debugger-text-lib.zip") (tags . ()))) ("reprovide-lang" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "reprovide" "doc/reprovide@reprovide-lang/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/reprovide-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/reprovide-lang.txt"))) (checksum . "2fe755d9416bb38d55b240220581d7a6d0141b71") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "syntax-macro-lang" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "a #lang for reproviding modules") (implies . ()) (last-checked . 1522414671) (last-edit . 1501823557) (last-updated . 1502816400) (modules . ((lib "reprovide/test/test.rkt") (lib "reprovide/test/use-combine-in-except.rkt") (lib "reprovide/test/test-combine-in-except.rkt") (lib "reprovide/combine-in-except.rkt") (lib "reprovide/scribblings/reprovide.scrbl") (lib "reprovide/reprovide.rkt") (lib "reprovide/main.rkt") (lib "reprovide/test/use.rkt"))) (name . "reprovide-lang") (nix-sha256 . "14b4j1mdc9a6bzivmr631sz9d5zxp0cdawnahlzasj7g9k7rwwc5") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (provide . #t) (require . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/reprovide-lang") (tags . ("provide" "require")) (versions . #hash((default . #hasheq((checksum . "2fe755d9416bb38d55b240220581d7a6d0141b71") (source . "git://github.com/AlexKnauth/reprovide-lang") (source_url . "http://github.com/AlexKnauth/reprovide-lang/tree/master"))))))) ("profile-doc" . #hash((author . "eli@racket-lang.org") (checksum . "8370a7fface294bffd3fc6dff1b6d7d11a02b35c") (dependencies . ("base" "scribble-lib" "profile-lib" "errortrace-doc" "errortrace-lib" "racket-doc")) (description . "eli@racket-lang.org") (modules . ()) (name . "profile-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/profile-doc.zip") (tags . ()))) ("png-image" . #hasheq((author . "lehi@tosk.in") (authors . ("lehi@tosk.in")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "png-image" "doc/png-image@png-image/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/png-image.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/png-image.txt"))) (checksum . "c303ca69dea76c5e774e29b89e0968c2ce285722") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Library to view and modify PNG chunks.") (implies . ()) (last-checked . 1522414533) (last-edit . 1486891563) (last-updated . 1513746983) (modules . ((lib "png-image/png-image.rkt") (lib "png-image/test/png-image-test.rkt") (lib "png-image/main.rkt") (lib "png-image/txt.rkt") (lib "png-image/doc/png-image.scrbl") (lib "png-image/base.rkt"))) (name . "png-image") (nix-sha256 . "1drrbvgawwyz8cy3j1ay6n9aagj2hr9fywl2jmxx12xqqg81jlpf") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lehi@tosk.in . #t) (compression . #t) (decompression . #t) (images . #t) (metadata . #t) (png . #t) (ring:1 . #t))) (source . "git://github.com/lehitoskin/png-image") (tags . ("compression" "decompression" "images" "metadata" "png")) (versions . #hash((default . #hasheq((checksum . "c303ca69dea76c5e774e29b89e0968c2ce285722") (source . "git://github.com/lehitoskin/png-image") (source_url . "http://github.com/lehitoskin/png-image/tree/master"))))))) ("colon-kw" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "colon-kw" "doc/colon-kw@colon-kw/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/colon-kw.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/colon-kw.txt"))) (checksum . "458937b2a82375d8873b4265cde118aaea834be9") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "a lang-extension for writing :kw for #:kw") (implies . ()) (last-checked . 1522414314) (last-edit . 1466340908) (last-updated . 1502812298) (modules . ((lib "colon-kw/tests/both.rkt") (lib "colon-kw/tests/test.rkt") (lib "kw-colon/tests/test.rkt") (lib "colon-kw/lang/lexer.rkt") (lib "colon-kw/scribblings/colon-kw.scrbl") (lib "kw-colon/lang/reader.rkt") (lib "colon-kw/reader.rkt") (lib "kw-colon/reader.rkt") (lib "colon-kw/lang/reader.rkt"))) (name . "colon-kw") (nix-sha256 . "0ga5j96wh02j66xs821dl0f2rv2wx6fgpnc0qmwx3v0f5y3s16wy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (keywords . #t) (lang-extension . #t) (ring:1 . #t) (syntax . #t))) (source . "git://github.com/AlexKnauth/colon-kw") (tags . ("keywords" "lang-extension" "syntax")) (versions . #hash((default . #hasheq((checksum . "458937b2a82375d8873b4265cde118aaea834be9") (source . "git://github.com/AlexKnauth/colon-kw") (source_url . "http://github.com/AlexKnauth/colon-kw/tree/master"))))))) ("rfc6455" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rfc6455" "doc/rfc6455@rfc6455/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rfc6455.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rfc6455.txt"))) (checksum . "ba4fa215e3ec71741bd00bb9804c76fc2b3b9e2e") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "net-lib" "rackunit-lib" "web-server-lib" "scribble-lib" "net-doc" "racket-doc" "web-server-doc")) (description . "RFC 6455 WebSockets support for Racket.") (implies . ()) (last-checked . 1522414671) (last-edit . 1382575770) (last-updated . 1502816402) (modules . ((lib "net/rfc6455/hybi00/dispatcher.rkt") (lib "net/rfc6455/hybi00/handshake.rkt") (lib "net/rfc6455/examples/time-client-with-threads.rkt") (lib "net/rfc6455/hybi00/conn.rkt") (lib "net/rfc6455/rfc6455/client.rkt") (lib "net/rfc6455/scribblings/rfc6455.scrbl") (lib "net/rfc6455.rkt") (lib "net/rfc6455/hybi00/client.rkt") (lib "net/rfc6455/examples/time-server.rkt") (lib "net/rfc6455/rfc6455/frame.rkt") (lib "net/rfc6455/rfc6455/dispatcher.rkt") (lib "net/rfc6455/examples/test-service-mapper.rkt") (lib "net/rfc6455/client.rkt") (lib "net/rfc6455/url.rkt") (lib "net/rfc6455/http.rkt") (lib "net/rfc6455/examples/client.rkt") (lib "net/rfc6455/server.rkt") (lib "net/rfc6455/conn-api.rkt") (lib "net/rfc6455/rfc6455/conn.rkt") (lib "net/rfc6455/rfc6455/handshake.rkt") (lib "net/rfc6455/private/connection-manager.rkt") (lib "net/rfc6455/service-mapper.rkt") (lib "net/rfc6455/timeout.rkt") (lib "net/rfc6455/dispatcher.rkt") (lib "net/rfc6455/examples/test-server.rkt") (lib "net/rfc6455/examples/time-client-with-sync.rkt"))) (name . "rfc6455") (nix-sha256 . "0dr5a2vwqbsahgam8x7q933yrz6x8h74m89x2207ljkwmf7s5kdx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:tonygarnockjones@gmail.com . #t) (http . #t) (net . #t) (ring:1 . #t) (web . #t))) (source . "git://github.com/tonyg/racket-rfc6455") (tags . ("http" "net" "web")) (versions . #hash((default . #hasheq((checksum . "ba4fa215e3ec71741bd00bb9804c76fc2b3b9e2e") (source . "git://github.com/tonyg/racket-rfc6455") (source_url . "http://github.com/tonyg/racket-rfc6455/tree/master"))))))) ("make" . #hash((author . "mflatt@racket-lang.org") (checksum . "d764904661287dba3e16356fbb922e5b55b91640") (dependencies . ("scheme-lib" "base" "cext-lib" "compiler-lib" "compatibility-lib" "racket-doc" "scribble-lib")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "make") (source . "https://download.racket-lang.org/releases/6.12/pkgs/make.zip") (tags . ()))) ("postmark" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "postmark" "doc/postmark@postmark/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/postmark.txt") (test-failure-log . "server/built/test-fail/postmark.txt") (test-success-log . #f))) (checksum . "6204838d15c5de48389a2a45ee9158493cc76bc8") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "A front-end for the Postmark email delivery service API") (implies . ()) (last-checked . 1522414535) (last-edit . 1447189734) (last-updated . 1502816324) (modules . ((lib "postmark/main.rkt") (lib "postmark/postmark.scrbl"))) (name . "postmark") (nix-sha256 . "1546ry96yfglwvp6kw9sswmki33l3d52iwknaa23vfi4yxr7g8zv") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (email . #t) (ring:1 . #t))) (source . "git://github.com/jbclements/postmark") (tags . ("email")) (versions . #hash((default . #hasheq((checksum . "6204838d15c5de48389a2a45ee9158493cc76bc8") (source . "git://github.com/jbclements/postmark") (source_url . "http://github.com/jbclements/postmark/tree/master"))))))) ("quickcheck" . #hasheq((author . "ifigueroap@gmail.com sperber@deinprogramm.de") (authors . ("ifigueroap@gmail.com" "sperber@deinprogramm.de")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "quickcheck" "doc/quickcheck@quickcheck/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/quickcheck.txt") (test-failure-log . "server/built/test-fail/quickcheck.txt") (test-success-log . #f))) (checksum . "d7bf80636c31907509701bdd90f2de7883380e84") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit" "doc-coverage" "scribble-lib" "racket-doc")) (description . "Quickcheck Clone") (implies . ()) (last-checked . 1522414538) (last-edit . 1394124887) (last-updated . 1502816341) (modules . ((lib "quickcheck/property.rkt") (lib "quickcheck/private/arbitrary.rkt") (lib "quickcheck/private/test/doc-coverage.rkt") (lib "quickcheck/generator.rkt") (lib "quickcheck/result.rkt") (lib "quickcheck/private/random.rkt") (lib "quickcheck/arbitrary.rkt") (lib "quickcheck/private/glue.rkt") (lib "quickcheck/private/error.rkt") (lib "quickcheck/raco-quickcheck.rkt") (lib "quickcheck/main.rkt") (lib "quickcheck/private/generator.rkt") (lib "rackunit/quickcheck.rkt") (lib "quickcheck/private/result.rkt") (lib "quickcheck/private/property.rkt") (lib "quickcheck/private/text-input-output.rkt") (lib "quickcheck/testing.rkt") (lib "quickcheck/scribblings/quickcheck.scrbl") (lib "quickcheck/private/test/main.rkt"))) (name . "quickcheck") (nix-sha256 . "1ridkbacc5spvmyx0sl4r5c20awapzy31f07z475f9xzf26nk77a") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ifigueroap@gmail.com . #t) (author:sperber@deinprogramm.de . #t) (ring:1 . #t) (testing . #t))) (source . "github://github.com/ifigueroap/racket-quickcheck/master") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "d7bf80636c31907509701bdd90f2de7883380e84") (source . "github://github.com/ifigueroap/racket-quickcheck/master") (source_url . "http://github.com/ifigueroap/racket-quickcheck/tree/master"))))))) ("curved-text" . #hasheq((author . "klibert.piotr@gmail.com") (authors . ("klibert.piotr@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/curved-text.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "bc6223bfc3949bf2f632c86588f10f8da2ef0b6c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (last-checked . 1522414372) (last-edit . 1490796988) (last-updated . 1502815878) (modules . ((lib "curved-text/bezier/binary-search.rkt") (lib "curved-text/bezier/utils.rkt") (lib "curved-text/bezier/point.rkt") (lib "curved-text/main.rkt") (lib "curved-text/bezier/math.rkt") (lib "curved-text/demo/canvas.rkt") (lib "curved-text/demo/main.rkt") (lib "curved-text/bezier/curve.rkt") (lib "curved-text/demo/drawing.rkt") (lib "curved-text/bezier/curved-text.rkt") (lib "curved-text/bezier/tables.rkt"))) (name . "curved-text") (nix-sha256 . "0jmm2jql5lv7zr0mrqrb04d6rqn1kpvs5bycw2ii2hy16gq13w9n") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-desc: . #t) (author:klibert.piotr@gmail.com . #t) (curve . #t) (graphics . #t) (gui . #t) (ring:1 . #t))) (source . "git://github.com/piotrklibert/curved-text") (tags . ("curve" "graphics" "gui")) (versions . #hash((default . #hasheq((checksum . "bc6223bfc3949bf2f632c86588f10f8da2ef0b6c") (source . "git://github.com/piotrklibert/curved-text") (source_url . "http://github.com/piotrklibert/curved-text/tree/master"))))))) ("typed-racket-lib" . #hash((author . "samth@racket-lang.org stamourv@racket-lang.org") (checksum . "bc4937da03f82eaef5babe57e62da3635a1b6e12") (dependencies . (("base" #:version "6.7.0.4") "source-syntax" "compatibility-lib" "string-constants-lib")) (description . "samth@racket-lang.org stamourv@racket-lang.org") (modules . ()) (name . "typed-racket-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/typed-racket-lib.zip") (tags . ()))) ("socketcan" . #hasheq((author . "abencz@gmail.com") (authors . ("abencz@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/socketcan.txt") (success-log . "server/built/install/socketcan.txt") (test-failure-log . "server/built/test-fail/socketcan.txt") (test-success-log . #f))) (checksum . "e87aa767038b78386d18e3c0af8e9a482ca6e421") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "make" "scribble-lib")) (description . "Linux socketcan bindings for Racket.") (implies . ()) (last-checked . 1522414680) (last-edit . 1432766091) (last-updated . 1502816437) (modules . ((lib "scribblings/socketcan.scrbl") (lib "socketcan/main.rkt") (lib "socketcan/tests.rkt") (lib "socketcan/private/install.rkt"))) (name . "socketcan") (nix-sha256 . "01rn39gsr5ipirgvga8ps9d1433f3n8wyrxqbpfygf2py8rm4nik") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:abencz@gmail.com . #t) (ring:1 . #t))) (source . "github://github.com/abencz/racket-socketcan/racket_5.3.6") (tags . ()) (versions . #hash((default . #hasheq((checksum . "744bf37d7a347a55d1ec72885f87d35919f68b7b") (source . "git://github.com/abencz/racket-socketcan#master") (source_url . "http://github.com/abencz/racket-socketcan/tree/master#master"))) ("5.3.6" . #hasheq((checksum . "e87aa767038b78386d18e3c0af8e9a482ca6e421") (source . "github://github.com/abencz/racket-socketcan/racket_5.3.6") (source_url . "http://github.com/abencz/racket-socketcan/tree/racket_5.3.6"))))))) ("distro-build" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/distro-build.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/distro-build.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . ("distro-build-lib" "distro-build-doc")) (description . "Tools for constructing a distribution of Racket") (implies . ("distro-build-lib" "distro-build-doc")) (last-checked . 1522414380) (last-edit . 1417307461) (last-updated . 1510246880) (modules . ()) (name . "distro-build") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ()) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) (default . #hasheq((checksum . "a1ddc164131f145c0ef776f7de44b273c265493b") (source . "git://github.com/racket/distro-build/?path=distro-build") (source_url . "git://github.com/racket/distro-build/?path=distro-build"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("racket-win32-i386-2" . #hash((author . "mflatt@racket-lang.org") (checksum . "94b8d4e1eef9cc8487254194ec8c16bae9e252bc") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "racket-win32-i386-2") (source . "https://download.racket-lang.org/releases/6.12/pkgs/racket-win32-i386-2.zip") (tags . ()))) ("reloadable" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/reloadable.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/reloadable.txt"))) (checksum . "cae2a141955bc2e0d068153f2cd07f88e6a6e9ef") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "Support for code-reloading for long-running racket programs (such as web-servers).") (implies . ()) (last-checked . 1522414670) (last-edit . 1416004703) (last-updated . 1502816397) (modules . ((lib "reloadable/main.rkt"))) (name . "reloadable") (nix-sha256 . "0fzdp3nyl4786ykl264iyc5wfaw83sa44lavjf4rkwj8rghn68a2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t) (system . #t) (web . #t))) (source . "github://github.com/tonyg/racket-reloadable/master") (tags . ("system" "web")) (versions . #hash((default . #hasheq((checksum . "cae2a141955bc2e0d068153f2cd07f88e6a6e9ef") (source . "github://github.com/tonyg/racket-reloadable/master") (source_url . "http://github.com/tonyg/racket-reloadable/tree/master"))))))) ("this-and-that" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "chipmunk"))) (failure-log . "server/built/fail/this-and-that.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "bb2afd0834f6fdbc3cb8a9867e2a307063f38b80") (checksum-error . #f) (conflicts . ()) (dependencies . ()) (description . "Small useful bits and pieces.") (implies . ()) (last-checked . 1522414691) (last-edit . 1362234825) (last-updated . 1438374991) (modules . ((lib "this-and-that/readtable/test-clojure-maps.rkt") (lib "this-and-that/tmp/racket-chipmunk/1d-tree.rkt") (lib "this-and-that/tmp/racket-chipmunk/2d-tree.rkt") (lib "this-and-that/racket-poppler/racket-poppler.rkt") (lib "this-and-that/snoopy/kd-tree.rkt") (lib "this-and-that/split-between.rkt") (lib "this-and-that/brevity/terse-hash.rkt") (lib "this-and-that/readtable/pratt.rkt") (lib "this-and-that/readtable/test-parser.rkt") (lib "this-and-that/readtable/lang/reader.rkt") (lib "this-and-that/memoize/test-memo.rkt") (lib "this-and-that/readtable/mv-parser.rkt") (lib "this-and-that/tmp/chipmunk/chipmunk-ffi.rkt") (lib "this-and-that/snoopy/1d-range-searching.rkt") (lib "this-and-that/spell-checker/spell-checker.rkt") (lib "this-and-that/heart-beat/in-heart-beat.rkt") (lib "this-and-that/readtable/test2.rkt") (lib "this-and-that/readtable/test.rkt") (lib "this-and-that/readtable/lang/read-and-read-syntax.rkt") (lib "this-and-that/snoopy/1d-tree.rkt") (lib "this-and-that/lexer/lexer.rkt") (lib "this-and-that/readtable/lang/converter.rkt") (lib "this-and-that/readtable/lang/parse-reader-spec.rkt") (lib "this-and-that/readers/read-number.rkt") (lib "this-and-that/memoize/memo.rkt") (lib "this-and-that/readtable/lang/pratt-parser.rkt") (lib "this-and-that/snoopy/racket-chipmunk.rkt") (lib "this-and-that/tmp/racket-chipmunk/racket-chipmunk.rkt") (lib "this-and-that/tmp/chipmunk/main.rkt") (lib "this-and-that/declare/declare.rkt") (lib "this-and-that/updatable-struct/updatable-struct.rkt") (lib "this-and-that/heart-beat/in-effect.rkt") (lib "this-and-that/tmp/chipmunk/chipmunk.scrbl") (lib "this-and-that/brevity/brevity.rkt") (lib "this-and-that/tmp/chipmunk/chipmunk.rkt") (lib "this-and-that/snoopy/2d-tree.rkt"))) (name . "this-and-that") (nix-sha256 . "0ayby3jg1mdyd3fklmjsbhhfnckjlahwrc3n4gxffcbkn57zpycv") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:no-tag: . #t) (author:jensaxel@soegaard.net . #t) (ring:1 . #t))) (source . "github://github.com/soegaard/this-and-that/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "bb2afd0834f6fdbc3cb8a9867e2a307063f38b80") (source . "github://github.com/soegaard/this-and-that/master") (source_url . "http://github.com/soegaard/this-and-that/tree/master"))))))) ("hash-lambda" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "hash-lambda-toc" "doc/hash-lambda-toc@hash-lambda/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hash-lambda.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hash-lambda.txt"))) (checksum . "d65df820d1c16e4d2f8c6e1519f3a0ec838387c8") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "unstable-lib" "unstable-list-lib" "kw-utils" "mutable-match-lambda" "rackunit-lib" "at-exp-lib" "scribble-lib" "sandbox-lib" "racket-doc")) (description . "using hash-tables for rest-arguments that include keyword-arguments") (implies . ()) (last-checked . 1522414415) (last-edit . 1397156000) (last-updated . 1502816111) (modules . ((lib "keyword-lambda/docs/keyword-lambda.scrbl") (lib "hash-lambda/docs/mutable-match-lambda.scrbl") (lib "keyword-lambda/docs/keyword-case-lambda.scrbl") (lib "keyword-lambda/keyword-lambda.rkt") (lib "keyword-lambda/keyword-apply-sort.rkt") (lib "hash-lambda/docs/hash-lambda-toc.scrbl") (lib "keyword-lambda/main.rkt") (lib "keyword-lambda/kw-apply.rkt") (lib "hash-lambda/mutable-match-lambda.rkt") (lib "hash-lambda/docs/hash-lambda.scrbl") (lib "hash-lambda/main.rkt") (lib "keyword-lambda/keyword-case-lambda.rkt") (lib "keyword-lambda/arity+keywords.rkt") (lib "hash-lambda/all.rkt") (lib "hash-lambda/prop-object-name.rkt"))) (name . "hash-lambda") (nix-sha256 . "14bcj5s62mfm8j8zjmzq8r9nk7caqnk7jaqjmn1096nkijl4028v") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (deprecated . #t) (keywords . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/hash-lambda") (tags . ("deprecated" "keywords")) (versions . #hash((default . #hasheq((checksum . "d65df820d1c16e4d2f8c6e1519f3a0ec838387c8") (source . "git://github.com/AlexKnauth/hash-lambda") (source_url . "http://github.com/AlexKnauth/hash-lambda/tree/master"))))))) ("profj" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "htdc" "doc/htdc@profj/index.html") ("main" "profj" "doc/profj@profj/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/profj.txt") (test-failure-log . "server/built/test-fail/profj.txt") (test-success-log . #f))) (checksum . "aa20a056d7834a1e821f6c63277ee03724af9b15") (checksum-error . #f) (conflicts . ()) (dependencies . ("combinator-parser" "base" "compatibility-lib" "drracket-plugin-lib" "errortrace-lib" "gui-lib" "htdp-lib" "parser-tools-lib" "scheme-lib" "srfi-lite-lib" "string-constants-lib" "scribble-lib" "racket-doc")) (description . "ProfessorJ") (implies . ()) (last-checked . 1522414537) (last-edit . 1368288397) (last-updated . 1502816330) (modules . ((lib "profj/intermediate+access.rkt") (lib "profj/scribblings/intermediate.scrbl") (lib "profj/check.rkt") (lib "profj/parsers/parse-error.rkt") (lib "profj/intermediate.rkt") (lib "profj/htdch/draw/pre-installer.rkt") (lib "profj/libs/java/lang/array.rkt") (lib "profj/restrictions.rkt") (lib "profj/textbook-pls-spec.rkt") (lib "profj/libs/java/lang/NullPointerException.rkt") (lib "profj/tool.rkt") (lib "profj/language.rkt") (lib "profj/libs/java/lang/Double-native-methods.rkt") (lib "profj/compile.rkt") (lib "profj/parsers/advanced-parser.rkt") (lib "profj/htdch/geometry/installer.rkt") (lib "profj/htdch/idraw/installer.rkt") (lib "profj/parser.rkt") (lib "profj/libs/java/util/installer.rkt") (lib "profj/libs/java/io/installer.rkt") (lib "profj/htdch/draw/World-native-methods.rkt") (lib "profj/installer.rkt") (lib "profj/libs/java/lang/Math-native-methods.rkt") (lib "profj/full.rkt") (lib "profj/libs/java/lang/installer.rkt") (lib "profj/libs/java/lang/ClassCastException.rkt") (lib "profj/libs/java/lang/mz.rkt") (lib "profj/advanced.rkt") (lib "profj/parsers/beginner-parser.rkt") (lib "profj/libs/java/lang/String.rkt") (lib "profj/parsers/intermediate-access-parser.rkt") (lib "profj/libs/java/lang/ArrayStoreException.rkt") (lib "profj/scribblings/intermediate-access.scrbl") (lib "profj/htdch/draw/installer.rkt") (lib "profj/to-scheme.rkt") (lib "profj/htdch/colors/installer.rkt") (lib "profj/htdch/idraw/Canvas-native-methods.rkt") (lib "profj/profj-pref.rkt") (lib "profj/graph-scc.rkt") (lib "profj/parsers/lexer.rkt") (lib "profj/htdch/idraw/pre-installer.rkt") (lib "profj/parameters.rkt") (lib "profj/htdch/Examples/blink-java.rkt") (lib "profj/pre-installer.rkt") (lib "profj/htdch/draw/Canvas-native-methods.rkt") (lib "profj/beginner.rkt") (lib "profj/types.rkt") (lib "profj/libs/java/runtime.rkt") (lib "profj/libs/java/lang/Object.rkt") (lib "profj/parsers/full-parser.rkt") (lib "profj/libs/java/lang/compile-lang.rkt") (lib "profj/error-messaging.rkt") (lib "profj/libs/java/lang/Comparable.rkt") (lib "profj/scribblings/advanced.scrbl") (lib "profj/tests/beginner-tests.rkt") (lib "profj/scribblings/profj.scrbl") (lib "profj/libs/java/lang/ArrayIndexOutOfBoundsException.rkt") (lib "profj/htdch/graphics/rename.rkt") (lib "profj/libs/java/lang/NegativeArraySizeException.rkt") (lib "profj/htdch/Examples/iblink-java.rkt") (lib "profj/htdch/graphics/installer.rkt") (lib "profj/build-info.rkt") (lib "profj/libs/java/lang/Exception.rkt") (lib "profj/analysis.rkt") (lib "profj/libs/java/lang/Throwable.rkt") (lib "profj/ast.rkt") (lib "profj/scribblings/htdc.scrbl") (lib "profj/libs/java/lang/ArithmeticException.rkt") (lib "profj/tests/profj-testing.rkt") (lib "profj/display-java.rkt") (lib "profj/parsers/general-parsing.rkt") (lib "profj/tests/all-tests.rkt") (lib "profj/libs/java/lang/Object-composite.rkt") (lib "profj/libs/java/tester/installer.rkt") (lib "profj/libs/java/lang/System-native-methods.rkt") (lib "profj/libs/java/lang/RuntimeException.rkt") (lib "profj/libs/java/io/Serializable.rkt") (lib "profj/libs/java/lang/compile-lang-syntax.rkt") (lib "profj/libs/java/lang/IndexOutOfBoundsException.rkt") (lib "profj/tests/full-tests.rkt") (lib "profj/scribblings/java-scribble.rkt") (lib "profj/tests/intermediate-tests.rkt") (lib "profj/tests/advanced-tests.rkt") (lib "profj/scribblings/beginner.scrbl") (lib "profj/parsers/intermediate-parser.rkt") (lib "profj/htdch/idraw/World-native-methods.rkt") (lib "profj/dynamic.rkt"))) (name . "profj") (nix-sha256 . "0mq34fn1hxc38lrp36jbgx08c21gcvk1v8cgxapy4xhccigwcs6g") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mflatt@cs.utah.edu . #t) (language . #t) (ring:1 . #t))) (source . "github://github.com/mflatt/profj/master") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "aa20a056d7834a1e821f6c63277ee03724af9b15") (source . "github://github.com/mflatt/profj/master") (source_url . "http://github.com/mflatt/profj/tree/master"))))))) ("flexpr" . #hasheq((author . "greghendershott@gmail.com") (authors . ("greghendershott@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "flexpr" "doc/flexpr@flexpr/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/flexpr.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/flexpr.txt"))) (checksum . "a547ca94094a2090f12b0028b634da0b08d42df8") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" ("racket" "6.0.1") "at-exp-lib" "racket-doc" "rackunit-lib" "sandbox-lib" "scribble-lib")) (description . " Expressions rendered as both XML and JSON") (implies . ()) (last-checked . 1522414401) (last-edit . 1503266391) (last-updated . 1502816068) (modules . ((lib "flexpr/main.rkt") (lib "flexpr/flexpr.scrbl"))) (name . "flexpr") (nix-sha256 . "09iv9ghib5afsh38ivc6av998pl9avdsbpww0l8m1875zcsaf006") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:greghendershott@gmail.com . #t) (json . #t) (ring:1 . #t) (xml . #t))) (source . "git://github.com/greghendershott/flexpr") (tags . ("json" "xml")) (versions . #hash((default . #hasheq((checksum . "a547ca94094a2090f12b0028b634da0b08d42df8") (source . "git://github.com/greghendershott/flexpr") (source_url . "http://github.com/greghendershott/flexpr/tree/master"))))))) ("custom-load" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "custom-load" "doc/custom-load@custom-load/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/custom-load.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/custom-load.txt"))) (checksum . "4e70205c29ab0672663fcae78ded32563f01414b") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "A load handler that avoids stale zo files.") (implies . ()) (last-checked . 1522414372) (last-edit . 1429587087) (last-updated . 1502815878) (modules . ((lib "custom-load/custom-load.scrbl") (lib "custom-load/test/c.rkt") (lib "custom-load/test/b.rkt") (lib "custom-load/top.rkt") (lib "custom-load/private/loader.rkt") (lib "custom-load/test/a.rkt") (lib "custom-load/main.rkt"))) (name . "custom-load") (nix-sha256 . "0mnlsr91qcbppdisd01f5g7dyqn2j4sfy41lp917a29nl45cvrpg") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:ryanc@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/rmculpepper/custom-load") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4e70205c29ab0672663fcae78ded32563f01414b") (source . "git://github.com/rmculpepper/custom-load") (source_url . "http://github.com/rmculpepper/custom-load/tree/master"))))))) ("threading" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/threading.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/threading.txt"))) (checksum . "abed5715993ec2e53d201d55c3c9b57be30874fc") (checksum-error . #f) (conflicts . ()) (dependencies . ("threading-doc" "threading-lib")) (description . "") (implies . ("threading-doc" "threading-lib")) (last-checked . 1522414691) (last-edit . 1497304010) (last-updated . 1502816483) (modules . ()) (name . "threading") (nix-sha256 . "1yd0lqndzpybisj288p1d9z9n5jml10xcd2q2hfdlp8dnpwrqvlb") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/threading#compatibility-5.3.2-to-6.1") (tags . ()) (versions . #hash(("6.0" . #hasheq((checksum . "abed5715993ec2e53d201d55c3c9b57be30874fc") (source . "git://github.com/lexi-lambda/threading#compatibility-5.3.2-to-6.1") (source_url . "http://github.com/lexi-lambda/threading/tree/master#compatibility-5.3.2-to-6.1"))) ("6.1.1" . #hasheq((checksum . "abed5715993ec2e53d201d55c3c9b57be30874fc") (source . "git://github.com/lexi-lambda/threading#compatibility-5.3.2-to-6.1") (source_url . "http://github.com/lexi-lambda/threading/tree/master#compatibility-5.3.2-to-6.1"))) ("5.92" . #hasheq((checksum . "abed5715993ec2e53d201d55c3c9b57be30874fc") (source . "git://github.com/lexi-lambda/threading#compatibility-5.3.2-to-6.1") (source_url . "http://github.com/lexi-lambda/threading/tree/master#compatibility-5.3.2-to-6.1"))) ("5.3.4" . #hasheq((checksum . "abed5715993ec2e53d201d55c3c9b57be30874fc") (source . "git://github.com/lexi-lambda/threading#compatibility-5.3.2-to-6.1") (source_url . "http://github.com/lexi-lambda/threading/tree/master#compatibility-5.3.2-to-6.1"))) ("6.2.1" . #hasheq((checksum . "dee85e8d3cffaed85eb27bed8a8c61fc1eea8395") (source . "git://github.com/lexi-lambda/threading?path=threading#compatibility-6.2") (source_url . "http://github.com/lexi-lambda/threading/tree/master?path=threading#compatibility-6.2"))) (default . #hasheq((checksum . "de68f80c91b47b5860709a0bb31b462b8300eb09") (source . "git://github.com/lexi-lambda/threading?path=threading") (source_url . "http://github.com/lexi-lambda/threading/tree/master?path=threading"))) ("5.3.6" . #hasheq((checksum . "abed5715993ec2e53d201d55c3c9b57be30874fc") (source . "git://github.com/lexi-lambda/threading#compatibility-5.3.2-to-6.1") (source_url . "http://github.com/lexi-lambda/threading/tree/master#compatibility-5.3.2-to-6.1"))) ("5.3.2" . #hasheq((checksum . "abed5715993ec2e53d201d55c3c9b57be30874fc") (source . "git://github.com/lexi-lambda/threading#compatibility-5.3.2-to-6.1") (source_url . "http://github.com/lexi-lambda/threading/tree/master#compatibility-5.3.2-to-6.1"))) ("5.3.3" . #hasheq((checksum . "abed5715993ec2e53d201d55c3c9b57be30874fc") (source . "git://github.com/lexi-lambda/threading#compatibility-5.3.2-to-6.1") (source_url . "http://github.com/lexi-lambda/threading/tree/master#compatibility-5.3.2-to-6.1"))) ("5.3.5" . #hasheq((checksum . "abed5715993ec2e53d201d55c3c9b57be30874fc") (source . "git://github.com/lexi-lambda/threading#compatibility-5.3.2-to-6.1") (source_url . "http://github.com/lexi-lambda/threading/tree/master#compatibility-5.3.2-to-6.1"))) ("6.0.1" . #hasheq((checksum . "abed5715993ec2e53d201d55c3c9b57be30874fc") (source . "git://github.com/lexi-lambda/threading#compatibility-5.3.2-to-6.1") (source_url . "http://github.com/lexi-lambda/threading/tree/master#compatibility-5.3.2-to-6.1"))) ("5.93" . #hasheq((checksum . "abed5715993ec2e53d201d55c3c9b57be30874fc") (source . "git://github.com/lexi-lambda/threading#compatibility-5.3.2-to-6.1") (source_url . "http://github.com/lexi-lambda/threading/tree/master#compatibility-5.3.2-to-6.1"))) ("6.2" . #hasheq((checksum . "dee85e8d3cffaed85eb27bed8a8c61fc1eea8395") (source . "git://github.com/lexi-lambda/threading?path=threading#compatibility-6.2") (source_url . "http://github.com/lexi-lambda/threading/tree/master?path=threading#compatibility-6.2"))) ("6.1" . #hasheq((checksum . "abed5715993ec2e53d201d55c3c9b57be30874fc") (source . "git://github.com/lexi-lambda/threading#compatibility-5.3.2-to-6.1") (source_url . "http://github.com/lexi-lambda/threading/tree/master#compatibility-5.3.2-to-6.1"))))))) ("aful" . #hasheq((author . "georges.duperon@gmail.com") (authors . ("georges.duperon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "aful" "doc/aful@aful/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/aful.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/aful.txt"))) (checksum . "c8a23355748f39bea6abccfee8d2e577a627a353") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "hygienic-reader-extension" "at-exp-lib" "rackjure" "rackunit-lib" "phc-toolkit" "scribble-enhanced" "scribble-lib" "scribble-lib" "racket-doc" "scribble-doc" "scribble-code-examples" "scribble-doc")) (description . "A fork of #lang afl which also supports #lang aflu/unhygienic.") (implies . ()) (last-checked . 1522417869) (last-edit . 1500984999) (last-updated . 1502812267) (modules . ((lib "aful/docs/aful.scrbl") (lib "aful/scribble-enhanced.rkt") (lib "aful/lang/runtime-config.rkt") (lib "aful/tests/test-aful-at-exp-racket.rkt") (lib "aful/tests/test-aful-racket.rkt") (lib "aful/lang/language-info.rkt") (lib "aful/lang/reader.rkt") (lib "aful/tests/test-aful-scribble.rkt") (lib "aful/unhygienic/lang/reader.rkt") (lib "aful/unhygienic/hygienic-reader-extension--extend-reader--unhygienic.rkt") (lib "aful/unhygienic/lang/runtime-config.rkt") (lib "aful/unhygienic/lang/language-info.rkt") (lib "aful/reader.rkt"))) (name . "aful") (nix-sha256 . "061pf5j75x752bypf1qiks0cj85gm3wpchn6zqpw3z1j18vc0bs7") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:georges.duperon@gmail.com . #t) (lambda . #t) (lang-extension . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/jsmaniac/aful.git#unhygienic") (tags . ("lambda" "lang-extension" "syntax")) (versions . #hash(("6.0" . #hasheq((checksum . "78b507dd1d02efad8196bcdeb855fce568e575dc") (source . "https://github.com/jsmaniac/aful.git#before-6.3") (source_url . "https://github.com/jsmaniac/aful.git#before-6.3"))) ("6.1.1" . #hasheq((checksum . "78b507dd1d02efad8196bcdeb855fce568e575dc") (source . "https://github.com/jsmaniac/aful.git#before-6.3") (source_url . "https://github.com/jsmaniac/aful.git#before-6.3"))) ("6.3" . #hasheq((checksum . "78b507dd1d02efad8196bcdeb855fce568e575dc") (source . "https://github.com/jsmaniac/aful.git#before-6.3") (source_url . "https://github.com/jsmaniac/aful.git#before-6.3"))) (default . #hasheq((checksum . "c8a23355748f39bea6abccfee8d2e577a627a353") (source . "https://github.com/jsmaniac/aful.git#unhygienic") (source_url . "https://github.com/jsmaniac/aful.git#unhygienic"))) ("6.2" . #hasheq((checksum . "78b507dd1d02efad8196bcdeb855fce568e575dc") (source . "https://github.com/jsmaniac/aful.git#before-6.3") (source_url . "https://github.com/jsmaniac/aful.git#before-6.3"))) ("6.1" . #hasheq((checksum . "78b507dd1d02efad8196bcdeb855fce568e575dc") (source . "https://github.com/jsmaniac/aful.git#before-6.3") (source_url . "https://github.com/jsmaniac/aful.git#before-6.3"))))))) ("unstable-redex" . #hash((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "unstable-redex" "doc/unstable-redex@unstable-redex/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-redex.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-redex.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "pict-lib" "redex-lib" "redex-pict-lib" "scribble-lib" "pict-doc" "redex-doc" "racket-doc")) (description . "Experimental libraries for typesetting PLT Redex models") (implies . ()) (last-checked . 1522414699) (last-edit . 1445382797) (last-updated . 1520341665) (modules . ((lib "unstable/gui/redex.rkt") (lib "unstable/gui/unstable-redex.scrbl"))) (name . "unstable-redex") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("unstable")) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) (default . #hasheq((checksum . "a132a56200d99be9e3cec3928d8580559402beb6") (source . "git://github.com/racket/unstable-redex") (source_url . "http://github.com/racket/unstable-redex/tree/master"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("delay-pure" . #hasheq((author . "georges.duperon@gmail.com") (authors . ("georges.duperon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "delay-pure" "doc/delay-pure@delay-pure/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/delay-pure.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/delay-pure.txt"))) (checksum . "e656f75169a87fefea9d216a50aa4926ce2cda65") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "type-expander" "phc-toolkit" "scribble-lib" "racket-doc" "typed-racket-doc")) (description . "Non-cached promises for Typed/Racket, like delay/name. Should be sound for occurrence typing (unlike delay/name) because only pure functions are allowed.") (implies . ()) (last-checked . 1522414379) (last-edit . 1476107706) (last-updated . 1517055396) (modules . ((lib "delay-pure/private/immutable-struct-constructor.rkt") (lib "delay-pure/test/test-unsafe.rkt") (lib "delay-pure/private/pure-unsafe.rkt") (lib "delay-pure/scribblings/delay-pure.scrbl") (lib "delay-pure/private/fully-expanded-grammar-no-set.rkt") (lib "delay-pure/main.rkt") (lib "delay-pure/test/test-pure-lifted.rkt") (lib "delay-pure/private/pure-function.rkt") (lib "delay-pure/test/test-immutable-struct-constructor.rkt") (lib "delay-pure/test/test-pure-safe.rkt") (lib "delay-pure/test/test-external-mutation.rkt") (lib "delay-pure/private/pure-safe.rkt") (lib "delay-pure/test/test-pure-function.rkt") (lib "delay-pure/test/test-immutable-struct-constructor-mod2.rkt") (lib "delay-pure/test/test-immutable-struct-constructor-mod.rkt") (lib "delay-pure/private/pure-exception.rkt"))) (name . "delay-pure") (nix-sha256 . "09pc26ad0vbzyw4c8b0lavw03l54sv1cijnwnm6prw0pkhvrdif4") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:georges.duperon@gmail.com . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/jsmaniac/delay-pure.git") (tags . ("typed-racket")) (versions . #hash((default . #hasheq((checksum . "e656f75169a87fefea9d216a50aa4926ce2cda65") (source . "https://github.com/jsmaniac/delay-pure.git") (source_url . "https://github.com/jsmaniac/delay-pure.git"))))))) ("opengl" . #hasheq((author . "stephanh42@gmail.com") (authors . ("stephanh42@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "opengl" "doc/opengl@opengl/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/opengl.txt") (test-failure-log . "server/built/test-fail/opengl.txt") (test-success-log . #f))) (checksum . "1aaf2b2836680f807fbec5234ed475585b41b4ab") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "draw-lib" "scribble-lib" "srfi-lite-lib" "draw-doc" "gui-doc" "gui-lib" "racket-doc")) (description . "Exhaustive Racket bindings to OpenGL") (implies . ()) (last-checked . 1522414507) (last-edit . 1353008427) (last-updated . 1513718131) (modules . ((lib "opengl/util.rkt") (lib "opengl/opengl.scrbl") (lib "tests/opengl/gltest.rkt") (lib "tests/opengl/viewer.rkt") (lib "tests/opengl/gears.rkt") (lib "tests/opengl/shadertest.rkt") (lib "opengl/main.rkt") (lib "tests/opengl/bitmaptest.rkt") (lib "opengl/readspec.rkt") (lib "tests/opengl/planet.rkt") (lib "tests/opengl/vbotest.rkt"))) (name . "opengl") (nix-sha256 . "1dc55jhwydin6f1c2bpzls3fzip3gg2j5aq2gwrkzvifj6p8wxj6") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:stephanh42@gmail.com . #t) (ffi . #t) (graphics . #t) (opengl . #t) (ring:1 . #t))) (source . "github://github.com/stephanh42/RacketGL/master") (tags . ("ffi" "graphics" "opengl")) (versions . #hash((default . #hasheq((checksum . "1aaf2b2836680f807fbec5234ed475585b41b4ab") (source . "github://github.com/stephanh42/RacketGL/master") (source_url . "http://github.com/stephanh42/RacketGL/tree/master"))))))) ("srfi" . #hash((author . "mflatt@racket-lang.org noel@racket-lang.org chongkai@racket-lang.org jay@racket-lang.org") (checksum . "c00631779a566b7bf0464d7908f1aca8f7ac7713") (dependencies . ("srfi-lib" "srfi-doc")) (description . "mflatt@racket-lang.org noel@racket-lang.org chongkai@racket-lang.org jay@racket-lang.org") (modules . ()) (name . "srfi") (source . "https://download.racket-lang.org/releases/6.12/pkgs/srfi.zip") (tags . ()))) ("gtp-measure" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gtp-measure" "doc/gtp-measure@gtp-measure/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gtp-measure.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gtp-measure.txt"))) (checksum . "738170b61c6de20120993d38eb9d15f42b95bae5") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "lang-file" "scribble-lib" "basedir" "gtp-util" "rackunit-lib" "racket-doc" "scribble-doc" "basedir" "require-typed-check" "typed-racket-doc" "typed-racket-lib")) (description . "Runs programs, collects timing info") (implies . ()) (last-checked . 1522414406) (last-edit . 1517970133) (last-updated . 1521847100) (modules . ((lib "gtp-measure/private/test/sample-task/24/0-morsecode/configuration/morse-code-table.rkt") (lib "gtp-measure/private/test/sample-task/24/0-morsecode/configuration/main.rkt") (lib "gtp-measure/private/test/sample-file-target.rkt") (lib "gtp-measure/private/test/sample-task/24/0-morsecode/configuration/levenshtein.rkt") (lib "gtp-measure/private/task.rkt") (lib "gtp-measure/manifest.rkt") (lib "gtp-measure/private/test/sample-typed-untyped-target/typed/main.rkt") (lib "gtp-measure/private/test/sample-task/24/0-morsecode/configuration/morse-code-strings.rkt") (lib "gtp-measure/private/test/sample-manifest-target.rkt") (lib "gtp-measure/private/util.rkt") (lib "gtp-measure/scribblings/gtp-measure.scrbl") (lib "gtp-measure/private/parse.rkt") (lib "gtp-measure/private/configure.rkt") (lib "gtp-measure/private/test/sample-typed-untyped-target/typed/a1.rkt") (lib "gtp-measure/private/measure.rkt") (lib "gtp-measure/private/raco.rkt") (lib "gtp-measure/private/test/sample-typed-untyped-target/untyped/main.rkt") (lib "gtp-measure/private/test/sample-typed-untyped-target/untyped/a1.rkt") (lib "gtp-measure/private/test/sample-task/24/manifest.rkt"))) (name . "gtp-measure") (nix-sha256 . "1g322j6vb7d4w2kkrd63siv5z224pjxcpw2q8zk3wz4a3bkydigc") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (benchmarking . #t) (gtp . #t) (ring:2 . #t))) (source . "https://github.com/bennn/gtp-measure.git") (tags . ("benchmarking" "gtp")) (versions . #hash((default . #hasheq((checksum . "738170b61c6de20120993d38eb9d15f42b95bae5") (source . "https://github.com/bennn/gtp-measure.git") (source_url . "https://github.com/bennn/gtp-measure.git"))))))) ("quickscript-extra" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/quickscript-extra.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/quickscript-extra.txt"))) (checksum . "989cb39c09a82bf8641e09352c87f5bf73cccda4") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "quickscript" "at-exp-lib" "drracket" "gui-lib" "pict-lib" "racket-index" "scribble-lib" "srfi-lite-lib" "web-server-lib" "racket-doc" "rackunit-lib")) (description . "Some scripts for Quickscript (must be installed first). See the README for installation.") (implies . ()) (last-checked . 1522414538) (last-edit . 1518256815) (last-updated . 1520955610) (modules . ((lib "quickscript-extra/scripts/current-file-example.rkt") (lib "quickscript-extra/scripts/dynamic-abbrev.rkt") (lib "quickscript-extra/scripts/pasterack.rkt") (lib "quickscript-extra/scripts/sections.rkt") (lib "quickscript-extra/scripts/reorder-tabs.rkt") (lib "quickscript-extra/scripts/open-terminal.rkt") (lib "quickscript-extra/scribblings/quickscript-extra.scrbl") (lib "quickscript-extra/scripts/author-date.rkt") (lib "quickscript-extra/register.rkt") (lib "quickscript-extra/scripts/reverse-selection.rkt") (lib "quickscript-extra/scripts/open-collect-file.rkt") (lib "quickscript-extra/scripts/regexp-replace.rkt") (lib "quickscript-extra/scripts/open-dir.rkt") (lib "quickscript-extra/scripts/bookmarks.rkt") (lib "quickscript-extra/scripts/indent-table.rkt") (lib "quickscript-extra/scripts/sort-lines.rkt") (lib "quickscript-extra/scripts/color-theme.rkt") (lib "quickscript-extra/scripts/abstract-variable.rkt") (lib "quickscript-extra/scripts/tweet.rkt") (lib "quickscript-extra/scripts/surround-selection.rkt") (lib "quickscript-extra/scripts/filepath-to-clipboard.rkt") (lib "quickscript-extra/scripts/add-menu.rkt") (lib "quickscript-extra/scripts/color-chooser.rkt") (lib "quickscript-extra/scripts/git.rkt") (lib "quickscript-extra/scripts/enter-submod.rkt") (lib "quickscript-extra/unregister.rkt") (lib "quickscript-extra/scripts/def-signatures.rkt") (lib "quickscript-extra/scripts/number-tabs.rkt") (lib "quickscript-extra/scripts/insert-pict.rkt") (lib "quickscript-extra/scripts/persistent-counter.rkt") (lib "quickscript-extra/scripts/goto-line.rkt") (lib "quickscript-extra/scripts/gui-tools.rkt") (lib "quickscript-extra/scripts/complete-word.rkt") (lib "quickscript-extra/scripts/provided-by.rkt"))) (name . "quickscript-extra") (nix-sha256 . "0ycqyn47xv64g24536xnn4p08n0fxf6cvyxkpxkzbmzd43nfnkkw") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (author:laurent.orseau@gmail.com . #t) (drracket . #t) (gui . #t) (ring:2 . #t))) (source . "https://github.com/Metaxal/quickscript-extra.git") (tags . ("drracket" "gui")) (versions . #hash((default . #hasheq((checksum . "989cb39c09a82bf8641e09352c87f5bf73cccda4") (source . "https://github.com/Metaxal/quickscript-extra.git") (source_url . "https://github.com/Metaxal/quickscript-extra.git"))))))) ("redex-chk" . #hasheq((author . "sgtamk@gmail.com") (authors . ("sgtamk@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/redex-chk.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/redex-chk.txt"))) (checksum . "b66f415966434e689842cc3cc60f8a48836d881b") (checksum-error . #f) (conflicts . ()) (dependencies . ("redex-lib" "base" "rackunit-lib")) (description . "rackunit/chk style checks for redex ('term' quotes automatically)") (implies . ()) (last-checked . 1522414668) (last-edit . 1476382419) (last-updated . 1502816388) (modules . ((lib "redex-chk/main.rkt"))) (name . "redex-chk") (nix-sha256 . "1jxjg32sw1s65kn1yqs91pxyhwda4a0fwyb12i4p8fkblw505vsn") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:sgtamk@gmail.com . #t) (redex . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/pnwamk/redex-chk#master") (tags . ("redex" "testing")) (versions . #hash((default . #hasheq((checksum . "b66f415966434e689842cc3cc60f8a48836d881b") (source . "git://github.com/pnwamk/redex-chk#master") (source_url . "http://github.com/pnwamk/redex-chk/tree/master#master"))))))) ("psd" . #hasheq((author . "juzhenliang@gmail.com") (authors . ("juzhenliang@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "psd"))) (failure-log . "server/built/fail/psd.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "acf16e2f3a7c28462a23eb3f5f25c1bf940658b6") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "draw-lib" "scribble-lib" "racket-doc")) (description . "Read (and will write) Photoshop Documents") (implies . ()) (last-checked . 1522414537) (last-edit . 1500119085) (last-updated . 1502816332) (modules . ((lib "psd/digitama/resources/id1036.rkt") (lib "psd/digitama/resources/id1028.rkt") (lib "psd/digitama/resources/id1003.rkt") (lib "psd/digitama/parser.rkt") (lib "psd/digitama/resources/id1057.rkt") (lib "psd/digitama/exn.rkt") (lib "psd/digitama/layer/blocks/lyid.rkt") (lib "psd/digitama/layer/blocks/lsct.rkt") (lib "psd/digitama/layer/parser.rkt") (lib "psd/tamer/psd.scrbl") (lib "psd/base.rkt") (lib "psd/digitama/resources/id1011.rkt") (lib "psd/digitama/layer/blocks/luni.rkt") (lib "psd/digitama/image.rkt") (lib "psd/digitama/resources/id1020.rkt") (lib "psd/digitama/resources/id1027.rkt") (lib "psd/digitama/unsafe/bitmap.rkt") (lib "psd/digitama/layer.rkt") (lib "psd/digitama/resources/id1007.rkt") (lib "psd/digitama/psd.rkt") (lib "psd/digitama/integer.rkt") (lib "psd/digitama/unsafe/layer.rkt") (lib "psd/digitama/resources/format.rkt") (lib "psd/digitama/misc.rkt") (lib "psd/tamer/psd.rkt") (lib "psd/digitama/layer/format.rkt") (lib "psd/layer.rkt") (lib "psd/village/packbits.rkt") (lib "psd/digitama/resources/id1077.rkt") (lib "psd/digitama/layer/blocks/txt2.rkt") (lib "psd/digitama/stdin.rkt") (lib "psd/digitama/resource.rkt") (lib "psd/digitama/unsafe/resource.rkt") (lib "psd/digitama/resources/id1032.rkt") (lib "psd/profile.rkt") (lib "psd/tamer/packbits.rkt") (lib "psd/digitama/resources/id1023.rkt") (lib "psd/main.rkt") (lib "psd/digitama/resources/id1002.rkt") (lib "psd/digitama/resources/id1060.rkt") (lib "psd/digitama/draw.rkt") (lib "psd/digitama/bitmap.rkt") (lib "psd/digitama/resources/id1000.rkt"))) (name . "psd") (nix-sha256 . "0bdbs28k484x50g4lmyl5n7jj5pq05g5pzz33f0qv88xgd62ixp8") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:juzhenliang@gmail.com . #t) (bitmap . #t) (file . #t) (parser . #t) (photoshop . #t) (ring:1 . #t) (typed-racket . #t) (unstable . #t))) (source . "git://github.com/wargrey/psd") (tags . ("bitmap" "file" "parser" "photoshop" "typed-racket" "unstable")) (versions . #hash((default . #hasheq((checksum . "acf16e2f3a7c28462a23eb3f5f25c1bf940658b6") (source . "git://github.com/wargrey/psd") (source_url . "http://github.com/wargrey/psd/tree/master"))))))) ("game-engine" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/game-engine.txt") (docs . (("main" "game-engine" "doc/game-engine@game-engine/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/game-engine.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/game-engine.txt"))) (checksum . "34dbcfa9c23c6a294c61f5b0ae5b04bcc5332ab0") (checksum-error . #f) (conflicts . ()) (dependencies . ("threading" "drracket" "htdp-lib" "lux" "jack-posn" "base")) (description . "An entity/component 2d game engine for rapid prototyping and educational purposes.  It is not (at the moment) particularly fast.") (implies . ()) (last-checked . 1522414403) (last-edit . 1519865915) (last-updated . 1522259516) (modules . ((lib "game-engine/components/animated-sprite.rkt") (lib "game-engine/components/counter.rkt") (lib "game-engine/components/on-start.rkt") (lib "game-engine/sheets.rkt") (lib "game-engine/entity-helpers/movement-util.rkt") (lib "game-engine/components/after-time.rkt") (lib "game-engine/components/every-tick.rkt") (lib "game-engine/components/direction.rkt") (lib "game-engine/component-util.rkt") (lib "game-engine/components/on-collide.rkt") (lib "game-engine/components.rkt") (lib "game-engine/ai.rkt") (lib "game-engine/components/health.rkt") (lib "game-engine/game-engine.rkt") (lib "game-engine/components/spawner.rkt") (lib "game-engine/marching-squares.rkt") (lib "game-engine/quick-testers.rkt") (lib "game-engine/grids.rkt") (lib "game-engine/main.rkt") (lib "game-engine/components/key-animator.rkt") (lib "game-engine/game-engine.scrbl") (lib "game-engine/components/key-movement.rkt") (lib "game-engine/game-entities.rkt") (lib "game-engine/terrain-data.rkt"))) (name . "game-engine") (nix-sha256 . "1sbms7g5ivgqzdc26rd2k6s343981vhpfm791fy149lrh7ql3v80") (ring . 2) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:stephen@thoughtstem.com . #t) (games . #t) (ring:2 . #t))) (source . "https://github.com/srfoster/game-engine.git") (tags . ("games")) (versions . #hash((default . #hasheq((checksum . "34dbcfa9c23c6a294c61f5b0ae5b04bcc5332ab0") (source . "https://github.com/srfoster/game-engine.git") (source_url . "https://github.com/srfoster/game-engine.git"))))))) ("mario" . #hasheq((author . "mlang@blind.guru") (authors . ("mlang@blind.guru")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/mario.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mario.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mario.txt"))) (checksum . "4604f58610230176abdde0ffca38c9df77810a49") (checksum-error . #f) (conflicts . ()) (dependencies . ()) (description . "An interpreter for the 2d programming language MarioLANG") (implies . ()) (last-checked . 1522414427) (last-edit . 1516019981) (last-updated . 1516105047) (modules . ((lib "mario/semantics.rkt") (lib "mario/99bottles.rkt") (lib "mario/main.rkt"))) (name . "mario") (nix-sha256 . "0iv7njr1b6k03mgk5nnjw6j90qd6a8ji0cj6cisk9jndicc5y0gs") (ring . 2) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (MarioLANG . #t) (author:mlang@blind.guru . #t) (language . #t) (ring:2 . #t))) (source . "https://github.com/mlang/mario.git") (tags . ("language" "MarioLANG")) (versions . #hash((default . #hasheq((checksum . "4604f58610230176abdde0ffca38c9df77810a49") (source . "https://github.com/mlang/mario.git") (source_url . "https://github.com/mlang/mario.git"))))))) ("plai-lazy" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "plai-lazy" "doc/plai-lazy@plai-lazy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plai-lazy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plai-lazy.txt"))) (checksum . "814aa836ba1b981b9916fbfa9ba7b2683b0350c4") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "gui-lib" "lazy" "plai" "sandbox-lib" "scheme-lib" "srfi-lite-lib" "racket-doc" "scribble-lib")) (description . "A lazy variant of the plai language") (implies . ()) (last-checked . 1522414513) (last-edit . 1438617273) (last-updated . 1502816261) (modules . ((lib "plai-lazy/main.rkt") (lib "plai-lazy/test-harness.rkt") (lib "plai-lazy/private/gc-transformer.rkt") (lib "plai-lazy/private/collector-exports.rkt") (lib "plai-lazy/private/sandbox.rkt") (lib "plai-lazy/private/gc-core.rkt") (lib "plai-lazy/private/random-mutator.rkt") (lib "plai-lazy/datatype.rkt") (lib "plai-lazy/private/test.rkt") (lib "plai-lazy/private/command-line.rkt") (lib "plai-lazy/scribblings/plai-lazy.scrbl") (lib "plai-lazy/private/gc-gui.rkt") (lib "plai-lazy/lang/reader.rkt"))) (name . "plai-lazy") (nix-sha256 . "05rr92xhd8lq23pcfydr3dzvh7pg81vjn6735622fhx7kzcljl7b") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mflatt@cs.utah.edu . #t) (language . #t) (ring:1 . #t))) (source . "git://github.com/mflatt/plai-lazy") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "814aa836ba1b981b9916fbfa9ba7b2683b0350c4") (source . "git://github.com/mflatt/plai-lazy") (source_url . "http://github.com/mflatt/plai-lazy/tree/master"))))))) ("clang" . #hasheq((author . "juzhenliang@gmail.com") (authors . ("juzhenliang@gmail.com")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (("none" "c"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/clang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/clang.txt"))) (checksum . "883e6c18bff364b9b436a536e4905dd12e46dd46") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc")) (description . "A series of C utilities for Typed Racket") (implies . ()) (last-checked . 1522414313) (last-edit . 1501655040) (last-updated . 1502812290) (modules . ((lib "clang/tamer/c.scrbl"))) (name . "clang") (nix-sha256 . "17pd78q1rhhs4xbc3wjh102arv8xsjqyjhijvi2688rb3rjbd5wn") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:docs-error: . #t) (C . #t) (author:juzhenliang@gmail.com . #t) (ffi . #t) (parser . #t) (ring:1 . #t) (typed-racket . #t) (unsafe . #t) (unstable . #t))) (source . "git://github.com/wargrey/c") (tags . ("C" "ffi" "parser" "typed-racket" "unsafe" "unstable")) (versions . #hash((default . #hasheq((checksum . "883e6c18bff364b9b436a536e4905dd12e46dd46") (source . "git://github.com/wargrey/c") (source_url . "http://github.com/wargrey/c/tree/master"))))))) ("version-case" . #hasheq((author . "samth@racket-lang.org dyoo@hashcollision.org") (authors . ("samth@racket-lang.org" "dyoo@hashcollision.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "version-case" "doc/version-case@version-case/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/version-case.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/version-case.txt"))) (checksum . "da496dc183325d9dd3bebcdf2e2813d7ee5e87c9") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "drracket-plugin-lib" "gui-lib" "scheme-lib" "srfi-lib" "srfi-lite-lib" "racket-doc" "scribble-lib")) (description . "Conditional behavior based on the version of Racket") (implies . ()) (last-checked . 1522414700) (last-edit . 1456936264) (last-updated . 1502816518) (modules . ((lib "version-case/version-case.scrbl") (lib "version-case/main.rkt") (lib "version-case/version-case.rkt") (lib "version-case/private/new-version-case.rkt") (lib "version-case/private/old-version-case.rkt") (lib "version-case/test-version-case.rkt") (lib "version-case/version-misc.rkt"))) (name . "version-case") (nix-sha256 . "037acnpqljcbhij3nkhabf67as94sfnmf6sk69g8nw1bn8a1qb9y") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:dyoo@hashcollision.org . #t) (author:samth@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/samth/version-case") (tags . ()) (versions . #hash((default . #hasheq((checksum . "da496dc183325d9dd3bebcdf2e2813d7ee5e87c9") (source . "git://github.com/samth/version-case") (source_url . "http://github.com/samth/version-case/tree/master"))))))) ("raco-find-collection" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "raco-fc" "doc/raco-fc@raco-find-collection/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raco-find-collection.txt") (test-failure-log . "server/built/test-fail/raco-find-collection.txt") (test-success-log . #f))) (checksum . "00f0d3dbad025fdb98d23b9ee1a78731f460d541") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "compiler-lib" "rackunit-lib" "scribble-lib")) (description . "A script to find collections.") (implies . ()) (last-checked . 1522414664) (last-edit . 1470935846) (last-updated . 1502816378) (modules . ((lib "find-collection/run.rkt") (lib "find-collection/raco-fc.scrbl") (lib "find-collection/find-collection.rkt"))) (name . "raco-find-collection") (nix-sha256 . "07ybiv87lh4y050wpfxz7jk31wklmjzf8ical1fxclwr3sk7kaws") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (ring:1 . #t) (search . #t) (tools . #t))) (source . "git://github.com/takikawa/raco-find-collection") (tags . ("search" "tools")) (versions . #hash((default . #hasheq((checksum . "00f0d3dbad025fdb98d23b9ee1a78731f460d541") (source . "git://github.com/takikawa/raco-find-collection") (source_url . "http://github.com/takikawa/raco-find-collection/tree/master"))))))) ("temp-c-doc" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "temp-c" "doc/temp-c@temp-c-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/temp-c-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/temp-c-doc.txt"))) (checksum . "43f7f2141c81a301aa229ef4105f458eee070653") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.2.900.4") "temp-c-lib" "scribble-lib" "automata" "racket-doc")) (description . "temporal contracts") (implies . ()) (last-checked . 1522414690) (last-edit . 1504535626) (last-updated . 1502816475) (modules . ((lib "temp-c/scribblings/temp-c.scrbl"))) (name . "temp-c-doc") (nix-sha256 . "0wfidwr35dwx2hp22q0gp2cw5phnb72mczm68jbhfwzfxiiryd1b") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (contracts . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/temp-c?path=temp-c-doc") (tags . ("contracts")) (versions . #hash((default . #hasheq((checksum . "43f7f2141c81a301aa229ef4105f458eee070653") (source . "git://github.com/jeapostrophe/temp-c?path=temp-c-doc") (source_url . "http://github.com/jeapostrophe/temp-c/tree/master?path=temp-c-doc"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("txexpr" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "txexpr" "doc/txexpr@txexpr/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/txexpr.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/txexpr.txt"))) (checksum . "3e866506cc864a32a6078bda192795045edf9123") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" ("sugar" #:version "0.2") "rackunit-lib" "scribble-lib" "racket-doc" "rackunit-doc")) (description . "Handy tools for working with HTML-style tagged X-expressions") (implies . ()) (last-checked . 1522414694) (last-edit . 1435444486) (last-updated . 1511402924) (modules . ((lib "txexpr/scribblings/txexpr.scrbl") (lib "txexpr/check.rkt") (lib "txexpr/base.rkt") (lib "txexpr/unstable/main.rkt") (lib "txexpr/tests.rkt") (lib "txexpr/main.rkt"))) (name . "txexpr") (nix-sha256 . "046kdr9mbvj1qdcngd0dwdsv7al0a27cc0rhg0q3g06z32xzg7l7") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mb@mbtype.com . #t) (ring:1 . #t) (web . #t))) (source . "git://github.com/mbutterick/txexpr") (tags . ("web")) (versions . #hash((default . #hasheq((checksum . "3e866506cc864a32a6078bda192795045edf9123") (source . "git://github.com/mbutterick/txexpr") (source_url . "http://github.com/mbutterick/txexpr/tree/master"))))))) ("racket-test-core" . #hash((author . "eli@racket-lang.org jay@racket-lang.org matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org ryanc@racket-lang.org samth@racket-lang.org") (checksum . "4e514b4dd3b7cde3cf22f7909fcf7e746782f842") (dependencies . ("base" "zo-lib" "at-exp-lib" "serialize-cstruct-lib" "dynext-lib" "sandbox-lib")) (description . "eli@racket-lang.org jay@racket-lang.org matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org ryanc@racket-lang.org samth@racket-lang.org") (modules . ()) (name . "racket-test-core") (source . "https://download.racket-lang.org/releases/6.12/pkgs/racket-test-core.zip") (tags . ()))) ("poppler-x86-64-macosx" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/poppler-x86-64-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/poppler-x86-64-macosx.txt"))) (checksum . "e063f0463664e0fe4943135020826ff5bbbd3ce9") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for \"racket-poppler\" package") (implies . ()) (last-checked . 1522414535) (last-edit . 1409089876) (last-updated . 1502816319) (modules . ()) (name . "poppler-x86-64-macosx") (nix-sha256 . "1wq635670nyzh5y46bd2hkv8vmizxxqfk30469flm8fvijrzb465") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jensaxel@soegaard.net . #t) (poppler . #t) (ring:1 . #t))) (source . "git://github.com/soegaard/poppler-libs?path=poppler-x86_64-macosx") (tags . ("poppler")) (versions . #hash((default . #hasheq((checksum . "e063f0463664e0fe4943135020826ff5bbbd3ce9") (source . "git://github.com/soegaard/poppler-libs?path=poppler-x86_64-macosx") (source_url . "http://github.com/soegaard/poppler-libs/tree/master?path=poppler-x86_64-macosx"))))))) ("db-test" . #hash((author . "ryanc@racket-lang.org") (checksum . "cd88d85d26790c042bd08451aebafaa1ea81b3a9") (dependencies . ("base" "db-lib" "rackunit-lib" "web-server-lib" "srfi-lite-lib")) (description . "ryanc@racket-lang.org") (modules . ()) (name . "db-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/db-test.zip") (tags . ()))) ("finalizer" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "finalizer" "doc/finalizer@finalizer/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/finalizer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/finalizer.txt"))) (checksum . "74517770d70b786a3df48fd20ea9ea8059e4a641") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "Trivial finalizer. Does action when object garbage collected") (implies . ()) (last-checked . 1522414401) (last-edit . 1407088564) (last-updated . 1502816067) (modules . ((lib "finalizer/main.rkt") (lib "finalizer/finalizer.scrbl"))) (name . "finalizer") (nix-sha256 . "0330q6n7s1zvszh3x8x47njhdm1v7l3kamwnsrgplp6hjchl4i5w") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (dev . #t) (ring:1 . #t))) (source . "git://github.com/Kalimehtar/finalizer") (tags . ("dev")) (versions . #hash((default . #hasheq((checksum . "74517770d70b786a3df48fd20ea9ea8059e4a641") (source . "git://github.com/Kalimehtar/finalizer") (source_url . "http://github.com/Kalimehtar/finalizer/tree/master"))))))) ("poppler-win32-x86-64" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/poppler-win32-x86-64.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/poppler-win32-x86-64.txt"))) (checksum . "e063f0463664e0fe4943135020826ff5bbbd3ce9") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for \"racket-poppler\" package") (implies . ()) (last-checked . 1522414534) (last-edit . 1409089810) (last-updated . 1502816314) (modules . ()) (name . "poppler-win32-x86-64") (nix-sha256 . "1wq635670nyzh5y46bd2hkv8vmizxxqfk30469flm8fvijrzb465") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jensaxel@soegaard.net . #t) (poppler . #t) (ring:1 . #t))) (source . "git://github.com/soegaard/poppler-libs?path=poppler-win32-x86_64") (tags . ("poppler")) (versions . #hash((default . #hasheq((checksum . "e063f0463664e0fe4943135020826ff5bbbd3ce9") (source . "git://github.com/soegaard/poppler-libs?path=poppler-win32-x86_64") (source_url . "http://github.com/soegaard/poppler-libs/tree/master?path=poppler-win32-x86_64"))))))) ("functional" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/functional.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/functional.txt"))) (checksum . "c73fcb6ffb59c6bd43a70f3ff3a8af6a42459003") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "functional-lib" "functional-doc")) (description . "generic interfaces and data structures for functional programming") (implies . ("functional-lib" "functional-doc")) (last-checked . 1522414402) (last-edit . 1475260470) (last-updated . 1512356808) (modules . ()) (name . "functional") (nix-sha256 . "11vycbvscpzcblvf8kvs6qklnxjnkrcbcfdj21fk6m017wk3wis3") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:lexi.lambda@gmail.com . #t) (functional . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/functional?path=functional") (tags . ("functional")) (versions . #hash(("6.2.1" . #hasheq((checksum . "6709e8525aad5420d0bb3f0dc5dce5acb9bd9f3f") (source . "git://github.com/lexi-lambda/functional?path=functional#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/functional/tree/master?path=functional#version-exception--6.2"))) (default . #hasheq((checksum . "c73fcb6ffb59c6bd43a70f3ff3a8af6a42459003") (source . "git://github.com/lexi-lambda/functional?path=functional") (source_url . "http://github.com/lexi-lambda/functional/tree/master?path=functional"))) ("6.2" . #hasheq((checksum . "6709e8525aad5420d0bb3f0dc5dce5acb9bd9f3f") (source . "git://github.com/lexi-lambda/functional?path=functional#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/functional/tree/master?path=functional#version-exception--6.2"))))))) ("sasl-lib" . #hash((author . "ryanc@racket-lang.org") (checksum . "dbd5fa986d9e2c1d28da5bc07f899019d8cfb9ef") (dependencies . (("base" #:version "6.10"))) (description . "ryanc@racket-lang.org") (modules . ()) (name . "sasl-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/sasl-lib.zip") (tags . ()))) ("slideshow-exe" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (checksum . "b1e6af193af1640e85373e4310fa6c198e8ca202") (dependencies . ("base" "compatibility-lib" "gui-lib" "pict-lib" "slideshow-lib")) (description . "mflatt@racket-lang.org robby@racket-lang.org") (modules . ()) (name . "slideshow-exe") (source . "https://download.racket-lang.org/releases/6.12/pkgs/slideshow-exe.zip") (tags . ()))) ("poppler-i386-macosx" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/poppler-i386-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/poppler-i386-macosx.txt"))) (checksum . "e063f0463664e0fe4943135020826ff5bbbd3ce9") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for \"racket-poppler\" package") (implies . ()) (last-checked . 1522414534) (last-edit . 1409089891) (last-updated . 1502816300) (modules . ()) (name . "poppler-i386-macosx") (nix-sha256 . "1wq635670nyzh5y46bd2hkv8vmizxxqfk30469flm8fvijrzb465") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jensaxel@soegaard.net . #t) (poppler . #t) (ring:1 . #t))) (source . "git://github.com/soegaard/poppler-libs?path=poppler-i386-macosx") (tags . ("poppler")) (versions . #hash((default . #hasheq((checksum . "e063f0463664e0fe4943135020826ff5bbbd3ce9") (source . "git://github.com/soegaard/poppler-libs?path=poppler-i386-macosx") (source_url . "http://github.com/soegaard/poppler-libs/tree/master?path=poppler-i386-macosx"))))))) ("bencode" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "bencode" "doc/bencode@bencode/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bencode.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bencode.txt"))) (checksum . "676a8979ef85eefd1373c2afb91649a22ae98c93") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "overeasy")) (description . "BitTorrent Bencode Decoding") (implies . ()) (last-checked . 1522414305) (last-edit . 1456638265) (last-updated . 1502812280) (modules . ((lib "bencode/bencode.scrbl") (lib "bencode/main.rkt"))) (name . "bencode") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (bittorrent . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/bencode.zip") (tags . ("bittorrent")) (versions . #hash((default . #hasheq((checksum . "676a8979ef85eefd1373c2afb91649a22ae98c93") (source . "http://www.neilvandyke.org/racket/bencode.zip") (source_url . "http://www.neilvandyke.org/racket/bencode.zip"))))))) ("adjutor" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "adjutor" "doc/adjutor@adjutor/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/adjutor.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/adjutor.txt"))) (checksum . "db2f25ba8963488855d42f1aa504ecfda0935a72") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.11") "rackunit-lib" "static-rename-lib" "scribble-lib" "racket-doc" "rackunit-spec" "scribble-doc")) (description . "A helper library") (implies . ()) (last-checked . 1522417868) (last-edit . 1509151638) (last-updated . 1518726234) (modules . ((lib "adjutor/scribblings/find-executable-path.scrbl") (lib "adjutor/link-change-evt.rkt") (lib "adjutor/define-star.rkt") (lib "adjutor/scribblings/utils.rkt") (lib "adjutor/rx.rkt") (lib "adjutor/test.rkt") (lib "adjutor/scribblings/stable.scrbl") (lib "adjutor/find-executable-path.rkt") (lib "adjutor/main.rkt") (lib "adjutor/scribblings/adjutor.scrbl") (lib "adjutor/scribblings/experimental.scrbl") (lib "adjutor/check-args.rkt") (lib "adjutor/in-value-star.rkt") (lib "adjutor/require-provide.rkt") (lib "adjutor/scribblings/link-change-evt.scrbl") (lib "adjutor/kernel.rkt") (lib "adjutor/structure.rkt") (lib "adjutor/test-link-change-evt.rkt"))) (name . "adjutor") (nix-sha256 . "1lw07mxl00sw2jk7794q5r8r03pn00sqg478h32940hiihwi64h3") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:philip@philipmcgrath.com . #t) (ring:1 . #t) (sugar . #t) (util . #t) (utility . #t))) (source . "https://github.com/LiberalArtist/adjutor.git") (tags . ("sugar" "util" "utility")) (versions . #hash((default . #hasheq((checksum . "db2f25ba8963488855d42f1aa504ecfda0935a72") (source . "https://github.com/LiberalArtist/adjutor.git") (source_url . "https://github.com/LiberalArtist/adjutor.git"))))))) ("match-string" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "match-string" "doc/match-string@match-string/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/match-string.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/match-string.txt"))) (checksum . "fffad4c2dee79073bf8931c41c02e260e9d44ee5") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackjure" "rackunit-lib" "htdp-lib" "racket-doc" "scribble-lib" "sandbox-lib")) (description . "string-append and append as a match patterns") (implies . ()) (last-checked . 1522414428) (last-edit . 1408914307) (last-updated . 1502816164) (modules . ((lib "match-string/ooo.rkt") (lib "match-string/main.rkt") (lib "match-string/syntax-classes.rkt") (lib "list-with-splicing/main.rkt") (lib "match-string/docs/match-string.scrbl"))) (name . "match-string") (nix-sha256 . "1zc9jhfjvfvdj43qm8z96p69c4qsf91j844z10gzckl9z2xlb6qz") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (match . #t) (ring:1 . #t) (string . #t))) (source . "git://github.com/AlexKnauth/match-string") (tags . ("match" "string")) (versions . #hash((default . #hasheq((checksum . "fffad4c2dee79073bf8931c41c02e260e9d44ee5") (source . "git://github.com/AlexKnauth/match-string") (source_url . "http://github.com/AlexKnauth/match-string/tree/master"))))))) ("google" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/google.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/google.txt"))) (checksum . "236b1fb8bdd0975bf2ce820f6277927c7bc25635") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "gui-lib" "net-lib" "rackunit-lib")) (description . "Google APIs (Drive, Plus, ...) for Racket.") (implies . ()) (last-checked . 1522414405) (last-edit . 1441050883) (last-updated . 1502816085) (modules . ((lib "google/drive.rkt") (lib "google/generic-api.rkt") (lib "google/simple-token-store.rkt") (lib "google/calendar.rkt") (lib "google/oauth.rkt") (lib "google/oauth/cli.rkt") (lib "google/profile.rkt") (lib "google/main.rkt") (lib "google/exn.rkt") (lib "google/json-utils.rkt"))) (name . "google") (nix-sha256 . "0s7mp9jg7fjr3kz2r9kmalv2jq333c2h7hq403kpa7xsfdqk2pbr") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (api . #t) (author:tonygarnockjones@gmail.com . #t) (google . #t) (ring:1 . #t) (web . #t))) (source . "github://github.com/tonyg/racket-google/master") (tags . ("api" "google" "web")) (versions . #hash((default . #hasheq((checksum . "236b1fb8bdd0975bf2ce820f6277927c7bc25635") (source . "github://github.com/tonyg/racket-google/master") (source_url . "http://github.com/tonyg/racket-google/tree/master"))))))) ("htdp" . #hash((author . "matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org") (checksum . "bb8382812181fb0cba8258638395fdc00a76fa81") (dependencies . ("htdp-lib" "htdp-doc")) (description . "matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org") (modules . ()) (name . "htdp") (source . "https://download.racket-lang.org/releases/6.12/pkgs/htdp.zip") (tags . ()))) ("z3" . #hasheq((author . "pcn@cs.umd.edu") (authors . ("pcn@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/z3.txt") (test-failure-log . "server/built/test-fail/z3.txt") (test-success-log . #f))) (checksum . "84059a4428454cc6edd57865befaedb1d29dedce") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "html-lib" "typed-racket-lib" "typed-racket-more")) (description . "Z3 bindings for Racket") (implies . ()) (last-checked . 1522414704) (last-edit . 1472838610) (last-updated . 1502816536) (modules . ((lib "z3/smt/primitives.rkt") (lib "z3/smt.rkt") (lib "z3/ffi/ffi.rkt") (lib "z3/tests/guide.rkt") (lib "z3/ffi/ffi-typed.rkt") (lib "z3/smt/commands.rkt") (lib "z3/main.rkt") (lib "z3/ffi/define-ffi.rkt") (lib "z3/ffi/main.rkt") (lib "z3/ffi.rkt") (lib "z3/smt/main.rkt") (lib "z3/smt/private.rkt"))) (name . "z3") (nix-sha256 . "1gy3sir81l2khxm27rn8ira88ymh66f5zqlnbbnqdc9583pxx83p") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:pcn@cs.umd.edu . #t) (ring:1 . #t) (smt . #t) (solver . #t) (z3 . #t))) (source . "https://github.com/philnguyen/z3-rkt.git?path=z3/") (tags . ("smt" "solver" "z3")) (versions . #hash((default . #hasheq((checksum . "84059a4428454cc6edd57865befaedb1d29dedce") (source . "https://github.com/philnguyen/z3-rkt.git?path=z3/") (source_url . "https://github.com/philnguyen/z3-rkt.git?path=z3/"))))))) ("progedit" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "progedit" "doc/progedit@progedit/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/progedit.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/progedit.txt"))) (checksum . "28f6ce349a1173812a3efd1c95edb569c46e43f7") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "overeasy")) (description . "Programmatic File Editing") (implies . ()) (last-checked . 1522414537) (last-edit . 1456463405) (last-updated . 1502816331) (modules . ((lib "progedit/main.rkt") (lib "progedit/progedit.scrbl"))) (name . "progedit") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (editor . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/progedit.zip") (tags . ("editor")) (versions . #hash((default . #hasheq((checksum . "28f6ce349a1173812a3efd1c95edb569c46e43f7") (source . "http://www.neilvandyke.org/racket/progedit.zip") (source_url . "http://www.neilvandyke.org/racket/progedit.zip"))))))) ("web-io" . #hasheq((author . "matthias@ccs.neu.edu") (authors . ("matthias@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/web-io.txt") (docs . (("main" "web-io" "doc/web-io@web-io/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/web-io.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/web-io.txt"))) (checksum . "2225941f8ff49e1aa113c8dcacacfcf2b4a49b8a") (checksum-error . #f) (conflicts . ()) (dependencies . ("racket" "net-lib" "htdp-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "a replacement teach pack for F I at NEU (2016)") (implies . ()) (last-checked . 1522414701) (last-edit . 1476806439) (last-updated . 1502816521) (modules . ((lib "web-io/scribblings/web-io.scrbl") (lib "web-io/main.rkt"))) (name . "web-io") (nix-sha256 . "1civ4mirhli08qncl8khg8gxxgq1wlv61nhhjybpl98sh39ig115") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:matthias@ccs.neu.edu . #t) (ring:1 . #t))) (source . "git://github.com/mfelleisen/web-io.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "2225941f8ff49e1aa113c8dcacacfcf2b4a49b8a") (source . "git://github.com/mfelleisen/web-io.git") (source_url . "http://github.com/mfelleisen/web-io.git/tree/master"))))))) ("margrave" . #hasheq((author . "clements@racket-lang.org tn@cs.brown.edu") (authors . ("clements@racket-lang.org" "tn@cs.brown.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "margrave" "doc/margrave@margrave/index.html"))) (failure-log . "server/built/fail/margrave.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "b6d3039c5d741f18d345b4b047a48e0bccdb9e74") (checksum-error . #f) (conflicts . ()) (dependencies . ()) (description . "A policy analyzer") (implies . ()) (last-checked . 1522414427) (last-edit . 1509725627) (last-updated . 1509725147) (modules . ((lib "margrave/visualization/application/modelgraph.rkt") (lib "margrave/visualization/application/example.rkt") (lib "margrave/extra-files/margrave-lite-main.rkt") (lib "margrave/extra-files/margrave-full-main.rkt") (lib "margrave/scribblings/helper.rkt") (lib "margrave/extra-files/sup-ios.rkt") (lib "margrave/examples/scripts/examples.rkt") (lib "margrave/racket/language-info.rkt") (lib "margrave/scribblings/margrave.scrbl") (lib "margrave/racket.rkt") (lib "margrave/visualization/application/test.rkt") (lib "margrave/IOS-parser/ios.rkt") (lib "margrave/scribblings/representing-policies.scrbl") (lib "margrave/extended-examples/iptables-parser/margrave.rkt") (lib "margrave/visualization/application/visualize.rkt") (lib "margrave/visualization/application/example2.rkt") (lib "margrave/IOS-parser/ios-compile.rkt") (lib "margrave/extended-examples/IOS-simple/network.rkt") (lib "margrave/helpers.rkt") (lib "margrave/extended-examples/IOS-example1/forum1.rkt") (lib "margrave/visualization/application/apply-model.rkt") (lib "margrave/extra-files/sup-ios-new.rkt") (lib "margrave/visualization/application/controls.rkt") (lib "margrave/lang/reader.rkt") (lib "margrave/racket/runtime-config.rkt") (lib "margrave/scribblings/api.scrbl") (lib "margrave/margrave.rkt") (lib "margrave/extra-files/sup-iptables.rkt") (lib "margrave/margrave-ios.rkt") (lib "margrave/visualization/application/load-netgraph.rkt") (lib "margrave/parser.rkt") (lib "margrave/extended-examples/iptables-parser/ip.rkt") (lib "margrave/lexer.rkt") (lib "margrave/language-info.rkt") (lib "margrave/examples/scripts/ios-demo.rkt") (lib "margrave/extended-examples/IOS-simple/demo.rkt") (lib "margrave/visualization/application/netgraph.rkt") (lib "margrave/IOS-parser/ios-parse.rkt") (lib "margrave/scribblings/getting-started.scrbl") (lib "margrave/margrave-policy-vocab.rkt") (lib "margrave/visualization/application/topotest.rkt") (lib "margrave/extra-files/scratch.rkt") (lib "margrave/extended-examples/IOS-example1/testack.rkt") (lib "margrave/examples/scripts/network.rkt") (lib "margrave/runtime-config.rkt") (lib "margrave/racket/lang/reader.rkt") (lib "margrave/extra-files/lang_test.rkt") (lib "margrave/main.rkt") (lib "margrave/tests/lang-margrave-tests.rkt") (lib "margrave/xml-test.rkt") (lib "margrave/extended-examples/iptables-parser/iptables.rkt") (lib "margrave/extra-files/large-ios.rkt") (lib "margrave/margrave-xml.rkt") (lib "margrave/scribblings/commands.scrbl") (lib "margrave/visualization/application/visxml.rkt") (lib "margrave/compiler.rkt") (lib "margrave/extended-examples/IOS-example2/forum2.rkt") (lib "margrave/tests.rkt"))) (name . "margrave") (nix-sha256 . "0z15x11vzwln75a5mj2vgyy92zwlnwxw2ymj7zpnzzym3af2yana") (ring . 2) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (:no-tag: . #t) (author:clements@racket-lang.org . #t) (author:tn@cs.brown.edu . #t) (ring:2 . #t))) (source . "https://github.com/jbclements/margrave.git#LISA10-pkg") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b6d3039c5d741f18d345b4b047a48e0bccdb9e74") (source . "https://github.com/jbclements/margrave.git#LISA10-pkg") (source_url . "https://github.com/jbclements/margrave.git#LISA10-pkg"))))))) ("images" . #hash((author . "ntoronto@racket-lang.org") (checksum . "66860c5d295a5494e5bbd7686cdaa87323ef9ff2") (dependencies . ("images-lib" "images-gui-lib" "images-doc")) (description . "ntoronto@racket-lang.org") (modules . ()) (name . "images") (source . "https://download.racket-lang.org/releases/6.12/pkgs/images.zip") (tags . ()))) ("slideshow-pretty" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/slideshow-pretty.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/slideshow-pretty.txt"))) (checksum . "021378757a40163f8e84efe616eb17036eeb2a4f") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "draw-lib" "gui-lib" "slideshow-lib" "slideshow-latex" "racket-doc" "scribble-lib" "slideshow-doc")) (description . "Slideshow extensions to add pretty transitions between slides.") (implies . ()) (last-checked . 1522414680) (last-edit . 1396319678) (last-updated . 1502816436) (modules . ((lib "slideshow/pretty.rkt"))) (name . "slideshow-pretty") (nix-sha256 . "1ls5awaqjrsmbcdwd8vwh22rpdgj9j017k6mbahmxk7zb7bs17dv") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t) (slideshow . #t))) (source . "github://github.com/LeifAndersen/slideshow-pretty/master") (tags . ("slideshow")) (versions . #hash((default . #hasheq((checksum . "021378757a40163f8e84efe616eb17036eeb2a4f") (source . "github://github.com/LeifAndersen/slideshow-pretty/master") (source_url . "http://github.com/LeifAndersen/slideshow-pretty/tree/master"))))))) ("2htdp-typed" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "2htdp-typed" "doc/2htdp-typed@2htdp-typed/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/2htdp-typed.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/2htdp-typed.txt"))) (checksum . "b46c957f0ad7490bc7b0f01da0e80380f34cac2d") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "draw-lib" "htdp-lib" "typed-racket-lib" "typed-racket-more" "unstable-list-lib" "unstable-contract-lib" "scribble-lib" "racket-doc" "htdp-doc" "typed-racket-doc")) (description . "A partial version of 2htdp for Typed Racket") (implies . ()) (last-checked . 1522417865) (last-edit . 1493076385) (last-updated . 1502815863) (modules . ((lib "typed/scribblings/2htdp-typed.scrbl") (lib "typed/2htdp/batch-io.rkt") (lib "typed/2htdp/image.rkt") (lib "typed/2htdp/private/big-bang-wrapper.rkt") (lib "typed/lang/posn.rkt") (lib "typed/2htdp/universe.rkt"))) (name . "2htdp-typed") (nix-sha256 . "0kdrbxmy2bx9rj9is7nk168nc3rx77yig2b8kpyv1cjgmfhk53za") (ring . 1) (search-terms . #hasheq((2htdp . #t) (:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (big-bang . #t) (gui . #t) (ring:1 . #t) (typed-racket . #t))) (source . "git://github.com/lexi-lambda/racket-2htdp-typed") (tags . ("2htdp" "big-bang" "gui" "typed-racket")) (versions . #hash(("6.1.1" . #hasheq((checksum . "4f3d46b80f59f5a4dd47d3384c68f6c07c923329") (source . "git://github.com/lexi-lambda/racket-2htdp-typed#v6.1.1") (source_url . "http://github.com/lexi-lambda/racket-2htdp-typed/tree/master#v6.1.1"))) (default . #hasheq((checksum . "b46c957f0ad7490bc7b0f01da0e80380f34cac2d") (source . "git://github.com/lexi-lambda/racket-2htdp-typed") (source_url . "http://github.com/lexi-lambda/racket-2htdp-typed/tree/master"))))))) ("job-queue-lib" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/job-queue-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/job-queue-lib.txt"))) (checksum . "0a2c349636aa88b06c9c299ef201494df648b164") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "A library for managing sets of workers and their jobs. (lib)") (implies . ()) (last-checked . 1522414421) (last-edit . 1504535520) (last-updated . 1502816143) (modules . ((lib "job-queue/main.rkt"))) (name . "job-queue-lib") (nix-sha256 . "066m6rjc3qvlnr15jm6n5mdl4cgc5n12imwkj3aw56sc2cyhs1kd") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (concurrency . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/job-queue?path=job-queue-lib") (tags . ("concurrency")) (versions . #hash((default . #hasheq((checksum . "0a2c349636aa88b06c9c299ef201494df648b164") (source . "git://github.com/jeapostrophe/job-queue?path=job-queue-lib") (source_url . "http://github.com/jeapostrophe/job-queue/tree/master?path=job-queue-lib"))))))) ("optimization-coach" . #hash((author . "stamourv@racket-lang.org") (checksum . "6da9286ee0dabefc95f51f620375ea329446b6c1") (dependencies . (("base" #:version "6.2.900.6") ("drracket" #:version "1.6") ("typed-racket-lib" #:version "1.7") "profile-lib" "rackunit-lib" "gui-lib" "data-lib" "source-syntax" "images-lib" "sandbox-lib" "string-constants-lib" "scribble-lib")) (description . "stamourv@racket-lang.org") (modules . ()) (name . "optimization-coach") (source . "https://download.racket-lang.org/releases/6.12/pkgs/optimization-coach.zip") (tags . ()))) ("pitfall" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/pitfall.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "8c412bcede990352c168e7304efeb508e3e1f87f") (checksum-error . #f) (conflicts . ()) (dependencies . ("at-exp-lib" "beautiful-racket-lib" "brag" "describe" "png-image" "srfi-lite-lib" "sugar" "debug" "base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "PDF generation library [under development]") (implies . ()) (last-checked . 1522414513) (last-edit . 1519778446) (last-updated . 1522129955) (modules . ((lib "pitfall/color.rkt") (lib "pitfall/text.rkt") (lib "fontkit/script.rkt") (lib "pitfall/struct.rkt") (lib "ptest/test8.rkt") (lib "fontkit/ttfglyphencoder.rkt") (lib "fontkit/CFF_.rkt") (lib "ptest/test4.rkt") (lib "xenomorph/pointer.rkt") (lib "fontkit/glyph.rkt") (lib "fontkit/GPOS.rkt") (lib "pitfall/font.rkt") (lib "xenomorph/private/utils.rkt") (lib "fontkit/gsub-processor-test.rkt") (lib "ptest/test19.rkt") (lib "xenomorph/private/sizes.rkt") (lib "sugar/case.rkt") (lib "pitfall/binprint.rkt") (lib "pitfall/images.rkt") (lib "ptest/test5.rkt") (lib "pitfall/old/minimal-pdf-source.rkt") (lib "fontkit/ot-layout-engine.rkt") (lib "pitfall/old/minimal-embedded-font.rkt") (lib "fontkit/Untitled.rkt") (lib "xenomorph/test/versioned-struct-test.rkt") (lib "xenomorph/lazy-array.rkt") (lib "pitfall/old/minimal-pdf.rkt") (lib "xenomorph/test/number-test.rkt") (lib "fontkit/gpos-processor.rkt") (lib "pitfall/parse.rkt") (lib "fontkit/gpos-processor-test.rkt") (lib "ptest/test20.rkt") (lib "xenomorph/struct.rkt") (lib "ptest/test2.rkt") (lib "fontkit/GPOS-test.rkt") (lib "xenomorph/test/string-test.rkt") (lib "fontkit/glyph-iterator.rkt") (lib "ptest/test3.rkt") (lib "xenomorph/private/racket.rkt") (lib "pitfall/png-reader.rkt") (lib "fontkit/prep.rkt") (lib "fontkit/bbox.rkt") (lib "sugar/dict.rkt") (lib "xenomorph/test/test.rkt") (lib "xenomorph/private/pointer.rkt") (lib "pitfall/page-test.rkt") (lib "sugar/js.rkt") (lib "fontkit/helper.rkt") (lib "xenomorph/test/bitfield-test.rkt") (lib "pitfall/vector.rkt") (lib "xenomorph/private/base.rkt") (lib "xenomorph/versioned-struct.rkt") (lib "fontkit/font.rkt") (lib "pitfall/helper.rkt") (lib "pitfall/scribblings/pitfall.scrbl") (lib "fontkit/cvt_.rkt") (lib "pitfall/old/minimal-annotation-text.rkt") (lib "fontkit/subset.rkt") (lib "xenomorph/string.rkt") (lib "pitfall/param.rkt") (lib "sugar/class.rkt") (lib "pitfall/afm-font.rkt") (lib "pitfall/alltest.rkt") (lib "xenomorph/private/reserved.rkt") (lib "fontkit/opentype.rkt") (lib "sugar/stub.rkt") (lib "xenomorph/private/enum.rkt") (lib "ptest/test16.rkt") (lib "xenomorph/private/helper.rkt") (lib "pitfall/pdftest.rkt") (lib "xenomorph/base.rkt") (lib "xenomorph/private/array.rkt") (lib "pitfall/standard-font.rkt") (lib "xenomorph/private/generic.rkt") (lib "ptest/test09.rkt") (lib "xenomorph/private/lazy-array.rkt") (lib "pitfall/old/main.rkt") (lib "ptest/test7.rkt") (lib "xenomorph/enum.rkt") (lib "fontkit/ttfglyph.rkt") (lib "pitfall/main.rkt") (lib "xenomorph/test/optional-test.rkt") (lib "ptest/test13.rkt") (lib "ptest/test6.rkt") (lib "xenomorph/test/racket.rkt") (lib "fontkit/loca.rkt") (lib "pitfall/fonts.rkt") (lib "fontkit/glyphinfo.rkt") (lib "fontkit/directory.rkt") (lib "fontkit/shapers.rkt") (lib "xenomorph/reserved.rkt") (lib "pitfall/reference.rkt") (lib "pitfall/jpeg.rkt") (lib "xenomorph/test/array-test.rkt") (lib "xenomorph/test/lazy-array-test.rkt") (lib "fontkit/layout-engine.rkt") (lib "pitfall/old/render.rkt") (lib "xenomorph/array.rkt") (lib "xenomorph/scribblings/xenomorph.scrbl") (lib "xenomorph/test/pointer-test.rkt") (lib "fontkit/hhea.rkt") (lib "xenomorph/test/main.rkt") (lib "xenomorph/test/buffer-test.rkt") (lib "xenomorph/test/struct-test.rkt") (lib "fontkit/main.rkt") (lib "fontkit/default-shaper.rkt") (lib "pitfall/annotations.rkt") (lib "fontkit/maxp.rkt") (lib "fontkit/hmtx.rkt") (lib "xenomorph/number.rkt") (lib "xenomorph/main.rkt") (lib "xenomorph/private/versioned-struct.rkt") (lib "ptest/test18.rkt") (lib "fontkit/OS2.rkt") (lib "pitfall/object.rkt") (lib "pitfall/old/minimal-annotation-square.rkt") (lib "pitfall/old/glyph-list.rkt") (lib "pitfall/racket.rkt") (lib "xenomorph/private/string.rkt") (lib "ptest/test0.rkt") (lib "fontkit/gsub-processor.rkt") (lib "xenomorph/test/enum-test.rkt") (lib "pitfall/old/tokenizer.rkt") (lib "sugar/port.rkt") (lib "xenomorph/bitfield.rkt") (lib "xenomorph/test/reserved-test.rkt") (lib "pitfall/zlib.rkt") (lib "ptest/test10.rkt") (lib "pitfall/embedded.rkt") (lib "fontkit/glyf.rkt") (lib "fontkit/clone.rkt") (lib "pitfall/old/sample-unicode-text.rkt") (lib "pitfall/old/foo.rkt") (lib "pitfall/image.rkt") (lib "pitfall/old/triple-measured-font.rkt") (lib "xenomorph/private/optional.rkt") (lib "ptest/test11.rkt") (lib "pitfall/old/minimal-measured-font.rkt") (lib "xenomorph/optional.rkt") (lib "ptest/test17.rkt") (lib "pitfall/png.rkt") (lib "pitfall/old/test.rkt") (lib "ptest/test15.rkt") (lib "fontkit/post.rkt") (lib "pitfall/font-open.rkt") (lib "xenomorph/private/buffer.rkt") (lib "ptest/test14.rkt") (lib "ptest/test1.rkt") (lib "fontkit/GSUB.rkt") (lib "ptest/testrkt.rkt") (lib "xenomorph/buffer.rkt") (lib "fontkit/head.rkt") (lib "xenomorph/private/struct.rkt") (lib "pitfall/old/parser-test.rkt") (lib "pitfall/old/struct.rkt") (lib "sugar/contract.rkt") (lib "pitfall/old/sample-ext-encoding.rkt") (lib "fontkit/racket.rkt") (lib "pitfall/old/parser.rkt") (lib "fontkit/glyph-position.rkt") (lib "fontkit/shaping-plan.rkt") (lib "fontkit/freetype-ffi.rkt") (lib "fontkit/tables.rkt") (lib "pitfall/page.rkt") (lib "pitfall/old/parse.rkt") (lib "pitfall/document.rkt") (lib "pitfall/old/measure.rkt") (lib "fontkit/ot-processor.rkt") (lib "xenomorph/private/bitfield.rkt") (lib "fontkit/cmap-processor.rkt") (lib "ptest/test12.rkt") (lib "fontkit/fpgm.rkt") (lib "fontkit/glyphrun.rkt") (lib "fontkit/CFF2.rkt") (lib "xenomorph/private/number.rkt") (lib "pitfall/path.rkt"))) (name . "pitfall") (nix-sha256 . "1y8aja71hr7xi8wvcnvw0sw03321wjavy8y8h8mryrcbia9klmvj") (ring . 2) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:mb@mbtype.com . #t) (ring:2 . #t))) (source . "https://github.com/mbutterick/pitfall.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8c412bcede990352c168e7304efeb508e3e1f87f") (source . "https://github.com/mbutterick/pitfall.git") (source_url . "https://github.com/mbutterick/pitfall.git"))))))) ("pkg-index" . #hash((author . "jay@racket-lang.org") (authors . ("jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/pkg-index.txt") (success-log . "server/built/install/pkg-index.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pkg-index.txt"))) (checksum . "a59a079a9b82ebcc8dd0619916eaa5b01b0e269a") (checksum-error . #f) (conflicts . ()) (dependencies . ("racket-lib" "bcrypt")) (description . "The Racket package catalog server") (implies . ()) (last-checked . 1522414513) (last-edit . 1417570664) (last-updated . 1518053128) (modules . ((lib "pkg-index/official/main.rkt") (lib "pkg-index/official/common.rkt") (lib "pkg-index/official/notify.rkt") (lib "pkg-index/official/dynamic.rkt") (lib "pkg-index/planet-compat/common.rkt") (lib "pkg-index/official/configs/live.rkt") (lib "pkg-index/official/jsonp.rkt") (lib "pkg-index/official/configs/tonyg.rkt") (lib "pkg-index/official/s3.rkt") (lib "pkg-index/official/upload.rkt") (lib "pkg-index/planet-compat/update.rkt") (lib "pkg-index/planet-compat/static.rkt") (lib "pkg-index/official/build-update.rkt") (lib "pkg-index/official/update.rkt") (lib "pkg-index/basic/main.rkt") (lib "pkg-index/official/static.rkt") (lib "pkg-index/official/config.rkt"))) (name . "pkg-index") (nix-sha256 . "0lws7dwgi84dfy3203i7ss1la8x5lz5z9gznsfxl2yjmw0sn7llh") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:jay@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/racket/pkg-index") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a59a079a9b82ebcc8dd0619916eaa5b01b0e269a") (source . "git://github.com/racket/pkg-index") (source_url . "http://github.com/racket/pkg-index/tree/master"))))))) ("syntax-warn-lang" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-warn-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-warn-lang.txt"))) (checksum . "f00b27f92656f60d32853831ee905ceeb00693d9") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "syntax-warn-base" "rackunit-lib")) (description . "#lang racket/base/warn - Racket with syntax warnings") (implies . ()) (last-checked . 1522414689) (last-edit . 1473746095) (last-updated . 1502920414) (modules . ((lib "racket/base/warn.rkt") (lib "racket/base/private/require.rkt"))) (name . "syntax-warn-lang") (nix-sha256 . "0py8h9yxlxfnqlppcy1rwjj8bmnxymkavhpgcd68m1bj6ng4dhfn") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jackhfirth@gmail.com . #t) (lang . #t) (ring:1 . #t) (syntax . #t) (syntax-warn . #t))) (source . "git://github.com/jackfirth/syntax-warn?path=syntax-warn-lang") (tags . ("lang" "syntax" "syntax-warn")) (versions . #hash((default . #hasheq((checksum . "f00b27f92656f60d32853831ee905ceeb00693d9") (source . "git://github.com/jackfirth/syntax-warn?path=syntax-warn-lang") (source_url . "http://github.com/jackfirth/syntax-warn/tree/master?path=syntax-warn-lang"))))))) ("racl" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/racl.txt") (success-log . "server/built/install/racl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racl.txt"))) (checksum . "a54859d0e39e61a4b69e46454ad67299d1967c4f") (checksum-error . #f) (conflicts . ()) (dependencies . ("srfi-lite-lib" "base" "dynext-lib" "sandbox-lib" "rackunit-lib")) (description . "Racket bindings for NaCl, a cryptographic library.") (implies . ()) (last-checked . 1522414664) (last-edit . 1365119448) (last-updated . 1502816377) (modules . ((lib "racl/examples/repl-client.rkt") (lib "racl/ffi-lib.rkt") (lib "racl/spki-sexp.rkt") (lib "racl/tcp.rkt") (lib "racl/private/install.rkt") (lib "racl/main.rkt") (lib "racl/examples/repl-server.rkt") (lib "racl/keys.rkt") (lib "racl/test-main.rkt") (lib "racl/port.rkt") (lib "racl/session.rkt") (lib "racl/wrapper.rkt"))) (name . "racl") (nix-sha256 . "022aq5747md0z0ak5lw7m5syrnaiplf07snq2jv66545z3sbp1x0") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:tonygarnockjones@gmail.com . #t) (crypto . #t) (ffi . #t) (ring:1 . #t))) (source . "github://github.com/tonyg/racl/master") (tags . ("crypto" "ffi")) (versions . #hash((default . #hasheq((checksum . "a54859d0e39e61a4b69e46454ad67299d1967c4f") (source . "github://github.com/tonyg/racl/master") (source_url . "http://github.com/tonyg/racl/tree/master"))))))) ("binaryio" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "binaryio" "doc/binaryio@binaryio/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/binaryio.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/binaryio.txt"))) (checksum . "049278077f4f38e91579ff392f465bf1abb1514d") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.3") "binaryio-lib" "rackunit-lib" "math-lib" "racket-doc" "scribble-lib")) (description . "functions for reading and writing binary data") (implies . ("binaryio-lib")) (last-checked . 1522414311) (last-edit . 1501165587) (last-updated . 1505327328) (modules . ((lib "binaryio/test/integer.rkt") (lib "binaryio/test/bytes.rkt") (lib "binaryio/test/float.rkt") (lib "binaryio/binaryio.scrbl"))) (name . "binaryio") (nix-sha256 . "099w9q7qfavy1kf4y4l06v8y5fva600283r41yhliq3w0h9al2q2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (io . #t) (net . #t) (ring:1 . #t))) (source . "git://github.com/rmculpepper/binaryio?path=binaryio") (tags . ("io" "net")) (versions . #hash((default . #hasheq((checksum . "049278077f4f38e91579ff392f465bf1abb1514d") (source . "git://github.com/rmculpepper/binaryio?path=binaryio") (source_url . "http://github.com/rmculpepper/binaryio/tree/master?path=binaryio"))))))) ("charterm" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "charterm" "doc/charterm@charterm/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/charterm.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/charterm.txt"))) (checksum . "71dc10e9e39babd5afb6af62098d6b54ae7bfe8e") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib")) (description . "Character-cell Terminal Interface") (implies . ()) (last-checked . 1522414313) (last-edit . 1456463121) (last-updated . 1502812288) (modules . ((lib "charterm/charterm.scrbl") (lib "charterm/demo.rkt") (lib "charterm/main.rkt"))) (name . "charterm") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (ring:1 . #t) (terminal . #t))) (source . "http://www.neilvandyke.org/racket/charterm.zip") (tags . ("terminal")) (versions . #hash((default . #hasheq((checksum . "71dc10e9e39babd5afb6af62098d6b54ae7bfe8e") (source . "http://www.neilvandyke.org/racket/charterm.zip") (source_url . "http://www.neilvandyke.org/racket/charterm.zip"))))))) ("math-win32-x86_64" . #hash((author . "mflatt@racket-lang.org") (checksum . "ec4131f5038d1dffa13b025eb65037a96ffc57e9") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "math-win32-x86_64") (source . "https://download.racket-lang.org/releases/6.12/pkgs/math-win32-x86_64.zip") (tags . ()))) ("draw-win32-x86_64-2" . #hash((author . "mflatt@racket-lang.org") (checksum . "bbaec317dac23493b93ce56353a5d03ce92ee756") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "draw-win32-x86_64-2") (source . "https://download.racket-lang.org/releases/6.12/pkgs/draw-win32-x86_64-2.zip") (tags . ()))) ("libopenal-racket" . #hasheq((author . "lehi@tosk.in") (authors . ("lehi@tosk.in")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/libopenal-racket.txt") (docs . (("main" "libopenal-racket" "doc/libopenal-racket@libopenal-racket/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libopenal-racket.txt") (test-failure-log . "server/built/test-fail/libopenal-racket.txt") (test-success-log . #f))) (checksum . "30ce8d3f2e225b65d0502a0c4feb75e1dea35cc6") (checksum-error . #f) (conflicts . ()) (dependencies . ()) (description . "Racket wrapper for the OpenAL library") (implies . ()) (last-checked . 1522414424) (last-edit . 1471306400) (last-updated . 1513746941) (modules . ((lib "libopenal-racket/libopenal-racket.rkt") (lib "libopenal-racket/doc/libopenal-racket.scrbl") (lib "libopenal-racket/test/test.rkt") (lib "libopenal-racket/test/openal-test.rkt") (lib "libopenal-racket/main.rkt"))) (name . "libopenal-racket") (nix-sha256 . "0x39z2yw7kdqhx0i0jdd9l1qpnvjn2x4iqprac1qswy8zy6vn4s6") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (audio . #t) (author:lehi@tosk.in . #t) (openal . #t) (ring:1 . #t) (wrapper . #t))) (source . "git://github.com/lehitoskin/libopenal-racket") (tags . ("audio" "openal" "wrapper")) (versions . #hash((default . #hasheq((checksum . "30ce8d3f2e225b65d0502a0c4feb75e1dea35cc6") (source . "git://github.com/lehitoskin/libopenal-racket") (source_url . "http://github.com/lehitoskin/libopenal-racket/tree/master"))))))) ("net-lib" . #hash((author . "mflatt@racket-lang.org") (checksum . "072086da39b6813c6dac057736f769b880f7a6e4") (dependencies . ("srfi-lite-lib" "base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "net-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/net-lib.zip") (tags . ()))) ("webscraperhelper" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "webscraperhelper" "doc/webscraperhelper@webscraperhelper/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/webscraperhelper.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/webscraperhelper.txt"))) (checksum . "0cc7cf1c6ea962ad03fcf18f9b3230090725f175") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib")) (description . "Generating SXPath Queries from SXML Examples") (implies . ()) (last-checked . 1522414701) (last-edit . 1456658158) (last-updated . 1502816525) (modules . ((lib "webscraperhelper/main.rkt") (lib "webscraperhelper/webscraperhelper.scrbl"))) (name . "webscraperhelper") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (html . #t) (ring:1 . #t) (sxml . #t))) (source . "http://www.neilvandyke.org/racket/webscraperhelper.zip") (tags . ("html" "sxml")) (versions . #hash((default . #hasheq((checksum . "0cc7cf1c6ea962ad03fcf18f9b3230090725f175") (source . "http://www.neilvandyke.org/racket/webscraperhelper.zip") (source_url . "http://www.neilvandyke.org/racket/webscraperhelper.zip"))))))) ("redis" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/redis.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/redis.txt"))) (checksum . "ec69a3ea1c6b5eda35502361bc88d204c38b1120") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "data-lib" "rackunit-lib")) (description . "A redis client for Racket.") (implies . ()) (last-checked . 1522414670) (last-edit . 1380348836) (last-updated . 1502816397) (modules . ((lib "redis/redis.rkt") (lib "redis/redis-cmds.rkt") (lib "redis/test-utils.rkt") (lib "redis/main.rkt") (lib "redis/redis-tests.rkt") (lib "redis/bytes-utils.rkt"))) (name . "redis") (nix-sha256 . "1mgv35kns9wsdpq9jcmkqp04ya8b6r7p4cqqdld8y0zldif084q2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:stchang@racket-lang.org . #t) (db . #t) (redis . #t) (ring:1 . #t))) (source . "github://github.com/stchang/redis/master") (tags . ("db" "redis")) (versions . #hash((default . #hasheq((checksum . "ec69a3ea1c6b5eda35502361bc88d204c38b1120") (source . "github://github.com/stchang/redis/master") (source_url . "http://github.com/stchang/redis/tree/master"))))))) ("threading-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "threading" "doc/threading@threading-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/threading-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/threading-doc.txt"))) (checksum . "de68f80c91b47b5860709a0bb31b462b8300eb09") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "threading-lib")) (description . "documentation (no implementation) for “threading”") (implies . ()) (last-checked . 1522414692) (last-edit . 1497305804) (last-updated . 1502816484) (modules . ((lib "scribblings/threading.scrbl"))) (name . "threading-doc") (nix-sha256 . "03c7z97nn3l6033g99hhjmywrksf3ii4617kxnla8q8jsjpwzf81") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/threading?path=threading-doc") (tags . ()) (versions . #hash(("6.2.1" . #hasheq((checksum . "dee85e8d3cffaed85eb27bed8a8c61fc1eea8395") (source . "git://github.com/lexi-lambda/threading?path=threading-doc#compatibility-6.2") (source_url . "http://github.com/lexi-lambda/threading/tree/master?path=threading-doc#compatibility-6.2"))) (default . #hasheq((checksum . "de68f80c91b47b5860709a0bb31b462b8300eb09") (source . "git://github.com/lexi-lambda/threading?path=threading-doc") (source_url . "http://github.com/lexi-lambda/threading/tree/master?path=threading-doc"))) ("6.2" . #hasheq((checksum . "dee85e8d3cffaed85eb27bed8a8c61fc1eea8395") (source . "git://github.com/lexi-lambda/threading?path=threading-doc#compatibility-6.2") (source_url . "http://github.com/lexi-lambda/threading/tree/master?path=threading-doc#compatibility-6.2"))))))) ("r5rs-doc" . #hash((author . "mflatt@racket-lang.org") (checksum . "46ad8669f796ba9c50d8b698e6cf1551c76b7ab6") (dependencies . ("base" "mzscheme-doc" "scheme-lib" "scribble-lib" "r5rs-lib" "compatibility-lib" "racket-doc")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "r5rs-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/r5rs-doc.zip") (tags . ()))) ("icons" . #hash((author . "ntoronto@racket-lang.org") (checksum . "549650174f71bec06662eb059bffdc1f54ad7967") (dependencies . ("base")) (description . "ntoronto@racket-lang.org") (modules . ()) (name . "icons") (source . "https://download.racket-lang.org/releases/6.12/pkgs/icons.zip") (tags . ()))) ("syntax-classes" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-classes.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-classes.txt"))) (checksum . "fe1e1399b3c68c899f7613589d5f7835a16f370f") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "syntax-classes-lib" "syntax-classes-doc")) (description . "Additional useful syntax classes for use with syntax/parse") (implies . ("syntax-classes-lib" "syntax-classes-doc")) (last-checked . 1522414686) (last-edit . 1478370966) (last-updated . 1502816464) (modules . ()) (name . "syntax-classes") (nix-sha256 . "1xmgny6kg955q4w2kilw8wsslr9sq2wh58x2cq8i3q19h0bsicpv") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t) (syntax . #t))) (source . "git://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes") (tags . ("syntax")) (versions . #hash(("6.0" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "git://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/syntax-classes.git/tree/master?path=syntax-classes#version-exception--6.2"))) ("6.1.1" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "git://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/syntax-classes.git/tree/master?path=syntax-classes#version-exception--6.2"))) ("6.2.1" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "git://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/syntax-classes.git/tree/master?path=syntax-classes#version-exception--6.2"))) (default . #hasheq((checksum . "fe1e1399b3c68c899f7613589d5f7835a16f370f") (source . "git://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes") (source_url . "http://github.com/lexi-lambda/syntax-classes.git/tree/master?path=syntax-classes"))) ("6.0.1" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "git://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/syntax-classes.git/tree/master?path=syntax-classes#version-exception--6.2"))) ("6.2" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "git://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/syntax-classes.git/tree/master?path=syntax-classes#version-exception--6.2"))) ("6.1" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "git://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/syntax-classes.git/tree/master?path=syntax-classes#version-exception--6.2"))))))) ("fixture" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "fixture" "doc/fixture@fixture/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fixture.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fixture.txt"))) (checksum . "fafde5528ad6491cd9e87c078f9838eabc524a87") (checksum-error . #f) (conflicts . ()) (dependencies . ("reprovide-lang" "fancy-app" ("rackunit-lib" #:version "1.8") "base" ("disposable" #:version "0.2") "doc-coverage" "racket-doc" "rackunit-doc" "scribble-lib")) (description . "Provides test fixtures: resources that are automatically created and destroyed for each RackUnit test case") (implies . ()) (last-checked . 1522414401) (last-edit . 1504200527) (last-updated . 1505795359) (modules . ((lib "fixture/main.rkt") (lib "fixture/scribblings/main.scrbl") (lib "fixture/rackunit.rkt") (lib "fixture/tests/main.rkt") (lib "fixture/base.rkt") (lib "fixture/scribblings/base.rkt") (lib "fixture/tests/util.rkt") (lib "fixture/scribblings/util.rkt"))) (name . "fixture") (nix-sha256 . "0mwf1wp4v2w1l0k4q6c5hqajrch37aypn2rbfymwc6zfmgw3ikld") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (disposable . #t) (experimental . #t) (io . #t) (rackunit . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/jackfirth/racket-fixture") (tags . ("disposable" "experimental" "io" "rackunit" "testing")) (versions . #hash((default . #hasheq((checksum . "fafde5528ad6491cd9e87c078f9838eabc524a87") (source . "git://github.com/jackfirth/racket-fixture") (source_url . "http://github.com/jackfirth/racket-fixture/tree/master"))))))) ("script-plugin" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "script-plugin" "doc/script-plugin@script-plugin/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/script-plugin.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/script-plugin.txt"))) (checksum . "9aabe58a5d2aba860dce2bdf82cb33f50dec3801") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "at-exp-lib" "drracket" "drracket-plugin-lib" "gui-lib" "html-lib" "net-lib" "planet-lib" "slideshow-lib" "srfi-lite-lib" "gui-doc" "racket-doc" "racket-index" "scribble-lib" "web-server-lib" "planet-doc" "draw-doc")) (description . "A tool for DrRacket to easily extend it by writing racket scripts, without needing to restart DrRacket") (implies . ()) (last-checked . 1522414676) (last-edit . 1427792552) (last-updated . 1516441135) (modules . ((lib "script-plugin/examples/bookmarks.rkt") (lib "script-plugin/examples/provided-by.rkt") (lib "script-plugin/examples/sections.rkt") (lib "script-plugin/examples/tweet.rkt") (lib "script-plugin/examples/indent-table.rkt") (lib "script-plugin/examples/git.rkt") (lib "script-plugin/examples/color-theme.rkt") (lib "script-plugin/examples/dynamic-abbrev.rkt") (lib "script-plugin/examples/goto-line.rkt") (lib "script-plugin/examples/open-dir.rkt") (lib "script-plugin/examples/pasterack.rkt") (lib "script-plugin/examples/open-terminal.rkt") (lib "script-plugin/examples/my-functions.rkt") (lib "script-plugin/scribblings/script-plugin.scrbl") (lib "script-plugin/examples/author-date.rkt") (lib "script-plugin/examples/open-collects.rkt") (lib "script-plugin/tool.rkt") (lib "script-plugin/examples/test-slideshow.rkt") (lib "script-plugin/examples/gui-tools.rkt") (lib "script-plugin/examples/abstract.rkt") (lib "script-plugin/examples/insert-lambda.rkt") (lib "script-plugin/examples/enter-submod.rkt") (lib "script-plugin/examples/test-menu.rkt") (lib "script-plugin/examples/color-chooser.rkt") (lib "script-plugin/examples/def-signatures.rkt") (lib "script-plugin/examples/regexp-replace.rkt") (lib "script-plugin/examples/string-utils.rkt") (lib "script-plugin/examples/complete-word.rkt"))) (name . "script-plugin") (nix-sha256 . "10sw6wgd8f41w4i08wbbbkc75h7sqyrflfkw1db70fkxsq4ryanf") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:laurent.orseau@gmail.com . #t) (drracket . #t) (ring:1 . #t))) (source . "github://github.com/Metaxal/script-plugin/master") (tags . ("drracket")) (versions . #hash((default . #hasheq((checksum . "9aabe58a5d2aba860dce2bdf82cb33f50dec3801") (source . "github://github.com/Metaxal/script-plugin/master") (source_url . "http://github.com/Metaxal/script-plugin/tree/master"))))))) ("racket-x86_64-macosx-2" . #hash((author . "mflatt@racket-lang.org") (checksum . "0926f079843529413a248cca81aed1f7d7141ea9") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "racket-x86_64-macosx-2") (source . "https://download.racket-lang.org/releases/6.12/pkgs/racket-x86_64-macosx-2.zip") (tags . ()))) ("zordoz" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "zordoz" "doc/zordoz@zordoz/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zordoz.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/zordoz.txt"))) (checksum . "db150d85c945dda2c8e258cb82264266440ed635") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "compiler-lib" "zo-lib" "typed-racket-lib" "typed-racket-more" "readline-lib" "dynext-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Explorer for .zo bytecode files") (implies . ()) (last-checked . 1522414721) (last-edit . 1521422098) (last-updated . 1522013168) (modules . ((lib "zordoz/main.rkt") (lib "zordoz/scribblings/typed-api.scrbl") (lib "zordoz/scribblings/overview.scrbl") (lib "zordoz/typed/zo-structs.rkt") (lib "zordoz/zordoz.rkt") (lib "zordoz/private/zo-compile.rkt") (lib "zordoz/private/dispatch-table.rkt") (lib "zordoz/scribblings/api.scrbl") (lib "zordoz/private/zo-string.rkt") (lib "zordoz/private/zo-syntax.rkt") (lib "zordoz/private/zo-find.rkt") (lib "zordoz/scribblings/future-work.scrbl") (lib "zordoz/private/zo-shell.rkt") (lib "zordoz/private/zo-transition.rkt") (lib "zordoz/test.rkt") (lib "zordoz/scribblings/repl.scrbl") (lib "zordoz/private/if-windows.rkt") (lib "zordoz/private/windows-readline.rkt") (lib "zordoz/typed.rkt") (lib "zordoz/scribblings/zordoz.scrbl"))) (name . "zordoz") (nix-sha256 . "1g3dk9d9pwrq1mm5aqb14qsqvvgz2ccs2blxlzsl7c7251mqxfsn") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (compiler . #t) (repl . #t) (ring:1 . #t) (zo . #t))) (source . "https://github.com/bennn/zordoz.git") (tags . ("compiler" "repl" "zo")) (versions . #hash(("6.1.1" . #hasheq((checksum . "2f098c8b8877075d87b1f7c7c29ff2f69649990f") (source . "https://github.com/bennn/zordoz.git#v6.1") (source_url . "https://github.com/bennn/zordoz.git#v6.1"))) ("6.10" . #hasheq((checksum . "65a01ee5f99b08d71b3ff4c0fb9de8b53ba08bf1") (source . "https://github.com/bennn/zordoz.git#v6.5") (source_url . "https://github.com/bennn/zordoz.git#v6.5"))) ("6.3" . #hasheq((checksum . "86819d0d66d537657cbc2d83ee3d4a41465a0eea") (source . "https://github.com/bennn/zordoz.git#v6.3") (source_url . "https://github.com/bennn/zordoz.git#v6.3"))) ("6.2.1" . #hasheq((checksum . "2c7d2a7716754fb653379771830b2bd22dc4f5af") (source . "https://github.com/bennn/zordoz.git#v6.2") (source_url . "https://github.com/bennn/zordoz.git#v6.2"))) ("6.9" . #hasheq((checksum . "65a01ee5f99b08d71b3ff4c0fb9de8b53ba08bf1") (source . "https://github.com/bennn/zordoz.git#v6.5") (source_url . "https://github.com/bennn/zordoz.git#v6.5"))) (default . #hasheq((checksum . "db150d85c945dda2c8e258cb82264266440ed635") (source . "https://github.com/bennn/zordoz.git") (source_url . "https://github.com/bennn/zordoz.git"))) ("6.10.1" . #hasheq((checksum . "65a01ee5f99b08d71b3ff4c0fb9de8b53ba08bf1") (source . "https://github.com/bennn/zordoz.git#v6.5") (source_url . "https://github.com/bennn/zordoz.git#v6.5"))) ("6.11" . #hasheq((checksum . "65a01ee5f99b08d71b3ff4c0fb9de8b53ba08bf1") (source . "https://github.com/bennn/zordoz.git#v6.5") (source_url . "https://github.com/bennn/zordoz.git#v6.5"))) ("6.7" . #hasheq((checksum . "65a01ee5f99b08d71b3ff4c0fb9de8b53ba08bf1") (source . "https://github.com/bennn/zordoz.git#v6.5") (source_url . "https://github.com/bennn/zordoz.git#v6.5"))) ("6.12" . #hasheq((checksum . "65a01ee5f99b08d71b3ff4c0fb9de8b53ba08bf1") (source . "https://github.com/bennn/zordoz.git#v6.5") (source_url . "https://github.com/bennn/zordoz.git#v6.5"))) ("6.4" . #hasheq((checksum . "86819d0d66d537657cbc2d83ee3d4a41465a0eea") (source . "https://github.com/bennn/zordoz.git#v6.3") (source_url . "https://github.com/bennn/zordoz.git#v6.3"))) ("6.5" . #hasheq((checksum . "65a01ee5f99b08d71b3ff4c0fb9de8b53ba08bf1") (source . "https://github.com/bennn/zordoz.git#v6.5") (source_url . "https://github.com/bennn/zordoz.git#v6.5"))) ("6.6" . #hasheq((checksum . "65a01ee5f99b08d71b3ff4c0fb9de8b53ba08bf1") (source . "https://github.com/bennn/zordoz.git#v6.5") (source_url . "https://github.com/bennn/zordoz.git#v6.5"))) ("6.2" . #hasheq((checksum . "2c7d2a7716754fb653379771830b2bd22dc4f5af") (source . "https://github.com/bennn/zordoz.git#v6.2") (source_url . "https://github.com/bennn/zordoz.git#v6.2"))) ("6.1" . #hasheq((checksum . "2f098c8b8877075d87b1f7c7c29ff2f69649990f") (source . "https://github.com/bennn/zordoz.git#v6.1") (source_url . "https://github.com/bennn/zordoz.git#v6.1"))) ("6.8" . #hasheq((checksum . "65a01ee5f99b08d71b3ff4c0fb9de8b53ba08bf1") (source . "https://github.com/bennn/zordoz.git#v6.5") (source_url . "https://github.com/bennn/zordoz.git#v6.5"))))))) ("mysterx" . #hash((author . "mflatt@racket-lang.org") (checksum . "968f1e19be033bebe3a41d6beda05a065c69e51b") (dependencies . ("scheme-lib" "base" "racket-doc" "at-exp-lib" "scribble-lib")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "mysterx") (source . "https://download.racket-lang.org/releases/6.12/pkgs/mysterx.zip") (tags . ()))) ("draw-i386-macosx" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for \"draw\" package") (implies . ()) (last-checked . 1522414382) (last-edit . 1452304685) (last-updated . 1502815910) (modules . ()) (name . "draw-i386-macosx") (ring . 0) (search-terms . #hasheq((:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ()) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) (default . #hasheq((checksum . "8632512357c53d2d085a68545b2e093a9f9677be") (source . "https://pkg-sources.racket-lang.org/pkgs/8632512357c53d2d085a68545b2e093a9f9677be/draw-i386-macosx.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/8632512357c53d2d085a68545b2e093a9f9677be/draw-i386-macosx.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("minipascal" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/minipascal.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/minipascal.txt"))) (checksum . "6c028051ba9c151c5b6e8fddd6c2442c1abb0601") (checksum-error . #f) (conflicts . ()) (dependencies . ("ragg" "base" "parser-tools-lib" "base" "parser-tools-lib" "at-exp-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "MiniPascal as a Racket language") (implies . ()) (last-checked . 1522414435) (last-edit . 1359470626) (last-updated . 1502816180) (modules . ((lib "minipascal/tests-medium/function-with-one-argument.rkt") (lib "minipascal/tests-real/primes.rkt") (lib "minipascal/lang/reader.rkt") (lib "minipascal/tests-medium/procedure-with-no-arguments.rkt") (lib "minipascal/tests-medium/nested-functions.rkt") (lib "minipascal/compiler-fpc.rkt") (lib "minipascal/tests-basic/stdlib-chr.rkt") (lib "minipascal/tests-medium/function-with-two-arguments.rkt") (lib "minipascal/tests-basic/negative-constants.rkt") (lib "minipascal/tests-basic/const-var-scope.rkt") (lib "minipascal/tests-basic/export-of-global-functions.rkt") (lib "minipascal/tests-basic/char.rkt") (lib "minipascal/tests-medium/strings.rkt") (lib "minipascal/tests-basic/type-definitions2.rkt") (lib "minipascal/tests-basic/lowhigh.rkt") (lib "minipascal/tests-medium/horner.rkt") (lib "minipascal/mini-pascal-lexer.rkt") (lib "minipascal/tests-basic/compound-statement.rkt") (lib "minipascal/tests-basic/relational-operators.rkt") (lib "minipascal/tests-medium/array-of-char.rkt") (lib "minipascal/types.rkt") (lib "minipascal/semantics.rkt") (lib "minipascal/tests-basic/arithmetic.rkt") (lib "minipascal/compiler-simple.rkt") (lib "minipascal/compiler.rkt") (lib "minipascal/tests-basic/fibonacci.rkt") (lib "minipascal/tests-basic/long-sum.rkt") (lib "minipascal/tests-basic/hello.rkt") (lib "minipascal/tests-basic/gcd.rkt") (lib "minipascal/tests-basic/boolean.rkt") (lib "minipascal/experiments/terminal.rkt") (lib "minipascal/tests-medium/write-natural.rkt") (lib "minipascal/tests-medium/hcf.rkt") (lib "minipascal/tests-basic/negative-index-range.rkt") (lib "minipascal/tests-medium/array-with-char-index.rkt") (lib "minipascal/mini-pascal-grammar.rkt") (lib "minipascal/tests-fpc/fpc-test.rkt") (lib "minipascal/semantics-simple.rkt") (lib "minipascal/tests-real/stackoverflow-primes.rkt") (lib "minipascal/tests-basic/for-statement.rkt") (lib "minipascal/tests-medium/function-with-no-arguments.rkt") (lib "minipascal/tests-medium/array-of-integer.rkt") (lib "minipascal/tests-basic/constant-definitions.rkt") (lib "minipascal/tests-medium/procedure-with-two-arguments.rkt") (lib "minipascal/runtime.rkt") (lib "minipascal/tests-basic/type-definitions1.rkt"))) (name . "minipascal") (nix-sha256 . "15vk03nqa7mngns0smzrdmcbiiay7vh6z19gn0ad82kwpm1zhf0b") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jensaxel@soegaard.net . #t) (compiler . #t) (language . #t) (pascal . #t) (ring:1 . #t))) (source . "github://github.com/soegaard/minipascal/master") (tags . ("compiler" "language" "pascal")) (versions . #hash((default . #hasheq((checksum . "6c028051ba9c151c5b6e8fddd6c2442c1abb0601") (source . "github://github.com/soegaard/minipascal/master") (source_url . "http://github.com/soegaard/minipascal/tree/master"))))))) ("ppict" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ppict" "doc/ppict@ppict/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ppict.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ppict.txt"))) (checksum . "36d1ea67b7ce0a62aecc6656faefef0aa08de79a") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "draw-lib" "gui-lib" "pict-lib" "slideshow-lib" "racket-doc" "scribble-lib" "pict-doc" "slideshow-doc")) (description . "progressive picts and slideshows") (implies . ()) (last-checked . 1522414536) (last-edit . 1435182981) (last-updated . 1504744222) (modules . ((lib "ppict/main.rkt") (lib "ppict/ppict.scrbl") (lib "ppict/private/tag-pict-regions-gui.rkt") (lib "ppict/private/tag-pict.rkt") (lib "ppict/pict.rkt") (lib "ppict/2.rkt") (lib "ppict/private/ppict-syntax.rkt") (lib "ppict/private/ppict.rkt") (lib "ppict/slideshow2.rkt") (lib "ppict/slideshow.rkt") (lib "ppict/tag.rkt") (lib "ppict/align.rkt"))) (name . "ppict") (nix-sha256 . "00vjym824sg3j0pyakpdmix47rdn2q7q0j4papnxvjgk96n8q7k0") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (graphics . #t) (ring:1 . #t) (slideshow . #t))) (source . "git://github.com/rmculpepper/ppict") (tags . ("graphics" "slideshow")) (versions . #hash((default . #hasheq((checksum . "36d1ea67b7ce0a62aecc6656faefef0aa08de79a") (source . "git://github.com/rmculpepper/ppict") (source_url . "http://github.com/rmculpepper/ppict/tree/master"))))))) ("video-v0-1" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (("extract" "video" "doc/video@video-v0-1/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/video-v0-1.txt") (test-failure-log . "server/built/test-fail/video-v0-1.txt") (test-success-log . #f))) (checksum . "ca7db7f85ab7f19f91e1f63907c275fecdc39349") (checksum-error . #f) (conflicts . ("video")) (dependencies . (("base" "6.9") "rackunit-lib" "gui-lib" "draw-lib" "images-lib" "drracket-plugin-lib" "data-lib" "pict-lib" "wxme-lib" "sandbox-lib" "at-exp-lib" "scribble-lib" "bitsyntax" "opengl" "portaudio" "ffi-definer-convention" "scribble-lib" "racket-doc" "gui-doc" "draw-doc" "ppict")) (description . "v0.1 of #lang video") (implies . ()) (last-checked . 1522414700) (last-edit . 1503001716) (last-updated . 1502816520) (modules . ((lib "video/render/xml.rkt") (lib "video/private/camera-icon.rkt") (lib "video/render.rkt") (lib "video/private/packetqueue.rkt") (lib "video/private/ffmpeg-stream.rkt") (lib "video/raco.rkt") (lib "video/core.rkt") (lib "video/private/init-mlt.rkt") (lib "video/private/mlt.rkt") (lib "video/tests/render.rkt") (lib "video/examples/11-include.rkt") (lib "video/private/surface.rkt") (lib "video/tests/video.rkt") (lib "video/examples/2-colorfade.rkt") (lib "video/render/jpg.rkt") (lib "video/lang/reader.rkt") (lib "video/examples/5-project.rkt") (lib "video/examples/4-filters.rkt") (lib "video/player.rkt") (lib "video/scribblings/intro.scrbl") (lib "video/examples/7-watermark.rkt") (lib "video/scribblings/video.scrbl") (lib "video/init.rkt") (lib "video/private/ffmpeg.rkt") (lib "video/tests/editor.rkt") (lib "video/examples/12-cut.rkt") (lib "video/scribblings/api.scrbl") (lib "video/main.rkt") (lib "video/examples/8-image.rkt") (lib "video/private/video-canvas.rkt") (lib "video/scribblings/render.scrbl") (lib "video/tests/mlt.rkt") (lib "video/private/tool.rkt") (lib "video/scribblings/utils.rkt") (lib "video/examples/1-hellocolor.rkt") (lib "video/examples/10-properties.rkt") (lib "video/tests/player.rkt") (lib "video/units.rkt") (lib "video/render/list.rkt") (lib "video/render/mp4.rkt") (lib "video/examples/9-doubletransition.rkt") (lib "video/private/editor.rkt") (lib "video/private/threading.rkt") (lib "video/surface.rkt") (lib "video/examples/3-clips.rkt") (lib "video/render/png.rkt") (lib "video/examples/6-multitrack.rkt") (lib "video/base.rkt") (lib "video/private/video.rkt") (lib "video/tests/test-utils.rkt") (lib "video/lib.rkt") (lib "video/private/utils.rkt") (lib "video/tests/unit-tests.rkt"))) (name . "video-v0-1") (nix-sha256 . "1l21ydyjdzvbn96329l7nvd8iv3iv6nmpbz9nqipp0q44s1g7g54") (ring . 2) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:conflicts: . #t) (:docs-error: . #t) (:docs: . #t) (author:leif@leifandersen.net . #t) (ring:2 . #t) (video . #t) (vidlang . #t))) (source . "git://github.com/videolang/video#v0.1.1") (tags . ("video" "vidlang")) (versions . #hash((default . #hasheq((checksum . "ca7db7f85ab7f19f91e1f63907c275fecdc39349") (source . "git://github.com/videolang/video#v0.1.1") (source_url . "http://github.com/videolang/video/tree/master#v0.1.1"))))))) ("db-x86_64-linux-natipkg" . #hash((author . "mflatt@racket-lang.org") (checksum . "31884f0355cfce00ca6059f59f6b8981aca51013") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "db-x86_64-linux-natipkg") (source . "https://download.racket-lang.org/releases/6.12/pkgs/db-x86_64-linux-natipkg.zip") (tags . ()))) ("dherman-struct" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dherman-struct.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dherman-struct.txt"))) (checksum . "1f0510d8e50ca3d22b3ba7ee65cce117450d44a0") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "scheme-lib" "rackunit-lib" "srfi-lite-lib")) (description . "A port of David Herman's struct.plt planet package") (implies . ()) (last-checked . 1522414379) (last-edit . 1394146015) (last-updated . 1502815898) (modules . ((lib "dherman-struct/hierarchy.rkt") (lib "dherman-struct/struct.rkt") (lib "dherman-struct/private/datatype-registry.rkt") (lib "dherman-struct/private/struct-info-compat.rkt") (lib "dherman-struct/datatype.rkt") (lib "dherman-struct/private/tests/struct.rkt") (lib "dherman-struct/private/datatype-registry-data.rkt") (lib "dherman-struct/private/tests/class.rkt") (lib "dherman-struct/private/tests/tests.rkt") (lib "dherman-struct/class.rkt") (lib "dherman-struct/private/tests/hierarchy.rkt") (lib "dherman-struct/private/tests/datatype.rkt"))) (name . "dherman-struct") (nix-sha256 . "0dhf4farzf334axqnnmmj0bi0bxlqsjy4szvpljilwxpsxxdwf2z") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:clements@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/jbclements/dherman-struct") (tags . ()) (versions . #hash((default . #hasheq((checksum . "1f0510d8e50ca3d22b3ba7ee65cce117450d44a0") (source . "git://github.com/jbclements/dherman-struct") (source_url . "http://github.com/jbclements/dherman-struct/tree/master"))))))) ("abstract-compilation" . #hasheq((author . "pcn@cs.umd.edu") (authors . ("pcn@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/abstract-compilation.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/abstract-compilation.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/abstract-compilation.txt"))) (checksum . "f87b66602671f31c8546ebb6d0c2e9fad6f959ef") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "DSL reducing boiler plates for doing abstract compilation") (implies . ()) (last-checked . 1522417868) (last-edit . 1520373555) (last-updated . 1520394786) (modules . ((lib "abstract-compilation/main.rkt") (lib "abstract-compilation/tests.rkt"))) (name . "abstract-compilation") (nix-sha256 . "1siz84ndxk7wvzr57qbj2n3k4l509g1a7ga94ij649lp68gpvl1m") (ring . 2) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:pcn@cs.umd.edu . #t) (compiler . #t) (interpreter . #t) (programming-languages . #t) (ring:2 . #t))) (source . "https://github.com/philnguyen/abstract-compilation.git?path=abstract-compilation") (tags . ("compiler" "interpreter" "programming-languages")) (versions . #hash((default . #hasheq((checksum . "f87b66602671f31c8546ebb6d0c2e9fad6f959ef") (source . "https://github.com/philnguyen/abstract-compilation.git?path=abstract-compilation") (source_url . "https://github.com/philnguyen/abstract-compilation.git?path=abstract-compilation"))))))) ("trivial" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "trivial" "doc/trivial@trivial/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/trivial.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/trivial.txt"))) (checksum . "d3fd56bf16b3e7df1793d78e4415ebc0e99f8da5") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "db-lib" "math-lib" "plot-lib" "rackunit-lib" "reprovide-lang" "scribble-lib" "typed-racket-lib" "typed-racket-more" "at-exp-lib" "racket-doc" "rackunit-abbrevs" "rackunit-lib" "scribble-doc" "typed-racket-doc" "scribble-lib")) (description . "type-tailored standard library functions") (implies . ()) (last-checked . 1522414693) (last-edit . 1481669306) (last-updated . 1516774748) (modules . ((lib "trivial/private/db/postgres.rkt") (lib "trivial/private/sequence-domain.rkt") (lib "trivial/private/define.rkt") (lib "trivial/private/db/query.rkt") (lib "trivial/integer.rkt") (lib "trivial/private/regexp.rkt") (lib "trivial/private/string.rkt") (lib "trivial/main.rkt") (lib "trivial/scribblings/using-tailorings.scrbl") (lib "trivial/list.rkt") (lib "trivial/private/list.rkt") (lib "trivial/private/vector.rkt") (lib "trivial/private/format.rkt") (lib "trivial/private/db.rkt") (lib "trivial/tailoring.rkt") (lib "trivial/scribblings/defining-tailorings.scrbl") (lib "trivial/no-colon.rkt") (lib "trivial/private/tailoring.rkt") (lib "trivial/string.rkt") (lib "trivial/define.rkt") (lib "trivial/format.rkt") (lib "trivial/private/test-common.rkt") (lib "trivial/vector.rkt") (lib "trivial/private/integer.rkt") (lib "trivial/private/db/schema.rkt") (lib "trivial/private/common.rkt") (lib "trivial/function.rkt") (lib "trivial/scribblings/trivial.scrbl") (lib "trivial/private/raco-command.rkt") (lib "trivial/regexp.rkt") (lib "trivial/private/function.rkt"))) (name . "trivial") (nix-sha256 . "1x7bz2z53mhhg5cfs254qrpraf5ldvmp5r0cfqy6sfk1qc3mg2kc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/bennn/trivial.git?path=trivial") (tags . ("typed-racket")) (versions . #hash((default . #hasheq((checksum . "d3fd56bf16b3e7df1793d78e4415ebc0e99f8da5") (source . "https://github.com/bennn/trivial.git?path=trivial") (source_url . "https://github.com/bennn/trivial.git?path=trivial"))) ("6.7" . #hasheq((checksum . "f4ae715164ad36fd0684d6687151dbe445646445") (source . "https://github.com/bennn/trivial.git#6.7") (source_url . "https://github.com/bennn/trivial.git#6.7"))) ("6.4" . #hasheq((checksum . "04835b533960ef073022c173fad45807c77ecc5f") (source . "https://github.com/bennn/trivial.git#6.4") (source_url . "https://github.com/bennn/trivial.git#6.4"))) ("6.5" . #hasheq((checksum . "f4ae715164ad36fd0684d6687151dbe445646445") (source . "https://github.com/bennn/trivial.git#6.7") (source_url . "https://github.com/bennn/trivial.git#6.7"))) ("6.6" . #hasheq((checksum . "f4ae715164ad36fd0684d6687151dbe445646445") (source . "https://github.com/bennn/trivial.git#6.7") (source_url . "https://github.com/bennn/trivial.git#6.7"))))))) ("classicthesis-scribble" . #hasheq((author . "stamourv@racket-lang.org") (authors . ("stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/classicthesis-scribble.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/classicthesis-scribble.txt"))) (checksum . "e6c3f2be24654cbf0b17d9027737c2d3eb1cddd1") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "at-exp-lib")) (description . "Scribble wrapper for the classicthesis LaTeX style.") (implies . ()) (last-checked . 1522414313) (last-edit . 1420138021) (last-updated . 1502812291) (modules . ((lib "classicthesis/include/lang/reader.rkt") (lib "classicthesis/test-part.scrbl") (lib "classicthesis/test-acknowledgements.scrbl") (lib "classicthesis/include.rkt") (lib "classicthesis/test.scrbl") (lib "classicthesis/test-chapter.scrbl") (lib "classicthesis/lang.rkt") (lib "classicthesis/test-abstract.scrbl") (lib "classicthesis/lang/reader.rkt") (lib "classicthesis/test-bib.rkt") (lib "classicthesis/test-section.scrbl"))) (name . "classicthesis-scribble") (nix-sha256 . "1hm35h8c71bi3b5n9ysry11n9adz3zzdrb4iqhvivf8hwi8ncxcf") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:stamourv@racket-lang.org . #t) (ring:1 . #t) (scribble . #t))) (source . "git://github.com/stamourv/classicthesis-scribble") (tags . ("scribble")) (versions . #hash((default . #hasheq((checksum . "e6c3f2be24654cbf0b17d9027737c2d3eb1cddd1") (source . "git://github.com/stamourv/classicthesis-scribble") (source_url . "http://github.com/stamourv/classicthesis-scribble/tree/master"))))))) ("racket-rackunit-grade" . #hasheq((author . "ifigueroap@gmail.com") (authors . ("ifigueroap@gmail.com")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (("extract" "rackunit-grade" "doc/rackunit-grade@racket-rackunit-grade/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-rackunit-grade.txt") (test-failure-log . "server/built/test-fail/racket-rackunit-grade.txt") (test-success-log . #f))) (checksum . "92526d7ced3b4cf7b5323752f20d8f36752e69b6") (checksum-error . #f) (conflicts . ("rackunit-grade")) (dependencies . ("base" "rackunit" "doc-coverage" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (last-checked . 1522414607) (last-edit . 1482781554) (last-updated . 1502816354) (modules . ((lib "rackunit/raco-grade.rkt") (lib "rackunit/scribblings/rackunit-grade.scrbl") (lib "rackunit/grade.rkt"))) (name . "racket-rackunit-grade") (nix-sha256 . "1yh3xz8j01i0chlxaqqirpcrh6ynlbknhfz1w7j7df8hjyqqkdmp") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:conflicts: . #t) (:docs-error: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:ifigueroap@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/ifigueroap/racket-rackunit-grade") (tags . ()) (versions . #hash((default . #hasheq((checksum . "92526d7ced3b4cf7b5323752f20d8f36752e69b6") (source . "git://github.com/ifigueroap/racket-rackunit-grade") (source_url . "http://github.com/ifigueroap/racket-rackunit-grade/tree/master"))))))) ("numspell" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "numspell" "doc/numspell@numspell/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/numspell.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/numspell.txt"))) (checksum . "60f30a535e6e11bb4c3596af14708fb6cd9402ea") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "overeasy")) (description . "Spelling Numbers as English") (implies . ()) (last-checked . 1522414506) (last-edit . 1456649070) (last-updated . 1502816197) (modules . ((lib "numspell/numspell.scrbl") (lib "numspell/main.rkt"))) (name . "numspell") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (finance . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/numspell.zip") (tags . ("finance")) (versions . #hash((default . #hasheq((checksum . "60f30a535e6e11bb4c3596af14708fb6cd9402ea") (source . "http://www.neilvandyke.org/racket/numspell.zip") (source_url . "http://www.neilvandyke.org/racket/numspell.zip"))))))) ("redex-gui-lib" . #hash((author . "robby@racket-lang.org bfetscher@racket-lang.org") (checksum . "76085d3b2ce7de9c54015be78161ceea37c59438") (dependencies . ("scheme-lib" "base" "draw-lib" "gui-lib" "data-lib" "profile-lib" "redex-lib" "redex-pict-lib" "pict-lib" "rackunit-lib")) (description . "robby@racket-lang.org bfetscher@racket-lang.org") (modules . ()) (name . "redex-gui-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/redex-gui-lib.zip") (tags . ()))) ("mutable-match-lambda" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mutable-match-lambda" "doc/mutable-match-lambda@mutable-match-lambda/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mutable-match-lambda.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mutable-match-lambda.txt"))) (checksum . "371cb7e5407cc888ffd96ee5fff6facd9568a3fe") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "kw-utils" "rackunit-lib" "at-exp-lib" "scribble-lib" "sandbox-lib" "racket-doc")) (description . "") (implies . ()) (last-checked . 1522414437) (last-edit . 1472014493) (last-updated . 1502816190) (modules . ((lib "mutable-match-lambda/syntax-to-string.rkt") (lib "mutable-match-lambda/main.rkt") (lib "mutable-match-lambda/docs/mutable-match-lambda.scrbl") (lib "mutable-match-lambda/make-clause-proc.rkt") (lib "mutable-match-lambda/prop-object-name.rkt") (lib "mutable-match-lambda/communication.rkt") (lib "mutable-match-lambda/mutable-match-lambda-procedure.rkt") (lib "mutable-match-lambda/let-inferred-name.rkt"))) (name . "mutable-match-lambda") (nix-sha256 . "04gbp47dpcinb4j7fmbr1m4288bkdgpj9nad1rgv1gkzipsgs3vb") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (author:alexander@knauth.org . #t) (deprecated . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/mutable-match-lambda") (tags . ("deprecated")) (versions . #hash((default . #hasheq((checksum . "371cb7e5407cc888ffd96ee5fff6facd9568a3fe") (source . "git://github.com/AlexKnauth/mutable-match-lambda") (source_url . "http://github.com/AlexKnauth/mutable-match-lambda/tree/master"))))))) ("fuse" . #hasheq((author . "scott@thinkmoore.net") (authors . ("scott@thinkmoore.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "fuse" "doc/fuse@fuse/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fuse.txt") (test-failure-log . "server/built/test-fail/fuse.txt") (test-success-log . #f))) (checksum . "5c24b1e135e97ff6c8e49b363f01ff21c28ecf8b") (checksum-error . #f) (conflicts . ()) (dependencies . ("scribble-lib" "base" "rackunit-lib" "sandbox-lib" "scribble-lib" "racket-doc")) (description . "Library for creating user-space filesystems with FUSE") (implies . ()) (last-checked . 1522414403) (last-edit . 1475858124) (last-updated . 1502816073) (modules . ((lib "fuse/private/errno.rkt") (lib "fuse/scribblings/fuse.scrbl") (lib "fuse/examples/hello.rkt") (lib "fuse/private/data.rkt") (lib "fuse/main.rkt") (lib "fuse/private/filesystem.rkt"))) (name . "fuse") (nix-sha256 . "0ajzd1cf79asa6s7p4yzzrwkl6n0v8lpzvxvssm5lw7lymwrb01s") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:scott@thinkmoore.net . #t) (filesystem . #t) (linux . #t) (ring:1 . #t) (systems . #t) (unix . #t))) (source . "https://github.com/thinkmoore/racket-fuse.git") (tags . ("filesystem" "linux" "systems" "unix")) (versions . #hash((default . #hasheq((checksum . "5c24b1e135e97ff6c8e49b363f01ff21c28ecf8b") (source . "https://github.com/thinkmoore/racket-fuse.git") (source_url . "https://github.com/thinkmoore/racket-fuse.git"))))))) ("puresuri" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "puresuri" "doc/puresuri@puresuri/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/puresuri.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/puresuri.txt"))) (checksum . "9744e849989867e7e002507cd1dfe18ffdf5b5e3") (checksum-error . #f) (conflicts . ()) (dependencies . ("lux" "base" "gui-lib" "pict-lib" "ppict" "unstable-lib" "ppict" "gui-doc" "pict-doc" "racket-doc" "slideshow-doc" "unstable-doc" "scribble-lib")) (description . "puresuri presentation system") (implies . ()) (last-checked . 1522414537) (last-edit . 1401798151) (last-updated . 1502816339) (modules . ((lib "puresuri/puresuri.scrbl") (lib "puresuri/lib/slide-numbers.rkt") (lib "puresuri/private/state.rkt") (lib "puresuri/tests/example.rkt") (lib "puresuri/lib/grid.rkt") (lib "puresuri/lib/title.rkt") (lib "puresuri/main.rkt") (lib "puresuri/plpict.rkt") (lib "puresuri/gui.rkt") (lib "puresuri/private/param.rkt") (lib "puresuri/pict.rkt") (lib "puresuri/lib/cmds.rkt") (lib "puresuri/command.rkt"))) (name . "puresuri") (nix-sha256 . "03yhxpj3jjww2429hq0hrg2amj62asyqhlszfgm5nvbnj9vas5zj") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (ring:1 . #t) (slideshow . #t))) (source . "github://github.com/jeapostrophe/puresuri/master") (tags . ("slideshow")) (versions . #hash((default . #hasheq((checksum . "9744e849989867e7e002507cd1dfe18ffdf5b5e3") (source . "github://github.com/jeapostrophe/puresuri/master") (source_url . "http://github.com/jeapostrophe/puresuri/tree/master"))))))) ("redex-doc" . #hash((author . "robby@racket-lang.org bfetscher@racket-lang.org") (checksum . "5245d253456b2ab6f1ef21792c0f555ba4e73be3") (dependencies . ("base" "racket-doc" "draw-doc" "gui-doc" "htdp-doc" "pict-doc" "slideshow-doc" "at-exp-lib" "data-doc" "data-enumerate-lib" ("scribble-lib" #:version "1.16") "gui-lib" "htdp-lib" "pict-lib" "redex-gui-lib" "redex-benchmark" "rackunit-lib" "sandbox-lib")) (description . "robby@racket-lang.org bfetscher@racket-lang.org") (modules . ()) (name . "redex-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/redex-doc.zip") (tags . ()))) ("quote-bad" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "quote-bad" "doc/quote-bad@quote-bad/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/quote-bad.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/quote-bad.txt"))) (checksum . "f7b81540acad204535b993806aca04a4692ec4d5") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "pconvert-lib" "unstable-lib" "hygienic-quote-lang" "rackunit-lib" "unstable-macro-testing-lib" "scribble-lib" "racket-doc")) (description . "A version of quote that helps to rid programs of bad uses of quote") (implies . ()) (last-checked . 1522414538) (last-edit . 1464562044) (last-updated . 1502816341) (modules . ((lib "quote-bad/constructor-style-print/lang/reader.rkt") (lib "quote-bad/quote-bad-error.rkt") (lib "constructor-style-print/racket/init.rkt") (lib "constructor-style-print/lang/language-info.rkt") (lib "quote-bad/quote-bad.rkt") (lib "constructor-style-print/tests/constructor-style-print-lang.rkt") (lib "constructor-style-print/lang/runtime-config.rkt") (lib "constructor-style-print/constructor-style-print.rkt") (lib "constructor-style-print/lang/reader.rkt") (lib "quote-bad/scribblings/quote-bad.scrbl") (lib "quote-bad/translate-quoted.rkt"))) (name . "quote-bad") (nix-sha256 . "0arpr40ffhfwczsm9rxa8bw671fpagiwmyniq7gczqq17nmksbha") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:alexander@knauth.org . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/quote-bad") (tags . ()) (versions . #hash((default . #hasheq((checksum . "f7b81540acad204535b993806aca04a4692ec4d5") (source . "git://github.com/AlexKnauth/quote-bad") (source_url . "http://github.com/AlexKnauth/quote-bad/tree/master"))))))) ("redex" . #hash((author . "robby@racket-lang.org bfetscher@racket-lang.org") (checksum . "f69d57baf1da8a200a9fca57f7ecc23659f44d6a") (dependencies . ("redex-doc" "redex-examples" "redex-lib" "redex-gui-lib")) (description . "robby@racket-lang.org bfetscher@racket-lang.org") (modules . ()) (name . "redex") (source . "https://download.racket-lang.org/releases/6.12/pkgs/redex.zip") (tags . ()))) ("TeXmath" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "texmath"))) (failure-log . "server/built/fail/TeXmath.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "b4c5497def95850a858698b435f6fd4bfe67c465") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "at-exp-lib" "scribble-lib" "rackunit-lib")) (description . "Pseudo-(La)TeX mathematical notation for Scribble") (implies . ()) (last-checked . 1522414691) (last-edit . 1519684976) (last-updated . 1521445440) (modules . ((lib "texmath/scribblings/sample.scrbl") (lib "texmath/scribblings/main.scrbl") (lib "texmath/main.rkt") (lib "texmath/inferrule.rkt"))) (name . "TeXmath") (nix-sha256 . "1l889nrjavbji27k92bc8clvy63g2ljx64kyg1j6s4sb4ql33z6m") (ring . 2) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (LaTeX . #t) (Math . #t) (author:dedbox@gmail.com . #t) (ring:2 . #t) (scribble . #t))) (source . "https://github.com/dedbox/racket-texmath.git") (tags . ("LaTeX" "Math" "scribble")) (versions . #hash((default . #hasheq((checksum . "b4c5497def95850a858698b435f6fd4bfe67c465") (source . "https://github.com/dedbox/racket-texmath.git") (source_url . "https://github.com/dedbox/racket-texmath.git"))))))) ("math-doc" . #hash((author . "ntoronto@racket-lang.org") (checksum . "cb00a98771c5cbd38ebd6fb2a3f414cc692bcd47") (dependencies . ("base" "at-exp-lib" "math-lib" "plot-doc" "plot-gui-lib" "racket-doc" "sandbox-lib" "scribble-lib" "typed-racket-doc" "typed-racket-lib" "2d-lib")) (description . "ntoronto@racket-lang.org") (modules . ()) (name . "math-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/math-doc.zip") (tags . ()))) ("spreadsheet-editor" . #hasheq((author . "dpavlov@iaaras.ru") (authors . ("dpavlov@iaaras.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/spreadsheet-editor.txt") (test-failure-log . "server/built/test-fail/spreadsheet-editor.txt") (test-success-log . #f))) (checksum . "73f8cfa89f0534f0bbb72833741cc7d5974ecda8") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "gui" "draw-lib" "data-lib" "table-panel")) (description . "Flexible spreadsheet editor built on top of Racket's GUI controls") (implies . ()) (last-checked . 1522414681) (last-edit . 1496069411) (last-updated . 1502816445) (modules . ((lib "spreadsheet-editor/spreadsheet-editor.rkt") (lib "spreadsheet-editor/spreadsheet-editor-demo.rkt") (lib "spreadsheet-editor/main.rkt"))) (name . "spreadsheet-editor") (nix-sha256 . "0slkr42ylpv6hddbcg2d4ci5zl1vvcgy1lxmh81j9ffw43w955wm") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:dpavlov@iaaras.ru . #t) (gui . #t) (ring:1 . #t))) (source . "git://github.com/kugelblitz/spreadsheet-editor") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "73f8cfa89f0534f0bbb72833741cc7d5974ecda8") (source . "git://github.com/kugelblitz/spreadsheet-editor") (source_url . "http://github.com/kugelblitz/spreadsheet-editor/tree/master"))))))) ("option-contract" . #hash((author . "chrdimo@seas.harvard.edu robby@racket-lang.org") (checksum . "2084c53e08bbe60ba07b09ed612e112365a8d0e5") (dependencies . ("option-contract-lib" "option-contract-doc")) (description . "chrdimo@seas.harvard.edu robby@racket-lang.org") (modules . ()) (name . "option-contract") (source . "https://download.racket-lang.org/releases/6.12/pkgs/option-contract.zip") (tags . ()))) ("autoffi" . #hasheq((author . "vervaeck.sam@skynet.be") (authors . ("vervaeck.sam@skynet.be")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/autoffi.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/autoffi.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/autoffi.txt"))) (checksum . "6ed885222a82a3204604111da3ef5ed1fe5e781b") (checksum-error . #f) (conflicts . ()) (dependencies . (("ddict" "0.1"))) (description . "Automatically generating FFI bindings for Racket") (implies . ()) (last-checked . 1522414287) (last-edit . 1488374430) (last-updated . 1515366973) (modules . ((lib "autoffi/util.rkt") (lib "autoffi/runtime.rkt") (lib "autoffi/main.rkt") (lib "autoffi/parse.rkt") (lib "autoffi/syntax.rkt"))) (name . "autoffi") (nix-sha256 . "03q7apbhmqq41mfjqgpp0n5k3l9ymzpf6mqlpibm8slw3wjxmci5") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:vervaeck.sam@skynet.be . #t) (code-generator . #t) (ffi . #t) (ring:1 . #t) (syntax . #t))) (source . "git://github.com/AutoFFI/racket-autoffi") (tags . ("code-generator" "ffi" "syntax")) (versions . #hash((default . #hasheq((checksum . "6ed885222a82a3204604111da3ef5ed1fe5e781b") (source . "git://github.com/AutoFFI/racket-autoffi") (source_url . "http://github.com/AutoFFI/racket-autoffi/tree/master"))))))) ("openmpi" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mpi" "doc/mpi@openmpi/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/openmpi.txt") (test-failure-log . "server/built/test-fail/openmpi.txt") (test-success-log . #f))) (checksum . "5aea47a93cf08efdd1bf2cb470c059b5197d04c1") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "parser-tools-lib" "scribble-lib" "at-exp-lib" "racket-doc")) (description . "A Racket interface to MPI based on an FFI to OpenMPI") (implies . ()) (last-checked . 1522414507) (last-edit . 1353357473) (last-updated . 1502816236) (modules . ((lib "mpi/ffi/types.rkt") (lib "mpi/mpi.scrbl") (lib "mpi/ffi/parsec.rkt") (lib "tests/mpi/master_server.rkt") (lib "mpi/main.rkt") (lib "mpi/ffi/constants.rkt") (lib "mpi/ffi/mpi.rkt") (lib "mpi/ffi/lib.rkt") (lib "mpi/ffi.rkt"))) (name . "openmpi") (nix-sha256 . "0h61kv9bpzbyb2i7hhwg6wy3vdjhr1inj7a8y36wc29gxzm7krvm") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (ffi . #t) (parallel . #t) (ring:1 . #t))) (source . "github://github.com/jeapostrophe/openmpi/master") (tags . ("ffi" "parallel")) (versions . #hash((default . #hasheq((checksum . "5aea47a93cf08efdd1bf2cb470c059b5197d04c1") (source . "github://github.com/jeapostrophe/openmpi/master") (source_url . "http://github.com/jeapostrophe/openmpi/tree/master"))))))) ("minetest" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "minetest" "doc/minetest@minetest/index.html"))) (failure-log . "server/built/fail/minetest.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "2c371e18381a91c831fc31c39a771b8ad179edd4") (checksum-error . #f) (conflicts . ()) (dependencies . ()) (description . "Compile-time framework for getting 2htdp/image objects into Minetest (as blocks, items, recipes, and/or schematics).  Only works on Linux.") (implies . ()) (last-checked . 1522414435) (last-edit . 1514502227) (last-updated . 1522374751) (modules . ((lib "minetest/rocket-module.rkt") (lib "minetest/blocks.rkt") (lib "minetest/entities.rkt") (lib "minetest/main.rkt") (lib "minetest/textures.rkt") (lib "minetest/core.rkt") (lib "minetest/examples/example-mod.rkt") (lib "minetest/rules.rkt") (lib "minetest/lua.rkt") (lib "minetest/examples/hello-world.rkt") (lib "minetest/recipes.rkt") (lib "minetest/examples/quick-demo.rkt") (lib "minetest/items.rkt") (lib "minetest/compiler.rkt") (lib "minetest/mob-api-raw.rkt") (lib "minetest/schematics-writer-raw.rkt") (lib "minetest/examples/example2.rkt") (lib "minetest/minetest.scrbl") (lib "minetest/schematics.rkt"))) (name . "minetest") (nix-sha256 . "0nyk83vcbkw4s7m14ildfda976vl228hnn26vbqnisah2c1x047n") (ring . 2) (search-terms . #hasheq((2htdp . #t) (:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (author:stephen@thoughtstem.com . #t) (education . #t) (games . #t) (minetest . #t) (ring:2 . #t))) (source . "https://github.com/thoughtstem/minetest.git") (tags . ("2htdp" "education" "games" "minetest")) (versions . #hash((default . #hasheq((checksum . "2c371e18381a91c831fc31c39a771b8ad179edd4") (source . "https://github.com/thoughtstem/minetest.git") (source_url . "https://github.com/thoughtstem/minetest.git"))))))) ("dlm-read" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dlm-read" "doc/dlm-read@dlm-read/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dlm-read.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dlm-read.txt"))) (checksum . "9ae0487b315e762d311ea0e14b72a9bd2de27470") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "csv-reading" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (last-checked . 1522414381) (last-edit . 1418153746) (last-updated . 1502815906) (modules . ((lib "dlm-read/scribblings/dlm-read.scrbl") (lib "dlm-read/main.rkt"))) (name . "dlm-read") (nix-sha256 . "1rbqqsaqa1pycd4d8j668pxx4w35k8adsyqpi2jp3yz35d1j7lsi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t))) (source . "git://github.com/LeifAndersen/racket-dlm-read#master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "9ae0487b315e762d311ea0e14b72a9bd2de27470") (source . "git://github.com/LeifAndersen/racket-dlm-read#master") (source_url . "http://github.com/LeifAndersen/racket-dlm-read/tree/master#master"))))))) ("gir" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gir" "doc/gir@gir/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gir.txt") (test-failure-log . "server/built/test-fail/gir.txt") (test-success-log . #f))) (checksum . "38e629c8cf31a89bbcf54595c5006174ba090e7e") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "GTK/GLib/GIO/... GObjectIntrospection FFI binding") (implies . ()) (last-checked . 1522414404) (last-edit . 1407088887) (last-updated . 1502816081) (modules . ((lib "gir/const.rkt") (lib "gir/gtype.rkt") (lib "gir/signal.rkt") (lib "gir/minimal-test.rkt") (lib "gir/base.rkt") (lib "gir/translator.rkt") (lib "gir/glib.rkt") (lib "gir/property.rkt") (lib "gir/function.rkt") (lib "gir/utils.rkt") (lib "gir/test.rkt") (lib "gir/gir.scrbl") (lib "gir/main.rkt") (lib "gir/enum.rkt") (lib "gir/contract.rkt") (lib "gir/interface.rkt") (lib "gir/field.rkt") (lib "gir/struct.rkt") (lib "gir/object.rkt") (lib "gir/loadlib.rkt"))) (name . "gir") (nix-sha256 . "0rqwsqadskaa9zfgypf1z7bz26drlh3pz64l18an9xnxpv6p9gsx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (ffi . #t) (gui . #t) (ring:1 . #t))) (source . "git://github.com/Kalimehtar/gir") (tags . ("ffi" "gui")) (versions . #hash((default . #hasheq((checksum . "38e629c8cf31a89bbcf54595c5006174ba090e7e") (source . "git://github.com/Kalimehtar/gir") (source_url . "http://github.com/Kalimehtar/gir/tree/master"))))))) ("s-lib" . #hasheq((author . "vlad.piersec@gmail.com") (authors . ("vlad.piersec@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/s-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/s-lib.txt"))) (checksum . "de6ae621d8ffd670fede37f51212c8cb5a84bcf3") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit")) (description . "A collection of functions for string & word manipulation") (implies . ()) (last-checked . 1522414673) (last-edit . 1401213158) (last-updated . 1502816416) (modules . ((lib "s-lib/main.rkt"))) (name . "s-lib") (nix-sha256 . "09n0s2g708pdz11wajiz8l5fkcp16r00wrb5nr37k80zfgf579d7") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:vlad.piersec@gmail.com . #t) (ring:1 . #t) (strings . #t) (words . #t))) (source . "git://github.com/caisah/s-lib") (tags . ("strings" "words")) (versions . #hash((default . #hasheq((checksum . "de6ae621d8ffd670fede37f51212c8cb5a84bcf3") (source . "git://github.com/caisah/s-lib") (source_url . "http://github.com/caisah/s-lib/tree/master"))))))) ("syndicate" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "syndicate-gl" "doc/syndicate-gl@syndicate/index.html") ("main" "syndicate" "doc/syndicate@syndicate/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syndicate.txt") (test-failure-log . "server/built/test-fail/syndicate.txt") (test-success-log . #f))) (checksum . "06224b52a8f5de4151d5d6af2c99a0200ca871c8") (checksum-error . #f) (conflicts . ()) (dependencies . ("rfc6455" "base" "data-lib" "net-lib" "web-server-lib" "profile-lib" "rackunit-lib" "htdp-lib" "data-enumerate-lib" "datalog" "draw-lib" "gui-lib" "pict-lib" "sgl" "struct-defaults" "auxiliary-macro-context" "sandbox-lib" "images-lib" "automata" "sha" "racket-doc" "scribble-lib" "sha" "draw-doc" "gui-doc" "htdp-doc" "pict-doc")) (description . "A language for interactive programs") (implies . ()) (last-checked . 1522414686) (last-edit . 1459611228) (last-updated . 1522148013) (modules . ((lib "syndicate/broker/protocol.rkt") (lib "syndicate/examples/chat-no-quit-world-no-nesting.rkt") (lib "syndicate/test.rkt") (lib "syndicate/examples/example-lang.rkt") (lib "syndicate/little-actors/core.rkt") (lib "syndicate/examples/actor/tcp-relay2.rkt") (lib "syndicate/firewall.rkt") (lib "syndicate-gl/examples/basic.rkt") (lib "syndicate/monolithic.rkt") (lib "syndicate/examples/example-wildcard-assertion-2.rkt") (lib "syndicate/profile.rkt") (lib "syndicate/examples/actor/example-during-criterion-snapshotting.rkt") (lib "syndicate/supervise.rkt") (lib "syndicate/support/bytes.rkt") (lib "syndicate/examples/actor/broadcast-messages.rkt") (lib "syndicate/examples/actor/query-set.rkt") (lib "syndicate/trace/util.rkt") (lib "syndicate/trace/stderr.rkt") (lib "syndicate/functional-queue.rkt") (lib "syndicate/relay.rkt") (lib "syndicate/examples/all-pairs-shortest-paths/all-pairs-shortest-paths.rkt") (lib "syndicate/tset.rkt") (lib "syndicate/monolithic/scn.rkt") (lib "syndicate/examples/tcp-hello.rkt") (lib "syndicate/protocol/instance.rkt") (lib "syndicate/examples/actor/forward-chaining-mini.rkt") (lib "syndicate/dataflow.rkt") (lib "syndicate/examples/actor/mutex.rkt") (lib "syndicate/examples/actor/file-system-lll.rkt") (lib "syndicate-gl/examples/clock-face.rkt") (lib "syndicate/examples/actor/show-field-scope-enforcement1.rkt") (lib "syndicate/drivers/smtp.rkt") (lib "syndicate/core.rkt") (lib "syndicate-ide/hsv.rkt") (lib "syndicate/examples/two-buyer-protocol-incremental.rkt") (lib "syndicate/main.rkt") (lib "syndicate/examples/bank-account-monolithic.rkt") (lib "syndicate/examples/actor/chat-no-quit-world-no-nesting.rkt") (lib "syndicate-gl/examples/many.rkt") (lib "syndicate/examples/big-bang.rkt") (lib "syndicate/examples/actor/f-to-c3.rkt") (lib "syndicate/tests/simple-multi-level.rkt") (lib "syndicate/examples/actor/add1-simple.rkt") (lib "syndicate/examples/udp-hello-plain.rkt") (lib "syndicate/upside-down.rkt") (lib "syndicate/examples/actor/gui.rkt") (lib "syndicate/big-bang.rkt") (lib "syndicate/support/hash.rkt") (lib "syndicate/examples/chat-no-quit-world.rkt") (lib "syndicate/examples/actor/mutable-cell.rkt") (lib "syndicate/examples/all-pairs-shortest-paths/all-pairs-shortest-paths3.rkt") (lib "syndicate/examples/actor/lambda.rkt") (lib "syndicate/examples/actor/rpc-with-error.rkt") (lib "syndicate/examples/actor/example-termination-scripts-1.rkt") (lib "syndicate/patch.rkt") (lib "syndicate/lang.rkt") (lib "syndicate/tests/boop.rkt") (lib "syndicate/ground.rkt") (lib "syndicate/tests/multi-level-message.rkt") (lib "syndicate/examples/actor/running-total.rkt") (lib "syndicate/examples/actor/box-and-client.rkt") (lib "syndicate/trace/render-msd.rkt") (lib "syndicate/protocol/standard-relay.rkt") (lib "syndicate/examples/actor/chat-client-tcp2.rkt") (lib "syndicate/examples/actor/example-multiple-suspension-resumption.rkt") (lib "syndicate/trie.rkt") (lib "syndicate/tests/ping-pong.rkt") (lib "syndicate/examples/actor/chain.rkt") (lib "syndicate/examples/mini-echo.rkt") (lib "syndicate/examples/actor/tcp-relay.rkt") (lib "syndicate/examples/actor/example-demand-matcher-glitch-bug.rkt") (lib "syndicate/examples/actor/file-system2.rkt") (lib "syndicate/tests/nested-spawn-exceptions.rkt") (lib "syndicate/examples/actor/chat-multiroom.rkt") (lib "syndicate/examples/actor/example-supervise.rkt") (lib "syndicate/examples/actor/cleanup.rkt") (lib "syndicate/examples/actor/example-partial-retraction.rkt") (lib "syndicate/examples/actor/example-action-after-suspension.rkt") (lib "syndicate/examples/chat.rkt") (lib "syndicate/monolithic/core.rkt") (lib "syndicate/examples/durable-key-value-store.rkt") (lib "syndicate/examples/actor/chat-multiroom-topic-persist.rkt") (lib "syndicate/test-lang.rkt") (lib "syndicate/examples/actor/example-glitch.rkt") (lib "syndicate/examples/actor/timestate.rkt") (lib "syndicate/examples/actor/queue-no-credit2.rkt") (lib "syndicate/examples/key-value-store.rkt") (lib "syndicate-gl/texture.rkt") (lib "syndicate/drivers/udp.rkt") (lib "syndicate/scribblings/syndicate.scrbl") (lib "syndicate/examples/actor/two-buyer-protocol.rkt") (lib "syndicate/treap.rkt") (lib "syndicate/examples/example-plain.rkt") (lib "syndicate/examples/actor/chat.rkt") (lib "syndicate/examples/all-pairs-shortest-paths/all-pairs-shortest-paths2.rkt") (lib "syndicate/examples/actor/chat-multiroom-topic.rkt") (lib "syndicate/store.rkt") (lib "syndicate/examples/example-meta-echo.rkt") (lib "syndicate/examples/actor/example-synthetic-patch-2.rkt") (lib "syndicate/examples/chat-client.rkt") (lib "syndicate/protocol/advertise.rkt") (lib "syndicate/monitor.rkt") (lib "syndicate/examples/actor/f-to-c4.rkt") (lib "syndicate-gl/scribblings/syndicate-gl.scrbl") (lib "syndicate/examples/actor/flip-flop.rkt") (lib "syndicate/drivers/filesystem.rkt") (lib "syndicate/tests/bank-account.rkt") (lib "syndicate/examples/actor/f-to-c2.rkt") (lib "syndicate/examples/udp-multicast.rkt") (lib "syndicate-gl/2d.rkt") (lib "syndicate/trace.rkt") (lib "syndicate/examples/actor/irc.rkt") (lib "syndicate/tests/maintain-knowledge-across-events.rkt") (lib "syndicate/random-test.rkt") (lib "syndicate/threaded.rkt") (lib "syndicate/examples/actor/example-synthetic-patch.rkt") (lib "syndicate/trace/msd.rkt") (lib "syndicate/examples/actor/f-to-c.rkt") (lib "syndicate/core-lang.rkt") (lib "syndicate/examples/actor/f-to-c5.rkt") (lib "syndicate/examples/actor/queue.rkt") (lib "syndicate/support/struct.rkt") (lib "syndicate/syntax-classes.rkt") (lib "syndicate/examples/actor/vacuous-facet.rkt") (lib "syndicate/examples/box-and-client.rkt") (lib "syndicate/examples/actor/simple-dns.rkt") (lib "syndicate/examples/actor/ceu-leds.rkt") (lib "syndicate/examples/example-meta-drop.rkt") (lib "syndicate/drivers/gui.rkt") (lib "syndicate/mux.rkt") (lib "syndicate/drivers/line-reader.rkt") (lib "syndicate-gl/affine.rkt") (lib "syndicate/hierarchy.rkt") (lib "syndicate/canonicalize.rkt") (lib "syndicate/examples/actor/parameters.rkt") (lib "syndicate/examples/actor/chat-tcp2.rkt") (lib "syndicate/examples/actor/fib-server.rkt") (lib "syndicate/examples/actor/show-field-scope-enforcement4.rkt") (lib "syndicate/examples/ws-hello-ssl.rkt") (lib "syndicate/examples/actor/example-responsibility-transfer-2.rkt") (lib "syndicate/drivers/websocket.rkt") (lib "syndicate/tests/multi-level-other-way.rkt") (lib "syndicate/examples/actor/echo.rkt") (lib "syndicate/examples/example-quit-world.rkt") (lib "syndicate/examples/actor/fs-protocol.rkt") (lib "syndicate/examples/ws-echo.rkt") (lib "syndicate/drivers/timestate.rkt") (lib "syndicate/examples/actor/big-bang.rkt") (lib "syndicate/tests/simple1.rkt") (lib "syndicate/examples/actor/sandbox-os.rkt") (lib "syndicate/examples/actor/chat-simplified-internals.rkt") (lib "syndicate/actor-lang.rkt") (lib "syndicate/examples/actor/file-system.rkt") (lib "syndicate/dataspace.rkt") (lib "syndicate/examples/actor/chat-client.rkt") (lib "syndicate/drivers/tcp.rkt") (lib "syndicate/examples/actor/file-system-during2.rkt") (lib "syndicate/examples/actor/irc-client.rkt") (lib "syndicate/drivers/irc.rkt") (lib "syndicate/examples/actor/queue-no-credit.rkt") (lib "syndicate/examples/actor/example-demand-matcher-glitch-bug2.rkt") (lib "syndicate/examples/actor/example-bug-query-scope.rkt") (lib "syndicate/comprehensions.rkt") (lib "syndicate/tests/create-new-facet-in-on-stop.rkt") (lib "syndicate/demand-matcher.rkt") (lib "syndicate/examples/actor/example-responsibility-transfer-1.rkt") (lib "syndicate/examples/actor/example-assertion-spike.rkt") (lib "syndicate/examples/example-layer.rkt") (lib "syndicate/examples/actor/spreadsheet.rkt") (lib "syndicate/broker/server.rkt") (lib "syndicate/examples/example-quit-dataspace-with-assertion.rkt") (lib "syndicate/examples/actor/example-bug-rising-edge-true.rkt") (lib "syndicate/examples/actor/web-sanity-check.rkt") (lib "syndicate/drivers/tcp2.rkt") (lib "syndicate/examples/ws-echo-client.rkt") (lib "syndicate/examples/example-meta-echo2.rkt") (lib "syndicate/examples/actor/simple-cross-layer.rkt") (lib "syndicate/examples/actor/chat-simplified-internals2.rkt") (lib "syndicate/big-bang/timestate.rkt") (lib "syndicate/drivers/config.rkt") (lib "syndicate/examples/example-swap-int-and-claim.rkt") (lib "syndicate/examples/actor/chat-no-quit-world.rkt") (lib "syndicate/examples/actor/example-termination-scripts-2.rkt") (lib "syndicate/examples/example-wildcard-assertion-1.rkt") (lib "syndicate/examples/actor/make.rkt") (lib "syndicate/examples/bank-account.rkt") (lib "syndicate/examples/actor/file-system-during.rkt") (lib "syndicate/examples/actor/file-system-lll2.rkt") (lib "syndicate/pretty.rkt") (lib "syndicate/examples/actor/mini-echo.rkt") (lib "syndicate/drivers/web.rkt") (lib "syndicate/tests/stop-when-react.rkt") (lib "syndicate/examples/actor/example-memoized.rkt") (lib "syndicate/tests/facet-creation-during-stop-from-grandchild.rkt") (lib "syndicate/examples/forward-chaining.rkt") (lib "syndicate/actor.rkt") (lib "syndicate/examples/actor/fs-shell.rkt") (lib "syndicate/examples/chat-simplified-internals.rkt") (lib "syndicate-ide/main.rkt") (lib "syndicate/examples/actor/example-filesystem.rkt") (lib "syndicate/hash-order.rkt") (lib "syndicate/drivers/timer.rkt") (lib "syndicate/examples/actor/firewall-demo.rkt") (lib "syndicate/examples/actor/chat-bot.rkt") (lib "syndicate/tests/use-current-knowledge-with-new-facet.rkt") (lib "syndicate/examples/ws-hello.rkt") (lib "syndicate/examples/actor/bank-account.rkt") (lib "syndicate/examples/actor/double-click.rkt") (lib "syndicate/examples/actor/let-event.rkt") (lib "syndicate/reload.rkt") (lib "syndicate/examples/actor/web-demo.rkt") (lib "syndicate/lang/reader.rkt") (lib "syndicate/pattern.rkt") (lib "syndicate/examples/actor/udp-echo.rkt") (lib "syndicate/examples/echo.rkt") (lib "syndicate/examples/two-buyer-protocol-monolithic.rkt"))) (name . "syndicate") (nix-sha256 . "1869x94dzyw40q2r329bxbiwpla86lmpaczaflcyjnm5aprmq6ym") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/tonyg/syndicate?path=racket/") (tags . ()) (versions . #hash((default . #hasheq((checksum . "06224b52a8f5de4151d5d6af2c99a0200ca871c8") (source . "git://github.com/tonyg/syndicate?path=racket/") (source_url . "http://github.com/tonyg/syndicate/tree/master?path=racket%2F"))))))) ("my-cond" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "my-cond" "doc/my-cond@my-cond/index.html") ("main" "my-cond-iffy" "doc/my-cond-iffy@my-cond/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/my-cond.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/my-cond.txt"))) (checksum . "dfc969924a5cfbb7250acb6e301167bc6684f75f") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "sweet-exp-lib" "rackunit-lib" "racket-doc" "scribble-lib" "sweet-exp")) (description . "a version of cond that supports \"cond-expanders\" and a for/cond-clause form, allowing it to iterate though conditions") (implies . ()) (last-checked . 1522414438) (last-edit . 1415219449) (last-updated . 1502816190) (modules . ((lib "my-cond/cond-expander.rkt") (lib "my-cond/docs/my-cond.scrbl") (lib "my-cond/proc+condexp.rkt") (lib "my-cond/main.rkt") (lib "my-cond/parse-for-cond-clause.rkt") (lib "my-cond/for-cond-clause.rkt") (lib "my-cond/cond-expander-prop.rkt") (lib "my-cond/my-cond.rkt") (lib "typed/my-cond.rkt") (lib "my-cond/define-syntax-parser.rkt") (lib "my-cond/iffy.rkt") (lib "typed/my-cond/failure-sym.rkt") (lib "my-cond/typed.rkt") (lib "my-cond/cond-expander-struct.rkt") (lib "my-cond/docs/my-cond-iffy.scrbl") (lib "my-cond/failure-sym.rkt") (lib "typed/my-cond/parse-for-cond-clause.rkt"))) (name . "my-cond") (nix-sha256 . "0rly1lf1qfwjqjwcmsnjk28y1acimm09i19j5hqjp24wf6w97rl8") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (cond . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/my-cond") (tags . ("cond")) (versions . #hash((default . #hasheq((checksum . "dfc969924a5cfbb7250acb6e301167bc6684f75f") (source . "git://github.com/AlexKnauth/my-cond") (source_url . "http://github.com/AlexKnauth/my-cond/tree/master"))))))) ("memcached" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "memcached" "doc/memcached@memcached/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/memcached.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/memcached.txt"))) (checksum . "465d1bfc700140232c4abd0b854d807740895237") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "eli-tester" "racket-doc" "scribble-lib")) (description . "A native Racket interface to memcached") (implies . ()) (last-checked . 1522414434) (last-edit . 1353009237) (last-updated . 1502816178) (modules . ((lib "net/memcached/binary.rkt") (lib "net/memcached.rkt") (lib "tests/net/memcached.rkt") (lib "net/memcached/memcached.scrbl"))) (name . "memcached") (nix-sha256 . "1xcwykqx4qsfl2k3imr147dpg7jlvx538q7ycq02c3y326f5m7vd") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (net . #t) (ring:1 . #t))) (source . "github://github.com/jeapostrophe/memcached/master") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "465d1bfc700140232c4abd0b854d807740895237") (source . "github://github.com/jeapostrophe/memcached/master") (source_url . "http://github.com/jeapostrophe/memcached/tree/master"))))))) ("non-det" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/non-det.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/non-det.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/non-det.txt"))) (checksum . "e26cdb7cb8152df912e239323fad8bb6b3a8b05f") (checksum-error . #f) (conflicts . ()) (dependencies . ("chk-lib" "base" "text-table")) (description . "Racket non-determinism") (implies . ()) (last-checked . 1522414505) (last-edit . 1511196489) (last-updated . 1512418057) (modules . ((lib "non-det/examples/steam-cart.rkt") (lib "non-det/logic.rkt") (lib "non-det/examples/linear-std.rkt") (lib "non-det/main.rkt") (lib "non-det/opt.rkt"))) (name . "non-det") (nix-sha256 . "12gqids2g2cnn8vgzwkpzwmx1mzykp1i8lisq1abvqhaq1y0vrpl") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (logic . #t) (ring:1 . #t))) (source . "https://github.com/jeapostrophe/non-det.git") (tags . ("logic")) (versions . #hash((default . #hasheq((checksum . "e26cdb7cb8152df912e239323fad8bb6b3a8b05f") (source . "https://github.com/jeapostrophe/non-det.git") (source_url . "https://github.com/jeapostrophe/non-det.git"))))))) ("distro-build-doc" . #hasheq((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "distro-build" "doc/distro-build@distro-build-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/distro-build-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/distro-build-doc.txt"))) (checksum . "a1ddc164131f145c0ef776f7de44b273c265493b") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.1.1.6") "distro-build-server" "distro-build-client" "web-server-lib" "at-exp-lib" "racket-doc" "scribble-lib")) (description . "documentation part of \"distro-build\"") (implies . ()) (last-checked . 1522414380) (last-edit . 1440895103) (last-updated . 1510246881) (modules . ((lib "distro-build/distro-build.scrbl"))) (name . "distro-build-doc") (nix-sha256 . "191b1wy2b0gwlfq5pnzi8bk16an94aw6mks439ppkdf26c474aqr") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "git://github.com/racket/distro-build/?path=distro-build-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a1ddc164131f145c0ef776f7de44b273c265493b") (source . "git://github.com/racket/distro-build/?path=distro-build-doc") (source_url . "git://github.com/racket/distro-build/?path=distro-build-doc"))))))) ("gui-win32-i386" . #hash((author . "mflatt@racket-lang.org") (checksum . "e8f1b3ff961f63a4ee78da9d355e15e9267318ac") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "gui-win32-i386") (source . "https://download.racket-lang.org/releases/6.12/pkgs/gui-win32-i386.zip") (tags . ()))) ("gui-pkg-manager" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (authors . ("mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gui-pkg-manager.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gui-pkg-manager.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . ("gui-pkg-manager-lib" "gui-pkg-manager-doc" "gui-lib" "base")) (description . "Graphical tool for managing Racket package installations") (implies . ("gui-pkg-manager-lib" "gui-pkg-manager-doc")) (last-checked . 1522414410) (last-edit . 1417659583) (last-updated . 1502816101) (modules . ((lib "pkg/gui/start.rkt"))) (name . "gui-pkg-manager") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ()) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) (default . #hasheq((checksum . "5150d3e8bcb857696942274798ac37d36e7e249f") (source . "git://github.com/racket/gui-pkg-manager/?path=gui-pkg-manager") (source_url . "git://github.com/racket/gui-pkg-manager/?path=gui-pkg-manager"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("gregor-doc" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gregor" "doc/gregor@gregor-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gregor-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gregor-doc.txt"))) (checksum . "0d7c40c8d6ce6165419564df3b168821c322e3ae") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "base" "racket-doc" "data-doc" "data-lib" "gregor-lib" "scribble-lib" "sandbox-lib" "tzinfo")) (description . "Documentation part of gregor library") (implies . ()) (last-checked . 1522414406) (last-edit . 1426998205) (last-updated . 1502816091) (modules . ((lib "gregor/scribblings/moment-provider.scrbl") (lib "gregor/scribblings/datetime-arithmetic-provider.scrbl") (lib "gregor/scribblings/period.scrbl") (lib "gregor/scribblings/time.scrbl") (lib "gregor/scribblings/date-provider.scrbl") (lib "gregor/scribblings/format.scrbl") (lib "gregor/scribblings/query.scrbl") (lib "gregor/scribblings/datetime-provider.scrbl") (lib "gregor/scribblings/exceptions.scrbl") (lib "gregor/scribblings/clock.scrbl") (lib "gregor/scribblings/date-arithmetic-provider.scrbl") (lib "gregor/scribblings/time-arithmetic-provider.scrbl") (lib "gregor/scribblings/datetime.scrbl") (lib "gregor/scribblings/timezone.scrbl") (lib "gregor/scribblings/moment.scrbl") (lib "gregor/scribblings/gregor.scrbl") (lib "gregor/scribblings/time-provider.scrbl") (lib "gregor/scribblings/date.scrbl"))) (name . "gregor-doc") (nix-sha256 . "0ha4r1f28xnv52rx99ds9alnwlrl3xl8chs5a6qgnh8l0z2wbvb7") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:zeppieri@gmail.com . #t) (calendar . #t) (date . #t) (ring:1 . #t) (time . #t))) (source . "git://github.com/97jaz/gregor/?path=gregor-doc") (tags . ("calendar" "date" "time")) (versions . #hash((default . #hasheq((checksum . "0d7c40c8d6ce6165419564df3b168821c322e3ae") (source . "git://github.com/97jaz/gregor/?path=gregor-doc") (source_url . "git://github.com/97jaz/gregor/?path=gregor-doc"))))))) ("cur-test" . #hasheq((author . "wjb@williamjbowman.com") (authors . ("wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cur-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cur-test.txt"))) (checksum . "c3e03ec6a017fcbaed9dcf1917e014f3cec345b9") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" ("cur-lib" #:version "0.33") "sweet-exp-lib" "chk-lib")) (description . "") (implies . ()) (last-checked . 1522414371) (last-edit . 1452470984) (last-updated . 1510758070) (modules . ((lib "cur/tests/stdlib/curunit.rkt") (lib "cur/tests/plus.rkt") (lib "cur/tests/olly.rkt") (lib "cur/tests/ntac.rkt") (lib "cur/tests/stdlib/typeclass.rkt") (lib "cur/tests/issue67.rkt") (lib "cur/tests/stdlib/list.rkt") (lib "cur/tests/stdlib/bool.rkt") (lib "cur/tests/curnel/type-check.rkt") (lib "cur/tests/stdlib/sigma.rkt") (lib "cur/tests/stlc.rkt") (lib "cur/tests/issue-71.rkt") (lib "cur/tests/stdlib/maybe.rkt") (lib "cur/tests/sweet-exp.rkt") (lib "cur/tests/curnel/reflection.rkt") (lib "cur/tests/curnel/equiv.rkt") (lib "cur/tests/curnel/eval.rkt") (lib "cur/tests/vector-append.rkt") (lib "cur/tests/curnel/type-reconstruct.rkt") (lib "cur/tests/stdlib/prop.rkt") (lib "cur/tests/stdlib/nat.rkt") (lib "cur/tests/stdlib/sugar.rkt") (lib "cur/tests/curnel/runtime.rkt") (lib "cur/tests/curnel/runtime-utils.rkt"))) (name . "cur-test") (nix-sha256 . "0ym25g3m8jryrbbm9rmm1ii5wkaar88zyy3c400ljxh25i0c7az8") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:wjb@williamjbowman.com . #t) (ring:1 . #t))) (source . "git://github.com/wilbowma/cur.git/?path=cur-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c3e03ec6a017fcbaed9dcf1917e014f3cec345b9") (source . "git://github.com/wilbowma/cur.git/?path=cur-test") (source_url . "git://github.com/wilbowma/cur.git/?path=cur-test"))))))) ("profile-flame-graph" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "profile-flame-graph" "doc/profile-flame-graph@profile-flame-graph/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/profile-flame-graph.txt") (test-failure-log . "server/built/test-fail/profile-flame-graph.txt") (test-success-log . #f))) (checksum . "1364a084256765800e83d93b0db23b2cc801d161") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "pict" "profile-lib" "net-lib" "data-lib" "scribble-lib" "racket-doc" "profile-doc" "net-doc")) (description . "Library that connects the Racket profiler to the flamegraph tool") (implies . ()) (last-checked . 1522414536) (last-edit . 1477803994) (last-updated . 1512155278) (modules . ((lib "profile-flame-graph/flame-graph.rkt") (lib "profile-flame-graph/profile.rkt") (lib "profile-flame-graph/main.rkt") (lib "profile-flame-graph/profile-flame-graph.scrbl") (lib "profile-flame-graph/examples/fizzbuzz-example.rkt") (lib "profile-flame-graph/examples/scribble-example.rkt"))) (name . "profile-flame-graph") (nix-sha256 . "1szkj9z17kdm2fsqb17wj4blnkay0wfsxc2wd17fmvq0bypfylrk") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (profiling . #t) (ring:1 . #t))) (source . "git://github.com/takikawa/racket-profile-flamegraph") (tags . ("profiling")) (versions . #hash((default . #hasheq((checksum . "1364a084256765800e83d93b0db23b2cc801d161") (source . "git://github.com/takikawa/racket-profile-flamegraph") (source_url . "http://github.com/takikawa/racket-profile-flamegraph/tree/master"))))))) ("apply" . #hasheq((author . "zaomir@outlook.com") (authors . ("zaomir@outlook.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/apply.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/apply.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/apply.txt"))) (checksum . "1d7d138179cd02e2b10eab29748d08b76d91c69d") (checksum-error . #f) (conflicts . ()) (dependencies . ("racket")) (description . "應用序語言") (implies . ()) (last-checked . 1522417871) (last-edit . 1516523856) (last-updated . 1516544174) (modules . ((lib "apply/lang/reader.rkt") (lib "apply/main.rkt"))) (name . "apply") (nix-sha256 . "05yvlajmg50493lp8vv53vgd607f5206ybjmc3v334jaarsz8r7f") (ring . 2) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:zaomir@outlook.com . #t) (chinese . #t) (compiler . #t) (lang . #t) (language . #t) (programming-languages . #t) (ring:2 . #t))) (source . "https://github.com/zaoqil/apply.git?path=apply") (tags . ("chinese" "compiler" "lang" "language" "programming-languages")) (versions . #hash((default . #hasheq((checksum . "1d7d138179cd02e2b10eab29748d08b76d91c69d") (source . "https://github.com/zaoqil/apply.git?path=apply") (source_url . "https://github.com/zaoqil/apply.git?path=apply"))))))) ("generic-syntax-expanders" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "generic-syntax-expanders" "doc/generic-syntax-expanders@generic-syntax-expanders/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/generic-syntax-expanders.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/generic-syntax-expanders.txt"))) (checksum . "6d3b41875095d0f18d6e1d88bf7a8ed3981fe999") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "fancy-app" "reprovide-lang" "lens" "point-free" "predicates" "scribble-lib" "scribble-text-lib" "scribble-lib" "rackunit-lib" "racket-doc")) (description . "Allows definition of macros which include expander-definition forms, like match expanders") (implies . ()) (last-checked . 1522414404) (last-edit . 1500074662) (last-updated . 1502816077) (modules . ((lib "generic-syntax-expanders/private/scoped-transformers.rkt") (lib "generic-syntax-expanders/private/expander-types.rkt") (lib "generic-syntax-expanders/private/scoped-transformers.scrbl") (lib "generic-syntax-expanders/private/reqprov.rkt") (lib "generic-syntax-expanders/test/test-arrows.rkt") (lib "generic-syntax-expanders/private/define-scoped-transformers.rkt") (lib "generic-syntax-expanders/private/expander-types.scrbl") (lib "generic-syntax-expanders/private/define-scoped-transformers.scrbl") (lib "generic-syntax-expanders/test/test-call-with-dotted-last.rkt") (lib "generic-syntax-expanders/private/expanders.scrbl") (lib "generic-syntax-expanders/main.rkt") (lib "generic-syntax-expanders/test/test-define-x-expander-use-site-scope-simple.rkt") (lib "generic-syntax-expanders/private/reqprov.scrbl") (lib "generic-syntax-expanders/test/test-foo-mixin-expander-predicate.rkt") (lib "generic-syntax-expanders/private/define-expanders.rkt") (lib "generic-syntax-expanders/private/with-identifiers.rkt") (lib "generic-syntax-expanders/private/define-expanders.scrbl") (lib "generic-syntax-expanders/private/doc-util.rkt") (lib "generic-syntax-expanders/main.scrbl") (lib "generic-syntax-expanders/private/expanders.rkt"))) (name . "generic-syntax-expanders") (nix-sha256 . "048gdsgwdmzi9060r46af08y89g7z5kqn1kx89s32pgyb0w5jkmc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (experimental . #t) (ring:1 . #t) (syntax . #t))) (source . "git://github.com/jackfirth/generic-syntax-expanders") (tags . ("experimental" "syntax")) (versions . #hash((default . #hasheq((checksum . "6d3b41875095d0f18d6e1d88bf7a8ed3981fe999") (source . "git://github.com/jackfirth/generic-syntax-expanders") (source_url . "http://github.com/jackfirth/generic-syntax-expanders/tree/master"))))))) ("racket-dogstatsd" . #hasheq((author . "info@v25media.com") (authors . ("info@v25media.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dogstatsd" "doc/dogstatsd@racket-dogstatsd/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-dogstatsd.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-dogstatsd.txt"))) (checksum . "164ec431a98689b111495bad638313b219e3b0b2") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "threading" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "DogStatsD client for Racket, allowing you to send metrics to Datadog") (implies . ()) (last-checked . 1522414572) (last-edit . 1516216259) (last-updated . 1516216259) (modules . ((lib "dogstatsd/private/socket.rkt") (lib "dogstatsd/private/servicechecks.rkt") (lib "dogstatsd/private/buffer.rkt") (lib "dogstatsd/private/events.rkt") (lib "dogstatsd/test.rkt") (lib "dogstatsd/private/utils.rkt") (lib "dogstatsd/scribblings/dogstatsd.scrbl") (lib "dogstatsd/main.rkt") (lib "dogstatsd/private/statsd.rkt"))) (name . "racket-dogstatsd") (nix-sha256 . "0xavvywb89ypj81w98kz2msvbrh40s51lq60kna2saqbfq2dbgzi") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:info@v25media.com . #t) (dogstatsd . #t) (metrics . #t) (ring:2 . #t) (statsd . #t))) (source . "https://github.com/DarrenN/racket-dogstatsd.git") (tags . ("dogstatsd" "metrics" "statsd")) (versions . #hash((default . #hasheq((checksum . "164ec431a98689b111495bad638313b219e3b0b2") (source . "https://github.com/DarrenN/racket-dogstatsd.git") (source_url . "https://github.com/DarrenN/racket-dogstatsd.git"))))))) ("racket-lib" . #hash((author . "eli@racket-lang.org jay@racket-lang.org matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org ryanc@racket-lang.org samth@racket-lang.org") (checksum . "810b69bd48b5b2111c0f7d548f54005d38cd51e9") (dependencies . (("racket-win32-i386-2" #:platform "win32\\i386") ("racket-win32-x86_64-2" #:platform "win32\\x86_64") ("racket-x86_64-linux-natipkg-2" #:platform "x86_64-linux-natipkg") ("racket-x86_64-macosx-2" #:platform "x86_64-macosx") ("racket-i386-macosx-2" #:platform "i386-macosx") ("racket-ppc-macosx-2" #:platform "ppc-macosx") ("db-ppc-macosx" #:platform "ppc-macosx") ("db-win32-i386" #:platform "win32\\i386") ("db-win32-x86_64" #:platform "win32\\x86_64") ("db-x86_64-linux-natipkg" #:platform "x86_64-linux-natipkg") ("com-win32-i386" #:platform "win32\\i386") ("com-win32-x86_64" #:platform "win32\\x86_64"))) (description . "eli@racket-lang.org jay@racket-lang.org matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org ryanc@racket-lang.org samth@racket-lang.org") (modules . ()) (name . "racket-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/racket-lib.zip") (tags . ()))) ("auxiliary-macro-context" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/auxiliary-macro-context.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/auxiliary-macro-context.txt"))) (checksum . "52d3df7f937700bcea5b4d200903cfb6575afdc6") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "Match-expander-style syntactic extensibility outside expressions.") (implies . ()) (last-checked . 1522414288) (last-edit . 1469297561) (last-updated . 1502812275) (modules . ((lib "auxiliary-macro-context/test/test-auxiliary-macro-context.rkt") (lib "auxiliary-macro-context/main.rkt") (lib "auxiliary-macro-context/test/test-auxiliary-macro-context2.rkt"))) (name . "auxiliary-macro-context") (nix-sha256 . "0rdw9dxyywa3n32ljchjj12p163n951ck698ph0vwjx0aam4mxyn") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/tonyg/racket-auxiliary-macro-context") (tags . ()) (versions . #hash((default . #hasheq((checksum . "52d3df7f937700bcea5b4d200903cfb6575afdc6") (source . "git://github.com/tonyg/racket-auxiliary-macro-context") (source_url . "http://github.com/tonyg/racket-auxiliary-macro-context/tree/master"))))))) ("html-template" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "html-template" "doc/html-template@html-template/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/html-template.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/html-template.txt"))) (checksum . "9a51d5dda4dffd81cc9f3e2d7d971c808d4ad2c0") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "html-writing" "racket-doc" "scribble-lib" "overeasy")) (description . "HTML-Writing Template Language in SXML") (implies . ()) (last-checked . 1522414417) (last-edit . 1456718098) (last-updated . 1502816129) (modules . ((lib "html-template/html-template-generate.rkt") (lib "html-template/html-template-parse.rkt") (lib "html-template/main.rkt") (lib "html-template/html-template.scrbl") (lib "html-template/html-template-generate-helpers.rkt") (lib "html-template/html-template.rkt") (lib "html-template/test-html-template.rkt"))) (name . "html-template") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (html . #t) (ring:1 . #t) (sxml . #t) (web . #t))) (source . "http://www.neilvandyke.org/racket/html-template.zip") (tags . ("html" "sxml" "web")) (versions . #hash((default . #hasheq((checksum . "9a51d5dda4dffd81cc9f3e2d7d971c808d4ad2c0") (source . "http://www.neilvandyke.org/racket/html-template.zip") (source_url . "http://www.neilvandyke.org/racket/html-template.zip"))))))) ("racket-lang-org" . #hash((author . "samth@racket-lang.org mflatt@racket-lang.org eli@barzilay.org") (authors . ("samth@racket-lang.org" "mflatt@racket-lang.org" "eli@barzilay.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/racket-lang-org.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "96a006b42e9a782d4a3d55d5326966838b880ccf") (checksum-error . #f) (conflicts . ()) (dependencies . ("graph" "gui-lib" "base" ("plt-web-lib" #:version "1.3") "at-exp-lib" "net-lib" "racket-index" ("scribble-lib" #:version "1.28") "syntax-color-lib" "plot-gui-lib" "plot-lib" "math-lib" "pollen" "css-tools" "sugar" "txexpr" "gregor-lib" "frog" "rackunit-lib" "pict-lib" ("s3-sync" #:version "1.10"))) (description . "Sources for http://racket-lang.org") (implies . ()) (last-checked . 1522414590) (last-edit . 1417307461) (last-updated . 1522288376) (modules . ((lib "racket-lang-org/www/old-techreports.rkt") (lib "racket-lang-org/blog/_src/xml-from-blogger/xml.rkt") (lib "racket-lang-org/stubs/pkgs.rkt") (lib "racket-lang-org/www/web-copyright.rkt") (lib "racket-lang-org/stubs/mailman.rkt") (lib "racket-lang-org/config.rkt") (lib "racket-lang-org/rcon/2017/pollen.rkt") (lib "racket-lang-org/stubs/all.rkt") (lib "racket-lang-org/rcon/2016/svg.rkt") (lib "racket-lang-org/rcon/2011/all.rkt") (lib "racket-lang-org/www/pollen.rkt") (lib "racket-lang-org/rcon/2016/pollen.rkt") (lib "racket-lang-org/www/index-illos.rkt") (lib "racket-lang-org/rcon/all.rkt") (lib "racket-lang-org/www/all.rkt") (lib "racket-lang-org/blog/_src/posts/2018-01-05-racket-on-chez-status.scrbl") (lib "racket-lang-org/blog/all.rkt") (lib "racket-lang-org/www/help.rkt") (lib "racket-lang-org/download/resources.rkt") (lib "racket-lang-org/minis/bugs.rkt") (lib "racket-lang-org/rcon/2018/pollen.rkt") (lib "racket-lang-org/minis/all.rkt") (lib "racket-lang-org/minis/drracket.rkt") (lib "racket-lang-org/download/release-info.rkt") (lib "racket-lang-org/identity.rkt") (lib "racket-lang-org/stubs/git.rkt") (lib "racket-lang-org/www/irc.rkt") (lib "racket-lang-org/download/all.rkt") (lib "racket-lang-org/lists/index.rkt") (lib "racket-lang-org/www/resources.rkt") (lib "racket-lang-org/www/learning.rkt") (lib "racket-lang-org/rcon/2015/eero-demo.rkt") (lib "racket-lang-org/rcon/utils.rkt") (lib "racket-lang-org/www/techreports.rkt") (lib "racket-lang-org/stubs/wiki.rkt") (lib "racket-lang-org/www/index.rkt") (lib "racket-lang-org/stubs/planet.rkt") (lib "racket-lang-org/www/css/fonts/pollen.rkt") (lib "racket-lang-org/www/code.rkt") (lib "racket-lang-org/rcon/2013/all.rkt") (lib "racket-lang-org/rcon/resources.rkt") (lib "racket-lang-org/rcon/2015/eero.rkt") (lib "racket-lang-org/download/installer-pages.rkt") (lib "racket-lang-org/rcon/2014/all.rkt") (lib "racket-lang-org/minis/pre.rkt") (lib "racket-lang-org/download/indexes.rkt") (lib "racket-lang-org/www/community.rkt") (lib "racket-lang-org/stubs/docs.rkt") (lib "racket-lang-org/download/index.rkt") (lib "racket-lang-org/lists/resources.rkt") (lib "racket-lang-org/sync.rkt") (lib "racket-lang-org/stubs/dirlist.rkt") (lib "racket-lang-org/rcon/2012/all.rkt") (lib "racket-lang-org/rcon/2015/pollen.rkt") (lib "racket-lang-org/download/symlinks.rkt") (lib "racket-lang-org/all.rkt") (lib "racket-lang-org/blog/frog.rkt") (lib "racket-lang-org/www/lists.rkt") (lib "racket-lang-org/testing.rkt") (lib "racket-lang-org/blog/_src/posts/racket-on-chez-status/stack.rkt") (lib "racket-lang-org/download/version.rkt") (lib "racket-lang-org/www/download.rkt") (lib "racket-lang-org/download/mirror-link.rkt") (lib "racket-lang-org/download/data.rkt") (lib "racket-lang-org/www/new-name.rkt") (lib "racket-lang-org/www/people.rkt") (lib "racket-lang-org/rcon/2016/racketcon-font.rkt") (lib "racket-lang-org/download/download-pages.rkt") (lib "racket-lang-org/stubs/blog.rkt") (lib "racket-lang-org/blog/_src/xml-from-blogger/main.rkt") (lib "racket-lang-org/minis/lists.rkt"))) (name . "racket-lang-org") (nix-sha256 . "107z2sbz47qwjxssxig56a3ljb808fxyddk3lk8wlmmw453qb40c") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:eli@barzilay.org . #t) (author:mflatt@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/racket/racket-lang-org") (tags . ()) (versions . #hash((default . #hasheq((checksum . "96a006b42e9a782d4a3d55d5326966838b880ccf") (source . "git://github.com/racket/racket-lang-org") (source_url . "http://github.com/racket/racket-lang-org/tree/master"))))))) ("ds-store-lib" . #hash((author . "mflatt@racket-lang.org") (checksum . "a7ed25d34ef2565bd7fb3bad5a6e596e07509958") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "ds-store-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/ds-store-lib.zip") (tags . ()))) ("extensible-functions" . #hasheq((author . "me@leafac.com") (authors . ("me@leafac.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "extensible-functions" "doc/extensible-functions@extensible-functions/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/extensible-functions.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/extensible-functions.txt"))) (checksum . "1e00692d6f6cc434d9161b22e2bdb02b08d01241") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc" "typed-racket-doc")) (description . "A solution to the expression problem in Typed Racket") (implies . ()) (last-checked . 1522414399) (last-edit . 1486939835) (last-updated . 1502815957) (modules . ((lib "extensible-functions/documentation/extensible-functions.scrbl") (lib "extensible-functions/main.rkt"))) (name . "extensible-functions") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:me@leafac.com . #t) (expression-problem . #t) (extensible . #t) (ring:1 . #t) (utility . #t))) (source . "https://www.leafac.com/software/extensible-functions/extensible-functions.zip") (tags . ("expression-problem" "extensible" "utility")) (versions . #hash((default . #hasheq((checksum . "1e00692d6f6cc434d9161b22e2bdb02b08d01241") (source . "https://www.leafac.com/software/extensible-functions/extensible-functions.zip") (source_url . "https://www.leafac.com/software/extensible-functions/extensible-functions.zip"))))))) ("net-cookies-test" . #hash((author . "jay.mccarthy@gmail.com jmj@fellowhuman.com") (checksum . "fcac7ff7a75cfbc83d20ed2574a81cf7908a7f4b") (dependencies . ("base" "net-cookies-lib" "rackunit-lib")) (description . "jay.mccarthy@gmail.com jmj@fellowhuman.com") (modules . ()) (name . "net-cookies-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/net-cookies-test.zip") (tags . ()))) ("plai-math" . #hasheq((author . "jsolum@westmont.edu") (authors . ("jsolum@westmont.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/plai-math.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "a1f9cd5332c9701ded9b0c2e2888842ca1e674ca") (checksum-error . #f) (conflicts . ()) (dependencies . ()) (description . "Provides helpful math functions to plai-typed") (implies . ()) (last-checked . 1522414514) (last-edit . 1504636331) (last-updated . 1518053129) (modules . ((lib "plai-math/math.rkt"))) (name . "plai-math") (nix-sha256 . "1kls6inz79y545apblqpjp90cx7rqa9d2wxqkybslgxxlqwlhja1") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (Math . #t) (author:jsolum@westmont.edu . #t) (plai-typed . #t) (ring:1 . #t))) (source . "git://github.com/JamesSolum/racket_packages?path=math") (tags . ("Math" "plai-typed")) (versions . #hash((default . #hasheq((checksum . "a1f9cd5332c9701ded9b0c2e2888842ca1e674ca") (source . "git://github.com/JamesSolum/racket_packages?path=math") (source_url . "http://github.com/JamesSolum/racket_packages/tree/master?path=math"))))))) ("gmp" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gmp" "doc/gmp@gmp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gmp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gmp.txt"))) (checksum . "45807466a9a1492e8abce7f1453ee5253c698a58") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "binaryio-lib" "gmp-lib" "racket-doc" "scribble-lib")) (description . "Bindings to gmp (the GNU Multiple Precision Arithmetic Library)") (implies . ("gmp-lib")) (last-checked . 1522414405) (last-edit . 1501866209) (last-updated . 1518567888) (modules . ((lib "gmp/tests/util.rkt") (lib "gmp/gmp.scrbl") (lib "gmp/tests/misc.rkt") (lib "gmp/tests/bytes.rkt"))) (name . "gmp") (nix-sha256 . "1w9c2nidld48jz1k860kcizncdc4i49vzjq62dwvcyq21n31cpcr") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (math . #t) (ring:1 . #t))) (source . "git://github.com/rmculpepper/racket-gmp?path=gmp") (tags . ("math")) (versions . #hash((default . #hasheq((checksum . "45807466a9a1492e8abce7f1453ee5253c698a58") (source . "git://github.com/rmculpepper/racket-gmp?path=gmp") (source_url . "http://github.com/rmculpepper/racket-gmp/tree/master?path=gmp"))))))) ("static-rename-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/static-rename-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/static-rename-lib.txt"))) (checksum . "50f1ff9866a3ef116471eb1a483c1992480dcd45") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.2"))) (description . "implementation (no documentation) for “static-rename”") (implies . ()) (last-checked . 1522414684) (last-edit . 1490649800) (last-updated . 1502816455) (modules . ((lib "static-rename/main.rkt"))) (name . "static-rename-lib") (nix-sha256 . "09gzqnlilws5hm7ayg1cc82maz72syxa52p0r89ayazxhw0yfmyx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-static-rename?path=static-rename-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "50f1ff9866a3ef116471eb1a483c1992480dcd45") (source . "git://github.com/lexi-lambda/racket-static-rename?path=static-rename-lib") (source_url . "http://github.com/lexi-lambda/racket-static-rename/tree/master?path=static-rename-lib"))))))) ("scribble-abbrevs" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scribble-abbrevs" "doc/scribble-abbrevs@scribble-abbrevs/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scribble-abbrevs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scribble-abbrevs.txt"))) (checksum . "fd12d253b485dd61cc71142cd04a56d3176f3c46") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "reprovide-lang" "scribble-lib" "scribble-doc" "racket-doc" "rackunit-abbrevs" "rackunit-lib" "rackunit-abbrevs")) (description . "Scribble-to-LaTeX helper functions") (implies . ()) (last-checked . 1522414675) (last-edit . 1503077696) (last-updated . 1521391754) (modules . ((lib "scribble-abbrevs/docs/scribble-abbrevs.scrbl") (lib "scribble-abbrevs/main.rkt") (lib "scribble-abbrevs/private/scribble-abbrevs.rkt") (lib "scribble-abbrevs/private/integer-word.rkt"))) (name . "scribble-abbrevs") (nix-sha256 . "03blnja2pfyfv8da173bjfk89skkm9qhshmifyzs3p88j8rsr6dp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (ring:1 . #t) (scribble . #t) (utility . #t))) (source . "git://github.com/bennn/scribble-abbrevs") (tags . ("scribble" "utility")) (versions . #hash((default . #hasheq((checksum . "fd12d253b485dd61cc71142cd04a56d3176f3c46") (source . "git://github.com/bennn/scribble-abbrevs") (source_url . "http://github.com/bennn/scribble-abbrevs/tree/master"))))))) ("parendown" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parendown.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/parendown.txt"))) (checksum . "81463ff69f20f51e70d24876b586d7c889eb9f7c") (checksum-error . #f) (conflicts . ()) (dependencies . ("parendown-lib")) (description . "A weak open parenthesis, good for eliminating indentation. (lib)") (implies . ("parendown-lib")) (last-checked . 1522414509) (last-edit . 1493457710) (last-updated . 1506090586) (modules . ()) (name . "parendown") (nix-sha256 . "0vgl20djvxvbqgd0xx6i3bildwdkzz9gx1g2yn9jj8y14zp145rv") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (lang . #t) (lang-extension . #t) (language . #t) (ring:1 . #t))) (source . "git://github.com/rocketnia/parendown?path=parendown") (tags . ("lang" "lang-extension" "language")) (versions . #hash((default . #hasheq((checksum . "81463ff69f20f51e70d24876b586d7c889eb9f7c") (source . "git://github.com/rocketnia/parendown?path=parendown") (source_url . "http://github.com/rocketnia/parendown/tree/master?path=parendown"))))))) ("set" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "new-set" "doc/new-set@set/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/set.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/set.txt"))) (checksum . "7ddf1c31ed95a5aa339f6240d93e8e10f55b3cec") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "Use `racket/set` instead") (implies . ()) (last-checked . 1522414677) (last-edit . 1410271687) (last-updated . 1503261501) (modules . ((lib "data/main.rkt") (lib "data/private/common.rkt") (lib "data/seteq.rkt") (lib "data/set.rkt") (lib "data/new-set.scrbl"))) (name . "set") (nix-sha256 . "1rwpv1q2kdyz5snc6naglzxwgw9mayzw53bzswp5vnm9hdi978id") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:samth@ccs.neu.edu . #t) (data . #t) (ring:1 . #t))) (source . "github://github.com/samth/set.rkt/master") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "7ddf1c31ed95a5aa339f6240d93e8e10f55b3cec") (source . "github://github.com/samth/set.rkt/master") (source_url . "http://github.com/samth/set.rkt/tree/master"))))))) ("sasl-doc" . #hash((author . "ryanc@racket-lang.org") (checksum . "d8535994778c7d8558e344fc680b85b10b290976") (dependencies . (("base" #:version "6.10"))) (description . "ryanc@racket-lang.org") (modules . ()) (name . "sasl-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/sasl-doc.zip") (tags . ()))) ("elasticsearch" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/elasticsearch.txt") (test-failure-log . "server/built/test-fail/elasticsearch.txt") (test-success-log . #f))) (checksum . "bd32aea0d05131da72f9bca8491a21f7c5dfaa4e") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "") (implies . ()) (last-checked . 1522414396) (last-edit . 1442954581) (last-updated . 1502815952) (modules . ((lib "elasticsearch/elasticsearch.rkt") (lib "elasticsearch/tests.rkt") (lib "elasticsearch/utils.rkt") (lib "elasticsearch/main.rkt"))) (name . "elasticsearch") (nix-sha256 . "05bvq9igykhx4iyn0npcrhvvlqnj8anisv71fr37k8baqrc09x38") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:stchang@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/vishesh/elasticsearch.rkt") (tags . ()) (versions . #hash((default . #hasheq((checksum . "bd32aea0d05131da72f9bca8491a21f7c5dfaa4e") (source . "git://github.com/vishesh/elasticsearch.rkt") (source_url . "http://github.com/vishesh/elasticsearch.rkt/tree/master"))))))) ("syntax-color-doc" . #hash((author . "mflatt@racket-lang.org") (checksum . "c68088fb6179f807f2753eda422763d11960f6df") (dependencies . ("base" "gui-doc" "scribble-doc" "gui-lib" "scribble-lib" "racket-doc" "syntax-color-lib")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "syntax-color-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/syntax-color-doc.zip") (tags . ()))) ("net2" . #hasheq((author . "jackhfirth@gmail.com dedbox@gmail.com") (authors . ("jackhfirth@gmail.com" "dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "net2" "doc/net2@net2/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/net2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/net2.txt"))) (checksum . "b4247d52177120ff246b60c400b070dc962ee24b") (checksum-error . #f) (conflicts . ()) (dependencies . ("reprovide-lang" "base" "unix-socket-doc" "unix-socket-lib" "disposable" "racket-doc" "scribble-lib")) (description . "Highly experimental and aspirational networking library. Not yet fit for public consumption.") (implies . ()) (last-checked . 1522414505) (last-edit . 1514952527) (last-updated . 1515041642) (modules . ((lib "net2/scribblings/util.rkt") (lib "net2/scribblings/listener.scrbl") (lib "net2/scribblings/main.scrbl") (lib "net2/scribblings/data.scrbl") (lib "net2/scribblings/tech.rkt") (lib "net2/main.rkt") (lib "net2/scribblings/connector.scrbl") (lib "net2/transport.rkt") (lib "net2/scribblings/base.rkt") (lib "net2/system.rkt") (lib "net2/listener.rkt") (lib "net2/scribblings/system.scrbl") (lib "net2/scribblings/transport.scrbl") (lib "net2/data.rkt") (lib "net2/connector.rkt"))) (name . "net2") (nix-sha256 . "15glddf0dh2kgp4fki4d80fw5v4a3fdivcjhik95xmrblmyg7myv") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dedbox@gmail.com . #t) (author:jackhfirth@gmail.com . #t) (concurrency . #t) (experimental . #t) (io . #t) (network . #t) (ring:2 . #t))) (source . "https://github.com/jackfirth/racket-net2.git") (tags . ("concurrency" "experimental" "io" "network")) (versions . #hash((default . #hasheq((checksum . "b4247d52177120ff246b60c400b070dc962ee24b") (source . "https://github.com/jackfirth/racket-net2.git") (source_url . "https://github.com/jackfirth/racket-net2.git"))))))) ("parted" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "parted" "doc/parted@parted/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parted.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/parted.txt"))) (checksum . "32e6a6df9f53a568022c1fb7e50d96fc8025fdef") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "mcfly" "overeasy" "sudo")) (description . "Interface to GNU Parted Disk Partion Utility") (implies . ()) (last-checked . 1522414510) (last-edit . 1456470449) (last-updated . 1502816244) (modules . ((lib "parted/parted.rkt") (lib "parted/main.rkt") (lib "parted/parted.scrbl"))) (name . "parted") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:neil@neilvandyke.org . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/parted.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "32e6a6df9f53a568022c1fb7e50d96fc8025fdef") (source . "http://www.neilvandyke.org/racket/parted.zip") (source_url . "http://www.neilvandyke.org/racket/parted.zip"))))))) ("rackunit-test" . #hash((author . "noel@racket-lang.org ryanc@racket-lang.org") (checksum . "5b19358a224424767e5962c80b3cd14e938f08a1") (dependencies . ("base" "eli-tester" "rackunit-lib" "srfi-lite-lib")) (description . "noel@racket-lang.org ryanc@racket-lang.org") (modules . ()) (name . "rackunit-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/rackunit-test.zip") (tags . ()))) ("cldr-localenames-modern" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cldr-localenames-modern" "doc/cldr-localenames-modern@cldr-localenames-modern/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cldr-localenames-modern.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cldr-localenames-modern.txt"))) (checksum . "f9f3e8d9245764a309542816acf40fe147b473a3") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "cldr-core" "scribble-lib" "racket-doc")) (description . "API for cldr-localenames-modern data set") (implies . ()) (last-checked . 1522414314) (last-edit . 1426994538) (last-updated . 1502812293) (modules . ((lib "cldr/scribblings/cldr-localenames-modern.scrbl") (lib "cldr/localenames-modern.rkt"))) (name . "cldr-localenames-modern") (nix-sha256 . "1a54rja5lhz9x9mz55pvicz2ppidvapqf34qf2i9p9959fg5z7bx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:zeppieri@gmail.com . #t) (cldr . #t) (l10n . #t) (ring:1 . #t))) (source . "git://github.com/97jaz/cldr-localenames-modern") (tags . ("cldr" "l10n")) (versions . #hash((default . #hasheq((checksum . "f9f3e8d9245764a309542816acf40fe147b473a3") (source . "git://github.com/97jaz/cldr-localenames-modern") (source_url . "http://github.com/97jaz/cldr-localenames-modern/tree/master"))))))) ("operational-transformation" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/operational-transformation.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/operational-transformation.txt"))) (checksum . "88b2f0370b945814135cff01fac9c714a5558ab0") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "operational-transformation-demo" "operational-transformation-lib" "profile-lib")) (description . "Operational Transformation (OT) for Racket. Wrapper package for both operational-transformation-lib and operational-transformation-demo.") (implies . ()) (last-checked . 1522414507) (last-edit . 1470267088) (last-updated . 1502816236) (modules . ()) (name . "operational-transformation") (nix-sha256 . "03k215288mlv0bapy5frg80xwvlw54lrns0ffg4x0s0jzl038bxf") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/tonyg/racket-operational-transformation?path=operational-transformation") (tags . ()) (versions . #hash((default . #hasheq((checksum . "88b2f0370b945814135cff01fac9c714a5558ab0") (source . "git://github.com/tonyg/racket-operational-transformation?path=operational-transformation") (source_url . "http://github.com/tonyg/racket-operational-transformation/tree/master?path=operational-transformation"))))))) ("web-server" . #hash((author . "jay@racket-lang.org") (checksum . "ac1aefac7979bee22131cf5d8045a1621d50bfb5") (dependencies . ("web-server-lib" "web-server-doc")) (description . "jay@racket-lang.org") (modules . ()) (name . "web-server") (source . "https://download.racket-lang.org/releases/6.12/pkgs/web-server.zip") (tags . ()))) ("phc-adt-test" . #hasheq((author . "georges.duperon@gmail.com") (authors . ("georges.duperon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/phc-adt-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/phc-adt-test.txt"))) (checksum . "e2fe727b4ff84f0bb0212a6c103f0e0e2c955a4c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "phc-adt-lib" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "multi-id" "phc-toolkit" "type-expander")) (description . "Tests for phc-adt") (implies . ()) (last-checked . 1522414511) (last-edit . 1501077628) (last-updated . 1502816248) (modules . ((lib "phc-adt/test/row-polymorphism/test-with-plus.rkt") (lib "phc-adt/test/row-polymorphism/adt-pre-declarations.rkt") (lib "phc-adt/test/adt-pre-declarations.rkt") (lib "phc-adt/test/test-structure2.rkt") (lib "phc-adt/test/row-polymorphism/test-with.rkt") (lib "phc-adt/test/test-variant.rkt") (lib "phc-adt/test/test-structure-other.rkt") (lib "phc-adt/test/test-tagged.rkt") (lib "phc-adt/test/test-adt-init-error.rkt") (lib "phc-adt/test/test-constructor3.rkt") (lib "phc-adt/test/mailing-list-example/example.rkt") (lib "phc-adt/test/test-tagged-parametric.rkt") (lib "phc-adt/test/row-polymorphism/test-merge.rkt") (lib "phc-adt/test/test-constructor.rkt") (lib "phc-adt/test/test-empty.rkt") (lib "phc-adt/test/test-structure-parametric.rkt") (lib "phc-adt/test/test-structure-speed.rkt") (lib "phc-adt/test/test-constructor2.rkt") (lib "phc-adt/test/mailing-list-example/adt-pre-declarations.rkt") (lib "phc-adt/test/node-low-level-quick-test.rkt") (lib "phc-adt/test/test-structure.rkt") (lib "phc-adt/test/test-structure-low-level.rkt") (lib "phc-adt/test/row-polymorphism/test-with-update-only.rkt") (lib "phc-adt/test/test-adt.rkt") (lib "phc-adt/test/test-tagged-call-syntax.rkt") (lib "phc-adt/test/ck.rkt") (lib "phc-adt/test/row-polymorphism/test-split.rkt") (lib "phc-adt/test/test-tagged-define.rkt") (lib "phc-adt/test/test-define-adt.rkt") (lib "phc-adt/test/test-adt-init-no-error.rkt") (lib "phc-adt/test/test-adt-structure-wrapped.rkt"))) (name . "phc-adt-test") (nix-sha256 . "18md2hanbx8812b2b3678zg5pblci409j2h6nkk8nhjkmvny1hzp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:georges.duperon@gmail.com . #t) (phc-adt . #t) (ring:1 . #t) (tests . #t))) (source . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt-test") (tags . ("phc-adt" "tests")) (versions . #hash((default . #hasheq((checksum . "e2fe727b4ff84f0bb0212a6c103f0e0e2c955a4c") (source . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt-test") (source_url . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt-test"))))))) ("lens-doc" . #hasheq((author . "jackhfirth@gmail.com alexander@knauth.org") (authors . ("jackhfirth@gmail.com" "alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "lens" "doc/lens@lens-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lens-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lens-doc.txt"))) (checksum . "376c286a68ed34ee723cf5c5a76dcba9828db0c1") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "lens-lib" "lens-unstable" "scribble-lib" "reprovide-lang" "jack-scribble-example" "at-exp-lib" "doc-coverage" "racket-doc" "sweet-exp-lib")) (description . "Documentation for the lens libraries") (implies . ()) (last-checked . 1522414423) (last-edit . 1500075042) (last-updated . 1514736113) (modules . ((lib "lens/private/scribblings/reference/data.scrbl") (lib "lens/private/tests/doc-coverage.rkt") (lib "lens/private/doc-util/lenses-examples.rkt") (lib "unstable/lens/string-split.scrbl") (lib "lens/private/scribblings/guide/user-defined/custom.scrbl") (lib "lens/private/doc-util/main.rkt") (lib "unstable/lens/dict-nested.scrbl") (lib "lens/private/scribblings/guide/built-in/key-value.scrbl") (lib "lens/private/hash/join-hash.scrbl") (lib "lens/private/string/string.scrbl") (lib "lens/private/list/multi.scrbl") (lib "lens/private/vector/pick.scrbl") (lib "lens/private/list/assoc.scrbl") (lib "lens/private/syntax/srcloc.scrbl") (lib "unstable/lens/set-filterer.scrbl") (lib "lens/private/scribblings/guide/introduction.scrbl") (lib "lens/private/struct/struct.scrbl") (lib "unstable/lens/struct-join.scrbl") (lib "lens/private/list/car-cdr.scrbl") (lib "lens/private/dict/dict.scrbl") (lib "unstable/lens/map.scrbl") (lib "lens/private/stream/stream.scrbl") (lib "lens/private/doc-util/lens-tech.rkt") (lib "unstable/lens/isomorphism.scrbl") (lib "lens/private/scribblings/guide.scrbl") (lib "unstable/lens/tests/doc-coverage.rkt") (lib "unstable/lens/main.scrbl") (lib "lens/private/doc-util/deflenses.rkt") (lib "lens/private/scribblings/guide/built-in.scrbl") (lib "lens/private/string/join-string.scrbl") (lib "lens/private/base/view-set.scrbl") (lib "lens/private/list/list-ref-take-drop.scrbl") (lib "lens/private/hash/main.scrbl") (lib "lens/main.scrbl") (lib "lens/private/compound/main.scrbl") (lib "unstable/lens/sublist.scrbl") (lib "lens/private/base/laws.scrbl") (lib "lens/private/base/transform.scrbl") (lib "lens/private/base/main.scrbl") (lib "unstable/lens/set-all.scrbl") (lib "lens/private/list/flatten.scrbl") (lib "lens/private/vector/main.scrbl") (lib "lens/private/hash/ref.scrbl") (lib "unstable/lens/arrow.scrbl") (lib "lens/private/doc-util/other-reference.rkt") (lib "unstable/lens/hash-filterer.scrbl") (lib "lens/private/struct/field.scrbl") (lib "lens/private/scribblings/guide/user-defined.scrbl") (lib "lens/private/doc-util/include-sections.rkt") (lib "lens/private/string/main.scrbl") (lib "unstable/lens/define-nested.scrbl") (lib "unstable/lens/struct-list.scrbl") (lib "unstable/lens/zoom.scrbl") (lib "lens/private/list/main.scrbl") (lib "unstable/lens/lazy.scrbl") (lib "lens/private/scribblings/guide/built-in/ordered.scrbl") (lib "lens/private/compound/compose.scrbl") (lib "unstable/lens/struct-provide.scrbl") (lib "unstable/lens/substring.scrbl") (lib "lens/private/doc-util/scribble-include-no-subsection.rkt") (lib "lens/private/base/base.scrbl") (lib "unstable/lens/if.scrbl") (lib "lens/private/vector/join-vector.scrbl") (lib "lens/private/vector/ref.scrbl") (lib "lens/private/list/join-list.scrbl") (lib "lens/private/scribblings/guide/user-defined/struct.scrbl") (lib "unstable/lens/syntax.scrbl") (lib "unstable/lens/set-member.scrbl") (lib "lens/private/hash/pick.scrbl") (lib "unstable/lens/join-assoc.scrbl") (lib "lens/private/base/contract.scrbl") (lib "lens/private/hash/nested.scrbl") (lib "lens/private/doc-util/stability-notice.rkt") (lib "lens/private/compound/thrush.scrbl") (lib "unstable/lens/match.scrbl") (lib "lens/private/vector/nested.scrbl") (lib "unstable/lens/struct-nested.scrbl") (lib "lens/private/scribblings/reference/common.scrbl") (lib "lens/private/scribblings/reference.scrbl") (lib "lens/private/syntax/stx.scrbl") (lib "lens/private/struct/main.scrbl") (lib "lens/applicable.scrbl"))) (name . "lens-doc") (nix-sha256 . "0x4v6pd5l15wqppxmd2k8jg6g151rbvv7qmyyzr4vsl399mlyljz") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (author:jackhfirth@gmail.com . #t) (data . #t) (functional . #t) (lens . #t) (ring:1 . #t))) (source . "git://github.com/jackfirth/lens?path=lens-doc") (tags . ("data" "functional" "lens")) (versions . #hash((default . #hasheq((checksum . "376c286a68ed34ee723cf5c5a76dcba9828db0c1") (source . "git://github.com/jackfirth/lens?path=lens-doc") (source_url . "http://github.com/jackfirth/lens/tree/master?path=lens-doc"))))))) ("plt-build-plot" . #hasheq((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plt-build-plot.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plt-build-plot.txt"))) (checksum . "5f04fc843e300897702854402a00269dd4680792") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "aws" "s3-sync" "draw-lib" "gui-lib" "scribble-html-lib" "plt-web-lib" "plt-service-monitor")) (description . "tools to record and plot `raco setup` memory use") (implies . ()) (last-checked . 1522414516) (last-edit . 1422463149) (last-updated . 1502816273) (modules . ((lib "plt-build-plot/upload.rkt") (lib "plt-build-plot/main.rkt") (lib "plt-build-plot/plot.rkt") (lib "plt-build-plot/page.rkt"))) (name . "plt-build-plot") (nix-sha256 . "1104khmf356r6avd054xvqghn0nwa3yz341ay1b5ay1kdh1i325c") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/racket/plt-build-plot") (tags . ()) (versions . #hash((default . #hasheq((checksum . "5f04fc843e300897702854402a00269dd4680792") (source . "git://github.com/racket/plt-build-plot") (source_url . "http://github.com/racket/plt-build-plot/tree/master"))))))) ("compiler" . #hash((author . "mflatt@racket-lang.org") (checksum . "0e4be9aa093943a338f4a9e8be7212ed883091bf") (dependencies . ("compiler-lib")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "compiler") (source . "https://download.racket-lang.org/releases/6.12/pkgs/compiler.zip") (tags . ()))) ("video-unstable" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "video"))) (failure-log . "server/built/fail/video-unstable.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "37959e75b2df2e63cee1f402e1f47a73c9cc92a4") (checksum-error . #f) (conflicts . ("video")) (dependencies . (("base" "6.9.0.6") "rackunit-lib" "gui-lib" "draw-lib" "images-lib" "drracket-plugin-lib" "data-lib" "pict-lib" "wxme-lib" "sandbox-lib" "at-exp-lib" "scribble-lib" "bitsyntax" "opengl" "portaudio" "net-lib" "syntax-color-lib" "parser-tools-lib" ("graph" "0.3.1") ("libvid-x86_64-macosx" #:platform "x86_64-macosx") ("libvid-x86_64-win32" #:platform "win32\\x86_64") ("libvid-i386-win32" #:platform "win32\\i386") ("libvid-x86_64-linux" #:platform "x86_64-linux") ("libvid-i386-linux" #:platform "i386-linux") ("ffmpeg-x86_64-macosx" #:platform "x86_64-macosx") ("ffmpeg-x86_64-win32" #:platform "win32\\x86_64") ("ffmpeg-i386-win32" #:platform "win32\\i386") "scribble-lib" "racket-doc" "gui-doc" "draw-doc" "ppict" "reprovide-lang")) (description . "The latest and greatest build of Video. This build will occasionally fail.") (implies . ()) (last-checked . 1522414700) (last-edit . 1503854656) (last-updated . 1520991861) (modules . ((lib "video/private/utils.rkt") (lib "video/private/ffmpeg-pipeline.rkt") (lib "video/render.rkt") (lib "video/scribblings/core.scrbl") (lib "video/scribblings/installing.scrbl") (lib "video/tests/video.rkt") (lib "video/player.rkt") (lib "video/scribblings/player.scrbl") (lib "video/scribblings/video.scrbl") (lib "video/examples/3-clips.rkt") (lib "video/private/devices.rkt") (lib "video/units.rkt") (lib "video/private/video.rkt") (lib "video/scribblings/api.scrbl") (lib "video/private/surface.rkt") (lib "video/private/ffmpeg/lib.rkt") (lib "video/scribblings/viddoclang.rkt") (lib "video/examples/2-colorfade.rkt") (lib "video/private/camera-icon.rkt") (lib "video/examples/7-watermark.rkt") (lib "video/private/ffmpeg/data.rkt") (lib "video/examples/11-include.rkt") (lib "video/raco.rkt") (lib "video/core.rkt") (lib "video/version.rkt") (lib "video/private/render-settings.rkt") (lib "video/tests/unit-tests.rkt") (lib "video/tests/ffmpeg.rkt") (lib "video/private/ffmpeg/main.rkt") (lib "video/examples/8-image.rkt") (lib "video/tests/devices.rkt") (lib "video/private/ffmpeg/ffmpeg.rkt") (lib "video/examples/5-project.rkt") (lib "video/private/silence.rkt") (lib "video/scribblings/graphical.scrbl") (lib "video/tests/test-utils.rkt") (lib "video/convert.rkt") (lib "video/private/init.rkt") (lib "video/surface.rkt") (lib "video/examples/9-doubletransition.rkt") (lib "video/private/opengl.rkt") (lib "video/private/installer.rkt") (lib "video/private/debug-mixin.rkt") (lib "video/private/lang.rkt") (lib "video/private/video-canvas.rkt") (lib "video/private/ffmpeg/constants.rkt") (lib "video/main.rkt") (lib "video/examples/10-properties.rkt") (lib "video/devices.rkt") (lib "video/tests/player.rkt") (lib "video/examples/6-multitrack.rkt") (lib "video/private/log.rkt") (lib "video/scribblings/utils.rkt") (lib "video/scribblings/render.scrbl") (lib "video/scribblings/extend.scrbl") (lib "video/private/tool.rkt") (lib "video/scribblings/templates.rkt") (lib "video/init.rkt") (lib "video/examples/1-hellocolor.rkt") (lib "video/private/units.rkt") (lib "video/private/ffmpeg/libvid.rkt") (lib "video/base.rkt") (lib "video/lib/lang/reader.rkt") (lib "video/lang/reader.rkt") (lib "video/scribblings/intro.scrbl") (lib "video/tests/editor.rkt") (lib "video/private/editor.rkt") (lib "video/tests/render.rkt") (lib "video/examples/12-cut.rkt") (lib "video/lib.rkt") (lib "video/examples/4-filters.rkt"))) (name . "video-unstable") (nix-sha256 . "0i441biilmamvcnv7zpcksqvq4gv8h6ig7k2zn3q9wnk2a892zvb") (ring . 2) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (:docs-error: . #t) (author:leif@leifandersen.net . #t) (ring:2 . #t) (unstable . #t) (video . #t) (vidlang . #t))) (source . "git://github.com/videolang/video") (tags . ("unstable" "video" "vidlang")) (versions . #hash((default . #hasheq((checksum . "37959e75b2df2e63cee1f402e1f47a73c9cc92a4") (source . "git://github.com/videolang/video") (source_url . "http://github.com/videolang/video/tree/master"))))))) ("plai-typed-s-exp-match" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "plai-typed-s-exp-match" "doc/plai-typed-s-exp-match@plai-typed-s-exp-match/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plai-typed-s-exp-match.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plai-typed-s-exp-match.txt"))) (checksum . "e010d9718916394b1b3545cb2f7a49c27904e873") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "plai-typed" "racket-doc" "scribble-lib")) (description . "Simple S-expression matcher for use with plai-typed") (implies . ()) (last-checked . 1522414514) (last-edit . 1378382808) (last-updated . 1502816263) (modules . ((lib "plai-typed/scribblings/plai-typed-s-exp-match.scrbl") (lib "plai-typed/s-exp-match.rkt"))) (name . "plai-typed-s-exp-match") (nix-sha256 . "1rfa6zxngx1x011m7vlizrs6v6r6vn586icwzh0m0gj077dwslww") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mflatt@cs.utah.edu . #t) (ring:1 . #t))) (source . "github://github.com/mflatt/plai-typed-s-exp-match/no-deps") (tags . ()) (versions . #hash((default . #hasheq((checksum . "ff05b257cc8739d2f4ad8f33b65440635ab9cce0") (source . "github://github.com/mflatt/plai-typed-s-exp-match/master") (source_url . "http://github.com/mflatt/plai-typed-s-exp-match/tree/master"))) ("5.3.6" . #hasheq((checksum . "e010d9718916394b1b3545cb2f7a49c27904e873") (source . "github://github.com/mflatt/plai-typed-s-exp-match/no-deps") (source_url . "http://github.com/mflatt/plai-typed-s-exp-match/tree/no-deps"))) ("5.3.5" . #hasheq((checksum . "e010d9718916394b1b3545cb2f7a49c27904e873") (source . "github://github.com/mflatt/plai-typed-s-exp-match/no-deps") (source_url . "http://github.com/mflatt/plai-typed-s-exp-match/tree/no-deps"))))))) ("udev" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/udev.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/udev.txt"))) (checksum . "de2cbf3f9b3fb754aecce1bf5ee64811e1700c5b") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1")) (description . "udev bindings for Racket") (implies . ()) (last-checked . 1522414696) (last-edit . 1437487719) (last-updated . 1502816509) (modules . ((lib "udev/private/ffi.rkt") (lib "udev/main.rkt"))) (name . "udev") (nix-sha256 . "0jvr47r66l3qbn2dmkrw10pi7wzd6np7y85sa1md7frg9s187wvx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mordae@anilinux.org . #t) (ffi . #t) (linux . #t) (ring:1 . #t))) (source . "github://github.com/mordae/racket-udev/master") (tags . ("ffi" "linux")) (versions . #hash((default . #hasheq((checksum . "de2cbf3f9b3fb754aecce1bf5ee64811e1700c5b") (source . "github://github.com/mordae/racket-udev/master") (source_url . "http://github.com/mordae/racket-udev/tree/master"))))))) ("yaml" . #hasheq((author . "ejs@ccs.neu.edu") (authors . ("ejs@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "yaml" "doc/yaml@yaml/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/yaml.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/yaml.txt"))) (checksum . "3c5e32a99b489a23265a5629e79df7bb8c136ddc") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "srfi-lite-lib" "typed-racket-lib" "rackunit-lib" "scribble-lib" "racket-doc" "sandbox-lib")) (description . "A library for parsing and emitting YAML.") (implies . ()) (last-checked . 1522414704) (last-edit . 1393674229) (last-updated . 1511683739) (modules . ((lib "yaml/utils.rkt") (lib "yaml/constructor.rkt") (lib "yaml/representer.rkt") (lib "yaml/scribblings/yaml.scrbl") (lib "yaml/nodes.rkt") (lib "yaml/scanner.rkt") (lib "yaml/events.rkt") (lib "yaml/serializer.rkt") (lib "yaml/composer.rkt") (lib "yaml/errors.rkt") (lib "yaml/tests/utils.rkt") (lib "yaml/parser.rkt") (lib "yaml/emitter.rkt") (lib "yaml/main.rkt") (lib "yaml/yaml-expr.rkt") (lib "yaml/tests/test-nodes.rkt") (lib "yaml/tokens.rkt") (lib "yaml/resolver.rkt") (lib "yaml/struct.rkt"))) (name . "yaml") (nix-sha256 . "04nz90n8nqi4xjjhzd0ia9qxiasm6zah7iz05pkvjkx778pngkrq") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ejs@ccs.neu.edu . #t) (parsing . #t) (ring:1 . #t) (yaml . #t))) (source . "github://github.com/esilkensen/yaml/master") (tags . ("parsing" "yaml")) (versions . #hash((default . #hasheq((checksum . "3c5e32a99b489a23265a5629e79df7bb8c136ddc") (source . "github://github.com/esilkensen/yaml/master") (source_url . "http://github.com/esilkensen/yaml/tree/master"))))))) ("iloveck101" . #hasheq((author . "Dendoh@gmail.com") (authors . ("Dendoh@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/iloveck101.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "eef2eface1d4882e12b298429ed8739af67b9d16") (checksum-error . #f) (conflicts . ()) (dependencies . ()) (description . "A command-line tool to download images from ck101 threads.") (implies . ()) (last-checked . 1522414419) (last-edit . 1387107040) (last-updated . 1502816135) (modules . ((lib "iloveck101/iloveck101.rkt"))) (name . "iloveck101") (nix-sha256 . "06rh64c3agwpdp1diwvp1x2b8ar8ql54488ijimd7560fnsqfh5c") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:Dendoh@gmail.com . #t) (ck101 . #t) (ring:1 . #t) (web . #t))) (source . "github://github.com/Domon/iloveck101/master") (tags . ("ck101" "web")) (versions . #hash((default . #hasheq((checksum . "eef2eface1d4882e12b298429ed8739af67b9d16") (source . "github://github.com/Domon/iloveck101/master") (source_url . "http://github.com/Domon/iloveck101/tree/master"))))))) ("mock" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mock" "doc/mock@mock/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mock.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mock.txt"))) (checksum . "1a27bb7a1444effc034bf8b2df4ba1845f51478f") (checksum-error . #f) (conflicts . ()) (dependencies . ("arguments" ("base" #:version "6.4") "fancy-app" "reprovide-lang" "racket-doc" "scribble-lib" "sweet-exp")) (description . "A library for creating test mocks") (implies . ("arguments")) (last-checked . 1522414435) (last-edit . 1500077019) (last-updated . 1508918526) (modules . ((lib "mock/private/function.scrbl") (lib "mock/private/history.scrbl") (lib "mock/private/base.scrbl") (lib "mock/private/guide.scrbl") (lib "mock/private/syntax.rkt") (lib "mock/private/base.rkt") (lib "mock/private/syntax-util.rkt") (lib "mock/private/function.rkt") (lib "mock/private/not-implemented.rkt") (lib "mock/private/util-doc.rkt") (lib "mock/private/syntax-class.rkt") (lib "mock/private/stub-class.rkt") (lib "mock/private/syntax-param.rkt") (lib "mock/private/reference.scrbl") (lib "mock/private/syntax-test.rkt") (lib "mock/main.rkt") (lib "mock/private/opaque.rkt") (lib "mock/private/stub.scrbl") (lib "mock/main.scrbl") (lib "mock/private/stub.rkt") (lib "mock/private/util.rkt") (lib "mock/private/history.rkt") (lib "mock/private/syntax.scrbl") (lib "mock/private/opaque.scrbl"))) (name . "mock") (nix-sha256 . "1d7y7f08ys0lg3m89zy66whkzpd7vdn4xhkp5nv99vg0pdl2zilm") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (mock . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/jackfirth/racket-mock?path=mock") (tags . ("mock" "testing")) (versions . #hash((default . #hasheq((checksum . "1a27bb7a1444effc034bf8b2df4ba1845f51478f") (source . "git://github.com/jackfirth/racket-mock?path=mock") (source_url . "http://github.com/jackfirth/racket-mock/tree/master?path=mock"))))))) ("rackpgmp" . #hasheq((author . "wjb@williamjbowman.com") (authors . ("wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "perflinty" "doc/perflinty@rackpgmp/index.html") ("main" "pgmp" "doc/pgmp@rackpgmp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackpgmp.txt") (test-failure-log . "server/built/test-fail/rackpgmp.txt") (test-success-log . #f))) (checksum . "405316e54f194a5d8cbf968bbcb96a0ef3ea70a3") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "errortrace-doc" "scribble-lib" "sandbox-lib" "errortrace-lib" "rackunit-lib" "r6rs-lib")) (description . "A library for profile-guided meta-programming") (implies . ()) (last-checked . 1522414663) (last-edit . 1442935413) (last-updated . 1502816373) (modules . ((lib "examples/my-first-pgmp.rkt") (lib "pgmp/api/exact.rkt") (lib "perflinty/docs/perflinty-list.scrbl") (lib "perflinty/auto.rkt") (lib "perflinty/docs/perflinty-auto.scrbl") (lib "tests/class-test.rkt") (lib "pgmp/pgmp.rkt") (lib "perflinty/docs/perflinty-vector.scrbl") (lib "perflinty/list.rkt") (lib "pgmp/main.rkt") (lib "perflinty/vector.rkt") (lib "tests/exclusive-cond-test.rkt") (lib "pgmp/exclusive-cond.rkt") (lib "pgmp/docs/pgmp.scrbl") (lib "tests/perflinty-auto.rkt") (lib "pgmp/api/utils.rkt") (lib "examples/exclusive-cond.rkt") (lib "tests/case-test.rkt") (lib "pgmp/case.rkt") (lib "examples/class.rkt") (lib "perflinty/docs/perflinty.scrbl") (lib "tests/run.rkt") (lib "tests/perflinty-list.rkt") (lib "tests/perflinty-vector.rkt"))) (name . "rackpgmp") (nix-sha256 . "0p1narya41vjmk369qinx11rjzbg8hsixpcafmi1c8plwda3rv7p") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (PGO . #t) (author:wjb@williamjbowman.com . #t) (profiling . #t) (ring:1 . #t))) (source . "git://github.com/wilbowma/pgmp?path=rackpgmp") (tags . ("PGO" "profiling")) (versions . #hash((default . #hasheq((checksum . "405316e54f194a5d8cbf968bbcb96a0ef3ea70a3") (source . "git://github.com/wilbowma/pgmp?path=rackpgmp") (source_url . "http://github.com/wilbowma/pgmp/tree/master?path=rackpgmp"))))))) ("hyphenate" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "hyphenate" "doc/hyphenate@hyphenate/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hyphenate.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hyphenate.txt"))) (checksum . "81542e9e57a5d4cb283f724ff68068296b465176") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" ("sugar" #:version "0.2") ("txexpr" #:version "0.2") "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Hyphenate X-expressions with the Knuth–Liang hyphenation algorithm") (implies . ()) (last-checked . 1522414418) (last-edit . 1392847109) (last-updated . 1502816133) (modules . ((lib "hyphenate/private/bootstrap.rkt") (lib "hyphenate/us.rkt") (lib "hyphenate/fr.rkt") (lib "hyphenate/main.rkt") (lib "hyphenate/us/patterns.rkt") (lib "hyphenate/private/core.rkt") (lib "hyphenate/tests.rkt") (lib "hyphenate/fr/patterns.rkt") (lib "hyphenate/us/exceptions.rkt") (lib "hyphenate/private/exception-prep.rkt") (lib "hyphenate/private/pattern-prep.rkt") (lib "hyphenate/scribblings/hyphenate.scrbl") (lib "hyphenate/fr/exceptions.rkt"))) (name . "hyphenate") (nix-sha256 . "1bp3lpqbcvjkwc9y9ps5rdx3pncf3vr1bhgjl4dsa0avcfn6blpx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mb@mbtype.com . #t) (ring:1 . #t) (scribble . #t) (web . #t))) (source . "git://github.com/mbutterick/hyphenate") (tags . ("scribble" "web")) (versions . #hash((default . #hasheq((checksum . "81542e9e57a5d4cb283f724ff68068296b465176") (source . "git://github.com/mbutterick/hyphenate") (source_url . "http://github.com/mbutterick/hyphenate/tree/master"))))))) ("racket-doc" . #hash((author . "eli@racket-lang.org jay@racket-lang.org matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org ryanc@racket-lang.org samth@racket-lang.org") (checksum . "fdfd22e846792e3d2e8aa7c3a40808f9740af988") (dependencies . ("scheme-lib" ("base" #:version "6.5.0.2") "net-lib" "sandbox-lib" ("scribble-lib" #:version "1.14") "racket-index" "rackunit-doc" "compatibility" "errortrace-doc" "typed-racket-doc" "at-exp-lib" "rackunit-lib" "web-server-doc" "gui" "draw" "pict" "parser-tools-doc" "slideshow-doc" "r5rs-doc" "r6rs-doc" "xrepl" "readline" "syntax-color" "scribble-doc" "future-visualizer" "distributed-places" "serialize-cstruct-lib" "cext-lib" "data-doc" "net-doc" "planet-doc" "mzscheme-doc" "compiler-lib" "drracket" "math-doc" "math-lib")) (description . "eli@racket-lang.org jay@racket-lang.org matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org ryanc@racket-lang.org samth@racket-lang.org") (modules . ()) (name . "racket-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/racket-doc.zip") (tags . ()))) ("mutt" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mutt" "doc/mutt@mutt/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mutt.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mutt.txt"))) (checksum . "4e0f9a098b185c882b700990c59f33e9256e5953") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc" "rackunit-lib" "rackunit-abbrevs" "typed-racket-doc")) (description . "Racket API for the Mutt email client") (implies . ()) (last-checked . 1522414437) (last-edit . 1501008394) (last-updated . 1518045419) (modules . ((lib "mutt/test/untyped.rkt") (lib "mutt/test/typed.rkt") (lib "mutt/scribblings/mutt.scrbl") (lib "mutt/scribblings/typed-mutt.scrbl") (lib "mutt/main.rkt") (lib "mutt/typed.rkt") (lib "mutt/private/parameters.rkt") (lib "mutt/private/pre-install.rkt") (lib "mutt/private/main.rkt") (lib "mutt/setup.rkt"))) (name . "mutt") (nix-sha256 . "0lcavb8z0fr25qhc2h5jq3vqys816r9lcjlccqwiswhvmi91i9zn") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (api . #t) (author:types@ccs.neu.edu . #t) (email . #t) (ring:1 . #t) (utility . #t))) (source . "git://github.com/bennn/racket-mutt") (tags . ("api" "email" "utility")) (versions . #hash((default . #hasheq((checksum . "4e0f9a098b185c882b700990c59f33e9256e5953") (source . "git://github.com/bennn/racket-mutt") (source_url . "http://github.com/bennn/racket-mutt/tree/master"))))))) ("3d-model" . #hasheq((author . "code_man@cybnet.ch") (authors . ("code_man@cybnet.ch")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/3d-model.txt") (docs . (("main" "3d-model" "doc/3d-model@3d-model/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/3d-model.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/3d-model.txt"))) (checksum . "078e2dcd4a62eb026dedbdf3fdeaef3efc8e9925") (checksum-error . #f) (conflicts . ()) (dependencies . ()) (description . "3d-model vertex/tri representaion library") (implies . ()) (last-checked . 1522417865) (last-edit . 1396428048) (last-updated . 1502812262) (modules . ((lib "3d-model/3d-model.scrbl") (lib "3d-model/3d-model.rkt"))) (name . "3d-model") (ring . 1) (search-terms . #hasheq((3d . #t) (:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:code_man@cybnet.ch . #t) (model . #t) (ring:1 . #t))) (source . "http://code_man.cybnet.ch/racket/3d-model.zip") (tags . ("3d" "model")) (versions . #hash((default . #hasheq((checksum . "078e2dcd4a62eb026dedbdf3fdeaef3efc8e9925") (source . "http://code_man.cybnet.ch/racket/3d-model.zip") (source_url . "http://code_man.cybnet.ch/racket/3d-model.zip"))))))) ("racquel" . #hasheq((author . "brown131@yahoo.com") (authors . ("brown131@yahoo.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "racquel" "doc/racquel@racquel/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racquel.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racquel.txt"))) (checksum . "1442309b9a0417280a8644899156379495fa5c30") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "db-lib" "rackunit-lib" "racket-doc")) (description . "Racquel is an object/relational mapper for Racket.") (implies . ()) (last-checked . 1522414664) (last-edit . 1415390133) (last-updated . 1502816378) (modules . ((lib "racquel/racquel.scrbl") (lib "racquel/keywords.rkt") (lib "racquel/stxclass.rkt") (lib "racquel/schema.rkt") (lib "racquel/doc/racquel.scrbl") (lib "racquel/util.rkt") (lib "racquel/test.rkt") (lib "racquel/main.rkt") (lib "racquel/test-chinook.rkt") (lib "racquel/metadata.rkt"))) (name . "racquel") (nix-sha256 . "0hxnrb467yg636hypvpq040sa8377rrpdiiv284g0yxfmjf3iz39") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:brown131@yahoo.com . #t) (db . #t) (ring:1 . #t))) (source . "git://github.com/brown131/racquel") (tags . ("db")) (versions . #hash((default . #hasheq((checksum . "1442309b9a0417280a8644899156379495fa5c30") (source . "git://github.com/brown131/racquel") (source_url . "http://github.com/brown131/racquel/tree/master"))))))) ("draw-x86_64-linux-natipkg-2" . #hash((author . "mflatt@racket-lang.org") (checksum . "830a1940d1b4bef81c482afa41e2c1bfc6b86303") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "draw-x86_64-linux-natipkg-2") (source . "https://download.racket-lang.org/releases/6.12/pkgs/draw-x86_64-linux-natipkg-2.zip") (tags . ()))) ("pmap" . #hasheq((author . "andreas8001@hotmail.com") (authors . ("andreas8001@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pmap" "doc/pmap@pmap/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pmap.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pmap.txt"))) (checksum . "e352de9bbc6735b1ca089a21490f87fc2fba5279") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc" "math-doc")) (description . "Implementations of map using parallel futures and places") (implies . ()) (last-checked . 1522414533) (last-edit . 1493293836) (last-updated . 1502816288) (modules . ((lib "pmap/pmapp_worker.rkt") (lib "pmap/main.rkt") (lib "pmap/pmapp.rkt") (lib "pmap/pmap.scrbl") (lib "pmap/pmapf.rkt"))) (name . "pmap") (nix-sha256 . "0zzjmba0fgb332xw7046nwdlhxngja5d651y3vr6i3brrl4jpiaj") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (Math . #t) (author:andreas8001@hotmail.com . #t) (futures . #t) (parallel . #t) (places . #t) (ring:1 . #t) (touch . #t))) (source . "git://github.com/APOS80/pmap") (tags . ("futures" "Math" "parallel" "places" "touch")) (versions . #hash((default . #hasheq((checksum . "e352de9bbc6735b1ca089a21490f87fc2fba5279") (source . "git://github.com/APOS80/pmap") (source_url . "http://github.com/APOS80/pmap/tree/master"))))))) ("gui-ppc-macosx" . #hash((author . "mflatt@racket-lang.org") (checksum . "96da9395804be077a16db145d25eda35f5b82b57") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "gui-ppc-macosx") (source . "https://download.racket-lang.org/releases/6.12/pkgs/gui-ppc-macosx.zip") (tags . ()))) ("alexknauth-my-object" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "my-object" "doc/my-object@alexknauth-my-object/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/alexknauth-my-object.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/alexknauth-my-object.txt"))) (checksum . "5a6ee970bad2ab86d2d69e1dbf2f7bb158e88963") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "lens" "hash-lambda" "kw-utils" "unstable-lib" "rackunit-lib" "scribble-lib" "racket-doc" "heresy")) (description . "my version of objects, inspired by \"things\" from heresy") (implies . ()) (last-checked . 1522417870) (last-edit . 1498356339) (last-updated . 1502812269) (modules . ((lib "my-object/main.rkt") (lib "my-object/stuff.rkt") (lib "my-object/my-object.rkt") (lib "my-object/docs/my-object.scrbl"))) (name . "alexknauth-my-object") (nix-sha256 . "0i64kqs6s49z61wlkcz1zxznvzmlibjvy6pylnbyz3dwshnfcrpy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (deprecated . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/my-object") (tags . ("deprecated")) (versions . #hash((default . #hasheq((checksum . "5a6ee970bad2ab86d2d69e1dbf2f7bb158e88963") (source . "git://github.com/AlexKnauth/my-object") (source_url . "http://github.com/AlexKnauth/my-object/tree/master"))))))) ("xmllint-win32-x86_64" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xmllint-win32-x86_64.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/xmllint-win32-x86_64.txt"))) (checksum . "b604c3d0aab4d6b4417238db4fc54d6419d8f176") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "A platform-specific Racket package providing xmllint.exe for Windows") (implies . ()) (last-checked . 1522414703) (last-edit . 1514407639) (last-updated . 1517055558) (modules . ((lib "xmllint-win32-x86_64/main.rkt"))) (name . "xmllint-win32-x86_64") (nix-sha256 . "0bh50cznisvyavrsdyaxpm7bxj8k94kyxayy4v7y6p3aci4bih4r") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:philip@philipmcgrath.com . #t) (ring:2 . #t))) (source . "https://github.com/LiberalArtist/xmllint-win32-x86_64.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b604c3d0aab4d6b4417238db4fc54d6419d8f176") (source . "https://github.com/LiberalArtist/xmllint-win32-x86_64.git") (source_url . "https://github.com/LiberalArtist/xmllint-win32-x86_64.git"))))))) ("yotsubAPI" . #hasheq((author . "gg@tfwno.gf") (authors . ("gg@tfwno.gf")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "yotsubAPI" "doc/yotsubAPI@yotsubAPI/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/yotsubAPI.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/yotsubAPI.txt"))) (checksum . "cbf312862fc4e94deb74790a2756d5745e5463fc") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "A Racket Client for the 4chan API") (implies . ()) (last-checked . 1522414704) (last-edit . 1415302292) (last-updated . 1502816535) (modules . ((lib "yotsubAPI/main.rkt") (lib "yotsubAPI/yotsubAPI.scrbl"))) (name . "yotsubAPI") (nix-sha256 . "15h6g6sd0kiadg7kvdrxhg4bd0a142ink5h8fhdcgzq6hgsx7i04") (ring . 1) (search-terms . #hasheq((4chan . #t) (:build-success: . #t) (:docs: . #t) (api . #t) (author:gg@tfwno.gf . #t) (client . #t) (http . #t) (ring:1 . #t))) (source . "git://github.com/g-gundam/yotsubAPI") (tags . ("4chan" "api" "client" "http")) (versions . #hash((default . #hasheq((checksum . "cbf312862fc4e94deb74790a2756d5745e5463fc") (source . "git://github.com/g-gundam/yotsubAPI") (source_url . "http://github.com/g-gundam/yotsubAPI/tree/master"))))))) ("cur-lib" . #hasheq((author . "wjb@williamjbowman.com") (authors . ("wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cur-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cur-lib.txt"))) (checksum . "c3e03ec6a017fcbaed9dcf1917e014f3cec345b9") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1522414371) (last-edit . 1487913151) (last-updated . 1510758069) (modules . ((lib "cur/curnel/racket-impl/type-reconstruct.rkt") (lib "cur/main.rkt") (lib "cur/stdlib/prop.rkt") (lib "cur/stdlib/list.rkt") (lib "cur/lang/reader.rkt") (lib "cur/ntac/standard.rkt") (lib "cur/curnel/racket-impl/reflection.rkt") (lib "cur/stdlib/bool.rkt") (lib "cur/curnel/racket-impl/lang.rkt") (lib "cur/stdlib/nat.rkt") (lib "cur/curnel/racket-impl/eval.rkt") (lib "cur/ntac/base.rkt") (lib "cur/curnel/racket-impl/runtime-utils.rkt") (lib "cur/olly.rkt") (lib "cur/stdlib/sigma.rkt") (lib "cur/curnel/racket-impl/runtime.rkt") (lib "cur/curnel/racket-impl/stxutils.rkt") (lib "cur/stdlib/typeclass.rkt") (lib "cur/curnel/racket-impl/equiv.rkt") (lib "cur/curnel/racket-impl/type-check.rkt") (lib "cur/stdlib/sugar.rkt") (lib "cur/stdlib/maybe.rkt"))) (name . "cur-lib") (nix-sha256 . "0ym25g3m8jryrbbm9rmm1ii5wkaar88zyy3c400ljxh25i0c7az8") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:wjb@williamjbowman.com . #t) (ring:1 . #t))) (source . "git://github.com/wilbowma/cur?path=cur-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c3e03ec6a017fcbaed9dcf1917e014f3cec345b9") (source . "git://github.com/wilbowma/cur?path=cur-lib") (source_url . "http://github.com/wilbowma/cur/tree/master?path=cur-lib"))))))) ("tabular" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tabular.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tabular.txt"))) (checksum . "5b1e3687dd27660f8bd3ecc10d52e8d57b150ff4") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "data-lib" "htdp-lib")) (description . "Experimental tabular data package") (implies . ()) (last-checked . 1522414690) (last-edit . 1471901163) (last-updated . 1506083466) (modules . ((lib "tabular/google.rkt") (lib "tabular/main.rkt"))) (name . "tabular") (nix-sha256 . "1rv5dji9dxyswycjrm1bdc2jf3ms03ai976nv1pvin4dch8rf872") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/tonyg/racket-tabular") (tags . ()) (versions . #hash((default . #hasheq((checksum . "5b1e3687dd27660f8bd3ecc10d52e8d57b150ff4") (source . "git://github.com/tonyg/racket-tabular") (source_url . "http://github.com/tonyg/racket-tabular/tree/master"))))))) ("nvim-client" . #hasheq((author . "hiphish@openmailbox.org") (authors . ("hiphish@openmailbox.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "nvim-client" "doc/nvim-client@nvim-client/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/nvim-client.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/nvim-client.txt"))) (checksum . "9499340acaffdebef690bd2dd43ecf2dfd6eafaf") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "msgpack" "unix-socket-lib" "typed-racket-lib" "typed-racket-more" "scribble-lib" "unix-socket-doc" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "API client for the Neovim text editor") (implies . ()) (last-checked . 1522414506) (last-edit . 1505392143) (last-updated . 1518866726) (modules . ((lib "nvim/client/exn-fail-rpc.rkt") (lib "nvim/api/tabpage.rkt") (lib "nvim/client/types.rkt") (lib "nvim/scribblings/intro.scrbl") (lib "nvim/scribblings/api.scrbl") (lib "nvim/scribblings/rplugin.scrbl") (lib "nvim/api/buffer.rkt") (lib "nvim/scribblings/nvim-client.scrbl") (lib "nvim/client.rkt") (lib "nvim/client/rpc-session.rkt") (lib "nvim/scribblings/rpc.scrbl") (lib "nvim/rplugin.rkt") (lib "nvim/main.rkt") (lib "nvim/api/window.rkt") (lib "nvim/api.rkt") (lib "nvim/api/nvim.rkt"))) (name . "nvim-client") (nix-sha256 . "0xj5j3lg68pzjjra9aanm7vsb54klhsn31yiir1mbc29kh29ihym") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:hiphish@openmailbox.org . #t) (neovim . #t) (nvim . #t) (ring:1 . #t))) (source . "https://gitlab.com/HiPhish/neovim.rkt.git?path=nvim-client") (tags . ("neovim" "nvim")) (versions . #hash((default . #hasheq((checksum . "9499340acaffdebef690bd2dd43ecf2dfd6eafaf") (source . "https://gitlab.com/HiPhish/neovim.rkt.git?path=nvim-client") (source_url . "https://gitlab.com/HiPhish/neovim.rkt.git?path=nvim-client"))))))) ("parendown-lib" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parendown-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/parendown-lib.txt"))) (checksum . "81463ff69f20f51e70d24876b586d7c889eb9f7c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "A weak open parenthesis, good for eliminating indentation. (lib)") (implies . ()) (last-checked . 1522414509) (last-edit . 1493457730) (last-updated . 1506090586) (modules . ((lib "parendown/main.rkt") (lib "parendown/lang/reader.rkt"))) (name . "parendown-lib") (nix-sha256 . "0vgl20djvxvbqgd0xx6i3bildwdkzz9gx1g2yn9jj8y14zp145rv") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (lang . #t) (lang-extension . #t) (language . #t) (ring:1 . #t))) (source . "git://github.com/rocketnia/parendown?path=parendown-lib") (tags . ("lang" "lang-extension" "language")) (versions . #hash((default . #hasheq((checksum . "81463ff69f20f51e70d24876b586d7c889eb9f7c") (source . "git://github.com/rocketnia/parendown?path=parendown-lib") (source_url . "http://github.com/rocketnia/parendown/tree/master?path=parendown-lib"))))))) ("infix" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "infix-manual" "doc/infix-manual@infix/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/infix.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/infix.txt"))) (checksum . "3f7998e509f201f78eb986de0f09e0542a429ad0") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "parser-tools-lib" "scheme-lib" "at-exp-lib" "rackunit-lib" "scribble-lib" "racket-doc" "scribble-doc")) (description . "Infix Expressions") (implies . ()) (last-checked . 1522414420) (last-edit . 1429983020) (last-updated . 1513624529) (modules . ((lib "infix/scribblings/while.rkt") (lib "infix/parameter.rkt") (lib "infix/scribblings/util.rkt") (lib "infix/main.rkt") (lib "infix/tests/test-dollar.rkt") (lib "infix/tests/example.rkt") (lib "infix/parser.rkt") (lib "infix/scribblings/infix-manual.scrbl") (lib "infix/parse-string-lexeme.rkt"))) (name . "infix") (nix-sha256 . "14wg4dkv1wr3n3llf1fvshdm1fmnn0yjl39yqq7i1ja4ana81ry1") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jensaxel@soegaard.net . #t) (infix . #t) (ring:1 . #t))) (source . "git://github.com/soegaard/infix") (tags . ("infix")) (versions . #hash((default . #hasheq((checksum . "3f7998e509f201f78eb986de0f09e0542a429ad0") (source . "git://github.com/soegaard/infix") (source_url . "http://github.com/soegaard/infix/tree/master"))))))) ("drracket-solarized" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-solarized.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-solarized.txt"))) (checksum . "9a90657bb320d4231c85dff96ceaef6a835c5c4f") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "Solarized colorscheme for Drracket") (implies . ()) (last-checked . 1522414394) (last-edit . 1381596999) (last-updated . 1502815940) (modules . ()) (name . "drracket-solarized") (nix-sha256 . "177xjmgkm5c3pzzfnj2lxl0d7xdpnziiw6knbns5ip7wfr21ajvf") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:asumu@ccs.neu.edu . #t) (colorscheme . #t) (drracket . #t) (ring:1 . #t))) (source . "github://github.com/takikawa/drracket-solarized/master") (tags . ("colorscheme" "drracket")) (versions . #hash((default . #hasheq((checksum . "9a90657bb320d4231c85dff96ceaef6a835c5c4f") (source . "github://github.com/takikawa/drracket-solarized/master") (source_url . "http://github.com/takikawa/drracket-solarized/tree/master"))))))) ("rtnl" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rtnl.txt") (test-failure-log . "server/built/test-fail/rtnl.txt") (test-success-log . #f))) (checksum . "53cf9eb3d1927cd4357ebdf785ffb58cacff6c3e") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1")) (description . "Racket FFI Bindings for the Route-Netlink Library") (implies . ()) (last-checked . 1522414673) (last-edit . 1370358707) (last-updated . 1502816414) (modules . ((lib "rtnl/main.rkt"))) (name . "rtnl") (nix-sha256 . "183x992v809imi7k24kz3b1a5mgn65l91b35vxsq366rgx6mfpn0") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mordae@anilinux.org . #t) (ffi . #t) (linux . #t) (ring:1 . #t))) (source . "github://github.com/mordae/racket-rtnl/master") (tags . ("ffi" "linux")) (versions . #hash((default . #hasheq((checksum . "53cf9eb3d1927cd4357ebdf785ffb58cacff6c3e") (source . "github://github.com/mordae/racket-rtnl/master") (source_url . "http://github.com/mordae/racket-rtnl/tree/master"))))))) ("simple-xlsx" . #hasheq((author . "chenxiao770117@gmail.com") (authors . ("chenxiao770117@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "simple-xlsx" "doc/simple-xlsx@simple-xlsx/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/simple-xlsx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/simple-xlsx.txt"))) (checksum . "b0894541e623121897bcb30818088b5e569f5478") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "at-exp-lib" "racket-doc" "scribble-lib" "rackunit-lib" "at-exp-lib")) (description . "a simple xlsx reader and writer") (implies . ()) (last-checked . 1522414679) (last-edit . 1428371507) (last-updated . 1521889180) (modules . ((lib "simple-xlsx/writer/xl/chartsheets/chartsheet-test.rkt") (lib "simple-xlsx/writer/xl/_rels/workbook-xml-rels.rkt") (lib "simple-xlsx/tests/write-tests/write-test.rkt") (lib "simple-xlsx/writer/xl/drawings/drawing.rkt") (lib "simple-xlsx/writer/xl/charts/line-chart.rkt") (lib "simple-xlsx/writer.rkt") (lib "simple-xlsx/lib/lib.rkt") (lib "simple-xlsx/writer/xl/styles-test.rkt") (lib "simple-xlsx/writer/xl/charts/pie-chart-test.rkt") (lib "simple-xlsx/writer/content-type-test.rkt") (lib "simple-xlsx/tests/read-tests/test8/test8-test.rkt") (lib "simple-xlsx/writer/xl/charts/pie-chart.rkt") (lib "simple-xlsx/reader.rkt") (lib "simple-xlsx/writer/xl/_rels/workbook-xml-rels-test.rkt") (lib "simple-xlsx/writer/docProps/docprops-core-test.rkt") (lib "simple-xlsx/writer/xl/worksheets/worksheet-test.rkt") (lib "simple-xlsx/writer/docProps/docprops-core.rkt") (lib "simple-xlsx/tests/write-tests/test-width.rkt") (lib "simple-xlsx/tests/read-tests/test3/test3-test.rkt") (lib "simple-xlsx/writer/xl/charts/chart.rkt") (lib "simple-xlsx/writer/content-type.rkt") (lib "simple-xlsx/tests/read-tests/test11/test11-test.rkt") (lib "simple-xlsx/writer/xl/workbook.rkt") (lib "simple-xlsx/writer/xl/sharedStrings-test.rkt") (lib "simple-xlsx/writer/xl/styles.rkt") (lib "simple-xlsx/writer/xl/drawings/drawing-test.rkt") (lib "simple-xlsx/tests/read-tests/test5/test5-test.rkt") (lib "simple-xlsx/tests/read-tests/test7/test7-test.rkt") (lib "simple-xlsx/lib/lib-test.rkt") (lib "simple-xlsx/writer/_rels/rels-test.rkt") (lib "simple-xlsx/writer/docProps/docprops-app-test.rkt") (lib "simple-xlsx/writer/xl/charts/chart-test.rkt") (lib "simple-xlsx/writer/xl/charts/bar-chart-test.rkt") (lib "simple-xlsx/writer/xl/worksheets/_rels/rels.rkt") (lib "simple-xlsx/main.rkt") (lib "simple-xlsx/writer/xl/charts/bar-chart.rkt") (lib "simple-xlsx/writer/xl/theme/theme.rkt") (lib "simple-xlsx/writer/xl/worksheets/worksheet.rkt") (lib "simple-xlsx/writer/xl/charts/line-chart-test.rkt") (lib "simple-xlsx/tests/read-tests/test12/test12-test.rkt") (lib "simple-xlsx/writer/xl/chartsheets/chartsheet.rkt") (lib "simple-xlsx/tests/read-tests/test2/test2-test.rkt") (lib "simple-xlsx/xlsx.rkt") (lib "simple-xlsx/writer/xl/sharedStrings.rkt") (lib "simple-xlsx/writer/xl/drawings/_rels/drawing-rels.rkt") (lib "simple-xlsx/tests/read-tests/test1/test1-test.rkt") (lib "simple-xlsx/writer/xl/cal-chain-test.rkt") (lib "simple-xlsx/simple-xlsx.scrbl") (lib "simple-xlsx/writer/xl/printerSettings/printerSettings.rkt") (lib "simple-xlsx/example/example.rkt") (lib "simple-xlsx/tests/read-tests/test4/test4-test.rkt") (lib "simple-xlsx/writer/xl/drawings/_rels/drawing-rels-test.rkt") (lib "simple-xlsx/writer/docProps/docprops-app.rkt") (lib "simple-xlsx/writer/xl/chartsheets/_rels/chartsheet-rels.rkt") (lib "simple-xlsx/writer/xl/cal-chain.rkt") (lib "simple-xlsx/writer/xl/chartsheets/_rels/chartsheet-rels-test.rkt") (lib "simple-xlsx/tests/read-tests/test6/test6-test.rkt") (lib "simple-xlsx/writer/_rels/rels.rkt") (lib "simple-xlsx/tests/read-tests/test9/test9-test.rkt") (lib "simple-xlsx/xlsx-test.rkt") (lib "simple-xlsx/tests/read-tests/test10/test10-test.rkt") (lib "simple-xlsx/writer/xl/workbook-test.rkt"))) (name . "simple-xlsx") (nix-sha256 . "0j2v625rm8fhr2pq393bldmac0x9m11zdxpn738pvlx4fxrq9n7y") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:chenxiao770117@gmail.com . #t) (ring:1 . #t) (xlsx . #t))) (source . "git://github.com/simmone/racket-simple-xlsx") (tags . ("xlsx")) (versions . #hash((default . #hasheq((checksum . "b0894541e623121897bcb30818088b5e569f5478") (source . "git://github.com/simmone/racket-simple-xlsx") (source_url . "http://github.com/simmone/racket-simple-xlsx/tree/master"))))))) ("draw-win32-i386-2" . #hash((author . "mflatt@racket-lang.org") (checksum . "7fbeaa465d1607ef9f51b231fe576951f3823b50") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "draw-win32-i386-2") (source . "https://download.racket-lang.org/releases/6.12/pkgs/draw-win32-i386-2.zip") (tags . ()))) ("racket-x86_64-linux-natipkg-2" . #hash((author . "mflatt@racket-lang.org") (checksum . "999e80923b28a9ee4afea1e1c82d1fb3ecbbd4dd") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "racket-x86_64-linux-natipkg-2") (source . "https://download.racket-lang.org/releases/6.12/pkgs/racket-x86_64-linux-natipkg-2.zip") (tags . ()))) ("thread-utils" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "thread-utils" "doc/thread-utils@thread-utils/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/thread-utils.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/thread-utils.txt"))) (checksum . "da2596d886c675b194b024cfb38e2d5d238806ae") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Error-safe infinite loop and until-timeout") (implies . ()) (last-checked . 1522414691) (last-edit . 1518799224) (last-updated . 1519467989) (modules . ((lib "thread-utils/scribblings/thread-utils.scrbl") (lib "thread-utils/main.rkt"))) (name . "thread-utils") (nix-sha256 . "0l1k8y8nm0jwvacc9hk56a1mch5x1vcl38hz7jmhhpyjf9ydplgi") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (concurrency . #t) (ring:2 . #t) (utilities . #t))) (source . "https://github.com/Kalimehtar/thread-utils.git") (tags . ("concurrency" "utilities")) (versions . #hash((default . #hasheq((checksum . "da2596d886c675b194b024cfb38e2d5d238806ae") (source . "https://github.com/Kalimehtar/thread-utils.git") (source_url . "https://github.com/Kalimehtar/thread-utils.git"))))))) ("left-pad" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "left-pad" "doc/left-pad@left-pad/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/left-pad.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/left-pad.txt"))) (checksum . "7c22c7cd92909d3afffcfa47598ce5d5ef636c83") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "String left pad") (implies . ()) (last-checked . 1522414423) (last-edit . 1480731742) (last-updated . 1516774645) (modules . ((lib "left-pad/docs/left-pad.scrbl") (lib "left-pad/main.rkt") (lib "left-pad/docs/typed-left-pad.scrbl") (lib "left-pad/tests/typed.rkt") (lib "left-pad/private/left-pad.rkt") (lib "left-pad/typed.rkt") (lib "left-pad/tests/untyped.rkt"))) (name . "left-pad") (nix-sha256 . "0h5dhpjd0da5bbgrdgn6sdhfrymyb23nx3q1nzmsjb2ssin6hcka") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (ring:1 . #t) (string . #t))) (source . "git://github.com/bennn/racket-left-pad") (tags . ("string")) (versions . #hash((default . #hasheq((checksum . "7c22c7cd92909d3afffcfa47598ce5d5ef636c83") (source . "git://github.com/bennn/racket-left-pad") (source_url . "http://github.com/bennn/racket-left-pad/tree/master"))))))) ("compiler-goodies" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "compiler-goodies" "doc/compiler-goodies@compiler-goodies/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/compiler-goodies.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/compiler-goodies.txt"))) (checksum . "4378d1039bd958ee4bfddafc5ec4dd8ef15bd5bb") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "compiler-lib" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (last-checked . 1522414334) (last-edit . 1422049375) (last-updated . 1502812303) (modules . ((lib "compiler-goodies/scribblings/compiler-goodies.scrbl") (lib "compiler-goodies/main.rkt"))) (name . "compiler-goodies") (nix-sha256 . "04c2fw9y5qr7i93srd7i1kpr4znpyam08z4cb6vv0nagxa50m1c9") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t))) (source . "git://github.com/LeifAndersen/racket-compiler-goodies") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4378d1039bd958ee4bfddafc5ec4dd8ef15bd5bb") (source . "git://github.com/LeifAndersen/racket-compiler-goodies") (source_url . "http://github.com/LeifAndersen/racket-compiler-goodies/tree/master"))))))) ("drdr2" . #hash((author . "jay@racket-lang.org") (authors . ("jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drdr2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drdr2.txt"))) (checksum . "7c389ca7e886ae6b187430ec6dc52620957957c7") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "sandbox-lib" "eli-tester")) (description . "Prototype replacement for DrDr") (implies . ()) (last-checked . 1522414393) (last-edit . 1417307461) (last-updated . 1502815932) (modules . ((lib "drdr2/tests/slave.rkt") (lib "drdr2/monitor/monitor.rkt") (lib "drdr2/tests/db.rkt") (lib "drdr2/renderer/renderer.rkt") (lib "drdr2/analyzer/analyzer.rkt") (lib "drdr2/tests/pqueue.rkt") (lib "drdr2/monitor/scm.rkt") (lib "drdr2/lib/pqueue.rkt") (lib "drdr2/scheduler/scheduler.rkt") (lib "drdr2/master/master.rkt") (lib "drdr2/lib/scm.rkt") (lib "drdr2/slave/slave.rkt") (lib "drdr2/lib/db.rkt"))) (name . "drdr2") (nix-sha256 . "0xa6q9xndr4724xb7n24gikl59rzhy0579x2km7h3iy4kiyijmwf") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:jay@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/racket/drdr2") (tags . ()) (versions . #hash((default . #hasheq((checksum . "7c389ca7e886ae6b187430ec6dc52620957957c7") (source . "git://github.com/racket/drdr2") (source_url . "http://github.com/racket/drdr2/tree/master"))))))) ("gui-x86_64-linux-natipkg" . #hash((author . "mflatt@racket-lang.org") (checksum . "19e740ba9f15682ca40a477c365527501236d1d5") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "gui-x86_64-linux-natipkg") (source . "https://download.racket-lang.org/releases/6.12/pkgs/gui-x86_64-linux-natipkg.zip") (tags . ()))) ("gregor-lib" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gregor-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gregor-lib.txt"))) (checksum . "0d7c40c8d6ce6165419564df3b168821c322e3ae") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "data-lib" "memoize" "parser-tools-lib" "tzinfo" "cldr-core" "cldr-bcp47" "cldr-numbers-modern" "cldr-dates-modern" "cldr-localenames-modern" "racket-doc" "scribble-lib")) (description . "Code part of the gregor date and time library") (implies . ()) (last-checked . 1522414406) (last-edit . 1426998088) (last-updated . 1502816091) (modules . ((lib "gregor/private/iso8601-parse.rkt") (lib "gregor/private/moment.rkt") (lib "gregor/private/date.rkt") (lib "gregor/private/pattern/ast/era.rkt") (lib "gregor/private/core/compare.rkt") (lib "gregor/period.rkt") (lib "gregor/private/exn.rkt") (lib "gregor/main.rkt") (lib "gregor/private/pattern/ast/literal.rkt") (lib "gregor/private/pattern/l10n/named-trie.rkt") (lib "gregor/private/pattern/ast/month.rkt") (lib "gregor/private/pattern/ast/second.rkt") (lib "gregor/private/time.rkt") (lib "gregor/private/datetime.rkt") (lib "gregor/private/pattern/ast/hour.rkt") (lib "gregor/private/pattern/l10n/zone-id.rkt") (lib "gregor/private/pattern/ast/zone.rkt") (lib "gregor/private/pattern/l10n/gmt-offset.rkt") (lib "gregor/private/pattern/l10n/zone-util.rkt") (lib "gregor/private/pattern/l10n/zone-nonloc.rkt") (lib "gregor/private/pattern/l10n/zone-loc.rkt") (lib "gregor/private/parse.rkt") (lib "gregor/private/core/math.rkt") (lib "gregor/private/pattern/l10n/numbers.rkt") (lib "gregor/private/pattern/ast/weekday.rkt") (lib "gregor/private/generics.rkt") (lib "gregor/private/pattern/parse-state.rkt") (lib "gregor/private/difference.rkt") (lib "gregor/private/pattern/ast/separator.rkt") (lib "gregor/private/format.rkt") (lib "gregor/private/pattern/ast/day.rkt") (lib "gregor/private/offset-resolvers.rkt") (lib "gregor/private/pattern/ast.rkt") (lib "gregor/private/pattern/l10n/iso-offset.rkt") (lib "gregor/private/pattern/ast/week.rkt") (lib "gregor/private/pattern/ast/period.rkt") (lib "gregor/private/period.rkt") (lib "gregor/private/pattern/ast/year.rkt") (lib "gregor/time.rkt") (lib "gregor/private/core/ymd.rkt") (lib "gregor/private/pattern/l10n/trie.rkt") (lib "gregor/private/moment-base.rkt") (lib "gregor/private/core/structs.rkt") (lib "gregor/private/core/hmsn.rkt") (lib "gregor/private/pattern/ast/quarter.rkt") (lib "gregor/private/pattern/l10n/symbols.rkt") (lib "gregor/private/pattern/l10n/l10n-week.rkt") (lib "gregor/private/pattern/lexer.rkt") (lib "gregor/private/pattern/ast/minute.rkt") (lib "gregor/private/pattern/l10n/metazone.rkt") (lib "gregor/private/clock.rkt"))) (name . "gregor-lib") (nix-sha256 . "0ha4r1f28xnv52rx99ds9alnwlrl3xl8chs5a6qgnh8l0z2wbvb7") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:zeppieri@gmail.com . #t) (calendar . #t) (date . #t) (ring:1 . #t) (time . #t))) (source . "git://github.com/97jaz/gregor/?path=gregor-lib") (tags . ("calendar" "date" "time")) (versions . #hash((default . #hasheq((checksum . "0d7c40c8d6ce6165419564df3b168821c322e3ae") (source . "git://github.com/97jaz/gregor/?path=gregor-lib") (source_url . "git://github.com/97jaz/gregor/?path=gregor-lib"))))))) ("tetris" . #hasheq((author . "mosceo@gmail.com") (authors . ("mosceo@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/tetris.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "fd8ea2d3b2d9374d2a4a88b6e01382f0eba9cbcb") (checksum-error . #f) (conflicts . ()) (dependencies . ()) (description . "A colorful version of tetris.") (implies . ()) (last-checked . 1522414691) (last-edit . 1511608932) (last-updated . 1511611579) (modules . ((lib "tetris/tetris.rkt") (lib "tetris/unittest.rkt"))) (name . "tetris") (nix-sha256 . "1wb1sknlzyxwnz1cii8qm1ijycszisn0qyyw7hvxl6k01ck6904d") (ring . 2) (search-terms . #hasheq((:build-fail: . #t) (author:mosceo@gmail.com . #t) (games . #t) (ring:2 . #t) (tetris . #t))) (source . "https://github.com/mosceo/tetris.git") (tags . ("games" "tetris")) (versions . #hash((default . #hasheq((checksum . "fd8ea2d3b2d9374d2a4a88b6e01382f0eba9cbcb") (source . "https://github.com/mosceo/tetris.git") (source_url . "https://github.com/mosceo/tetris.git"))))))) ("draw-lib" . #hash((author . "mflatt@racket-lang.org") (checksum . "988ebde72a7329f2c5586f2ff2de9e0daf7de783") (dependencies . (("base" #:version "6.10.1.2") ("draw-i386-macosx-2" #:platform "i386-macosx") ("draw-x86_64-macosx-2" #:platform "x86_64-macosx") ("draw-ppc-macosx-2" #:platform "ppc-macosx") ("draw-win32-i386-2" #:platform "win32\\i386") ("draw-win32-x86_64-2" #:platform "win32\\x86_64") ("draw-x86_64-linux-natipkg-2" #:platform "x86_64-linux-natipkg") ("draw-x11-x86_64-linux-natipkg" #:platform "x86_64-linux-natipkg") ("draw-ttf-x86_64-linux-natipkg" #:platform "x86_64-linux-natipkg"))) (description . "mflatt@racket-lang.org") (modules . ()) (name . "draw-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/draw-lib.zip") (tags . ()))) ("drracket-plugin-lib" . #hash((author . "robby@racket-lang.org") (checksum . "51e24f3c890323fbf97d1cdd80a12bbe8203d1b4") (dependencies . ("base" "compatibility-lib")) (description . "robby@racket-lang.org") (modules . ()) (name . "drracket-plugin-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/drracket-plugin-lib.zip") (tags . ()))) ("bazaar" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bazaar.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bazaar.txt"))) (checksum . "65f225f111b6e918644e02b8328f734ca2895615") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "data-lib" "draw-lib" "gui-lib" "images" "math-lib" "net-lib" "plot-gui-lib" "plot-lib" "racket-index" "rackunit-lib" "scribble-lib" "slideshow-lib" "srfi-lite-lib")) (description . "A personal collection of useful definitions. Quite unstable.") (implies . ()) (last-checked . 1522414305) (last-edit . 1427738557) (last-updated . 1517782577) (modules . ((lib "bazaar/struct.rkt") (lib "bazaar/algebra.rkt") (lib "bazaar/net/smtp.rkt") (lib "bazaar/plot.rkt") (lib "bazaar/gui/board.rkt") (lib "bazaar/gui/list-box-sort.rkt") (lib "bazaar/slideshow/warsaw.rkt") (lib "bazaar/plot-param.rkt") (lib "bazaar/gui/rapid-gui.rkt") (lib "bazaar/mutation.rkt") (lib "bazaar/file.rkt") (lib "bazaar/gui/examples/board-paint.rkt") (lib "bazaar/cond-let.rkt") (lib "bazaar/version.rkt") (lib "bazaar/roll-stack.rkt") (lib "bazaar/math.rkt") (lib "bazaar/values.rkt") (lib "bazaar/getter-setter.rkt") (lib "bazaar/gui/float-box.rkt") (lib "bazaar/vector.rkt") (lib "bazaar/scribble/compiler.rkt") (lib "bazaar/memoize.rkt") (lib "bazaar/slideshow/slideshow-utils.rkt") (lib "bazaar/gui/msg-error.rkt") (lib "bazaar/rvector.rkt") (lib "bazaar/information-theory.rkt") (lib "bazaar/rackunit.rkt") (lib "bazaar/slideshow/examples/slideshow-tree.rkt") (lib "bazaar/keyword.rkt") (lib "bazaar/string.rkt") (lib "bazaar/gui/utils.rkt") (lib "bazaar/slideshow/slideshow-toc.rkt") (lib "bazaar/matrix.rkt") (lib "bazaar/slideshow/examples/slideshow-table.rkt") (lib "bazaar/loop.rkt") (lib "bazaar/base.rkt") (lib "bazaar/slideshow/interactive-style-maker.rkt") (lib "bazaar/slideshow/slideshow-table.rkt") (lib "bazaar/system.rkt") (lib "bazaar/list.rkt") (lib "bazaar/dict-list.rkt") (lib "bazaar/slideshow/examples/slideshow-toc.rkt") (lib "bazaar/tree.rkt") (lib "bazaar/date.rkt") (lib "bazaar/text-table.rkt") (lib "bazaar/preferences.rkt") (lib "bazaar/gui/bitmaps.rkt") (lib "bazaar/draw/color.rkt") (lib "bazaar/define.rkt") (lib "bazaar/numeric-kind.rkt") (lib "bazaar/slideshow/slideshow-tree.rkt") (lib "bazaar/dict.rkt") (lib "bazaar/debug.rkt"))) (name . "bazaar") (nix-sha256 . "109yayzxb41lcwp41wd7w2shqwzwda4jv261cfjx2fbjnqgsyw7s") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:laurent.orseau@gmail.com . #t) (dev . #t) (ring:1 . #t) (utility . #t))) (source . "github://github.com/Metaxal/bazaar/master") (tags . ("dev" "utility")) (versions . #hash((default . #hasheq((checksum . "65f225f111b6e918644e02b8328f734ca2895615") (source . "github://github.com/Metaxal/bazaar/master") (source_url . "http://github.com/Metaxal/bazaar/tree/master"))))))) ("syntax-classes-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "syntax-classes" "doc/syntax-classes@syntax-classes-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-classes-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-classes-doc.txt"))) (checksum . "fe1e1399b3c68c899f7613589d5f7835a16f370f") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "syntax-classes-lib")) (description . "documentation (no implementation) for “syntax-classes”") (implies . ()) (last-checked . 1522414687) (last-edit . 1478370986) (last-updated . 1502816465) (modules . ((lib "scribblings/syntax-classes.scrbl"))) (name . "syntax-classes-doc") (nix-sha256 . "1xmgny6kg955q4w2kilw8wsslr9sq2wh58x2cq8i3q19h0bsicpv") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t) (syntax . #t))) (source . "git://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc") (tags . ("syntax")) (versions . #hash(("6.0" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "git://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/syntax-classes.git/tree/master?path=syntax-classes-doc#version-exception--6.2"))) ("6.1.1" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "git://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/syntax-classes.git/tree/master?path=syntax-classes-doc#version-exception--6.2"))) ("6.2.1" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "git://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/syntax-classes.git/tree/master?path=syntax-classes-doc#version-exception--6.2"))) (default . #hasheq((checksum . "fe1e1399b3c68c899f7613589d5f7835a16f370f") (source . "git://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc") (source_url . "http://github.com/lexi-lambda/syntax-classes.git/tree/master?path=syntax-classes-doc"))) ("6.0.1" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "git://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/syntax-classes.git/tree/master?path=syntax-classes-doc#version-exception--6.2"))) ("6.2" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "git://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/syntax-classes.git/tree/master?path=syntax-classes-doc#version-exception--6.2"))) ("6.1" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "git://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/syntax-classes.git/tree/master?path=syntax-classes-doc#version-exception--6.2"))))))) ("syntax-classes-test" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-classes-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-classes-test.txt"))) (checksum . "fe1e1399b3c68c899f7613589d5f7835a16f370f") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "rackunit-spec" "syntax-classes-lib")) (description . "") (implies . ()) (last-checked . 1522414688) (last-edit . 1478371001) (last-updated . 1502816466) (modules . ((lib "tests/syntax/parse/class/paren-shape.rkt") (lib "tests/syntax/parse/class/struct-id.rkt"))) (name . "syntax-classes-test") (nix-sha256 . "1xmgny6kg955q4w2kilw8wsslr9sq2wh58x2cq8i3q19h0bsicpv") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t) (syntax . #t))) (source . "git://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test") (tags . ("syntax")) (versions . #hash(("6.0" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "git://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/syntax-classes.git/tree/master?path=syntax-classes-test#version-exception--6.2"))) ("6.1.1" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "git://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/syntax-classes.git/tree/master?path=syntax-classes-test#version-exception--6.2"))) ("6.2.1" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "git://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/syntax-classes.git/tree/master?path=syntax-classes-test#version-exception--6.2"))) (default . #hasheq((checksum . "fe1e1399b3c68c899f7613589d5f7835a16f370f") (source . "git://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test") (source_url . "http://github.com/lexi-lambda/syntax-classes.git/tree/master?path=syntax-classes-test"))) ("6.0.1" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "git://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/syntax-classes.git/tree/master?path=syntax-classes-test#version-exception--6.2"))) ("6.2" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "git://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/syntax-classes.git/tree/master?path=syntax-classes-test#version-exception--6.2"))) ("6.1" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "git://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/syntax-classes.git/tree/master?path=syntax-classes-test#version-exception--6.2"))))))) ("sgl" . #hash((author . "jay@racket-lang.org") (checksum . "643c6e64b4eaedbda82e66cee9af96bce57595cb") (dependencies . ("scheme-lib" "base" "compatibility-lib" "gui-lib" "draw-doc" "gui-doc" "racket-doc" "scribble-lib")) (description . "jay@racket-lang.org") (modules . ()) (name . "sgl") (source . "https://download.racket-lang.org/releases/6.12/pkgs/sgl.zip") (tags . ()))) ("Adapton" . #hasheq((author . "cwolfmentzer@gmail.com hammer@cs.umd.edu") (authors . ("cwolfmentzer@gmail.com" "hammer@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "adapton" "doc/adapton@Adapton/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/Adapton.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/Adapton.txt"))) (checksum . "9ddfec8a22809cfb37fbbd8871a088fc3bd51787") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Adapton: Composable, Demand-Driven Incremental Computation") (implies . ()) (last-checked . 1522417868) (last-edit . 1440430256) (last-updated . 1513628061) (modules . ((lib "adapton/graphing.rkt") (lib "adapton/main.rkt") (lib "adapton/adapton.rkt") (lib "adapton/tools-for-testing.rkt") (lib "adapton/tests.rkt") (lib "adapton/adapton.scrbl") (lib "adapton/data-structures.rkt") (lib "adapton/merge-sort.rkt") (lib "adapton/memo-table-modification-tools.rkt"))) (name . "Adapton") (nix-sha256 . "1bzazr6gfm220an2xhrig379rhanw9ayllig6wbifi9qfdziyl4f") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:cwolfmentzer@gmail.com . #t) (author:hammer@cs.umd.edu . #t) (memoization . #t) (ring:1 . #t))) (source . "git://github.com/plum-umd/adapton.racket") (tags . ("memoization")) (versions . #hash((default . #hasheq((checksum . "9ddfec8a22809cfb37fbbd8871a088fc3bd51787") (source . "git://github.com/plum-umd/adapton.racket") (source_url . "http://github.com/plum-umd/adapton.racket/tree/master"))))))) ("plot-test" . #hash((author . "ntoronto@racket-lang.org") (checksum . "b630b4b783c2cba7bc30e4426f2a5ded8ab77e48") (dependencies . ("base" "plot-compat" "plot-gui-lib" "plot-lib" "plot-doc" "draw-lib" "pict-lib" "rackunit-lib" "slideshow-lib" "typed-racket-lib" "typed-racket-more")) (description . "ntoronto@racket-lang.org") (modules . ()) (name . "plot-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/plot-test.zip") (tags . ()))) ("html-parsing" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "html-parsing" "doc/html-parsing@html-parsing/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/html-parsing.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/html-parsing.txt"))) (checksum . "b8c222c258d81fbaf7504fb86f9df0501a6a8c1c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "overeasy")) (description . "Permissive Parsing of HTML to SXML") (implies . ()) (last-checked . 1522414417) (last-edit . 1456770495) (last-updated . 1502816128) (modules . ((lib "html-parsing/main.rkt") (lib "html-parsing/html-parsing.scrbl"))) (name . "html-parsing") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (html . #t) (ring:1 . #t) (sxml . #t) (web . #t))) (source . "http://www.neilvandyke.org/racket/html-parsing.zip") (tags . ("html" "sxml" "web")) (versions . #hash((default . #hasheq((checksum . "b8c222c258d81fbaf7504fb86f9df0501a6a8c1c") (source . "http://www.neilvandyke.org/racket/html-parsing.zip") (source_url . "http://www.neilvandyke.org/racket/html-parsing.zip"))))))) ("ffmpeg-x86_64-win32" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ffmpeg-x86_64-win32.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ffmpeg-x86_64-win32.txt"))) (checksum . "e8fb290d38e90800ffa1d105dbb540d28f931807") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1522414401) (last-edit . 1497318946) (last-updated . 1521584223) (modules . ()) (name . "ffmpeg-x86_64-win32") (nix-sha256 . "1h5nrhdlb9z89vx4irrzxcpc7zgpyjk1vy6yc598yfq1hskmwjvl") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (ffmpeg . #t) (ring:1 . #t) (video . #t))) (source . "git://github.com/videolang/native-pkgs?path=ffmpeg-x86_64-win32") (tags . ("ffmpeg" "video")) (versions . #hash((default . #hasheq((checksum . "e8fb290d38e90800ffa1d105dbb540d28f931807") (source . "git://github.com/videolang/native-pkgs?path=ffmpeg-x86_64-win32") (source_url . "http://github.com/videolang/native-pkgs/tree/master?path=ffmpeg-x86_64-win32"))))))) ("unstable" . #hash((author . "jay@racket-lang.org samth@racket-lang.org cce@racket-lang.org ryanc@racket-lang.org") (authors . ("jay@racket-lang.org" "samth@racket-lang.org" "cce@racket-lang.org" "ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . ("unstable-lib" "unstable-doc")) (description . "Experimental libraries") (implies . ("unstable-lib" "unstable-doc")) (last-checked . 1522414697) (last-edit . 1445382797) (last-updated . 1502816511) (modules . ()) (name . "unstable") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:cce@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (author:ryanc@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("unstable")) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) (default . #hasheq((checksum . "6d2564bf725be9d56320cfa5bf438e8d3dafdb6e") (source . "git://github.com/racket/unstable/?path=unstable") (source_url . "git://github.com/racket/unstable/?path=unstable"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("acl2s-scribblings" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "acl2s" "doc/acl2s@acl2s-scribblings/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/acl2s-scribblings.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/acl2s-scribblings.txt"))) (checksum . "a6a29a406d604aec50e305821df4de2643cb79aa") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "syntax-classes-lib" "racket-doc" "scribble-lib")) (description . "a scribble document for beginner mode of ACL2s") (implies . ()) (last-checked . 1522417868) (last-edit . 1516894228) (last-updated . 1516911368) (modules . ((lib "acl2s-scribblings/util/stx.rkt") (lib "acl2s-scribblings/scribblings/acl2s.scrbl") (lib "acl2s-scribblings/acl2s-placeholder.rkt") (lib "acl2s-scribblings/acl2s-printer.rkt"))) (name . "acl2s-scribblings") (nix-sha256 . "0cqgawlc338li560sd9js9ipl6a0lyyblhxcnszg3mbqiqx31hpj") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:alexander@knauth.org . #t) (ring:2 . #t))) (source . "https://github.com/AlexKnauth/acl2s-scribblings.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a6a29a406d604aec50e305821df4de2643cb79aa") (source . "https://github.com/AlexKnauth/acl2s-scribblings.git") (source_url . "https://github.com/AlexKnauth/acl2s-scribblings.git"))))))) ("munger" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/munger.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/munger.txt"))) (checksum . "d8f58f0256d66c681faf7f5d21df93b594093500") (checksum-error . #f) (conflicts . ()) (dependencies . ("grip" "typed-racket-lib" "base" "pipe")) (description . "An R Dataframe structure in Typed Racket.") (implies . ()) (last-checked . 1522414437) (last-edit . 1369950652) (last-updated . 1502816189) (modules . ((lib "munger/load/frame-builder.rkt") (lib "munger/frame/series.rkt") (lib "munger/load/csv-delimited.rkt") (lib "munger/format/tabbed/parser.rkt") (lib "munger/frame/numeric-series.rkt") (lib "munger/frame/categorical-series-ops.rkt") (lib "munger/format/fixed/parser.rkt") (lib "munger/frame/categorical-series-builder.rkt") (lib "munger/load/schema-syntax.rkt") (lib "munger/frame/indexed-series.rkt") (lib "munger/format/tabbed/reader.rkt") (lib "munger/frame/gen-nseries.rkt") (lib "munger/frame/integer-series-builder.rkt") (lib "munger/format/convert.rkt") (lib "munger/load/schema.rkt") (lib "munger/format/csv/csv.rkt") (lib "munger/format/csv/layout.rkt") (lib "munger/frame/integer-series.rkt") (lib "munger/frame/settings.rkt") (lib "munger/stats/statistics.rkt") (lib "munger/load/sample.rkt") (lib "munger/format/csv/parser.rkt") (lib "munger/frame/frame-join.rkt") (lib "munger/frame/series-iter.rkt") (lib "munger/frame/types.rkt") (lib "munger/load/types.rkt") (lib "munger/main.rkt") (lib "munger/frame/date.rkt") (lib "munger/frame/numeric-series-builder.rkt") (lib "munger/format/layout.rkt") (lib "munger/frame/categorical-series.rkt") (lib "munger/format/layout-scratch.rkt") (lib "munger/format/fixed/layout.rkt") (lib "munger/frame/series-builder.rkt") (lib "munger/format/tabbed/layout.rkt") (lib "munger/frame/frame-print.rkt") (lib "munger/load/load.rkt") (lib "munger/frame/series-description.rkt") (lib "munger/load/delimited-common.rkt") (lib "munger/format/layout-types.rkt") (lib "munger/frame/builders.rkt") (lib "munger/frame/bugs.rkt") (lib "munger/stats/tabulate.rkt") (lib "munger/frame/frame.rkt") (lib "munger/frame/numseries-scratch.rkt") (lib "munger/load/tab-delimited.rkt"))) (name . "munger") (nix-sha256 . "114na6qn2vrhcg0s0fgsqdl13scnvdw2v0p70j3gchv9sxq7lyaw") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ray.racine@gmail.com . #t) (data . #t) (dataframe . #t) (ring:1 . #t))) (source . "https://gitlab.com/RayRacine/munger.git") (tags . ("data" "dataframe")) (versions . #hash((default . #hasheq((checksum . "d8f58f0256d66c681faf7f5d21df93b594093500") (source . "https://gitlab.com/RayRacine/munger.git") (source_url . "http://gitlab.com/RayRacine/munger/tree/master"))))))) ("dotenv" . #hasheq((author . "royall@royall.us") (authors . ("royall@royall.us")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dotenv" "doc/dotenv@dotenv/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dotenv.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dotenv.txt"))) (checksum . "3901fae0967647e98edd23c490073cbe6f954da7") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Override environment variables by loading .env files.") (implies . ()) (last-checked . 1522414381) (last-edit . 1503888629) (last-updated . 1507339748) (modules . ((lib "dotenv/main.rkt") (lib "dotenv/scribblings/dotenv.scrbl") (lib "dotenv/private/dotenv.rkt"))) (name . "dotenv") (nix-sha256 . "1517dl6d00d9wbpnngdcixdk1snklghk8z4pckryg2rky8hib0wq") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:royall@royall.us . #t) (ring:1 . #t) (web . #t))) (source . "git://github.com/royallthefourth/dotenv") (tags . ("web")) (versions . #hash((default . #hasheq((checksum . "3901fae0967647e98edd23c490073cbe6f954da7") (source . "git://github.com/royallthefourth/dotenv") (source_url . "http://github.com/royallthefourth/dotenv/tree/master"))))))) ("dbus" . #hasheq((author . "tonygarnockjones@gmail.com mordae@anilinux.org") (authors . ("tonygarnockjones@gmail.com" "mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dbus" "doc/dbus@dbus/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dbus.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dbus.txt"))) (checksum . "57c5e3d9120f778b48ba01efb6b37c1ffbc9963d") (checksum-error . #f) (conflicts . ()) (dependencies . ("xexpr-path" "misc1" "base" "parser-tools-lib" "unstable-lib" "racket-doc" "scribble-lib")) (description . "Native D-Bus for Racket") (implies . ()) (last-checked . 1522414378) (last-edit . 1474394630) (last-updated . 1502815888) (modules . ((lib "dbus/private/message.rkt") (lib "dbus/main.rkt") (lib "dbus/private/util.rkt") (lib "dbus/private/common.rkt") (lib "dbus/private/signature.rkt") (lib "dbus/examples/network-manager.rkt") (lib "dbus/private/rpc.rkt") (lib "dbus/examples/hello.rkt") (lib "dbus/interface.scrbl") (lib "dbus/private/ffi.rkt") (lib "dbus/interface.rkt") (lib "dbus/dbus.scrbl") (lib "dbus/examples/notification.rkt"))) (name . "dbus") (nix-sha256 . "1kiam2j1yypf0x6x5v5q2cqgm7rq38q6lj3qvk589b50yzlpw550") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mordae@anilinux.org . #t) (author:tonygarnockjones@gmail.com . #t) (gnome . #t) (linux . #t) (ring:1 . #t) (rpc . #t))) (source . "git://github.com/tonyg/racket-dbus") (tags . ("gnome" "linux" "rpc")) (versions . #hash((default . #hasheq((checksum . "57c5e3d9120f778b48ba01efb6b37c1ffbc9963d") (source . "git://github.com/tonyg/racket-dbus") (source_url . "http://github.com/tonyg/racket-dbus/tree/master"))))))) ("data-lib" . #hash((author . "ryanc@racket-lang.org") (checksum . "6357893aa8b7f37916181651b58c0057b51abb5e") (dependencies . (("base" #:version "6.2.900.6") "rackunit-lib")) (description . "ryanc@racket-lang.org") (modules . ()) (name . "data-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/data-lib.zip") (tags . ()))) ("images-gui-lib" . #hash((author . "ntoronto@racket-lang.org") (checksum . "9f01931ee9b10637fa6f0617117d1d4c730f3cb0") (dependencies . ("base" "draw-lib" "gui-lib" "string-constants-lib")) (description . "ntoronto@racket-lang.org") (modules . ()) (name . "images-gui-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/images-gui-lib.zip") (tags . ()))) ("css" . #hasheq((author . "juzhenliang@gmail.com") (authors . ("juzhenliang@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "css") ("none" "svg"))) (failure-log . "server/built/fail/css.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "1c6380a93047ec69fc2357ba503bbb1a9d23a788") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "graphics" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc")) (description . "A CSS Engine written in pure Typed Racket") (implies . ()) (last-checked . 1522414370) (last-edit . 1501826212) (last-updated . 1502815873) (modules . ((lib "css/digitama/syntax/digicore.rkt") (lib "css/digitama/syntax/parser.rkt") (lib "css/digitama/device-adapt.rkt") (lib "css/digitama/syntax/cheat.rkt") (lib "css/background.rkt") (lib "css/village/cascade.rkt") (lib "css/sugar.rkt") (lib "css/tamer/bitmap.rkt") (lib "css/digitama/syntax/variables.rkt") (lib "css/syntax.rkt") (lib "css/village/hashlang/highlight.rkt") (lib "css/bonus.rkt") (lib "css/recognizer.rkt") (lib "css/village/hashlang/reader.rkt") (lib "css/digitama/color.rkt") (lib "svg/tamer/svg.scrbl") (lib "css/values.rkt") (lib "css/digitama/syntax/grammar.rkt") (lib "css/image.rkt") (lib "css/village/hashlang/indentation.rkt") (lib "css/main.rkt") (lib "css/digitama/text-decor.rkt") (lib "css/digitama/font.rkt") (lib "css/digitama/background.rkt") (lib "css/color.rkt") (lib "css/tamer/media.rkt") (lib "css/digitama/syntax/selector.rkt") (lib "css/racket.rkt") (lib "css/font.rkt") (lib "css/text-decor.rkt") (lib "css/digitama/syntax/cascade.rkt") (lib "css/digitama/image.rkt") (lib "css/digitama/syntax/stdin.rkt") (lib "css/digitama/syntax/misc.rkt") (lib "css/tamer/configure.rkt") (lib "css/digitama/syntax/tokenizer.rkt") (lib "css/tamer/specificity.rkt") (lib "css/digitama/syntax/dimension.rkt") (lib "css/digitama/syntax/condition.rkt") (lib "css/tamer/css.scrbl") (lib "css/tamer/syntax.rkt"))) (name . "css") (nix-sha256 . "0nbz8hxarhh7q89bx6dd489f0pq5p020dj6d8x3bw3h806py2x92") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:juzhenliang@gmail.com . #t) (configuration . #t) (css . #t) (parser . #t) (ring:1 . #t) (typed-racket . #t) (unstable . #t))) (source . "git://github.com/wargrey/css") (tags . ("configuration" "css" "parser" "typed-racket" "unstable")) (versions . #hash((default . #hasheq((checksum . "1c6380a93047ec69fc2357ba503bbb1a9d23a788") (source . "git://github.com/wargrey/css") (source_url . "http://github.com/wargrey/css/tree/master"))))))) ("simple-csv" . #hasheq((author . "pragun.goyal@gmail.com") (authors . ("pragun.goyal@gmail.com")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . "server/built/deps/simple-csv.txt") (docs . (("extract" "csv" "doc/csv@simple-csv/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/simple-csv.txt") (test-failure-log . "server/built/test-fail/simple-csv.txt") (test-success-log . #f))) (checksum . "f71d9b92826203cacf483ab5b2379fd18f8585d3") (checksum-error . #f) (conflicts . ()) (dependencies . ()) (description . "") (implies . ()) (last-checked . 1522414678) (last-edit . 1461266728) (last-updated . 1502816429) (modules . ((lib "simple-csv/csv-reader.rkt") (lib "simple-csv/scribblings/csv.scrbl") (lib "simple-csv/csv.rkt") (lib "simple-csv/csv-writer.rkt"))) (name . "simple-csv") (nix-sha256 . "1yspfhdry63w9dqn5iqhf0v7cqid06c1awqv70vgxcc5sfs3v03v") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-dep-fail: . #t) (:build-success: . #t) (:docs-error: . #t) (:docs: . #t) (:no-desc: . #t) (author:pragun.goyal@gmail.com . #t) (csv . #t) (ring:1 . #t))) (source . "git://github.com/pragun/simple-csv") (tags . ("csv")) (versions . #hash((default . #hasheq((checksum . "f71d9b92826203cacf483ab5b2379fd18f8585d3") (source . "git://github.com/pragun/simple-csv") (source_url . "http://github.com/pragun/simple-csv/tree/master"))))))) ("cond-strict" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cond-strict" "doc/cond-strict@cond-strict/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cond-strict.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cond-strict.txt"))) (checksum . "449212681ea5675beda19bf8242411f6073882ee") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "cond: what it should have been") (implies . ()) (last-checked . 1522414366) (last-edit . 1475036587) (last-updated . 1502815866) (modules . ((lib "cond-strict/main.rkt") (lib "cond-strict/scribblings/cond-strict.scrbl"))) (name . "cond-strict") (nix-sha256 . "1g258l7ryly6yn00p4ml780mncgrhkx917vra6bly7vhajymar8l") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (cond . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/cond-strict") (tags . ("cond")) (versions . #hash((default . #hasheq((checksum . "449212681ea5675beda19bf8242411f6073882ee") (source . "git://github.com/AlexKnauth/cond-strict") (source_url . "http://github.com/AlexKnauth/cond-strict/tree/master"))))))) ("oii-422-handin-client" . #hasheq((author . "ifigueroap@gmail.com ") (authors . ("ifigueroap@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/oii-422-handin-client.txt") (test-failure-log . "server/built/test-fail/oii-422-handin-client.txt") (test-success-log . #f))) (checksum . "29d62748d335a1ab283efc3e28c5c93c3737501a") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "drracket" "drracket-plugin-lib" "gui-lib" "net-lib")) (description . "Handin Client for PUCV PL course OII-422") (implies . ()) (last-checked . 1522414507) (last-edit . 1440188264) (last-updated . 1502816198) (modules . ((lib "oii-422-handin-client/client.rkt") (lib "oii-422-handin-client/this-collection.rkt") (lib "oii-422-handin-client/handin-multi.rkt") (lib "oii-422-handin-client/client-gui.rkt") (lib "oii-422-handin-client/updater.rkt"))) (name . "oii-422-handin-client") (nix-sha256 . "01pk0pkyld49ri9y1c7k7mvs0j3lifplzjrycx96pizgixb2pqam") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:ifigueroap@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/ifigueroap/oii-422-handin-client.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "29d62748d335a1ab283efc3e28c5c93c3737501a") (source . "git://github.com/ifigueroap/oii-422-handin-client.git") (source_url . "http://github.com/ifigueroap/oii-422-handin-client.git/tree/master"))))))) ("intern" . #hasheq((author . "pcn@cs.umd.edu") (authors . ("pcn@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/intern.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/intern.txt"))) (checksum . "fe288836085e04b561d4218bc4d05a74dd423223") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more")) (description . "Type-safe interning of datatype in Typed Racket as a new sub-type of Index") (implies . ()) (last-checked . 1522414420) (last-edit . 1492825852) (last-updated . 1502816138) (modules . ((lib "intern/main.rkt") (lib "intern/tests.rkt"))) (name . "intern") (nix-sha256 . "1hnnd5x0ja2yiqa2npayx0wmmb58bbnfhl64agdwqfp769p70ma5") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:pcn@cs.umd.edu . #t) (ring:1 . #t) (typed-racket . #t))) (source . "git://github.com/philnguyen/intern?path=intern") (tags . ("typed-racket")) (versions . #hash((default . #hasheq((checksum . "fe288836085e04b561d4218bc4d05a74dd423223") (source . "git://github.com/philnguyen/intern?path=intern") (source_url . "http://github.com/philnguyen/intern/tree/master?path=intern"))))))) ("scriblogify" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scriblogify" "doc/scriblogify@scriblogify/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scriblogify.txt") (test-failure-log . "server/built/test-fail/scriblogify.txt") (test-success-log . #f))) (checksum . "7771d00ce6101bd5d415b54134eb79c42b92f1ef") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "sxml" "webapi" "scribble-lib" "compatibility-lib" "web-server-lib" "html-parsing" "html-writing" "racket-doc" "scribble-doc" "scribble-lib")) (description . "Scribble your blog!") (implies . ()) (last-checked . 1522414676) (last-edit . 1382387607) (last-updated . 1502816421) (modules . ((lib "scriblogify/scribble-util.rkt") (lib "scriblogify/private/scriblogify.rkt") (lib "scriblogify/samples/scribble-your-blogs.scrbl") (lib "scriblogify/private/util.rkt") (lib "scriblogify/run-setup.rkt") (lib "scriblogify/run.rkt") (lib "scriblogify/main.rkt") (lib "scriblogify/scribblings/scriblogify.scrbl") (lib "scriblogify/private/handlers.rkt"))) (name . "scriblogify") (nix-sha256 . "1bpjdxmc4ihhndahk3q5vapa13w8fs5mdi9vynx0qxfzw5g3l5b9") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (blog . #t) (ring:1 . #t) (scribble . #t))) (source . "git://github.com/rmculpepper/scriblogify#pkg") (tags . ("blog" "scribble")) (versions . #hash((default . #hasheq((checksum . "7771d00ce6101bd5d415b54134eb79c42b92f1ef") (source . "git://github.com/rmculpepper/scriblogify#pkg") (source_url . "http://github.com/rmculpepper/scriblogify/tree/master#pkg"))))))) ("compact-annotations" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "compact-annotations" "doc/compact-annotations@compact-annotations/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/compact-annotations.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/compact-annotations.txt"))) (checksum . "dcd5f87dec21f40904e92eefb747472151bd3ace") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "cover" "scribble-lib" "rackunit-lib" "racket-doc")) (description . "Function type annotation syntax for Typed Racket similar to Haskell") (implies . ()) (last-checked . 1522414317) (last-edit . 1500074831) (last-updated . 1502812301) (modules . ((lib "compact-annotations/main.rkt") (lib "compact-annotations/examples.rkt") (lib "compact-annotations/compact-annotations.scrbl"))) (name . "compact-annotations") (nix-sha256 . "1vkf6fxf01rdiwh61hghblkryyd0yvqafxpxvcf4xpwknjbbmlma") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (experimental . #t) (ring:1 . #t) (sugar . #t) (typed-racket . #t) (types . #t))) (source . "git://github.com/jackfirth/compact-annotations") (tags . ("experimental" "sugar" "typed-racket" "types")) (versions . #hash((default . #hasheq((checksum . "dcd5f87dec21f40904e92eefb747472151bd3ace") (source . "git://github.com/jackfirth/compact-annotations") (source_url . "http://github.com/jackfirth/compact-annotations/tree/master"))))))) ("zaoqil" . #hasheq((author . "zaomir@outlook.com") (authors . ("zaomir@outlook.com")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . "server/built/deps/zaoqil.txt") (docs . (("extract" "zaoqil" "doc/zaoqil@zaoqil/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zaoqil.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/zaoqil.txt"))) (checksum . "804a7f5c96d173928205693f244578a19e3cebc5") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: https://github.com/zaoqil/zaoqil.git?path=racket\n  context...:\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:324:3: for-loop\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:321:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:73:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:54:2: retry-loop\n   /home/pkgserver/racket/collects/racket/private/more-scheme.rkt:261:28\n   /home/pkgserver/racket/collects/racket/private/list.rkt:264:4: loop\n   /home/pkgserver/pkg-index/official/update.rkt:137:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:138:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:154:22\n") (conflicts . ()) (dependencies . ("racket" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "語") (implies . ()) (last-checked . 1517995163) (last-edit . 1517568635) (last-updated . 1517915950) (modules . ((lib "zaoqil/lang/reader.rkt") (lib "zaoqil/main.rkt") (lib "zaoqil/zaoqil.scrbl"))) (name . "zaoqil") (ring . 2) (search-terms . #hasheq((:build-conflicts: . #t) (:build-dep-fail: . #t) (:build-success: . #t) (:docs-error: . #t) (:docs: . #t) (:error: . #t) (author:zaomir@outlook.com . #t) (compiler . #t) (kernel . #t) (lisp . #t) (os . #t) (ring:2 . #t))) (source . "https://github.com/zaoqil/zaoqil.git?path=racket") (tags . ("compiler" "kernel" "lisp" "os")) (versions . #hash((default . #hasheq((checksum . "804a7f5c96d173928205693f244578a19e3cebc5") (source . "https://github.com/zaoqil/zaoqil.git?path=racket") (source_url . "https://github.com/zaoqil/zaoqil.git?path=racket"))))))) ("udelim" . #hasheq((author . "willghatch@gmail.com") (authors . ("willghatch@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "udelim" "doc/udelim@udelim/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/udelim.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/udelim.txt"))) (checksum . "55307195dbf246d7e5e1565799c677d31a17cece") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "sandbox-lib" "rackunit-lib")) (description . "Add more parens and string delimiters.") (implies . ()) (last-checked . 1522414696) (last-edit . 1474501628) (last-updated . 1521847405) (modules . ((lib "udelim/defaults.rkt") (lib "udelim/main.rkt") (lib "udelim/lang/reader.rkt") (lib "udelim/udelim.scrbl"))) (name . "udelim") (nix-sha256 . "0mm3x2a3hcyhzf6iwd4790adq5cgjrnnz9d5mjjncafg17zaybq4") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:willghatch@gmail.com . #t) (ring:1 . #t) (syntax . #t))) (source . "git://github.com/willghatch/racket-udelim") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "55307195dbf246d7e5e1565799c677d31a17cece") (source . "git://github.com/willghatch/racket-udelim") (source_url . "http://github.com/willghatch/racket-udelim/tree/master"))))))) ("packet-socket" . #hasheq((author . "tonygarnockjones@gmail.com schuster@ccs.neu.edu") (authors . ("tonygarnockjones@gmail.com" "schuster@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/packet-socket.txt") (success-log . "server/built/install/packet-socket.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/packet-socket.txt"))) (checksum . "a937da460f9c50bb0a1051475b883d3a128645ab") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "make" "bitsyntax")) (description . "Access to raw Ethernet frames from Racket") (implies . ()) (last-checked . 1522414509) (last-edit . 1402690841) (last-updated . 1502816241) (modules . ((lib "packet-socket/private/install.rkt") (lib "packet-socket/main.rkt"))) (name . "packet-socket") (nix-sha256 . "0j0fgsqy78xd3iar0y2phidyrj9yh5q9xndlvk8sqx7b3165093m") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:schuster@ccs.neu.edu . #t) (author:tonygarnockjones@gmail.com . #t) (net . #t) (ring:1 . #t))) (source . "git://github.com/tonyg/racket-packet-socket") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "a937da460f9c50bb0a1051475b883d3a128645ab") (source . "git://github.com/tonyg/racket-packet-socket") (source_url . "http://github.com/tonyg/racket-packet-socket/tree/master"))))))) ("functional-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/functional-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/functional-lib.txt"))) (checksum . "c73fcb6ffb59c6bd43a70f3ff3a8af6a42459003") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.3") ("collections-lib" #:version "1.3") "curly-fn-lib" "static-rename")) (description . "implementation (no documentation) for “functional”") (implies . ()) (last-checked . 1522414403) (last-edit . 1475260524) (last-updated . 1512356809) (modules . ((lib "data/functor.rkt") (lib "data/maybe.rkt") (lib "data/either.rkt") (lib "data/monad.rkt") (lib "data/applicative.rkt"))) (name . "functional-lib") (nix-sha256 . "11vycbvscpzcblvf8kvs6qklnxjnkrcbcfdj21fk6m017wk3wis3") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:lexi.lambda@gmail.com . #t) (functional . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/functional?path=functional-lib") (tags . ("functional")) (versions . #hash(("6.2.1" . #hasheq((checksum . "6709e8525aad5420d0bb3f0dc5dce5acb9bd9f3f") (source . "git://github.com/lexi-lambda/functional?path=functional-lib#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/functional/tree/master?path=functional-lib#version-exception--6.2"))) (default . #hasheq((checksum . "c73fcb6ffb59c6bd43a70f3ff3a8af6a42459003") (source . "git://github.com/lexi-lambda/functional?path=functional-lib") (source_url . "http://github.com/lexi-lambda/functional/tree/master?path=functional-lib"))) ("6.2" . #hasheq((checksum . "6709e8525aad5420d0bb3f0dc5dce5acb9bd9f3f") (source . "git://github.com/lexi-lambda/functional?path=functional-lib#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/functional/tree/master?path=functional-lib#version-exception--6.2"))))))) ("osc" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "osc" "doc/osc@osc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/osc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/osc.txt"))) (checksum . "18caebb14eefe3482976e738654aee2f18c5f88d") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Open Sound Control data definitions") (implies . ()) (last-checked . 1522414508) (last-edit . 1389819505) (last-updated . 1513624552) (modules . ((lib "osc/examples/send-to-renoise.rkt") (lib "osc/osc.scrbl") (lib "osc/bytes-to-osc.rkt") (lib "osc/osc-defns.rkt") (lib "osc/examples/try-sending.rkt") (lib "osc/examples/decode-supercollider.rkt") (lib "osc/examples/decode-helper.rkt") (lib "osc/osc-to-bytes.rkt") (lib "osc/osc-common.rkt") (lib "osc/examples/libpcap-read.rkt") (lib "osc/osc-time.rkt") (lib "osc/osc-quickcheck.rkt") (lib "osc/main.rkt"))) (name . "osc") (nix-sha256 . "0y195jbxivj93zv469ll8w7n0x6259fm70rj5d2pzk5gfdns8ivl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audio . #t) (author:clements@racket-lang.org . #t) (io . #t) (ring:1 . #t))) (source . "github://github.com/jbclements/osc/master") (tags . ("audio" "io")) (versions . #hash((default . #hasheq((checksum . "18caebb14eefe3482976e738654aee2f18c5f88d") (source . "github://github.com/jbclements/osc/master") (source_url . "http://github.com/jbclements/osc/tree/master"))))))) ("afl" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "afl" "doc/afl@afl/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/afl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/afl.txt"))) (checksum . "50cc9ca667dbf3397db791da86c1ff31b34587a3") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "hygienic-reader-extension" "at-exp-lib" "rackjure" "rackunit-lib" "scribble-lib" "racket-doc" "scribble-doc" "scribble-code-examples")) (description . "a lang-extension that provides rackjure-like anonymous function literals") (implies . ()) (last-checked . 1522417868) (last-edit . 1466340886) (last-updated . 1502812266) (modules . ((lib "afl/tests/test-afl-racket.rkt") (lib "afl/tests/test-afl-at-exp-racket.rkt") (lib "afl/reader.rkt") (lib "afl/lang/language-info.rkt") (lib "afl/lang/reader.rkt") (lib "afl/docs/afl.scrbl") (lib "afl/tests/test-afl-scribble.rkt") (lib "afl/lang/runtime-config.rkt"))) (name . "afl") (nix-sha256 . "18ba5clajiix00v3yvbgsvk86gqj7l747zxd13fi2nqa13l53kxh") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (lambda . #t) (lang-extension . #t) (ring:1 . #t) (syntax . #t))) (source . "git://github.com/AlexKnauth/afl") (tags . ("lambda" "lang-extension" "syntax")) (versions . #hash(("6.0" . #hasheq((checksum . "40cf274d9274456f3059cc8275f77982c61710bd") (source . "git://github.com/AlexKnauth/afl#for-v-up-to-6.1") (source_url . "http://github.com/AlexKnauth/afl/tree/master#for-v-up-to-6.1"))) (default . #hasheq((checksum . "50cc9ca667dbf3397db791da86c1ff31b34587a3") (source . "git://github.com/AlexKnauth/afl") (source_url . "http://github.com/AlexKnauth/afl/tree/master"))) ("6.0.1" . #hasheq((checksum . "40cf274d9274456f3059cc8275f77982c61710bd") (source . "git://github.com/AlexKnauth/afl#for-v-up-to-6.1") (source_url . "http://github.com/AlexKnauth/afl/tree/master#for-v-up-to-6.1"))) ("6.1" . #hasheq((checksum . "40cf274d9274456f3059cc8275f77982c61710bd") (source . "git://github.com/AlexKnauth/afl#for-v-up-to-6.1") (source_url . "http://github.com/AlexKnauth/afl/tree/master#for-v-up-to-6.1"))))))) ("leftist-tree" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "leftist-tree" "doc/leftist-tree@leftist-tree/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/leftist-tree.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/leftist-tree.txt"))) (checksum . "3e4f55aecdd0978f282dde6964f444b5da71ed52") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "data-enumerate-lib")) (description . "Functional priority queues") (implies . ()) (last-checked . 1522414423) (last-edit . 1440881081) (last-updated . 1502816149) (modules . ((lib "data/leftist-tree/leftist-tree.scrbl") (lib "data/leftist-tree.rkt"))) (name . "leftist-tree") (nix-sha256 . "0wsaq65mngsagnckrcii7v2dclfxy22fgqj3b5zz7xl32ljdyxav") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:zeppieri@gmail.com . #t) (data . #t) (ring:1 . #t))) (source . "git://github.com/97jaz/leftist-tree") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "3e4f55aecdd0978f282dde6964f444b5da71ed52") (source . "git://github.com/97jaz/leftist-tree") (source_url . "http://github.com/97jaz/leftist-tree/tree/master"))))))) ("remix" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/remix.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/remix.txt"))) (checksum . "e2595faa0fa88d37b751179c2d406956d8956b6f") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "at-exp-lib" "rackunit-lib" "datalog" "rackunit-lib" "base" "racket-doc" "scribble-lib" "typed-racket-lib" "unstable-lib")) (description . "a revised version of Racket") (implies . ()) (last-checked . 1522414670) (last-edit . 1448414063) (last-updated . 1502816398) (modules . ((lib "remix/lang/reader.rkt") (lib "racket/default-in.rkt") (lib "remix/datalog0.rkt") (lib "remix/tests/require-star-d.rkt") (lib "remix/required-helper.rkt") (lib "remix/tests/static-interface.rkt") (lib "remix/tests/class.rkt") (lib "remix/tests/module.rkt") (lib "remix/tests/layout.rkt") (lib "remix/stx0.rkt") (lib "tests/racket/remixd.rkt") (lib "remix/exp/unit-test.rkt") (lib "remix/exp/unit.rkt") (lib "remix/exp/template.rkt") (lib "remix/tests/expand-to.rkt") (lib "remix/data0.rkt") (lib "remix/class0.rkt") (lib "remix/tests/reader.rkt") (lib "remix/core.rkt") (lib "remix/tests/stx.rkt") (lib "remix/stx/singleton-struct0.rkt") (lib "remix/module.rkt") (lib "remix/theory0.rkt") (lib "remix/test0.rkt") (lib "remix/tests/required-server.rkt") (lib "remix/stx/raw0.rkt") (lib "remix/exp/expand.rkt") (lib "remix/num/gen0.rkt") (lib "remix/tests/expand-from.rkt") (lib "remix/static-interface0.rkt") (lib "remix/tests/required.rkt") (lib "remix/layout0.rkt") (lib "racket/remixd.rkt") (lib "remix/tests/theory.rkt"))) (name . "remix") (nix-sha256 . "01804nj8adpkif0zwasg2kn6ayksd890as7fp4haqwdbjrhq244i") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (lang . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/remix") (tags . ("lang")) (versions . #hash((default . #hasheq((checksum . "e2595faa0fa88d37b751179c2d406956d8956b6f") (source . "git://github.com/jeapostrophe/remix") (source_url . "http://github.com/jeapostrophe/remix/tree/master"))))))) ("racket-cheat" . #hash((author . "jay.mccarthy@gmail.com") (checksum . "6577b9da6392e96971e9ed6598b9223f82a11d95") (dependencies . ("base" "scribble-lib" "db-doc" "db-lib" "drracket" "net-doc" "net-lib" "parser-tools-doc" "parser-tools-lib" "pict-doc" "pict-lib" "racket-doc" "sandbox-lib" "slideshow-doc" "slideshow-lib")) (description . "jay.mccarthy@gmail.com") (modules . ()) (name . "racket-cheat") (source . "https://download.racket-lang.org/releases/6.12/pkgs/racket-cheat.zip") (tags . ()))) ("acmsmall" . #hasheq((author . "stamourv@racket-lang.org") (authors . ("stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "acmsmall" "doc/acmsmall@acmsmall/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/acmsmall.txt") (test-failure-log . "server/built/test-fail/acmsmall.txt") (test-success-log . #f))) (checksum . "15a951e4dff06856862d2a87afd032b983a705be") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "at-exp-lib" "racket-doc" "scribble-doc")) (description . "Port of the acmsmall style to Scribble") (implies . ()) (last-checked . 1522417868) (last-edit . 1454101079) (last-updated . 1504309903) (modules . ((lib "scribble/example-bib.rkt") (lib "scribble/acmsmall.scrbl") (lib "scribble/download.rkt") (lib "scribble/example.scrbl") (lib "scribble/acmsmall.rkt"))) (name . "acmsmall") (nix-sha256 . "0vikhn7ijdgj313m8nnx8j90w94hada2vhiv8yj785i4h45rfqlw") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:stamourv@racket-lang.org . #t) (ring:1 . #t) (scribble . #t))) (source . "git://github.com/stamourv/acmsmall-scribble") (tags . ("scribble")) (versions . #hash((default . #hasheq((checksum . "15a951e4dff06856862d2a87afd032b983a705be") (source . "git://github.com/stamourv/acmsmall-scribble") (source_url . "http://github.com/stamourv/acmsmall-scribble/tree/master"))))))) ("libkenji" . #hasheq((author . "yd2dong@uwaterloo.ca") (authors . ("yd2dong@uwaterloo.ca")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libkenji.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libkenji.txt"))) (checksum . "319a80f51bba4224f87a01e6a368d3a936371f88") (checksum-error . #f) (conflicts . ()) (dependencies . ("pfds" "typed-racket-lib" "base" "compatibility-lib" "data-lib" "srfi-lib")) (description . "") (implies . ()) (last-checked . 1522414424) (last-edit . 1415725724) (last-updated . 1502816155) (modules . ((lib "libkenji/concurrency.rkt") (lib "libkenji/misc.rkt") (lib "libkenji/assert.rkt") (lib "libkenji/sockets.rkt") (lib "libkenji/logging.rkt") (lib "libkenji/wire-struct.rkt") (lib "libkenji/main.rkt") (lib "libkenji/ports.rkt") (lib "libkenji/typed.rkt") (lib "libkenji/control-flow.rkt") (lib "libkenji/vector.rkt"))) (name . "libkenji") (nix-sha256 . "08ik1szpf19yrh65gkpr2cam9q75pm4zic9y4kbnzxgz9i6d1n50") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:yd2dong@uwaterloo.ca . #t) (ring:1 . #t))) (source . "git://github.com/quantum1423/libkenji") (tags . ()) (versions . #hash((default . #hasheq((checksum . "319a80f51bba4224f87a01e6a368d3a936371f88") (source . "git://github.com/quantum1423/libkenji") (source_url . "http://github.com/quantum1423/libkenji/tree/master"))))))) ("images-doc" . #hash((author . "ntoronto@racket-lang.org") (checksum . "9fb9a522837e695329687ef8427b036baf77edc7") (dependencies . ("base" "images-lib" "draw-doc" "gui-doc" "pict-doc" "slideshow-doc" "typed-racket-doc" "draw-lib" "gui-lib" "pict-lib" "racket-doc" "scribble-lib" "slideshow-lib" "typed-racket-lib")) (description . "ntoronto@racket-lang.org") (modules . ()) (name . "images-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/images-doc.zip") (tags . ()))) ("typed-racket-doc" . #hash((author . "samth@racket-lang.org stamourv@racket-lang.org") (checksum . "23efaab44737eb6e83d820bd8df7e5ffaff5cb8b") (dependencies . ("base" "net-doc" "scheme-lib" "srfi-lite-lib" "r6rs-doc" "srfi-doc" "r6rs-lib" "sandbox-lib" "at-exp-lib" ("scribble-lib" #:version "1.16") "pict-lib" ("typed-racket-lib" #:version "1.6") "typed-racket-compatibility" "typed-racket-more" "racket-doc" "draw-lib")) (description . "samth@racket-lang.org stamourv@racket-lang.org") (modules . ()) (name . "typed-racket-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/typed-racket-doc.zip") (tags . ()))) ("draw-x86_64-macosx-2" . #hash((author . "mflatt@racket-lang.org") (checksum . "4938d092af802527e9c8e52ac45946e29a342372") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "draw-x86_64-macosx-2") (source . "https://download.racket-lang.org/releases/6.12/pkgs/draw-x86_64-macosx-2.zip") (tags . ()))) ("serial" . #hasheq((author . "bprzygoda@gmail.com") (authors . ("bprzygoda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/serial.txt") (success-log . "server/built/install/serial.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/serial.txt"))) (checksum . "47cb5ed979cdcd9481001aeb559e82c0d96bb42a") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "termios")) (description . "Helper FFI bindings for serial port communication based on pyserial") (implies . ()) (last-checked . 1522414677) (last-edit . 1424731342) (last-updated . 1502816424) (modules . ((lib "serial/private/install.rkt") (lib "serial/main.rkt") (lib "serial/serial.rkt") (lib "serial/ioctl.rkt"))) (name . "serial") (nix-sha256 . "1l7zhvbh6rivz1kbvclkwx9mjrm37w2yid9by3mjyhf4b4wh3q4p") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bprzygoda@gmail.com . #t) (communication . #t) (linux . #t) (port . #t) (ring:1 . #t) (serial . #t))) (source . "git://github.com/BartAdv/racket-serial") (tags . ("communication" "linux" "port" "serial")) (versions . #hash((default . #hasheq((checksum . "47cb5ed979cdcd9481001aeb559e82c0d96bb42a") (source . "git://github.com/BartAdv/racket-serial") (source_url . "http://github.com/BartAdv/racket-serial/tree/master"))))))) ("squicky" . #hasheq((author . "gray@nxg.name") (authors . ("gray@nxg.name")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "squicky" "doc/squicky@squicky/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/squicky.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/squicky.txt"))) (checksum . "c9c5c03f1af0cfbc09c1db8677c1cc1b7cd7385f") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "parser-tools-lib" "scribble-lib" "srfi-lite-lib" "at-exp-lib" "rackunit-lib" "racket-doc")) (description . "A parser for a wiki syntax (a mild extension of WikiCreole)") (implies . ()) (last-checked . 1522414681) (last-edit . 1421520567) (last-updated . 1502816446) (modules . ((lib "squicky/wiki2xml.rkt") (lib "squicky/squicky.scrbl") (lib "squicky/parser.rkt") (lib "squicky/main.rkt"))) (name . "squicky") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:gray@nxg.name . #t) (parser . #t) (ring:1 . #t) (wiki . #t))) (source . "http://nxg.me.uk/dist/squicky/squicky.zip") (tags . ("parser" "wiki")) (versions . #hash((default . #hasheq((checksum . "c9c5c03f1af0cfbc09c1db8677c1cc1b7cd7385f") (source . "http://nxg.me.uk/dist/squicky/squicky.zip") (source_url . "http://nxg.me.uk/dist/squicky/squicky.zip"))))))) ("talk-typer" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/talk-typer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/talk-typer.txt"))) (checksum . "24c5779e4d5b9548f96ac66d7c638c9bef0e7428") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "gui-lib" "data-lib" "drracket-plugin-lib")) (description . "A tool to make live coding during talks easier") (implies . ()) (last-checked . 1522414690) (last-edit . 1473866914) (last-updated . 1502816472) (modules . ((lib "talk-typer/private/text.rkt") (lib "talk-typer/tool.rkt"))) (name . "talk-typer") (nix-sha256 . "10gdsnarwvs7q1pbf6swhl36dl513i065q542qvafycf8n934l73") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:spencer@florence.io . #t) (ring:1 . #t))) (source . "git://github.com/florence/talk-typer") (tags . ()) (versions . #hash((default . #hasheq((checksum . "24c5779e4d5b9548f96ac66d7c638c9bef0e7428") (source . "git://github.com/florence/talk-typer") (source_url . "http://github.com/florence/talk-typer/tree/master"))))))) ("at-exp-lib" . #hash((author . "eli@racket-lang.org mflatt@racket-lang.org") (checksum . "39aa817ddf1fd60635cf3c924d7dd423865ee9f5") (dependencies . ("base")) (description . "eli@racket-lang.org mflatt@racket-lang.org") (modules . ()) (name . "at-exp-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/at-exp-lib.zip") (tags . ()))) ("binary-class-mp3" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "binary-class-mp3" "doc/binary-class-mp3@binary-class-mp3/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/binary-class-mp3.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/binary-class-mp3.txt"))) (checksum . "bc10152d1bc6cd1ed7be7bec0e8d3f1ae0bf7977") (checksum-error . #f) (conflicts . ()) (dependencies . ("binary-class" "base" "scribble-lib" "racket-doc")) (description . "MP3 ID3v2.1 and ID3v2.2 tags parser") (implies . ()) (last-checked . 1522414311) (last-edit . 1402276385) (last-updated . 1502812282) (modules . ((lib "binary-class/manual-mp3.scrbl") (lib "binary-class/mp3.rkt"))) (name . "binary-class-mp3") (nix-sha256 . "17k16f9q6dyaw7lfp9mkasj0gc6mrblp8z0464im4jlhn102b3pa") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (io . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "git://github.com/Kalimehtar/binary-class-mp3") (tags . ("io" "parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "bc10152d1bc6cd1ed7be7bec0e8d3f1ae0bf7977") (source . "git://github.com/Kalimehtar/binary-class-mp3") (source_url . "http://github.com/Kalimehtar/binary-class-mp3/tree/master"))))))) ("rwind" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rwind.txt") (test-failure-log . "server/built/test-fail/rwind.txt") (test-success-log . #f))) (checksum . "865e872cef7edf2a317ae063784d1c971404b06c") (checksum-error . #f) (conflicts . ()) (dependencies . ("x11" "base" "rackunit-lib" "slideshow-lib" "readline-lib" "gui-lib")) (description . "An X11 window manager written in Racket (still in early stage)") (implies . ()) (last-checked . 1522414673) (last-edit . 1383853326) (last-updated . 1516442402) (modules . ((lib "rwind/keymap.rkt") (lib "rwind/user.rkt") (lib "rwind/util.rkt") (lib "rwind/configure.rkt") (lib "rwind/rwind.rkt") (lib "rwind/policy/simple.rkt") (lib "rwind/workspace.rkt") (lib "rwind/policy/base.rkt") (lib "rwind/events.rkt") (lib "rwind/server-sync.rkt") (lib "rwind/policy/tiling.rkt") (lib "rwind/base.rkt") (lib "rwind/client2.rkt") (lib "rwind/client.rkt") (lib "rwind/window.rkt") (lib "rwind/main.rkt") (lib "rwind/display.rkt") (lib "rwind/doc-string.rkt") (lib "rwind/server.rkt") (lib "rwind/launcher.rkt") (lib "rwind/private/try-layout.rkt") (lib "rwind/color.rkt") (lib "rwind/launcher-base.rkt") (lib "rwind/user-files/config-simple.rkt"))) (name . "rwind") (nix-sha256 . "1y418jlnjllx311706fj61y2f73hiiv3lv4vyb6nj9w9fwdmldan") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (app . #t) (author:laurent.orseau@gmail.com . #t) (ring:1 . #t) (unix . #t))) (source . "github://github.com/Metaxal/rwind/master") (tags . ("app" "unix")) (versions . #hash((default . #hasheq((checksum . "865e872cef7edf2a317ae063784d1c971404b06c") (source . "github://github.com/Metaxal/rwind/master") (source_url . "http://github.com/Metaxal/rwind/tree/master"))))))) ("eventfd" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "eventfd" "doc/eventfd@eventfd/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/eventfd.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/eventfd.txt"))) (checksum . "f4e8e36525ca23009c71bc9838181cdba5503c98") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "Linux eventfd support") (implies . ()) (last-checked . 1522414399) (last-edit . 1438605284) (last-updated . 1502815956) (modules . ((lib "eventfd/main.rkt") (lib "eventfd/private/ffi.rkt") (lib "eventfd/eventfd.scrbl"))) (name . "eventfd") (nix-sha256 . "13l3pbigj8pivb8x9m786qkyjbjjvlcr864ch6nx7yb7l5c5lwr1") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mordae@anilinux.org . #t) (ffi . #t) (linux . #t) (ring:1 . #t))) (source . "github://github.com/mordae/racket-eventfd/master") (tags . ("ffi" "linux")) (versions . #hash((default . #hasheq((checksum . "f4e8e36525ca23009c71bc9838181cdba5503c98") (source . "github://github.com/mordae/racket-eventfd/master") (source_url . "http://github.com/mordae/racket-eventfd/tree/master"))))))) ("_-exp" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "_-exp" "doc/_-exp@_-exp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/_-exp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/_-exp.txt"))) (checksum . "b22faef018e0be655a50c5ce2955c9e14226128b") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "at-exp-lib" "syntax-color-lib" "scribble-lib" "racket-doc" "scribble-doc" "web-server-doc" "adjutor")) (description . "A  metalanguage similar to #lang at-exp, but with a configurable command character") (implies . ()) (last-checked . 1522417868) (last-edit . 1513066025) (last-updated . 1513051559) (modules . ((lib "_-exp/language-info.rkt") (lib "_-exp/scribblings/_-exp.scrbl") (lib "_-exp/current-command-char.rkt") (lib "_-exp/runtime-config.rkt") (lib "_-exp/main.rkt"))) (name . "_-exp") (nix-sha256 . "0cka4grf3r0pzdqjysh181wnmlja7abnc4rifs3vzbsb7mg08qia") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:philip@philipmcgrath.com . #t) (lang . #t) (lang-extension . #t) (language . #t) (ring:1 . #t))) (source . "https://github.com/LiberalArtist/_-exp.git") (tags . ("lang" "lang-extension" "language")) (versions . #hash((default . #hasheq((checksum . "b22faef018e0be655a50c5ce2955c9e14226128b") (source . "https://github.com/LiberalArtist/_-exp.git") (source_url . "https://github.com/LiberalArtist/_-exp.git"))))))) ("zo-lib" . #hash((author . "mflatt@racket-lang.org jay@racket-lang.org") (checksum . "7535c63c8a883bb55242995b9769130b3cabb393") (dependencies . ("base")) (description . "mflatt@racket-lang.org jay@racket-lang.org") (modules . ()) (name . "zo-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/zo-lib.zip") (tags . ()))) ("ppict-slide-grid" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ppict-slide-grid.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ppict-slide-grid.txt"))) (checksum . "1e992183dbfc695882bb612bb5b8b32515adeee2") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "pict-lib" "slideshow-lib" "unstable-lib")) (description . "") (implies . ()) (last-checked . 1522414536) (last-edit . 1399745264) (last-updated . 1502816326) (modules . ((lib "ppict-slide-grid/main.rkt"))) (name . "ppict-slide-grid") (nix-sha256 . "1nn164m28fvx8a92jk534kqz89wx9jwbivvypkx6fr3lm8xznrw9") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:asumu@ccs.neu.edu . #t) (ring:1 . #t) (slideshow . #t))) (source . "git://github.com/takikawa/ppict-slide-grid") (tags . ("slideshow")) (versions . #hash((default . #hasheq((checksum . "1e992183dbfc695882bb612bb5b8b32515adeee2") (source . "git://github.com/takikawa/ppict-slide-grid") (source_url . "http://github.com/takikawa/ppict-slide-grid/tree/master"))))))) ("mm" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mm.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mm.txt"))) (checksum . "9b733818036f340181cb5f5d5083e481f4709cd9") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "gui-lib" "data-lib" "rackunit-chk")) (description . "an environment for exploring memory management") (implies . ()) (last-checked . 1522414435) (last-edit . 1385068728) (last-updated . 1502816182) (modules . ((lib "mm/main.rkt") (lib "mm/tests/collectors/stop-and-copy.rkt") (lib "mm/heap-gui.rkt") (lib "mm/id-table.rkt") (lib "mm/ast.rkt") (lib "mm/tests/all.rkt") (lib "mm/tests/suite.rkt") (lib "mm/heap.rkt") (lib "mm/collector.rkt") (lib "mm/compiler.rkt") (lib "mm/tests/collectors/infinite.rkt") (lib "mm/tests/collectors/mark-and-sweep.rkt") (lib "mm/runtime.rkt") (lib "mm/tests/collectors/generic-ms.rkt"))) (name . "mm") (nix-sha256 . "0qgpkzblp7kiw9b94li4hibz6zn91lin4fc9pylk89n9wsg6ainj") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (ring:1 . #t) (textbook . #t))) (source . "git://github.com/jeapostrophe/mm") (tags . ("textbook")) (versions . #hash((default . #hasheq((checksum . "9b733818036f340181cb5f5d5083e481f4709cd9") (source . "git://github.com/jeapostrophe/mm") (source_url . "http://github.com/jeapostrophe/mm/tree/master"))))))) ("define-match-spread-out" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "define-match-spread-out" "doc/define-match-spread-out@define-match-spread-out/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/define-match-spread-out.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/define-match-spread-out.txt"))) (checksum . "0f97b9f4bdee1655617f70f4291cf774993b2f83") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "unstable-lib" "defpat" "rackunit-lib" "scribble-lib" "scribble-code-examples" "racket-doc")) (description . "a version of define that allows definitions to be spread across a file") (implies . ()) (last-checked . 1522414378) (last-edit . 1462893465) (last-updated . 1502815889) (modules . ((lib "define-match-spread-out/main.rkt") (lib "define-match-spread-out/tests/require-test.rkt") (lib "define-match-spread-out/tests/test.rkt") (lib "define-match-spread-out/scribblings/define-match-spread-out.scrbl"))) (name . "define-match-spread-out") (nix-sha256 . "1i0rprhgq2lnqxlyx2q827xs08wjyil041hfz8gjya7yim5fdi38") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (match . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/define-match-spread-out") (tags . ("match")) (versions . #hash((default . #hasheq((checksum . "0f97b9f4bdee1655617f70f4291cf774993b2f83") (source . "git://github.com/AlexKnauth/define-match-spread-out") (source_url . "http://github.com/AlexKnauth/define-match-spread-out/tree/master"))))))) ("color-flood" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/color-flood.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/color-flood.txt"))) (checksum . "86f82e312587e982695ef5dd687e247f97bae7f5") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "bazaar" "gui-lib" "rackunit-lib")) (description . "A game where the player must fill the board with colors before its opponent") (implies . ()) (last-checked . 1522414315) (last-edit . 1428324507) (last-updated . 1516438251) (modules . ((lib "color-flood/color-flood.rkt") (lib "color-flood/main.rkt"))) (name . "color-flood") (nix-sha256 . "14pd2scajv035bmv4q184ja8y12qi096hvjgd44phiimnwgv3816") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:laurent.orseau@gmail.com . #t) (games . #t) (gui . #t) (ring:1 . #t))) (source . "git://github.com/Metaxal/color-flood") (tags . ("games" "gui")) (versions . #hash((default . #hasheq((checksum . "86f82e312587e982695ef5dd687e247f97bae7f5") (source . "git://github.com/Metaxal/color-flood") (source_url . "http://github.com/Metaxal/color-flood/tree/master"))))))) ("2d-test" . #hash((author . "robby@racket-lang.org") (checksum . "7927d601c2337c81a81e9596bbb917395b106121") (dependencies . ("base" "2d-lib" "racket-index" "rackunit-lib" "option-contract-lib" "at-exp-lib" "gui-lib" "syntax-color-lib")) (description . "robby@racket-lang.org") (modules . ()) (name . "2d-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/2d-test.zip") (tags . ()))) ("cpuinfo" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cpuinfo" "doc/cpuinfo@cpuinfo/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cpuinfo.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cpuinfo.txt"))) (checksum . "e5d01f97d71e0098ee6af20052889f52b94f5115") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "mcfly" "overeasy")) (description . "CPU Information") (implies . ()) (last-checked . 1522414368) (last-edit . 1456513268) (last-updated . 1502815871) (modules . ((lib "cpuinfo/cpuinfo.scrbl") (lib "cpuinfo/main.rkt"))) (name . "cpuinfo") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:neil@neilvandyke.org . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/cpuinfo.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e5d01f97d71e0098ee6af20052889f52b94f5115") (source . "http://www.neilvandyke.org/racket/cpuinfo.zip") (source_url . "http://www.neilvandyke.org/racket/cpuinfo.zip"))))))) ("defpat" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "defpat-main" "doc/defpat-main@defpat/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/defpat.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/defpat.txt"))) (checksum . "b1ab923ef4c92355de7ee77703d8af692835c8f0") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "generic-bind" "sweet-exp" "reprovide-lang" "unstable-lib" "unstable-list-lib" "rackunit" "scribble-lib" "scribble-code-examples" "racket-doc")) (description . "a version of define for defining functions with match-patterns as arguments") (implies . ()) (last-checked . 1522414378) (last-edit . 1462893280) (last-updated . 1502815889) (modules . ((lib "defpat/opt-match-case-lambda.rkt") (lib "defpat/opt-case-lambda.rkt") (lib "defpat/main.rkt") (lib "defpat/match-case-lambda.rkt") (lib "defpat/docs/match-case-lambda.scrbl") (lib "defpat/docs/opt-case-lambda.scrbl") (lib "defpat/docs/defpat-main.scrbl") (lib "defpat/defpat.rkt") (lib "defpat/docs/opt-match-case-lambda.scrbl") (lib "defpat/docs/defpat.scrbl"))) (name . "defpat") (nix-sha256 . "0v1bwm96x87dkiays6rswby685rkngn9l0w5q3ngbglba6vc42sn") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (match . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/defpat") (tags . ("match")) (versions . #hash((default . #hasheq((checksum . "b1ab923ef4c92355de7ee77703d8af692835c8f0") (source . "git://github.com/AlexKnauth/defpat") (source_url . "http://github.com/AlexKnauth/defpat/tree/master"))))))) ("video" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "video" "doc/video@video/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/video.txt") (test-failure-log . "server/built/test-fail/video.txt") (test-success-log . #f))) (checksum . "ca7db7f85ab7f19f91e1f63907c275fecdc39349") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" "6.9") "rackunit-lib" "gui-lib" "draw-lib" "images-lib" "drracket-plugin-lib" "data-lib" "pict-lib" "wxme-lib" "sandbox-lib" "at-exp-lib" "scribble-lib" "bitsyntax" "opengl" "portaudio" "ffi-definer-convention" "scribble-lib" "racket-doc" "gui-doc" "draw-doc" "ppict")) (description . "The latest version of #lang video") (implies . ()) (last-checked . 1522414700) (last-edit . 1503003269) (last-updated . 1502816518) (modules . ((lib "video/render/xml.rkt") (lib "video/private/camera-icon.rkt") (lib "video/render.rkt") (lib "video/private/packetqueue.rkt") (lib "video/private/ffmpeg-stream.rkt") (lib "video/raco.rkt") (lib "video/core.rkt") (lib "video/private/init-mlt.rkt") (lib "video/private/mlt.rkt") (lib "video/tests/render.rkt") (lib "video/examples/11-include.rkt") (lib "video/private/surface.rkt") (lib "video/tests/video.rkt") (lib "video/examples/2-colorfade.rkt") (lib "video/render/jpg.rkt") (lib "video/lang/reader.rkt") (lib "video/examples/5-project.rkt") (lib "video/examples/4-filters.rkt") (lib "video/player.rkt") (lib "video/scribblings/intro.scrbl") (lib "video/examples/7-watermark.rkt") (lib "video/scribblings/video.scrbl") (lib "video/init.rkt") (lib "video/private/ffmpeg.rkt") (lib "video/tests/editor.rkt") (lib "video/examples/12-cut.rkt") (lib "video/scribblings/api.scrbl") (lib "video/main.rkt") (lib "video/examples/8-image.rkt") (lib "video/private/video-canvas.rkt") (lib "video/scribblings/render.scrbl") (lib "video/tests/mlt.rkt") (lib "video/private/tool.rkt") (lib "video/scribblings/utils.rkt") (lib "video/examples/1-hellocolor.rkt") (lib "video/examples/10-properties.rkt") (lib "video/tests/player.rkt") (lib "video/units.rkt") (lib "video/render/list.rkt") (lib "video/render/mp4.rkt") (lib "video/examples/9-doubletransition.rkt") (lib "video/private/editor.rkt") (lib "video/private/threading.rkt") (lib "video/surface.rkt") (lib "video/examples/3-clips.rkt") (lib "video/render/png.rkt") (lib "video/examples/6-multitrack.rkt") (lib "video/base.rkt") (lib "video/private/video.rkt") (lib "video/tests/test-utils.rkt") (lib "video/lib.rkt") (lib "video/private/utils.rkt") (lib "video/tests/unit-tests.rkt"))) (name . "video") (nix-sha256 . "1l21ydyjdzvbn96329l7nvd8iv3iv6nmpbz9nqipp0q44s1g7g54") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t) (video . #t) (vidlang . #t))) (source . "git://github.com/videolang/video#stable") (tags . ("video" "vidlang")) (versions . #hash((default . #hasheq((checksum . "ca7db7f85ab7f19f91e1f63907c275fecdc39349") (source . "git://github.com/videolang/video#stable") (source_url . "http://github.com/videolang/video/tree/master#stable"))))))) ("rackterm" . #hasheq((author . "willghatch@gmail.com") (authors . ("willghatch@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackterm.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rackterm.txt"))) (checksum . "56f08b3acac1cd7f014625439bb1b980b3f91364") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "draw-lib" "gui-lib" "rackunit-lib" "scheme-lib")) (description . "Terminal emulator library (currently unstable and undocumented) and simple frontend.  Run racket -l rackterm/xterm to run.") (implies . ()) (last-checked . 1522414663) (last-edit . 1433788188) (last-updated . 1507930214) (modules . ((lib "rackterm/private/256color.rkt") (lib "rackterm/private/terminal.rkt") (lib "rackterm/private/fun-terminal.rkt") (lib "rackterm/private/pty.rkt") (lib "rackterm/private/terminal-canvas.rkt") (lib "rackterm/xterm.rkt") (lib "rackterm/private/term-key-event.rkt") (lib "rackterm/private/console-code-parse.rkt") (lib "rackterm/private/shell-trampoline.rkt") (lib "rackterm/private/cell.rkt"))) (name . "rackterm") (nix-sha256 . "0znawasm6gf8bnc547ikbsvm9nzmnklca6qw8kd1mrdwc7vsmzbb") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:willghatch@gmail.com . #t) (ring:1 . #t) (terminal . #t))) (source . "git://github.com/willghatch/rackterm") (tags . ("terminal")) (versions . #hash((default . #hasheq((checksum . "56f08b3acac1cd7f014625439bb1b980b3f91364") (source . "git://github.com/willghatch/rackterm") (source_url . "http://github.com/willghatch/rackterm/tree/master"))))))) ("draw-test" . #hash((author . "mflatt@racket-lang.org") (checksum . "90ba1f3be57ec702d5046829e180365233435c10") (dependencies . ("base" "racket-index" "scheme-lib" "draw-lib" "racket-test" "sgl" "gui-lib" "rackunit-lib" "pconvert-lib" "compatibility-lib" "sandbox-lib")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "draw-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/draw-test.zip") (tags . ()))) ("measures" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "measures" "doc/measures@measures/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/measures.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/measures.txt"))) (checksum . "f75e2361a767cab6fb662c761cc93d15b00c964a") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "at-exp-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Units and measures with basic arithmetic operations.") (implies . ()) (last-checked . 1522414434) (last-edit . 1383054219) (last-updated . 1516476620) (modules . ((lib "measures/tests/test-measure.rkt") (lib "measures/functions.rkt") (lib "measures/default-units.rkt") (lib "measures/main.rkt") (lib "measures/lang.rkt") (lib "measures/convert.rkt") (lib "measures/README.scrbl") (lib "measures/tests/test-convert.rkt") (lib "measures/measure.rkt") (lib "measures/private/fetch-parse-elements.rkt") (lib "measures/chemical-elements.rkt"))) (name . "measures") (nix-sha256 . "183vsj914zkvpnbrfk4s8bid4rlpi3c9z40r9y06zmryi9c8rins") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:laurent.orseau@gmail.com . #t) (math . #t) (ring:1 . #t))) (source . "github://github.com/Metaxal/measures/master") (tags . ("math")) (versions . #hash((default . #hasheq((checksum . "f75e2361a767cab6fb662c761cc93d15b00c964a") (source . "github://github.com/Metaxal/measures/master") (source_url . "http://github.com/Metaxal/measures/tree/master"))))))) ("numformat-old" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "numformat-old" "doc/numformat-old@numformat-old/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/numformat-old.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/numformat-old.txt"))) (checksum . "e0b44f190a7a8c03169e4671a5d15cec5a619598") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "overeasy")) (description . "Number Formatting") (implies . ()) (last-checked . 1522414505) (last-edit . 1456794591) (last-updated . 1502816197) (modules . ((lib "numformat-old/numformat-old.scrbl") (lib "numformat-old/main.rkt"))) (name . "numformat-old") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (finance . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/numformat-old.zip") (tags . ("finance")) (versions . #hash((default . #hasheq((checksum . "e0b44f190a7a8c03169e4671a5d15cec5a619598") (source . "http://www.neilvandyke.org/racket/numformat-old.zip") (source_url . "http://www.neilvandyke.org/racket/numformat-old.zip"))))))) ("remote-shell" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/remote-shell.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/remote-shell.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . ("remote-shell-lib" "remote-shell-doc")) (description . "Tools for running on remote and virtual-machine hosts") (implies . ("remote-shell-lib" "remote-shell-doc")) (last-checked . 1522414670) (last-edit . 1417307461) (last-updated . 1515435510) (modules . ()) (name . "remote-shell") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ()) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) (default . #hasheq((checksum . "4829323916d295d4d11faa9af9b60303b599e872") (source . "git://github.com/racket/remote-shell/?path=remote-shell") (source_url . "git://github.com/racket/remote-shell/?path=remote-shell"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("formica" . #hasheq((author . "samsergey@yandex.ru") (authors . ("samsergey@yandex.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/formica.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "/var/tmp/15224178721522417872531-samsergey_formica_master/info.rkt:5:0: require: bad syntax\n  in: (require string-constants)\n  context...:\n   standard-module-name-resolver\n   /home/pkgserver/racket/collects/setup/getinfo.rkt:33:0\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:397:3\n   /home/pkgserver/racket/collects/pkg/private/content.rkt:39:0: get-pkg-content20\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:397:3\n   /home/pkgserver/pkg-index/official/update.rkt:114:0: update-from-content\n   /home/pkgserver/racket/collects/racket/private/more-scheme.rkt:261:28\n   /home/pkgserver/racket/collects/racket/private/list.rkt:264:4: loop\n   /home/pkgserver/pkg-index/official/update.rkt:137:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:138:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:154:22\n") (conflicts . ()) (dependencies . ()) (description . "\"Functionally oriented\" educational language") (implies . ()) (last-checked . 1522417875) (last-edit . 1482286917) (last-updated . 1522417875) (modules . ()) (name . "formica") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-tag: . #t) (author:samsergey@yandex.ru . #t) (ring:1 . #t))) (source . "git://github.com/samsergey/formica") (tags . ()) (versions . #hash((default . #hasheq((checksum . "") (source . "git://github.com/samsergey/formica") (source_url . "http://github.com/samsergey/formica/tree/master"))))))) ("aosd" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/aosd.txt") (test-failure-log . "server/built/test-fail/aosd.txt") (test-success-log . #f))) (checksum . "7ab51262a256a324b062d7b407cb5341d1f41f69") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "draw-lib" "x11")) (description . "FFI bindings to the Atheme Project's libaosd") (implies . ()) (last-checked . 1522417871) (last-edit . 1418738230) (last-updated . 1502812271) (modules . ((lib "aosd/main.rkt") (lib "aosd/aosd.rkt") (lib "aosd/aosd-dc.rkt"))) (name . "aosd") (nix-sha256 . "0wnickk2axhprdjx1dihvg226f4l6pmky8pafgsc55gkj8pj1jx6") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:asumu@ccs.neu.edu . #t) (ffi . #t) (graphics . #t) (ring:1 . #t))) (source . "github://github.com/takikawa/racket-aosd/master") (tags . ("ffi" "graphics")) (versions . #hash((default . #hasheq((checksum . "7ab51262a256a324b062d7b407cb5341d1f41f69") (source . "github://github.com/takikawa/racket-aosd/master") (source_url . "http://github.com/takikawa/racket-aosd/tree/master"))))))) ("chk-doc" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "chk" "doc/chk@chk-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/chk-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/chk-doc.txt"))) (checksum . "613dad8bf51d1b9d83bdbd99ca3fe52c18e62ff7") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "sandbox-lib" "scribble-lib" "racket-doc" "chk-lib")) (description . "a minimal tester") (implies . ()) (last-checked . 1522414313) (last-edit . 1505750939) (last-updated . 1505750939) (modules . ((lib "chk/chk.scrbl"))) (name . "chk-doc") (nix-sha256 . "0kw3xb8316ygcczjpf90p9bpdfkgaddiwk4kr6jchnhgsh1ana46") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/jeapostrophe/chk?path=chk-doc") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "613dad8bf51d1b9d83bdbd99ca3fe52c18e62ff7") (source . "git://github.com/jeapostrophe/chk?path=chk-doc") (source_url . "http://github.com/jeapostrophe/chk/tree/master?path=chk-doc"))))))) ("typed-map-test" . #hasheq((author . "georges.duperon@gmail.com") (authors . ("georges.duperon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-map-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-map-test.txt"))) (checksum . "c9c5a236f4e32d9391df3edffdf9b1a55401fe31") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "typed-map-lib" "aful")) (description . "Tests for typed-map") (implies . ()) (last-checked . 1522414695) (last-edit . 1501078564) (last-updated . 1517062738) (modules . ((lib "typed-map/test/test-map.rkt") (lib "typed-map/test/gh-bug-2.rkt"))) (name . "typed-map-test") (nix-sha256 . "150agc51y1kvrarg0n6r2x6n3awnvivqj5k78gx9ngr8q31zl83f") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:georges.duperon@gmail.com . #t) (ring:1 . #t) (tests . #t) (typed-map . #t))) (source . "https://github.com/jsmaniac/typed-map.git?path=typed-map-test") (tags . ("tests" "typed-map")) (versions . #hash((default . #hasheq((checksum . "c9c5a236f4e32d9391df3edffdf9b1a55401fe31") (source . "https://github.com/jsmaniac/typed-map.git?path=typed-map-test") (source_url . "https://github.com/jsmaniac/typed-map.git?path=typed-map-test"))))))) ("raw-string" . #hasheq((author . "cmpitg@gmail.com") (authors . ("cmpitg@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raw-string.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raw-string.txt"))) (checksum . "b2745daf6da26c58b0138ab3ec0c20c1133e0ab6") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "Raw string support without at-exp") (implies . ()) (last-checked . 1522414666) (last-edit . 1390250045) (last-updated . 1502816382) (modules . ((lib "raw-string/raw-string/lang/reader.rkt") (lib "raw-string/raw-string/lang/reader-extension.rkt"))) (name . "raw-string") (nix-sha256 . "06hlnq4pmcjqyb8mnh06d8y7clxl2z07hl0z42ff24a6x1ggg4sw") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:cmpitg@gmail.com . #t) (language . #t) (ring:1 . #t))) (source . "github://github.com/cmpitg/racket-raw-string/master") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "b2745daf6da26c58b0138ab3ec0c20c1133e0ab6") (source . "github://github.com/cmpitg/racket-raw-string/master") (source_url . "http://github.com/cmpitg/racket-raw-string/tree/master"))))))) ("racket-processing" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/racket-processing.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-processing.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-processing.txt"))) (checksum . "c4c51b528fa10fe69f89cc7b7c27bb3388ad11c7") (checksum-error . #f) (conflicts . ()) (dependencies . ("racket-to")) (description . "Allows processing to be written with Lispy syntax in DrRacket.  Depends on the racket-to package, which transpiles to processing.") (implies . ()) (last-checked . 1522414607) (last-edit . 1515359889) (last-updated . 1516238294) (modules . ((lib "racket-processing/main.rkt") (lib "racket-processing/processing-module.rkt"))) (name . "racket-processing") (nix-sha256 . "0q8y6qqz3xk5fsibiqs92a8iziv3zd21rklpnfrann7bb7xi1m95") (ring . 2) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:stephen@thoughtstem.com . #t) (education . #t) (ring:2 . #t))) (source . "https://github.com/thoughtstem/racket-processing.git") (tags . ("education")) (versions . #hash((default . #hasheq((checksum . "c4c51b528fa10fe69f89cc7b7c27bb3388ad11c7") (source . "https://github.com/thoughtstem/racket-processing.git") (source_url . "https://github.com/thoughtstem/racket-processing.git"))))))) ("protobj" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "protobj" "doc/protobj@protobj/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/protobj.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/protobj.txt"))) (checksum . "4e2755403b30e7746fa4ffe4688ba37c11bd2eb5") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "compatibility-lib" "srfi-lib" "overeasy" "racket-doc" "scribble-lib")) (description . "Prototype-Delegation Object Model") (implies . ()) (last-checked . 1522414537) (last-edit . 1456786908) (last-updated . 1502816331) (modules . ((lib "protobj/main.rkt") (lib "protobj/protobj.scrbl"))) (name . "protobj") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:neil@neilvandyke.org . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/protobj.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4e2755403b30e7746fa4ffe4688ba37c11bd2eb5") (source . "http://www.neilvandyke.org/racket/protobj.zip") (source_url . "http://www.neilvandyke.org/racket/protobj.zip"))))))) ("ftree" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ftree" "doc/ftree@ftree/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ftree.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ftree.txt"))) (checksum . "e2bd3b1be6df49409e5110d96a26029797c71562") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Finger Trees") (implies . ()) (last-checked . 1522414402) (last-edit . 1369194370) (last-updated . 1502816071) (modules . ((lib "ftree/intervaltree/main.rkt") (lib "ftree/pqueue/main.rkt") (lib "ftree/orderedseq/main.rkt") (lib "ftree/pqueue/pqueue.rkt") (lib "ftree/tests/ftree-tests.rkt") (lib "ftree/tests/itree-tests.rkt") (lib "ftree/ftree/ftree.rkt") (lib "ftree/tests/oseq-tests.rkt") (lib "ftree/intervaltree/intervaltree.rkt") (lib "ftree/tests/raseq-tests.rkt") (lib "ftree/raseq/main.rkt") (lib "ftree/tests/pqueue-tests.rkt") (lib "ftree/doc/ftree.scrbl") (lib "ftree/raseq/raseq.rkt") (lib "ftree/ftree/main.rkt") (lib "ftree/orderedseq/orderedseq.rkt"))) (name . "ftree") (nix-sha256 . "190pgay1088q5ydxhq4bcz87iyiic73nxslyv2w6bgn2i39shmwj") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:stchang@racket-lang.org . #t) (data . #t) (ring:1 . #t))) (source . "github://github.com/stchang/ftree/master") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "e2bd3b1be6df49409e5110d96a26029797c71562") (source . "github://github.com/stchang/ftree/master") (source_url . "http://github.com/stchang/ftree/tree/master"))))))) ("readline" . #hash((author . "mflatt@racket-lang.org") (checksum . "b4938f521213f777ded05d86fa234e6028dda243") (dependencies . ("readline-lib" "readline-doc")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "readline") (source . "https://download.racket-lang.org/releases/6.12/pkgs/readline.zip") (tags . ()))) ("racket-immutable" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/racket-immutable.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-immutable.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-immutable.txt"))) (checksum . "7ae70d28f2cdc32bdde265b36f7b7605446af26d") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "operations that return immutable strings, immutable byte-strings, and immutable vectors") (implies . ()) (last-checked . 1522414573) (last-edit . 1501614789) (last-updated . 1502816349) (modules . ((lib "racket-immutable/lang.rkt") (lib "racket-immutable/base/lang.rkt") (lib "racket-immutable/test/immutable-string.rkt") (lib "racket-immutable/immutable.rkt") (lib "racket-immutable/base/lang/reader.rkt") (lib "racket-immutable/lang/reader.rkt"))) (name . "racket-immutable") (nix-sha256 . "0ljihdsdzr3kndp9i6fpr1wv085n4jijgq27khakkm2vfi67q6xf") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:alexander@knauth.org . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/racket-immutable") (tags . ()) (versions . #hash((default . #hasheq((checksum . "7ae70d28f2cdc32bdde265b36f7b7605446af26d") (source . "git://github.com/AlexKnauth/racket-immutable") (source_url . "http://github.com/AlexKnauth/racket-immutable/tree/master"))))))) ("roomba" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "roomba" "doc/roomba@roomba/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/roomba.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/roomba.txt"))) (checksum . "7d3968beb6d16886038e6b3875144d074990ef33") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "scribble-lib" "scribble-lib" "racket-doc" "overeasy")) (description . "iRobot Roomba/Create Interface") (implies . ()) (last-checked . 1522414672) (last-edit . 1456463423) (last-updated . 1502816404) (modules . ((lib "roomba/roomba-doc-utils.rkt") (lib "roomba/main.rkt") (lib "roomba/roomba.rkt") (lib "roomba/roomba.scrbl"))) (name . "roomba") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (ring:1 . #t) (robotics . #t))) (source . "http://www.neilvandyke.org/racket/roomba.zip") (tags . ("robotics")) (versions . #hash((default . #hasheq((checksum . "7d3968beb6d16886038e6b3875144d074990ef33") (source . "http://www.neilvandyke.org/racket/roomba.zip") (source_url . "http://www.neilvandyke.org/racket/roomba.zip"))))))) ("sonic-pi" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sonic-pi" "doc/sonic-pi@sonic-pi/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sonic-pi.txt") (test-failure-log . "server/built/test-fail/sonic-pi.txt") (test-success-log . #f))) (checksum . "de70c9169b7bb6b6764c513c6caac25f533c79dc") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "osc" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "htdp-lib" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "For now, this package starts scsynth just like sonic pi does, and can make a few sounds.") (implies . ()) (last-checked . 1522414680) (last-edit . 1520224946) (last-updated . 1502816437) (modules . ((lib "sonic-pi/scsynth/note.rkt") (lib "sonic-pi/lsonic-example.rkt") (lib "sonic-pi/examples/uses-go.rkt") (lib "sonic-pi/scsynth/scsynth-abstraction.rkt") (lib "sonic-pi/scsynth/note-name.rkt") (lib "sonic-pi/note.rkt") (lib "sonic-pi/scsynth/start-scsynth.rkt") (lib "sonic-pi/sonic-pi.scrbl") (lib "sonic-pi/examples/chord-notes-fwoosh.rkt") (lib "sonic-pi/scsynth/scsynth-communication.rkt") (lib "sonic-pi/go.rkt") (lib "sonic-pi/lsonic.rkt"))) (name . "sonic-pi") (nix-sha256 . "18grfs28akg2k8pc3xwsb77pamk9q1hwd35vz42apn9x88rcq62h") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audio . #t) (author:clements@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/jbclements/sonic-pi.git") (tags . ("audio")) (versions . #hash((default . #hasheq((checksum . "de70c9169b7bb6b6764c513c6caac25f533c79dc") (source . "https://github.com/jbclements/sonic-pi.git") (source_url . "https://github.com/jbclements/sonic-pi.git"))))))) ("github" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/github.txt") (test-failure-log . "server/built/test-fail/github.txt") (test-success-log . #f))) (checksum . "3dcabdece43c6f46050966a51ad237c75032cd17") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "drracket-plugin-lib" "gui-lib")) (description . "Github Bindings") (implies . ()) (last-checked . 1522414404) (last-edit . 1405267534) (last-updated . 1502816081) (modules . ((lib "github/main.rkt") (lib "github/tool.rkt") (lib "github/gui.rkt"))) (name . "github") (nix-sha256 . "0q02npjxcs5n1kv5dmn3h6y6f2sx2mbf60w2s43hxkr25m7jngy7") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (api . #t) (author:samth@ccs.neu.edu . #t) (github . #t) (ring:1 . #t))) (source . "git://github.com/samth/github.rkt") (tags . ("api" "github")) (versions . #hash((default . #hasheq((checksum . "3dcabdece43c6f46050966a51ad237c75032cd17") (source . "git://github.com/samth/github.rkt") (source_url . "http://github.com/samth/github.rkt/tree/master"))))))) ("xrepl-doc" . #hash((author . "eli@racket-lang.org") (checksum . "b2a1543272b452fd1f3c9aef7403e0556bcfe937") (dependencies . ("base" "sandbox-lib" "scribble-lib" "errortrace-doc" "macro-debugger" "profile-doc" "readline-doc" "macro-debugger-text-lib" "profile-lib" "readline-lib" "xrepl-lib" "racket-doc")) (description . "eli@racket-lang.org") (modules . ()) (name . "xrepl-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/xrepl-doc.zip") (tags . ()))) ("vlc" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "vlc" "doc/vlc@vlc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/vlc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/vlc.txt"))) (checksum . "e485bb6cef1936e0587f2115dd7d2c1cffd4c832") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "overeasy" "racket-doc" "scribble-lib")) (description . "VideoLAN VLC Media Player Control") (implies . ()) (last-checked . 1522414700) (last-edit . 1456645661) (last-updated . 1502816520) (modules . ((lib "vlc/main.rkt") (lib "vlc/vlc.scrbl"))) (name . "vlc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (media . #t) (ring:1 . #t) (video . #t))) (source . "http://www.neilvandyke.org/racket/vlc.zip") (tags . ("media" "video")) (versions . #hash((default . #hasheq((checksum . "e485bb6cef1936e0587f2115dd7d2c1cffd4c832") (source . "http://www.neilvandyke.org/racket/vlc.zip") (source_url . "http://www.neilvandyke.org/racket/vlc.zip"))))))) ("treap" . #hasheq((author . "snwhiteh@uwaterloo.ca") (authors . ("snwhiteh@uwaterloo.ca")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/treap.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/treap.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/treap.txt"))) (checksum . "e703ae7f1bec7a7131eeb2e9e5e6b488c4b45d7e") (checksum-error . #f) (conflicts . ()) (dependencies . ()) (description . "Balanced binary search trees implemented through treaps") (implies . ()) (last-checked . 1522414693) (last-edit . 1476043556) (last-updated . 1476043536) (modules . ((lib "treap/treap.rkt"))) (name . "treap") (nix-sha256 . "0ai87bhaqclrck7fzabgyxgxd7iywhji1lnpl7v7c2ya0bi0b1mk") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:snwhiteh@uwaterloo.ca . #t) (ring:1 . #t))) (source . "git://github.com/spencereir/treap") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e703ae7f1bec7a7131eeb2e9e5e6b488c4b45d7e") (source . "git://github.com/spencereir/treap") (source_url . "http://github.com/spencereir/treap/tree/master"))))))) ("gui-x86_64-macosx" . #hash((author . "mflatt@racket-lang.org") (checksum . "b1efa5b1c2ca2e50cf71913bf9f315dcab8afc4f") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "gui-x86_64-macosx") (source . "https://download.racket-lang.org/releases/6.12/pkgs/gui-x86_64-macosx.zip") (tags . ()))) ("dotmethod" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dotmethod" "doc/dotmethod@dotmethod/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dotmethod.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dotmethod.txt"))) (checksum . "e427237130d9b530d935269a6506c8cdeccc765c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "afl" "postfix-dot-notation" "sweet-exp" "mutable-match-lambda" "my-cond" "racket-doc" "rackunit-lib" "scribble-code-examples" "scribble-lib")) (description . "obj.method(x) in racket using mutable-match-lambda") (implies . ()) (last-checked . 1522414381) (last-edit . 1472014564) (last-updated . 1502815907) (modules . ((lib "dotmethod/lang/reader.rkt") (lib "dotmethod/dotmethod.rkt") (lib "dotmethod/tests/test-require.rkt") (lib "dotmethod/tests/test-lang.rkt") (lib "dotmethod/scribblings/dotmethod.scrbl"))) (name . "dotmethod") (nix-sha256 . "11q2f3b599r8jwwhhczgk74dyq6b50r9z75850ks8j54ngllnm72") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (deprecated . #t) (ring:1 . #t) (syntax . #t))) (source . "git://github.com/AlexKnauth/dotmethod") (tags . ("deprecated" "syntax")) (versions . #hash((default . #hasheq((checksum . "e427237130d9b530d935269a6506c8cdeccc765c") (source . "git://github.com/AlexKnauth/dotmethod") (source_url . "http://github.com/AlexKnauth/dotmethod/tree/master"))))))) ("snip" . #hash((author . "mflatt@racket-lang.org") (checksum . "415b64ba36560b8ab177d7d3d97cd640136e30c1") (dependencies . ("snip-lib" "gui-doc")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "snip") (source . "https://download.racket-lang.org/releases/6.12/pkgs/snip.zip") (tags . ()))) ("htdp-json" . #hasheq((author . "samth@ccs.neu.edu ccshan@indiana.edu") (authors . ("samth@ccs.neu.edu" "ccshan@indiana.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "htdp-json" "doc/htdp-json@htdp-json/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/htdp-json.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/htdp-json.txt"))) (checksum . "f7ea3af452a6794f907069c3015b1c68f6b35c55") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib" "htdp-lib")) (description . "A library for teaching with JSON") (implies . ()) (last-checked . 1522414416) (last-edit . 1509457385) (last-updated . 1509998484) (modules . ((lib "2htdp/scribblings/htdp-json.scrbl") (lib "2htdp/json.rkt"))) (name . "htdp-json") (nix-sha256 . "0n95izcfdqflsm63fjnqhhm09ixviflzndwcfx6zi2p8lxydf1yn") (ring . 2) (search-terms . #hasheq((2htdp . #t) (:build-success: . #t) (:docs: . #t) (author:ccshan@indiana.edu . #t) (author:samth@ccs.neu.edu . #t) (json . #t) (ring:2 . #t))) (source . "https://github.com/samth/htdp-json.git") (tags . ("2htdp" "json")) (versions . #hash((default . #hasheq((checksum . "f7ea3af452a6794f907069c3015b1c68f6b35c55") (source . "https://github.com/samth/htdp-json.git") (source_url . "https://github.com/samth/htdp-json.git"))))))) ("br-parser-tools" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/br-parser-tools.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/br-parser-tools.txt"))) (checksum . "747c760eb56eaddd9c5aca1ab2a93bd1da4b5713") (checksum-error . #f) (conflicts . ()) (dependencies . ("br-parser-tools-lib" "br-parser-tools-doc")) (description . "fork of parser-tools for Beautiful Racket") (implies . ("br-parser-tools-lib" "br-parser-tools-doc")) (last-checked . 1522414311) (last-edit . 1487700414) (last-updated . 1521839802) (modules . ()) (name . "br-parser-tools") (nix-sha256 . "05mh65bmx86181jlf376nnz85xs20si3nrapn71hh4v370iwrgi7") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mb@mbtype.com . #t) (ring:1 . #t))) (source . "git://github.com/mbutterick/brag/?path=br-parser-tools/br-parser-tools") (tags . ()) (versions . #hash((default . #hasheq((checksum . "747c760eb56eaddd9c5aca1ab2a93bd1da4b5713") (source . "git://github.com/mbutterick/brag/?path=br-parser-tools/br-parser-tools") (source_url . "git://github.com/mbutterick/brag/?path=br-parser-tools/br-parser-tools"))))))) ("beautiful-racket-demo" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/beautiful-racket-demo.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/beautiful-racket-demo.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/beautiful-racket-demo.txt"))) (checksum . "3a6f7c407a3a2735f8112b47a696c086915c6eb6") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "sugar" "beautiful-racket-lib" "rackunit-lib" "brag" "br-parser-tools-lib" "srfi-lib" "draw-lib" "syntax-color-lib" "gui-lib" "racket-doc" "scribble-lib")) (description . "Sample projects for “Beautiful Racket”") (implies . ()) (last-checked . 1522414305) (last-edit . 1485566486) (last-updated . 1521832568) (modules . ((lib "hdl-demo/DMux4Way-test.rkt") (lib "wires-demo/puzzle.rkt") (lib "jsonic-demo-2/parser.rkt") (lib "basic-demo-2/struct.rkt") (lib "stackerizer-demo/test-sources.rkt") (lib "basic-demo-3/sample-gosub.rkt") (lib "funstacker-demo/funstacker-h2.rkt") (lib "hdl-demo/Or.tst.rkt") (lib "basic-demo-3/expander.rkt") (lib "basic-demo-3/go.rkt") (lib "basic-demo-2/private/sample-pseudocode.rkt") (lib "funstacker-demo/test-sources.rkt") (lib "basic-demo-2a/misc.rkt") (lib "hdl-demo/Dmux4Way.hdl.rkt") (lib "basic-demo-3/misc.rkt") (lib "hdl-tst-demo/parser.rkt") (lib "basic-demo-2/expr.rkt") (lib "hdl-demo/DMux4Way.tst.rkt") (lib "hdl-demo/Not.tst.rkt") (lib "basic-demo-3/tokenizer.rkt") (lib "bf-demo/expander-slow.rkt") (lib "basic-demo/tokenizer.rkt") (lib "basic-demo/test-parser.rkt") (lib "basic-demo-2/sample-var.rkt") (lib "chip8-demo/chip8.rkt") (lib "bf-demo/atsign.rkt") (lib "jsonic-demo/expander.rkt") (lib "bf-demo/test-parser.rkt") (lib "basic-demo-2/parser.rkt") (lib "basic-demo-3/sample-math.rkt") (lib "funstacker-demo/funstacker.rkt") (lib "hdl-demo/Not.tst-sexp.rkt") (lib "hdl-demo/Dmux.tst.rkt") (lib "jsonic-demo-3/jsonic-test.rkt") (lib "basic-demo/parse-only.rkt") (lib "basic-demo-3/sample-shell.rkt") (lib "txtadv-demo/world-test.rkt") (lib "txtadv-demo/5-lang/txtadv-reader.rkt") (lib "basic-demo-2/sample.rkt") (lib "txtadv-demo/6-color/reader.rkt") (lib "basic-demo/private/sample-pseudocode.rkt") (lib "bf-demo/main.rkt") (lib "bf-demo/parser-tester.rkt") (lib "jsonic-demo-3/reader.rkt") (lib "basic-demo-nth/basic-test.rkt") (lib "stacker-demo/stacker-test.rkt") (lib "stackerizer-demo/stackerizer-test.rkt") (lib "hdl-demo/Nand.tst.rkt") (lib "basic-demo-2/main.rkt") (lib "txtadv-demo/2-modules/txtadv.rkt") (lib "bf-demo/expander-imperative.rkt") (lib "basic-demo-2a/expr.rkt") (lib "basic-demo-2/colorer.rkt") (lib "basic-demo-2a/tokenizer.rkt") (lib "hdl-demo/Mux.tst.rkt") (lib "basic-demo-3/main.rkt") (lib "basic-demo-2/test-sources.rkt") (lib "hdl-demo/Nand.hdl.rkt") (lib "basic-demo-3/report-args.rkt") (lib "basic-demo-2/sample-for.rkt") (lib "txtadv-demo/2-modules/world.rkt") (lib "jsonic-demo-3/colorer.rkt") (lib "hdl-demo/Toffoli.hdl.rkt") (lib "basic-demo/test-sources.rkt") (lib "basic-demo-3/sample-input.rkt") (lib "txtadv-demo/1-monolith/txtadv+world.rkt") (lib "txtadv-demo/5-lang/txtadv.rkt") (lib "hdl-demo/Fanout.hdl.rkt") (lib "basic-demo-2/sample-gosub.rkt") (lib "jsonic-demo-2/tokenizer.rkt") (lib "hdl-demo/parser.rkt") (lib "bf-demo/parser.rkt") (lib "jsonic-demo-3/parser-test.rkt") (lib "basic-demo-2/line.rkt") (lib "basic-demo-nth/colorer.rkt") (lib "hdl-demo/HalfAdder.tst.rkt") (lib "basic-demo-3/run.rkt") (lib "hdl-demo/main.rkt") (lib "basic-demo-2a/parser.rkt") (lib "jsonic-demo-3/expander.rkt") (lib "txtadv-demo/3-module-lang/world.rkt") (lib "jsonic-demo-3/tokenizer.rkt") (lib "basic-demo-3/parser.rkt") (lib "basic-demo-3/args.rkt") (lib "jsonic-demo-3/parser.rkt") (lib "basic-demo-3/private/sample-pseudocode.rkt") (lib "basic-demo-2/sample-math.rkt") (lib "basic-demo-2a/elements.rkt") (lib "jsonic-demo-2/parser-test.rkt") (lib "basic-demo/parse-stx.rkt") (lib "basic-demo-2a/lexer.rkt") (lib "txtadv-demo/tokenizer.rkt") (lib "basic-demo-3/sample-for.rkt") (lib "basic-demo-nth/main.rkt") (lib "basic-demo/lexer.rkt") (lib "basic-demo-2a/expander.rkt") (lib "jsonic-demo-2/expander.rkt") (lib "jsonic-demo/parser.rkt") (lib "basic-demo-2/sample-input.rkt") (lib "jsonic-demo/tokenizer.rkt") (lib "txtadv-demo/6-color/txtadv.rkt") (lib "basic-demo-3/test-sources.rkt") (lib "jsonic-demo/jsonic-test.rkt") (lib "basic-demo-2/cond.rkt") (lib "hdl-demo/HalfAdder.hdl.rkt") (lib "txtadv-demo/0-longhand/txtadv+world.rkt") (lib "txtadv-demo/4-type/world.rkt") (lib "txtadv-demo/expander.rkt") (lib "basic-demo-2/lexer.rkt") (lib "jsonic-demo/test-sources.rkt") (lib "basic-demo-3/line.rkt") (lib "jsonic-demo-3/scribblings/jsonic.scrbl") (lib "basic-demo-nth/importest.rkt") (lib "bf-demo/test-sources.rkt") (lib "stacker-demo/stacker.rkt") (lib "hdl-demo/Or.hdl.rkt") (lib "funstacker-demo/funstacker-test.rkt") (lib "basic-demo-2a/struct.rkt") (lib "basic-demo-3/sample.rkt") (lib "txtadv-demo/4-type/txtadv.rkt") (lib "wires-demo/main.rkt") (lib "hdl-demo/Xor.hdl.rkt") (lib "hdl-demo/Mux-test.rkt") (lib "txtadv-demo/world-sexp.rkt") (lib "basic-demo-3/sample-importer.rkt") (lib "basic-demo-3/parse-stx.rkt") (lib "bf-demo/hello.rkt") (lib "basic-demo-3/sample-provide.rkt") (lib "basic-demo-3/tokenize-only.rkt") (lib "basic-demo/main.rkt") (lib "wires-demo/test.rkt") (lib "basic-demo-2/tokenizer.rkt") (lib "bf-demo/test-reader.rkt") (lib "hdl-demo/Nand2.hdl.rkt") (lib "basic-demo-2/parse-only.rkt") (lib "txtadv-demo/6-color/color.rkt") (lib "basic-demo-3/parse-only.rkt") (lib "bf-demo/atsign-sexp.rkt") (lib "basic-demo-3/sample-import.rkt") (lib "bf-demo/expander.rkt") (lib "bf-demo/test-tokenizer.rkt") (lib "hdl-demo/Dmux-test.rkt") (lib "basic-demo-nth/parser.rkt") (lib "jsonic-demo-3/test-sources.rkt") (lib "stacker-demo/test-sources.rkt") (lib "wires-demo/test-sources.rkt") (lib "basic-demo-2/parse-stx.rkt") (lib "bf-demo/reader.rkt") (lib "basic-demo-2a/test-sources.rkt") (lib "hdl-demo/And.tst.rkt") (lib "txtadv-demo/reader.rkt") (lib "basic-demo-2/elements.rkt") (lib "basic-demo-3/cond.rkt") (lib "stackerizer-demo/stackerizer.rkt") (lib "txtadv-demo/5-lang/world.rkt") (lib "basic-demo-2/misc.rkt") (lib "hdl-demo/Mux.hdl.rkt") (lib "basic-demo/lexer-test.rkt") (lib "jsonic-demo-2/reader.rkt") (lib "jsonic-demo-2/buttons.rkt") (lib "jsonic-demo-3/indenter.rkt") (lib "basic-demo-3/structs.rkt") (lib "basic-demo-2a/main.rkt") (lib "basic-demo-3/sample-def.rkt") (lib "jsonic-demo-2/test-sources.rkt") (lib "basic-demo-2/expander.rkt") (lib "hdl-demo/bus-properties.rkt") (lib "txtadv-demo/6-color/world.rkt") (lib "jsonic-demo/reader.rkt") (lib "jsonic-demo-2/colorer.rkt") (lib "basic-demo-3/lexer.rkt") (lib "basic-demo-3/elements.rkt") (lib "txtadv-demo/world.rkt") (lib "hdl-demo/bus.rkt") (lib "basic-demo/expander.rkt") (lib "basic-demo-3/colorer.rkt") (lib "basic-demo-3/sample-cond.rkt") (lib "basic-demo-2a/run.rkt") (lib "hdl-demo/tokenizer.rkt") (lib "basic-demo/sample.rkt") (lib "txtadv-demo/parser.rkt") (lib "hdl-demo/DMux.hdl.rkt") (lib "hdl-demo/reader.rkt") (lib "hdl-tst-demo/expander.rkt") (lib "basic-demo-2/sample-cond.rkt") (lib "hdl-demo/Not-sexp.rkt") (lib "jsonic-demo-2/jsonic-test.rkt") (lib "basic-demo-2a/sample.rkt") (lib "basic-demo-3/expr.rkt") (lib "jsonic-demo/main.rkt") (lib "basic-demo-nth/tokenizer.rkt") (lib "basic-demo-nth/expander.rkt") (lib "basic-demo-2a/go.rkt") (lib "hdl-tst-demo/main.rkt") (lib "jsonic-demo-3/main.rkt") (lib "jsonic-demo-2/indenter.rkt") (lib "basic-demo-2/run.rkt") (lib "jsonic-demo-3/buttons.rkt") (lib "hdl-demo/And.hdl.rkt") (lib "basic-demo-2/go.rkt") (lib "hdl-demo/Xor.tst.rkt") (lib "hdl-tst-demo/tokenizer.rkt") (lib "basic-demo-3/struct.rkt") (lib "bf-demo/factorial.rkt") (lib "hdl-demo/Not.hdl.rkt") (lib "basic-demo-2a/line.rkt") (lib "hdl-demo/expander.rkt") (lib "basic-demo/parser.rkt") (lib "basic-demo/tokenize-only.rkt") (lib "basic-demo-3/setup.rkt") (lib "basic-demo-3/sample-exporter.rkt") (lib "jsonic-demo-2/main.rkt") (lib "txtadv-demo/3-module-lang/txtadv.rkt"))) (name . "beautiful-racket-demo") (nix-sha256 . "07z0vj3qzc37ywx12rik0zx6vk09bp1jk6g29kwrixqrqjg1fcc0") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:mb@mbtype.com . #t) (ring:1 . #t))) (source . "git://github.com/mbutterick/beautiful-racket/?path=beautiful-racket-demo") (tags . ()) (versions . #hash((default . #hasheq((checksum . "3a6f7c407a3a2735f8112b47a696c086915c6eb6") (source . "git://github.com/mbutterick/beautiful-racket/?path=beautiful-racket-demo") (source_url . "git://github.com/mbutterick/beautiful-racket/?path=beautiful-racket-demo"))))))) ("mordae" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mordae.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mordae.txt"))) (checksum . "01d86a7453241f438b01a37f991a28feeb43df8e") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "typed-racket-lib" "racket-doc" "typed-racket-lib")) (description . "Personal utilities, do not use directly!") (implies . ()) (last-checked . 1522414436) (last-edit . 1438605357) (last-updated . 1502816185) (modules . ((lib "mordae/evt.rkt") (lib "mordae/async.rkt") (lib "mordae/match.rkt") (lib "mordae/syntax.rkt"))) (name . "mordae") (nix-sha256 . "1kvqgk906mzbmijbr9cxwmski7dgw2bz3dnd65vhci1kg0cvppcy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t))) (source . "git://github.com/mordae/racket-mordae") (tags . ()) (versions . #hash((default . #hasheq((checksum . "01d86a7453241f438b01a37f991a28feeb43df8e") (source . "git://github.com/mordae/racket-mordae") (source_url . "http://github.com/mordae/racket-mordae/tree/master"))))))) ("quad-tree" . #hasheq((author . "matias@fortlogic.net") (authors . ("matias@fortlogic.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/quad-tree.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/quad-tree.txt"))) (checksum . "2cdb598e6c79e8499e545abc078d6f9a572ca8b0") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "scribble-lib" "racket-doc")) (description . "A fairly simple quad-tree implementation. Nothing terribly fancy. Currently rather unstable.") (implies . ()) (last-checked . 1522414538) (last-edit . 1476256469) (last-updated . 1502816341) (modules . ((lib "quad-tree/shared.rkt") (lib "quad-tree/scribblings/quad-tree.scrbl") (lib "quad-tree/misc/dispatch-case.rkt") (lib "quad-tree/quad-fruit-tree.rkt") (lib "quad-tree/quad-tree.rkt") (lib "quad-tree/main.rkt"))) (name . "quad-tree") (nix-sha256 . "1j8227lk3my4v86pjlz3dakjqfrmad6b38nlw0saskb04vipc7kg") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:matias@fortlogic.net . #t) (data . #t) (geometry . #t) (graphics . #t) (ring:1 . #t))) (source . "https://github.com/dented42/racket-quad-tree.git/?path=quad-tree") (tags . ("data" "geometry" "graphics")) (versions . #hash((default . #hasheq((checksum . "2cdb598e6c79e8499e545abc078d6f9a572ca8b0") (source . "https://github.com/dented42/racket-quad-tree.git/?path=quad-tree") (source_url . "https://github.com/dented42/racket-quad-tree.git/?path=quad-tree"))))))) ("beautiful-racket" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/beautiful-racket.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/beautiful-racket.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/beautiful-racket.txt"))) (checksum . "3a6f7c407a3a2735f8112b47a696c086915c6eb6") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "sugar" "beautiful-racket-lib" "beautiful-racket-demo" "rackunit-lib" "brag" "br-parser-tools-lib" "racket-doc")) (description . "Resources for the “Beautiful Racket” book") (implies . ()) (last-checked . 1522414305) (last-edit . 1483021032) (last-updated . 1521832567) (modules . ()) (name . "beautiful-racket") (nix-sha256 . "07z0vj3qzc37ywx12rik0zx6vk09bp1jk6g29kwrixqrqjg1fcc0") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:mb@mbtype.com . #t) (ring:1 . #t))) (source . "git://github.com/mbutterick/beautiful-racket/?path=beautiful-racket") (tags . ()) (versions . #hash((default . #hasheq((checksum . "3a6f7c407a3a2735f8112b47a696c086915c6eb6") (source . "git://github.com/mbutterick/beautiful-racket/?path=beautiful-racket") (source_url . "git://github.com/mbutterick/beautiful-racket/?path=beautiful-racket"))))))) ("live-free-or-die" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "live-free-or-die" "doc/live-free-or-die@live-free-or-die/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/live-free-or-die.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/live-free-or-die.txt"))) (checksum . "b6fbe5364c51eb793a7f88fb916e41506b1d519e") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "racket-doc" "scribble-lib")) (description . "Freedom from Typed Racket") (implies . ()) (last-checked . 1522414425) (last-edit . 1474511539) (last-updated . 1509742919) (modules . ((lib "live-free-or-die/main.rkt") (lib "live-free-or-die/tests/client-safe.rkt") (lib "live-free-or-die/tests/client-unsafe.rkt") (lib "live-free-or-die/live-free-or-die.scrbl") (lib "live-free-or-die/tests/server.rkt"))) (name . "live-free-or-die") (nix-sha256 . "0h90zfsk75fc1aa8vlm9dph1x40h30wsqqmaab345wj7if2whddy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (crashing . #t) (performance . #t) (ring:1 . #t) (unsafe . #t))) (source . "git://github.com/jeapostrophe/live-free-or-die") (tags . ("crashing" "performance" "unsafe")) (versions . #hash((default . #hasheq((checksum . "b6fbe5364c51eb793a7f88fb916e41506b1d519e") (source . "git://github.com/jeapostrophe/live-free-or-die") (source_url . "http://github.com/jeapostrophe/live-free-or-die/tree/master"))))))) ("typed-map" . #hasheq((author . "georges.duperon@gmail.com") (authors . ("georges.duperon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-map.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-map.txt"))) (checksum . "c9c5a236f4e32d9391df3edffdf9b1a55401fe31") (checksum-error . #f) (conflicts . ()) (dependencies . ("typed-map-lib" "typed-map-test" "typed-map-doc")) (description . "Type inference helper for map with Typed/Racket. Supports afl (rather the unhygienic variant, aful/unhygienic), un-annotated lambdas and polymorphic functions.") (implies . ("typed-map-lib" "typed-map-test" "typed-map-doc")) (last-checked . 1522414695) (last-edit . 1501078475) (last-updated . 1517062737) (modules . ()) (name . "typed-map") (nix-sha256 . "150agc51y1kvrarg0n6r2x6n3awnvivqj5k78gx9ngr8q31zl83f") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:georges.duperon@gmail.com . #t) (functional . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/jsmaniac/typed-map.git?path=typed-map") (tags . ("functional" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "c9c5a236f4e32d9391df3edffdf9b1a55401fe31") (source . "https://github.com/jsmaniac/typed-map.git?path=typed-map") (source_url . "https://github.com/jsmaniac/typed-map.git?path=typed-map"))))))) ("source-syntax" . #hash((author . "samth@racket-lang.org stamourv@racket-lang.org eli@racket-lang.org") (checksum . "af01289ab1b09f35451af5b0b8b215f46923222d") (dependencies . ("base")) (description . "samth@racket-lang.org stamourv@racket-lang.org eli@racket-lang.org") (modules . ()) (name . "source-syntax") (source . "https://download.racket-lang.org/releases/6.12/pkgs/source-syntax.zip") (tags . ()))) ("shell-completion" . #hash((author . "samth@racket-lang.org sstrickl@racket-lang.org stamourv@racket-lang.org") (checksum . "a0decd321e00f455439178dcbbc5ebf59392c1ed") (dependencies . ("base")) (description . "samth@racket-lang.org sstrickl@racket-lang.org stamourv@racket-lang.org") (modules . ()) (name . "shell-completion") (source . "https://download.racket-lang.org/releases/6.12/pkgs/shell-completion.zip") (tags . ()))) ("pict-snip" . #hash((author . "robby@racket-lang.org") (checksum . "cb7d13722537c1996ac9b81a88ba1b684bca1246") (dependencies . ("pict-snip-lib" "pict-snip-doc")) (description . "robby@racket-lang.org") (modules . ()) (name . "pict-snip") (source . "https://download.racket-lang.org/releases/6.12/pkgs/pict-snip.zip") (tags . ()))) ("pict-test" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (checksum . "7a31c1fb61348693419bd58829ce321414f4e09f") (dependencies . ("base" "pict-lib" "rackunit-lib" "htdp-lib" "draw-lib")) (description . "mflatt@racket-lang.org robby@racket-lang.org") (modules . ()) (name . "pict-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/pict-test.zip") (tags . ()))) ("r5rs-lib" . #hash((author . "mflatt@racket-lang.org") (checksum . "bb1e4352f17e912ac030d00f50dee4e2d89bbd95") (dependencies . ("scheme-lib" "base" "compatibility-lib")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "r5rs-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/r5rs-lib.zip") (tags . ()))) ("cpu-affinity" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cpu-affinity" "doc/cpu-affinity@cpu-affinity/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cpu-affinity.txt") (test-failure-log . "server/built/test-fail/cpu-affinity.txt") (test-success-log . #f))) (checksum . "bc6316cbc7bc3f2179ae569bfe7c23a53b62025f") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "compatibility-lib" "racket-doc" "compatibility-doc")) (description . "A library for getting/setting CPU affinity") (implies . ()) (last-checked . 1522414368) (last-edit . 1429301964) (last-updated . 1502815871) (modules . ((lib "cpu-affinity/windows.rkt") (lib "cpu-affinity/cpu-affinity.scrbl") (lib "cpu-affinity/test.rkt") (lib "cpu-affinity/unix.rkt") (lib "cpu-affinity/main.rkt") (lib "cpu-affinity/error.rkt"))) (name . "cpu-affinity") (nix-sha256 . "1nr8il3vx7b4rkp5rc2qi391q5py7v27pbp7zgvadfa6l9bcxqd9") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (ffi . #t) (os . #t) (ring:1 . #t))) (source . "git://github.com/takikawa/racket-cpu-affinity") (tags . ("ffi" "os")) (versions . #hash((default . #hasheq((checksum . "bc6316cbc7bc3f2179ae569bfe7c23a53b62025f") (source . "git://github.com/takikawa/racket-cpu-affinity") (source_url . "http://github.com/takikawa/racket-cpu-affinity/tree/master"))))))) ("dm" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dm" "doc/dm@dm/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dm.txt") (test-failure-log . "server/built/test-fail/dm.txt") (test-success-log . #f))) (checksum . "15b137ef72b0bf1f10cfd1d14e80e2472e8a5df4") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1" "libuuid" "racket-doc")) (description . "Linux Device Mapper bindings for Racket.") (implies . ()) (last-checked . 1522414381) (last-edit . 1405684510) (last-updated . 1502815906) (modules . ((lib "dm/parse.rkt") (lib "dm/dm.scrbl") (lib "dm/private/ffi.rkt") (lib "dm/main.rkt"))) (name . "dm") (nix-sha256 . "09dhdgkcpqybfrnnynn9028gsc84khplni0i7wgqx73pgmqs80cy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mordae@anilinux.org . #t) (ffi . #t) (linux . #t) (ring:1 . #t))) (source . "github://github.com/mordae/racket-dm/master") (tags . ("ffi" "linux")) (versions . #hash((default . #hasheq((checksum . "15b137ef72b0bf1f10cfd1d14e80e2472e8a5df4") (source . "github://github.com/mordae/racket-dm/master") (source_url . "http://github.com/mordae/racket-dm/tree/master"))))))) ("slideshow" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (checksum . "acf5ef7e5c5a1f155893c15e7851fe3bc78972d5") (dependencies . ("slideshow-lib" "slideshow-exe" "slideshow-plugin" "slideshow-doc")) (description . "mflatt@racket-lang.org robby@racket-lang.org") (modules . ()) (name . "slideshow") (source . "https://download.racket-lang.org/releases/6.12/pkgs/slideshow.zip") (tags . ()))) ("markparam-lib" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/markparam-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/markparam-lib.txt"))) (checksum . "f6393494334318ef497606001f2e83bab2c8c15d") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.2.900.4"))) (description . "a convenience library for continuation marks like parameters") (implies . ()) (last-checked . 1522414428) (last-edit . 1504535542) (last-updated . 1502816163) (modules . ((lib "markparam/main.rkt"))) (name . "markparam-lib") (nix-sha256 . "1fj9xn8s5b1n3qz881qibj29dhzbyjgkj2g0yxaav02580qgvxs0") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (continuation-marks . #t) (ring:1 . #t) (utility . #t))) (source . "git://github.com/jeapostrophe/markparam?path=markparam-lib") (tags . ("continuation-marks" "utility")) (versions . #hash((default . #hasheq((checksum . "f6393494334318ef497606001f2e83bab2c8c15d") (source . "git://github.com/jeapostrophe/markparam?path=markparam-lib") (source_url . "http://github.com/jeapostrophe/markparam/tree/master?path=markparam-lib"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("mzscheme-doc" . #hash((author . "mflatt@racket-lang.org") (checksum . "b6c74d204f848558cda44bc50bf811509390cfa0") (dependencies . ("base" "compatibility-lib" "r5rs-doc" "r5rs-lib" "racket-doc" "scheme-lib" "scribble-lib")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "mzscheme-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/mzscheme-doc.zip") (tags . ()))) ("glossolalia" . #hasheq((author . "rob.kleffner@gmail.com gamecodeshark@gmail.com") (authors . ("rob.kleffner@gmail.com" "gamecodeshark@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "glossolalia" "doc/glossolalia@glossolalia/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/glossolalia.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/glossolalia.txt"))) (checksum . "2f7d6c2865267aaee4709ca6640243b89ecf6c6d") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "math-lib" "brag" "beautiful-racket" "beautiful-racket-lib" "br-parser-tools-lib" "scribble-lib" "racket-doc")) (description . "A language for generating words according to sound and syllable rules. Has features for cross-syllable rules and phoneme occurence frequency.") (implies . ()) (last-checked . 1522414405) (last-edit . 1506451373) (last-updated . 1509984096) (modules . ((lib "glossolalia/examples/finnish-like.rkt") (lib "glossolalia/parser.rkt") (lib "glossolalia/tokenizer.rkt") (lib "glossolalia/lexer.rkt") (lib "glossolalia/examples/german-like.rkt") (lib "glossolalia/entry.rkt") (lib "glossolalia/examples/japanese-like.rkt") (lib "glossolalia/tokenize-only.rkt") (lib "glossolalia/examples/rotokas-like.rkt") (lib "glossolalia/roulette-wheel.rkt") (lib "glossolalia/scribblings/glossolalia.scrbl") (lib "glossolalia/to-html.rkt") (lib "glossolalia/examples/hawaiian-like.rkt") (lib "glossolalia/colorer.rkt") (lib "glossolalia/main.rkt") (lib "glossolalia/generator.rkt") (lib "glossolalia/parser-only.rkt") (lib "glossolalia/examples/test.rkt"))) (name . "glossolalia") (nix-sha256 . "0wvhb68gssk2w76y2dnybhhfqzw0c7fby37l824hjfw141zg08xk") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:gamecodeshark@gmail.com . #t) (author:rob.kleffner@gmail.com . #t) (language . #t) (ring:2 . #t))) (source . "git://github.com/robertkleffner/glossolalia") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "2f7d6c2865267aaee4709ca6640243b89ecf6c6d") (source . "git://github.com/robertkleffner/glossolalia") (source_url . "http://github.com/robertkleffner/glossolalia/tree/master"))))))) ("pollen-count" . #hasheq((author . "malcolm.still@gmail.com") (authors . ("malcolm.still@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pollen-count" "doc/pollen-count@pollen-count/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pollen-count.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pollen-count.txt"))) (checksum . "c4da923debcf40d0558ea4cb97c8a7bd4f35f34b") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "txexpr" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (last-checked . 1522414534) (last-edit . 1456768925) (last-updated . 1502816291) (modules . ((lib "pollen-count/main.rkt") (lib "pollen-count/scribblings/pollen-count.scrbl"))) (name . "pollen-count") (nix-sha256 . "123898dz12p3605zprs6bynlgimw73yqfi77dimy1bdp2kjynff4") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:malcolm.still@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/malcolmstill/pollen-count") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c4da923debcf40d0558ea4cb97c8a7bd4f35f34b") (source . "git://github.com/malcolmstill/pollen-count") (source_url . "http://github.com/malcolmstill/pollen-count/tree/master"))))))) ("cuecore" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cuecore" "doc/cuecore@cuecore/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cuecore.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cuecore.txt"))) (checksum . "826b05916b9f84601ef405ee36e6b9a843c42ea2") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "typed-racket-lib" "typed-racket-more" "mordae" "racket-doc" "typed-racket-doc" "typed-racket-lib")) (description . "CueCore Lighting Control") (implies . ()) (last-checked . 1522414371) (last-edit . 1453308885) (last-updated . 1502815875) (modules . ((lib "cuecore/main.rkt") (lib "cuecore/cuecore.scrbl"))) (name . "cuecore") (nix-sha256 . "1d1fmv6pf4c3dmg9gyv8qng6kmf9p0c3521nxmb5a8jfranxy5ij") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t))) (source . "git://github.com/mordae/racket-cuecore") (tags . ()) (versions . #hash((default . #hasheq((checksum . "826b05916b9f84601ef405ee36e6b9a843c42ea2") (source . "git://github.com/mordae/racket-cuecore") (source_url . "http://github.com/mordae/racket-cuecore/tree/master"))))))) ("json-socket" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/json-socket.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/json-socket.txt"))) (checksum . "0acf5117ed335133e30a4ab6593278a4534ac42e") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1")) (description . "JSON-Talking TCP Sockets") (implies . ()) (last-checked . 1522414422) (last-edit . 1404737271) (last-updated . 1502816144) (modules . ((lib "json-socket/main.rkt"))) (name . "json-socket") (nix-sha256 . "16xj5ny2146dmpql3izid78qqdx40h1gmdxs5fpfy1b8sg75rb1w") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t) (tcp . #t))) (source . "github://github.com/mordae/racket-json-socket/master") (tags . ("tcp")) (versions . #hash((default . #hasheq((checksum . "0acf5117ed335133e30a4ab6593278a4534ac42e") (source . "github://github.com/mordae/racket-json-socket/master") (source_url . "http://github.com/mordae/racket-json-socket/tree/master"))))))) ("pkg-dep-draw" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pkg-dep-draw" "doc/pkg-dep-draw@pkg-dep-draw/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pkg-dep-draw.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pkg-dep-draw.txt"))) (checksum . "10ccd5208aab1c54cab3fe767c48b98f87f1e79d") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "draw-lib" "gui-lib" "racket-doc" "scribble-lib")) (description . "") (implies . ()) (last-checked . 1522414513) (last-edit . 1408010820) (last-updated . 1502816260) (modules . ((lib "pkg-dep-draw/main.rkt") (lib "pkg-dep-draw/private/struct.rkt") (lib "pkg-dep-draw/pkg-dep-draw.scrbl") (lib "pkg-dep-draw/private/draw.rkt") (lib "pkg-dep-draw/private/cliques.rkt") (lib "pkg-dep-draw/private/closure.rkt") (lib "pkg-dep-draw/private/get-pkgs.rkt") (lib "pkg-dep-draw/private/gui.rkt") (lib "pkg-dep-draw/private/config.rkt"))) (name . "pkg-dep-draw") (nix-sha256 . "0hlmahw8z8cvyjdwl9j5x2a0jhj3x2pikl6bfdq36vs95l6627k8") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (author:mflatt@cs.utah.edu . #t) (graphics . #t) (gui . #t) (ring:1 . #t))) (source . "git://github.com/mflatt/pkg-dep-draw") (tags . ("graphics" "gui")) (versions . #hash((default . #hasheq((checksum . "10ccd5208aab1c54cab3fe767c48b98f87f1e79d") (source . "git://github.com/mflatt/pkg-dep-draw") (source_url . "http://github.com/mflatt/pkg-dep-draw/tree/master"))))))) ("cldr-dates-modern" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cldr-dates-modern" "doc/cldr-dates-modern@cldr-dates-modern/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cldr-dates-modern.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cldr-dates-modern.txt"))) (checksum . "c36282917247f6a069e553535f4619007cd7b6e5") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "cldr-core" "scribble-lib" "racket-doc")) (description . "API for cldr-dates-modern data set") (implies . ()) (last-checked . 1522414314) (last-edit . 1426994487) (last-updated . 1502812292) (modules . ((lib "cldr/scribblings/cldr-dates-modern.scrbl") (lib "cldr/dates-modern.rkt"))) (name . "cldr-dates-modern") (nix-sha256 . "1cvb57xj9g75kqb3laz35jknj79894yji9axwzyp7qrrpfwzc83g") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:zeppieri@gmail.com . #t) (cldr . #t) (l10n . #t) (ring:1 . #t))) (source . "git://github.com/97jaz/cldr-dates-modern") (tags . ("cldr" "l10n")) (versions . #hash((default . #hasheq((checksum . "c36282917247f6a069e553535f4619007cd7b6e5") (source . "git://github.com/97jaz/cldr-dates-modern") (source_url . "http://github.com/97jaz/cldr-dates-modern/tree/master"))))))) ("plt-web" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plt-web.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plt-web.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . ("plt-web-lib" "plt-web-doc")) (description . "Web-page creation libraries") (implies . ("plt-web-lib" "plt-web-doc")) (last-checked . 1522414532) (last-edit . 1417307461) (last-updated . 1502816286) (modules . ()) (name . "plt-web") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ()) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) (default . #hasheq((checksum . "5697a81d84117f9341686783b02299f74656918a") (source . "git://github.com/racket/plt-web/?path=plt-web") (source_url . "git://github.com/racket/plt-web/?path=plt-web"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("syntax-warn-base" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-warn-base.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-warn-base.txt"))) (checksum . "f00b27f92656f60d32853831ee905ceeb00693d9") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.4") "rackunit-lib")) (description . "Base library for defining and attaching syntax warnings") (implies . ()) (last-checked . 1522414689) (last-edit . 1473746021) (last-updated . 1502920413) (modules . ((lib "syntax/warn/private/syntax-format.rkt") (lib "syntax/warn/private/filter-index.rkt") (lib "syntax/warn/private/rackunit-string.rkt") (lib "syntax/warn/private/string-lines.rkt") (lib "syntax/warn/private/list.rkt") (lib "syntax/warn/private/string-pad.rkt") (lib "syntax/warn/private/warn-property.rkt") (lib "syntax/warn.rkt") (lib "syntax/warn/private/warn-config.rkt") (lib "syntax/warn/private/syntax-srcloc.rkt") (lib "syntax/warn/private/warn.rkt") (lib "syntax/warn/private/syntax-srcloc-test.rkt") (lib "syntax/warn/private/rackunit-syntax.rkt") (lib "syntax/warn/private/syntax-srcloc-data.rkt") (lib "syntax/warn/private/warn-module.rkt"))) (name . "syntax-warn-base") (nix-sha256 . "0py8h9yxlxfnqlppcy1rwjj8bmnxymkavhpgcd68m1bj6ng4dhfn") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jackhfirth@gmail.com . #t) (ring:1 . #t) (syntax . #t) (syntax-warn . #t))) (source . "git://github.com/jackfirth/syntax-warn?path=syntax-warn-base") (tags . ("syntax" "syntax-warn")) (versions . #hash((default . #hasheq((checksum . "f00b27f92656f60d32853831ee905ceeb00693d9") (source . "git://github.com/jackfirth/syntax-warn?path=syntax-warn-base") (source_url . "http://github.com/jackfirth/syntax-warn/tree/master?path=syntax-warn-base"))))))) ("kw-make-struct" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "kw-make-struct" "doc/kw-make-struct@kw-make-struct/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/kw-make-struct.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/kw-make-struct.txt"))) (checksum . "212153a2be827f66004f6c49403b2646b5539955") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "syntax-classes-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "like make from unstable/struct except allowing keywords, and it can also be a match pattern") (implies . ()) (last-checked . 1522414422) (last-edit . 1472189035) (last-updated . 1502816145) (modules . ((lib "kw-make-struct/docs/kw-make-struct.scrbl") (lib "kw-make-struct/main.rkt"))) (name . "kw-make-struct") (nix-sha256 . "1y6wwgignidswy7r1350pwla1s0a52mrdd8fhv1hi77sj17ifyj9") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (keywords . #t) (ring:1 . #t) (structs . #t))) (source . "git://github.com/AlexKnauth/kw-make-struct") (tags . ("keywords" "structs")) (versions . #hash((default . #hasheq((checksum . "212153a2be827f66004f6c49403b2646b5539955") (source . "git://github.com/AlexKnauth/kw-make-struct") (source_url . "http://github.com/AlexKnauth/kw-make-struct/tree/master"))))))) ("swindle" . #hash((author . "eli@racket-lang.org") (checksum . "af25a760e05bb254c5700dd8dab478ee4afdfbe2") (dependencies . ("scheme-lib" "base" "compatibility-lib" "drracket-plugin-lib" "gui-lib" "net-lib" "string-constants-lib" "compatibility-doc" "racket-doc" "scribble-lib")) (description . "eli@racket-lang.org") (modules . ()) (name . "swindle") (source . "https://download.racket-lang.org/releases/6.12/pkgs/swindle.zip") (tags . ()))) ("threading-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/threading-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/threading-lib.txt"))) (checksum . "de68f80c91b47b5860709a0bb31b462b8300eb09") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.3"))) (description . "implementation (no documentation) for “threading”") (implies . ()) (last-checked . 1522414692) (last-edit . 1497305814) (last-updated . 1502816484) (modules . ((lib "threading/main.rkt"))) (name . "threading-lib") (nix-sha256 . "03c7z97nn3l6033g99hhjmywrksf3ii4617kxnla8q8jsjpwzf81") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/threading?path=threading-lib") (tags . ()) (versions . #hash(("6.2.1" . #hasheq((checksum . "dee85e8d3cffaed85eb27bed8a8c61fc1eea8395") (source . "git://github.com/lexi-lambda/threading?path=threading-lib#compatibility-6.2") (source_url . "http://github.com/lexi-lambda/threading/tree/master?path=threading-lib#compatibility-6.2"))) (default . #hasheq((checksum . "de68f80c91b47b5860709a0bb31b462b8300eb09") (source . "git://github.com/lexi-lambda/threading?path=threading-lib") (source_url . "http://github.com/lexi-lambda/threading/tree/master?path=threading-lib"))) ("6.2" . #hasheq((checksum . "dee85e8d3cffaed85eb27bed8a8c61fc1eea8395") (source . "git://github.com/lexi-lambda/threading?path=threading-lib#compatibility-6.2") (source_url . "http://github.com/lexi-lambda/threading/tree/master?path=threading-lib#compatibility-6.2"))))))) ("parser-tools" . #hash((author . "mflatt@racket-lang.org") (checksum . "f6dad40e22701a05bed08ad46d4e831f05b42dad") (dependencies . ("parser-tools-lib" "parser-tools-doc")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "parser-tools") (source . "https://download.racket-lang.org/releases/6.12/pkgs/parser-tools.zip") (tags . ()))) ("rsvg" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rsvg" "doc/rsvg@rsvg/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rsvg.txt") (test-failure-log . "server/built/test-fail/rsvg.txt") (test-success-log . #f))) (checksum . "c326fe15679086b471fa529befa6b4241883271f") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "draw-lib" "gui-lib" "pict-lib" "pict-doc" "scribble-lib" "rackunit-lib" "scribble-lib" "pict-lib" "draw-doc" "racket-doc" "slideshow-doc")) (description . "FFI bindings to libRSVG, a library for loading SVG documents") (implies . ()) (last-checked . 1522414673) (last-edit . 1369787451) (last-updated . 1502816414) (modules . ((lib "rsvg/tests/tests.rkt") (lib "rsvg/rsvg.scrbl") (lib "rsvg/main.rkt") (lib "rsvg/rsvg.rkt"))) (name . "rsvg") (nix-sha256 . "1yfl4rvmdikla2sygvg2jqjj51c8g8bcy66bls03jqhss17zd013") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (graphics . #t) (ring:1 . #t) (svg . #t))) (source . "github://github.com/takikawa/racket-rsvg/master") (tags . ("graphics" "svg")) (versions . #hash((default . #hasheq((checksum . "c326fe15679086b471fa529befa6b4241883271f") (source . "github://github.com/takikawa/racket-rsvg/master") (source_url . "http://github.com/takikawa/racket-rsvg/tree/master"))))))) ("molis-hai" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "molis-hai" "doc/molis-hai@molis-hai/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/molis-hai.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/molis-hai.txt"))) (checksum . "2f07d97b5f7d5b7847e60b756ab6f15005dedbe4") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "typed-racket-lib" "typed-racket-more" "web-server-lib" "pfds" "rackunit-lib" "racket-doc")) (description . "This package includes the code associated with my Dickens-based (or any-corpus-based) password generator, Molis Hai. See also http://www.brinckerhoff.org/molis-hai/pwgen.html") (implies . ()) (last-checked . 1522414436) (last-edit . 1429738549) (last-updated . 1502816183) (modules . ((lib "molis-hai/huffman-encode-decode.rkt") (lib "molis-hai/shared-types.rkt") (lib "molis-hai/random-password.rkt") (lib "molis-hai/paper/bib.rkt") (lib "molis-hai/letter-frequency.rkt") (lib "molis-hai/user-study-2016/pre-registration.scrbl") (lib "molis-hai/huffman.rkt") (lib "molis-hai/soups-paper/paper.scrbl") (lib "molis-hai/soups-paper/pr-slides.rkt") (lib "molis-hai/user-study-2016/levenshtein-paths.rkt") (lib "molis-hai/experimental/unicode-scrub-lib.rkt") (lib "molis-hai/experimental/unicode-scrub.rkt") (lib "molis-hai/json-read-write.rkt") (lib "molis-hai/paper/paper.scrbl") (lib "molis-hai/user-study-2016/example-passwords.rkt") (lib "molis-hai/user-study-2016/string-editing.rkt") (lib "molis-hai/example-model.rkt") (lib "molis-hai/paper/pr-slides.rkt") (lib "molis-hai/experimental/enumeration.rkt") (lib "molis-hai/experimental/sent-email-text-extraction.rkt") (lib "molis-hai/model-comparison.rkt") (lib "molis-hai/pw-chars.rkt") (lib "molis-hai/user-study-2016/delayed-recall.rkt") (lib "molis-hai/molis-hai.scrbl") (lib "molis-hai/word-model.rkt") (lib "molis-hai/cmd-line.rkt") (lib "molis-hai/js-model/generate-pages.rkt") (lib "molis-hai/soups-paper/bib.rkt") (lib "molis-hai/user-study-2016/log-analysis.rkt") (lib "molis-hai/user-study-2016/fingerprints.rkt") (lib "molis-hai/inverse-mapping.rkt") (lib "molis-hai/build-model.rkt") (lib "molis-hai/user-study-2016/levenshtein-words-paths.rkt") (lib "molis-hai/experimental/extract-crime-and-punishment-text.rkt") (lib "molis-hai/user-study-2016/anonymize-log.rkt") (lib "molis-hai/char-model.rkt") (lib "molis-hai/user-study-2016/table.rkt") (lib "molis-hai/pronounce3.rkt") (lib "molis-hai/huffman-convert.rkt") (lib "molis-hai/random-bits.rkt") (lib "molis-hai/word-frequency.rkt") (lib "molis-hai/user-study-2016/research-protocol.scrbl") (lib "molis-hai/user-study-2016/best-fit.rkt") (lib "molis-hai/use-model.rkt"))) (name . "molis-hai") (nix-sha256 . "1my1x1qgj8sh6jiax6n9kkymqrzhvazgs3ba720ydhnky254kray") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (Dickens . #t) (author:clements@racket-lang.org . #t) (ring:1 . #t) (security . #t))) (source . "git://github.com/jbclements/molis-hai/") (tags . ("Dickens" "security")) (versions . #hash((default . #hasheq((checksum . "2f07d97b5f7d5b7847e60b756ab6f15005dedbe4") (source . "git://github.com/jbclements/molis-hai/") (source_url . "git://github.com/jbclements/molis-hai/"))))))) ("html-writing" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "html-writing" "doc/html-writing@html-writing/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/html-writing.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/html-writing.txt"))) (checksum . "d0e12121d24dc7f1aebbac048bae09fa1f6507b6") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "overeasy")) (description . "Writing HTML from SXML") (implies . ()) (last-checked . 1522414417) (last-edit . 1456770509) (last-updated . 1502816131) (modules . ((lib "html-writing/html-writing.scrbl") (lib "html-writing/main.rkt"))) (name . "html-writing") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (html . #t) (ring:1 . #t) (sxml . #t) (web . #t))) (source . "http://www.neilvandyke.org/racket/html-writing.zip") (tags . ("html" "sxml" "web")) (versions . #hash((default . #hasheq((checksum . "d0e12121d24dc7f1aebbac048bae09fa1f6507b6") (source . "http://www.neilvandyke.org/racket/html-writing.zip") (source_url . "http://www.neilvandyke.org/racket/html-writing.zip"))))))) ("fontconfig" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/fontconfig.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fontconfig.txt") (test-failure-log . "server/built/test-fail/fontconfig.txt") (test-success-log . #f))) (checksum . "cfa089d34fada1751f7fca40aa59515c640e6ef6") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" ("ffi-definer-convention" #:version "0.2"))) (description . "") (implies . ()) (last-checked . 1522414401) (last-edit . 1470935449) (last-updated . 1502816068) (modules . ((lib "fontconfig/main.rkt") (lib "fontconfig/fontconfig.rkt") (lib "fontconfig/test.rkt"))) (name . "fontconfig") (nix-sha256 . "0mlc5iyfyl8r8r5ijbhzi15mq0wxdc7r1izrmapis2vpsg72x0j5") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-desc: . #t) (author:asumu@ccs.neu.edu . #t) (ffi . #t) (ring:1 . #t))) (source . "git://github.com/takikawa/racket-fontconfig") (tags . ("ffi")) (versions . #hash((default . #hasheq((checksum . "cfa089d34fada1751f7fca40aa59515c640e6ef6") (source . "git://github.com/takikawa/racket-fontconfig") (source_url . "http://github.com/takikawa/racket-fontconfig/tree/master"))))))) ("main-distribution-test" . #hash((author . "eli@racket-lang.org jay@racket-lang.org matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org") (checksum . "50ed1c0bf5cecb48096bcb5877b4c256b93c19ec") (dependencies . ("racket-test" "racket-test-extra" "rackunit-test" "draw-test" "gui-test" "db-test" "htdp-test" "html-test" "redex-test" "drracket-test" "profile-test" "srfi-test" "errortrace-test" "r6rs-test" "web-server-test" "typed-racket-test" "xrepl-test" "scribble-test" "compiler-test" "compatibility-test" "data-test" "net-test" "net-cookies-test" "pconvert-test" "planet-test" "syntax-color-test" "images-test" "plot-test" "pict-test" "pict-snip-test" "math-test" "racket-benchmarks" "drracket-tool-test" "2d-test" "option-contract-test" "sasl-test" "unix-socket-test")) (description . "eli@racket-lang.org jay@racket-lang.org matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org") (modules . ()) (name . "main-distribution-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/main-distribution-test.zip") (tags . ()))) ("gm-pepm-2018" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gm-pepm-2018" "doc/gm-pepm-2018@gm-pepm-2018/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gm-pepm-2018.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gm-pepm-2018.txt"))) (checksum . "1ffaefcd760d8f07e89e077f841e5c94d0466ee7") (checksum-error . #f) (conflicts . ()) (dependencies . ("at-exp-lib" "base" "html-parsing" "math-lib" "pict-lib" "plot-lib" "scribble-lib" "slideshow-lib" "sxml" "with-cache" "pict-doc" "racket-doc" "rackunit-abbrevs" "rackunit-lib" "scribble-doc")) (description . "Artifact for \"On the Cost of Type-Tag Soundness\"") (implies . ()) (last-checked . 1522414405) (last-edit . 1517439841) (last-updated . 1519061086) (modules . ((lib "gm-pepm-2018/script/system.rkt") (lib "gm-pepm-2018/threats.scrbl") (lib "gm-pepm-2018/src/PyPI-ranking/scrape-PyPI.rkt") (lib "gm-pepm-2018/nepls-2017/nepls.rkt") (lib "gm-pepm-2018/reticulated.scrbl") (lib "gm-pepm-2018/script/plot.rkt") (lib "gm-pepm-2018/docs/reference.scrbl") (lib "gm-pepm-2018/docs/data.scrbl") (lib "gm-pepm-2018/conclusion.scrbl") (lib "gm-pepm-2018/lang/reader.rkt") (lib "gm-pepm-2018/method.scrbl") (lib "gm-pepm-2018/gm-pepm-2018.scrbl") (lib "gm-pepm-2018/script/performance-info.rkt") (lib "gm-pepm-2018/docs/gm-pepm-2018.scrbl") (lib "gm-pepm-2018/main.rkt") (lib "gm-pepm-2018/script/render.rkt") (lib "gm-pepm-2018/evaluation.scrbl") (lib "gm-pepm-2018/introduction.scrbl") (lib "gm-pepm-2018/script/util.rkt") (lib "gm-pepm-2018/bib.rkt") (lib "gm-pepm-2018/appendix.scrbl") (lib "gm-pepm-2018/script/python.rkt") (lib "gm-pepm-2018/nepls-2017/bib.rkt") (lib "gm-pepm-2018/script/sample.rkt") (lib "gm-pepm-2018/script/benchmark-info.rkt") (lib "gm-pepm-2018/script/config.rkt"))) (name . "gm-pepm-2018") (nix-sha256 . "02b7z87pc16dzfgzahad8cvh1lpp5gms4hdkzb3nirhi5f5w99az") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (artifact . #t) (author:types@ccs.neu.edu . #t) (performance . #t) (ring:2 . #t))) (source . "https://github.com/nuprl/retic_performance.git?path=gm-pepm-2018") (tags . ("artifact" "performance")) (versions . #hash((default . #hasheq((checksum . "1ffaefcd760d8f07e89e077f841e5c94d0466ee7") (source . "https://github.com/nuprl/retic_performance.git?path=gm-pepm-2018") (source_url . "https://github.com/nuprl/retic_performance.git?path=gm-pepm-2018"))))))) ("typed-racket-compatibility" . #hash((author . "samth@racket-lang.org stamourv@racket-lang.org") (checksum . "71d338cdad6ea66092ff26799acbcea9bc404a19") (dependencies . ("scheme-lib" "typed-racket-lib" "base")) (description . "samth@racket-lang.org stamourv@racket-lang.org") (modules . ()) (name . "typed-racket-compatibility") (source . "https://download.racket-lang.org/releases/6.12/pkgs/typed-racket-compatibility.zip") (tags . ()))) ("contract-profile" . #hash((author . "stamourv@racket-lang.org") (checksum . "d90bbf5ea488551ab1aa27833ee460496caaef1e") (dependencies . (("base" #:version "6.3") "math-lib" ("profile-lib" #:version "1.1") "racket-doc" "scribble-lib" "rackunit-lib")) (description . "stamourv@racket-lang.org") (modules . ()) (name . "contract-profile") (source . "https://download.racket-lang.org/releases/6.12/pkgs/contract-profile.zip") (tags . ()))) ("calendar" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "calendar" "doc/calendar@calendar/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/calendar.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/calendar.txt"))) (checksum . "1c38c3804b8f4d87d5036d67018839276bdf6875") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "gregor-lib" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (last-checked . 1522414312) (last-edit . 1463510689) (last-updated . 1512590763) (modules . ((lib "calendar/lang.rkt") (lib "calendar/lang/reader.rkt") (lib "calendar/private/event.rkt") (lib "calendar/main.rkt") (lib "calendar/scribblings/calendar.scrbl"))) (name . "calendar") (nix-sha256 . "1rlk9h5ws2dnm1lmz6dnxf60a35rdba29f3pk4k61zi8gs5s6hfg") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t))) (source . "git://github.com/LeifAndersen/racket-calendar.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "1c38c3804b8f4d87d5036d67018839276bdf6875") (source . "git://github.com/LeifAndersen/racket-calendar.git") (source_url . "http://github.com/LeifAndersen/racket-calendar.git/tree/master"))))))) ("scribble-enhanced" . #hasheq((author . "georges.duperon@gmail.com") (authors . ("georges.duperon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scribble-enhanced-template.lp2" "doc/scribble-enhanced-template.lp2@scribble-enhanced/index.html") ("main" "scribble-enhanced" "doc/scribble-enhanced@scribble-enhanced/index.html") ("main" "scribble-enhanced-example.lp2" "doc/scribble-enhanced-example.lp2@scribble-enhanced/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scribble-enhanced.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scribble-enhanced.txt"))) (checksum . "f4910cf260f90e394757dac5c6fbbe57fa30846c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "scheme-lib" "compatibility-lib" "slideshow-lib" "typed-racket-lib" "reprovide-lang" "mutable-match-lambda" "scribble-lib" "racket-doc" "at-exp-lib" "typed-racket-more" "typed-racket-doc" "scribble-doc")) (description . "Temporary package, will eventually be merged into the scribble-math and hyper-literate packages. Do not use.") (implies . ()) (last-checked . 1522414676) (last-edit . 1470944703) (last-updated . 1503439204) (modules . ((lib "scribble-enhanced/unicode-chars.sty.rkt") (lib "scribble-enhanced/main.rkt") (lib "scribble-enhanced/scribblings/scribble-enhanced-example.lp2.rkt") (lib "scribble-enhanced/manual-form.rkt") (lib "scribble-enhanced/racket.rkt") (lib "scribble-enhanced/scribblings/scribble-enhanced.scrbl") (lib "scribble-enhanced/math.rkt") (lib "scribble-enhanced/forkmeongithub.rkt") (lib "scribble-enhanced/manual-scheme.rkt") (lib "scribble-enhanced/with-manual.rkt") (lib "scribble-enhanced/scribblings/scribble-enhanced-template.lp2.rkt") (lib "scribble-enhanced/doc.rkt"))) (name . "scribble-enhanced") (nix-sha256 . "1c5dq6pjvigvl2by18icpf0r5wgs4cpnrky05c9hmd3bgkd4pz8w") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:georges.duperon@gmail.com . #t) (deprecated . #t) (ring:1 . #t))) (source . "https://github.com/jsmaniac/scribble-enhanced.git") (tags . ("deprecated")) (versions . #hash((default . #hasheq((checksum . "f4910cf260f90e394757dac5c6fbbe57fa30846c") (source . "https://github.com/jsmaniac/scribble-enhanced.git") (source_url . "https://github.com/jsmaniac/scribble-enhanced.git"))))))) ("srfi-doc-nonfree" . #hash((author . "mflatt@racket-lang.org noel@racket-lang.org chongkai@racket-lang.org jay@racket-lang.org") (authors . ("mflatt@racket-lang.org" "noel@racket-lang.org" "chongkai@racket-lang.org" "jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/srfi-doc-nonfree.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "7c1fd604cac07fb4f4a7480f4f45e1aefa78e69b") (checksum-error . #f) (conflicts . ()) (dependencies . ("mzscheme-doc" "scheme-lib" "base" "scribble-lib" "srfi-doc" "srfi-lib-nonfree" "racket-doc" "r5rs-doc" "r6rs-doc" "compatibility-lib")) (description . "documentation for parts of \"srfi\" implementation that are licensed restrictively") (implies . ()) (last-checked . 1522414683) (last-edit . 1517366433) (last-updated . 1517366999) (modules . ((lib "srfi/scribblings/srfi-nf.scrbl"))) (name . "srfi-doc-nonfree") (nix-sha256 . "0hz33lr7va5yw3k6zid6y4w8nbqr0v298s3kj26qx35mdhckx0g0") (ring . 2) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:chongkai@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:noel@racket-lang.org . #t) (ring:2 . #t))) (source . "git://github.com/racket/srfi/?path=srfi-doc-nonfree") (tags . ()) (versions . #hash((default . #hasheq((checksum . "7c1fd604cac07fb4f4a7480f4f45e1aefa78e69b") (source . "git://github.com/racket/srfi/?path=srfi-doc-nonfree") (source_url . "git://github.com/racket/srfi/?path=srfi-doc-nonfree"))))))) ("lens-common" . #hasheq((author . "jackhfirth@gmail.com alexander@knauth.org") (authors . ("jackhfirth@gmail.com" "alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lens-common.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lens-common.txt"))) (checksum . "376c286a68ed34ee723cf5c5a76dcba9828db0c1") (checksum-error . #f) (conflicts . ()) (dependencies . (("racket" #:version "6.3") "base" "fancy-app" "rackunit-lib" "reprovide-lang" "lens-data" "sweet-exp-lib")) (description . "Base lens constructors and additional combinators") (implies . ()) (last-checked . 1522414423) (last-edit . 1500074998) (last-updated . 1514736112) (modules . ((lib "lens/private/base/base.rkt") (lib "lens/private/isomorphism/compound.rkt") (lib "lens/private/test-util/test-multi.rkt") (lib "lens/private/compound/identity.rkt") (lib "lens/private/base/view-set.rkt") (lib "lens/private/util/rest-contract.rkt") (lib "lens/private/compound/arrow.rkt") (lib "lens/private/base/transform.rkt") (lib "lens/private/common/applicable.rkt") (lib "lens/private/compound/if.rkt") (lib "lens/private/util/id-append.rkt") (lib "lens/private/base/contract.rkt") (lib "lens/private/compound/lazy.rkt") (lib "lens/private/isomorphism/base.rkt") (lib "lens/private/compound/thrush.rkt") (lib "lens/private/compound/zoom.rkt") (lib "lens/private/test-util/test-lens.rkt") (lib "lens/private/util/list-pair-contract.rkt") (lib "lens/private/compound/main.rkt") (lib "lens/private/base/make-lens.rkt") (lib "lens/private/compound/compose.rkt") (lib "lens/private/base/gen-lens.rkt") (lib "lens/common.rkt") (lib "lens/private/compound/define-nested.rkt") (lib "lens/private/base/main.rkt"))) (name . "lens-common") (nix-sha256 . "0x4v6pd5l15wqppxmd2k8jg6g151rbvv7qmyyzr4vsl399mlyljz") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (author:jackhfirth@gmail.com . #t) (data . #t) (functional . #t) (lens . #t) (ring:1 . #t))) (source . "git://github.com/jackfirth/lens?path=lens-common") (tags . ("data" "functional" "lens")) (versions . #hash((default . #hasheq((checksum . "376c286a68ed34ee723cf5c5a76dcba9828db0c1") (source . "git://github.com/jackfirth/lens?path=lens-common") (source_url . "http://github.com/jackfirth/lens/tree/master?path=lens-common"))))))) ("scripty" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scripty.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scripty.txt"))) (checksum . "09a0e2fd24dfcd5942177d4a328821534ee60ded") (checksum-error . #f) (conflicts . ()) (dependencies . ("scripty-doc" "scripty-lib")) (description . "") (implies . ("scripty-doc" "scripty-lib")) (last-checked . 1522414677) (last-edit . 1476917251) (last-updated . 1502816422) (modules . ()) (name . "scripty") (nix-sha256 . "0ib233dr7vlm6vwkxzb24vpgj5f9my894dd2ja0ry5ykl75cvzia") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t) (scripting . #t))) (source . "git://github.com/lexi-lambda/scripty.git?path=scripty") (tags . ("scripting")) (versions . #hash((default . #hasheq((checksum . "09a0e2fd24dfcd5942177d4a328821534ee60ded") (source . "git://github.com/lexi-lambda/scripty.git?path=scripty") (source_url . "http://github.com/lexi-lambda/scripty.git/tree/master?path=scripty"))))))) ("netrc" . #hasheq((author . "me@apgwoz.com") (authors . ("me@apgwoz.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "netrc" "doc/netrc@netrc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/netrc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/netrc.txt"))) (checksum . "af814d20a77910ab6de2161ac37d02586604a192") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Find entries in ~/.netrc files") (implies . ()) (last-checked . 1522414505) (last-edit . 1437660604) (last-updated . 1502816196) (modules . ((lib "netrc/scribblings/netrc.scrbl") (lib "netrc/main.rkt"))) (name . "netrc") (nix-sha256 . "1fvxn76cly5p7n7bvnsw1g4264mfcs9bz1h6xqpv9as88pvyj9pk") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:me@apgwoz.com . #t) (net . #t) (ring:1 . #t))) (source . "git://github.com/apg/netrc") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "af814d20a77910ab6de2161ac37d02586604a192") (source . "git://github.com/apg/netrc") (source_url . "http://github.com/apg/netrc/tree/master"))))))) ("zippers" . #hasheq((author . "david@davidchristiansen.dk") (authors . ("david@davidchristiansen.dk")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "zippers" "doc/zippers@zippers/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zippers.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/zippers.txt"))) (checksum . "ab11342e1359b0844f8f19f801cdd02d697f7ec3") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Utilities for working with and deriving Huet-style zippers") (implies . ()) (last-checked . 1522414704) (last-edit . 1461432559) (last-updated . 1502816536) (modules . ((lib "zippers/scribblings/zippers.scrbl") (lib "zippers/main.rkt"))) (name . "zippers") (nix-sha256 . "1z5cb0jrspxjhbj18dxsqjs3r8a6kry5qvz55l7s7w9gzzrwy191") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:david@davidchristiansen.dk . #t) (ring:1 . #t) (utility . #t))) (source . "git://github.com/david-christiansen/racket-zippers") (tags . ("utility")) (versions . #hash((default . #hasheq((checksum . "ab11342e1359b0844f8f19f801cdd02d697f7ec3") (source . "git://github.com/david-christiansen/racket-zippers") (source_url . "http://github.com/david-christiansen/racket-zippers/tree/master"))))))) ("grip" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "grip" "doc/grip@grip/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/grip.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/grip.txt"))) (checksum . "bb127ff3bd2eef2f4b1a3690d946fe79ae9558ce") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "r6rs-lib" "srfi-lite-lib" "racket-doc" "typed-racket-doc" "scribble-lib" "typed-racket-more")) (description . "A sparse prelude-lite level library of common things targeting Typed Racket.") (implies . ()) (last-checked . 1522414406) (last-edit . 1502542200) (last-updated . 1502816092) (modules . ((lib "grip/data/datetime/format-util.rkt") (lib "grip/data/datetime/const.rkt") (lib "grip/data/prelude.rkt") (lib "grip/data/datetime/instant.rkt") (lib "grip/data/list.rkt") (lib "grip/scribblings/control/conditionals.scrbl") (lib "grip/data/datetime.rkt") (lib "grip/data/format.rkt") (lib "grip/r6rslib/enums.rkt") (lib "grip/scribblings/control/manual.scrbl") (lib "grip/control/test/when-let-test.rkt") (lib "grip/data/datetime/parse.rkt") (lib "grip/r6rslib/io/private/ports-typed.rkt") (lib "grip/concurrent/multicast.rkt") (lib "grip/data/string.rkt") (lib "grip/control/conditional-let.rkt") (lib "grip/control/test/awhen-test.rkt") (lib "grip/scribblings/system/manual.scrbl") (lib "grip/data/datetime/types.rkt") (lib "grip/system/interface.rkt") (lib "grip/data/datetime/convert.rkt") (lib "grip/scribblings/system/filepath.scrbl") (lib "grip/control/test/cond-let-test.rkt") (lib "grip/control/test/if-let-test.rkt") (lib "grip/control/conditional-anaphoric.rkt") (lib "grip/data/symbol.rkt") (lib "grip/scribblings/concurrent/multicast.scrbl") (lib "grip/scribblings/grip.scrbl") (lib "grip/data/either.rkt") (lib "grip/data/hash.rkt") (lib "grip/control/test/acond-test.rkt") (lib "grip/data/date.rkt") (lib "grip/data/datetime/date.rkt") (lib "grip/data/datetime/leapsecond.rkt") (lib "grip/r6rslib/arithmetic/bitwise.rkt") (lib "grip/data/util.rkt") (lib "grip/data/partialfn.rkt") (lib "grip/data/try.rkt") (lib "grip/control/test/aif-test.rkt") (lib "grip/scribblings/concurrent/manual.scrbl") (lib "grip/data/opt.rkt") (lib "grip/r6rslib/bytevectors.rkt") (lib "grip/data/struct.rkt") (lib "grip/data/text.rkt") (lib "grip/scribblings/system/interface.scrbl") (lib "grip/system/filepath.rkt") (lib "grip/r6rslib/io/ports.rkt") (lib "grip/data/datetime/format.rkt"))) (name . "grip") (nix-sha256 . "1axhagc5vlii3dzl5ks9r6p1cisccp3la1hvfa2yc22jka8z5fyz") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ray.racine@gmail.com . #t) (control . #t) (data . #t) (iteratee . #t) (ring:1 . #t))) (source . "https://gitlab.com/RayRacine/grip.git") (tags . ("control" "data" "iteratee")) (versions . #hash((default . #hasheq((checksum . "bb127ff3bd2eef2f4b1a3690d946fe79ae9558ce") (source . "https://gitlab.com/RayRacine/grip.git") (source_url . "http://gitlab.com/RayRacine/grip/tree/master"))) ("0.2.1" . #hasheq((checksum . "bb127ff3bd2eef2f4b1a3690d946fe79ae9558ce") (source . "https://gitlab.com/RayRacine/grip.git") (source_url . "http://gitlab.com/RayRacine/grip/tree/master"))))))) ("teachpacks" . #hasheq((author . "tyynetyyne@gmail.com") (authors . ("tyynetyyne@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/teachpacks.txt") (docs . (("main" "racket_turtle" "doc/racket_turtle@teachpacks/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/teachpacks.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/teachpacks.txt"))) (checksum . "f82605dc2de7e6b6267fe2b2e6a6481a1ab33a35") (checksum-error . #f) (conflicts . ()) (dependencies . ("gui-lib" "base" "htdp-lib" "plot-gui-lib" "plot-lib" "scribble-lib" "scribble-doc" "htdp-doc" "racket-doc")) (description . "Racket Turtle for drawing turtle-graphics.") (implies . ()) (last-checked . 1522414690) (last-edit . 1440666321) (last-updated . 1508317933) (modules . ((lib "teachpacks/plot2D.rkt") (lib "teachpacks/display-read.rkt") (lib "teachpacks/game-helper.rkt") (lib "teachpacks/math-utils.rkt") (lib "teachpacks/racket-turtle.rkt") (lib "teachpacks/doc/racket_turtle_examples.scrbl") (lib "teachpacks/doc/racket_turtle.scrbl") (lib "teachpacks/doc/racket_turtle_commands.scrbl") (lib "teachpacks/doc/racket_turtle_examples_recursion.scrbl") (lib "teachpacks/display-read-touch.rkt") (lib "teachpacks/big-crunch.rkt") (lib "teachpacks/plot2.rkt") (lib "teachpacks/doc/racket_turtle_functionality.scrbl") (lib "teachpacks/doc/racket_turtle_functions.scrbl") (lib "teachpacks/plot.rkt"))) (name . "teachpacks") (nix-sha256 . "1l84b60j0lcfaz7y0hp30s84c4sigfqfwq6y11draxcjn9qxpbw0") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:tyynetyyne@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/tyynetyyne/teachpacks.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "f82605dc2de7e6b6267fe2b2e6a6481a1ab33a35") (source . "git://github.com/tyynetyyne/teachpacks.git") (source_url . "http://github.com/tyynetyyne/teachpacks.git/tree/master"))))))) ("multiscope" . #hasheq((author . "michael.ballantyne@gmail.com") (authors . ("michael.ballantyne@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/multiscope.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/multiscope.txt"))) (checksum . "bc59bd53462a72ed3e67ec2555e94e871bc7e314") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "") (implies . ()) (last-checked . 1522414437) (last-edit . 1470432532) (last-updated . 1506709788) (modules . ((lib "multiscope/test/provide.rkt") (lib "multiscope/test/all-defined-out.rkt") (lib "multiscope/test/basic.rkt") (lib "multiscope/test/macros-broken-sep-comp1.rkt") (lib "multiscope/test/macros.rkt") (lib "multiscope/test/macros-broken-sep-comp2.rkt") (lib "multiscope/test/macros-sep-comp1.rkt") (lib "multiscope/test/macros-sep-comp2.rkt") (lib "multiscope/main.rkt"))) (name . "multiscope") (nix-sha256 . "027d7wpiq68k9qfspnb5qzx9zg59nz8vqdcwzbfnv9x4fzjhl2q1") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:michael.ballantyne@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/michaelballantyne/multiscope.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "bc59bd53462a72ed3e67ec2555e94e871bc7e314") (source . "https://github.com/michaelballantyne/multiscope.git") (source_url . "https://github.com/michaelballantyne/multiscope.git"))))))) ("tulip-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tulip-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tulip-lib.txt"))) (checksum . "1613cfd4d7e8dbc8ceb86cf33479375147f42b2f") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "functional-lib" "megaparsack-lib" "megaparsack-parser-tools" "parser-tools-lib" "curly-fn")) (description . "") (implies . ()) (last-checked . 1522414694) (last-edit . 1466529290) (last-updated . 1502816488) (modules . ((lib "tulip/lang/reader.rkt") (lib "tulip/lang/parser.rkt") (lib "tulip/private/util/srcloc.rkt") (lib "tulip/lang/lexer.rkt") (lib "tulip/lang/emitter.rkt") (lib "tulip/list.rkt") (lib "tulip/main.rkt") (lib "tulip/base.rkt") (lib "tulip/private/util/syntax-loc-props.rkt") (lib "tulip/lang/configure-runtime.rkt") (lib "tulip/math.rkt") (lib "tulip/racket/ffi.rkt") (lib "tulip/private/configured-runtime-lang.rkt") (lib "tulip/private/util/curry.rkt"))) (name . "tulip-lib") (nix-sha256 . "1lzj7skc9b78cj2k2scp5ydxdgympbrj9jh9w10nld4fycba3rc1") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-tulip?path=tulip-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "1613cfd4d7e8dbc8ceb86cf33479375147f42b2f") (source . "git://github.com/lexi-lambda/racket-tulip?path=tulip-lib") (source_url . "http://github.com/lexi-lambda/racket-tulip/tree/master?path=tulip-lib"))))))) ("rackunit-grade" . #hasheq((author . "ifigueroap@gmail.com") (authors . ("ifigueroap@gmail.com")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (("extract" "rackunit-grade" "doc/rackunit-grade@rackunit-grade/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackunit-grade.txt") (test-failure-log . "server/built/test-fail/rackunit-grade.txt") (test-success-log . #f))) (checksum . "92526d7ced3b4cf7b5323752f20d8f36752e69b6") (checksum-error . #f) (conflicts . ("racket-rackunit-grade")) (dependencies . ("base" "rackunit" "doc-coverage" "scribble-lib" "racket-doc")) (description . "Simple library and raco command for grading homework against a test file") (implies . ()) (last-checked . 1522414663) (last-edit . 1482781793) (last-updated . 1502816375) (modules . ((lib "rackunit/raco-grade.rkt") (lib "rackunit/scribblings/rackunit-grade.scrbl") (lib "rackunit/grade.rkt"))) (name . "rackunit-grade") (nix-sha256 . "1yh3xz8j01i0chlxaqqirpcrh6ynlbknhfz1w7j7df8hjyqqkdmp") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:conflicts: . #t) (:docs-error: . #t) (:docs: . #t) (author:ifigueroap@gmail.com . #t) (homework . #t) (rackunit . #t) (raco . #t) (ring:1 . #t) (teaching . #t))) (source . "git://github.com/ifigueroap/racket-rackunit-grade") (tags . ("homework" "rackunit" "raco" "teaching")) (versions . #hash((default . #hasheq((checksum . "92526d7ced3b4cf7b5323752f20d8f36752e69b6") (source . "git://github.com/ifigueroap/racket-rackunit-grade") (source_url . "http://github.com/ifigueroap/racket-rackunit-grade/tree/master"))))))) ("draw-i386-macosx-2" . #hash((author . "mflatt@racket-lang.org") (checksum . "2917b06ced120915e8ee5691fe2b04dbd815653a") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "draw-i386-macosx-2") (source . "https://download.racket-lang.org/releases/6.12/pkgs/draw-i386-macosx-2.zip") (tags . ()))) ("option-contract-test" . #hash((author . "chrdimo@seas.harvard.edu robby@racket-lang.org") (checksum . "bf889622918986d88791483d7625f50ae68b4e68") (dependencies . (("base" #:version "6.2.900.17") "rackunit-lib" "option-contract-lib")) (description . "chrdimo@seas.harvard.edu robby@racket-lang.org") (modules . ()) (name . "option-contract-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/option-contract-test.zip") (tags . ()))) ("sagiri-comm" . #hasheq((author . "yd2dong@uwaterloo.ca") (authors . ("yd2dong@uwaterloo.ca")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/sagiri-comm.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "cd744287cc140a8b61d5d9c2862431e2fa51e72d") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: https://github.com/ProjectNiwl/sagiri-comm.git\n  context...:\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:324:3: for-loop\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:321:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:73:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:54:2: retry-loop\n   /home/pkgserver/racket/collects/racket/private/more-scheme.rkt:261:28\n   /home/pkgserver/racket/collects/racket/private/list.rkt:264:4: loop\n   /home/pkgserver/pkg-index/official/update.rkt:137:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:138:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:154:22\n") (conflicts . ()) (dependencies . ("base" "scribble-lib" "at-exp-lib")) (description . "SAGIRI bindings for Racket") (implies . ()) (last-checked . 1485273861) (last-edit . 1444954405) (last-updated . 1444935389) (modules . ((lib "sagiri-comm/socks5.rkt") (lib "sagiri-comm/hosting.rkt") (lib "sagiri-comm/docs/main.scrbl") (lib "sagiri-comm/main.rkt") (lib "sagiri-comm/get-handle.rkt") (lib "sagiri-comm/docs/spec.scrbl") (lib "sagiri-comm/structs.rkt") (lib "sagiri-comm/connect.rkt"))) (name . "sagiri-comm") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-tag: . #t) (author:yd2dong@uwaterloo.ca . #t) (ring:1 . #t))) (source . "https://github.com/ProjectNiwl/sagiri-comm.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "cd744287cc140a8b61d5d9c2862431e2fa51e72d") (source . "https://github.com/ProjectNiwl/sagiri-comm.git") (source_url . "https://github.com/ProjectNiwl/sagiri-comm.git"))))))) ("rws-html-template" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rws-html-template" "doc/rws-html-template@rws-html-template/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rws-html-template.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rws-html-template.txt"))) (checksum . "18af61049ea3adf14472753ccc6ba0602563ff61") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "web-server-lib" "web-server-doc" "mcfly" "html-template")) (description . "Racket Web Server html-template Support") (implies . ()) (last-checked . 1522414673) (last-edit . 1456463485) (last-updated . 1502816415) (modules . ((lib "rws-html-template/rws-html-template.scrbl") (lib "rws-html-template/main.rkt"))) (name . "rws-html-template") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (html . #t) (ring:1 . #t) (sxml . #t) (web . #t))) (source . "http://www.neilvandyke.org/racket/rws-html-template.zip") (tags . ("html" "sxml" "web")) (versions . #hash((default . #hasheq((checksum . "18af61049ea3adf14472753ccc6ba0602563ff61") (source . "http://www.neilvandyke.org/racket/rws-html-template.zip") (source_url . "http://www.neilvandyke.org/racket/rws-html-template.zip"))))))) ("recaptcha" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "reCAPTCHA" "doc/reCAPTCHA@recaptcha/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/recaptcha.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/recaptcha.txt"))) (checksum . "7ccff7026ec14563e3b0febdbd990e17a3388c60") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "web-server-lib" "scribble-lib" "racket-doc" "web-server-doc")) (description . "Utilities for using reCAPTCHA with the web-server/formlets API") (implies . ()) (last-checked . 1522414667) (last-edit . 1491366140) (last-updated . 1514365305) (modules . ((lib "recaptcha/scribblings/recaptcha.scrbl") (lib "recaptcha/keys.rkt") (lib "recaptcha/main.rkt"))) (name . "recaptcha") (nix-sha256 . "1mncnx9qapahs5rll0j5pfnjvxqils1r1lcg3jl0ndrk85wc6vs0") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:philip@philipmcgrath.com . #t) (google . #t) (net . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/LiberalArtist/recaptcha.git") (tags . ("google" "net" "web")) (versions . #hash((default . #hasheq((checksum . "7ccff7026ec14563e3b0febdbd990e17a3388c60") (source . "https://github.com/LiberalArtist/recaptcha.git") (source_url . "https://github.com/LiberalArtist/recaptcha.git"))))))) ("binaryio-lib" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/binaryio-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/binaryio-lib.txt"))) (checksum . "049278077f4f38e91579ff392f465bf1abb1514d") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "functions for reading and writing binary data") (implies . ()) (last-checked . 1522414311) (last-edit . 1501165524) (last-updated . 1505327329) (modules . ((lib "binaryio/private/float.rkt") (lib "binaryio/float.rkt") (lib "binaryio/main.rkt") (lib "binaryio/private/bytes.rkt") (lib "binaryio/bytes.rkt") (lib "binaryio/private/integer.rkt") (lib "binaryio/integer.rkt"))) (name . "binaryio-lib") (nix-sha256 . "099w9q7qfavy1kf4y4l06v8y5fva600283r41yhliq3w0h9al2q2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (io . #t) (net . #t) (ring:1 . #t))) (source . "git://github.com/rmculpepper/binaryio?path=binaryio-lib") (tags . ("io" "net")) (versions . #hash((default . #hasheq((checksum . "049278077f4f38e91579ff392f465bf1abb1514d") (source . "git://github.com/rmculpepper/binaryio?path=binaryio-lib") (source_url . "http://github.com/rmculpepper/binaryio/tree/master?path=binaryio-lib"))))))) ("ring-buffer" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ring-buffer" "doc/ring-buffer@ring-buffer/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ring-buffer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ring-buffer.txt"))) (checksum . "d7849f3e6a4528cf685cc29da9468e3a7276077d") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "eli-tester" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "An imperative overwriting ring buffer data structure") (implies . ()) (last-checked . 1522414671) (last-edit . 1353515180) (last-updated . 1502816403) (modules . ((lib "tests/data/ring-buffer.rkt") (lib "data/ring-buffer/ring-buffer.scrbl") (lib "data/ring-buffer.rkt"))) (name . "ring-buffer") (nix-sha256 . "0s0gvwc57n3qwscgd8wi9zayify6zrs458j8ph36crg40010p7gj") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (data . #t) (ring:1 . #t))) (source . "github://github.com/jeapostrophe/ring-buffer/master") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "d7849f3e6a4528cf685cc29da9468e3a7276077d") (source . "github://github.com/jeapostrophe/ring-buffer/master") (source_url . "http://github.com/jeapostrophe/ring-buffer/tree/master"))))))) ("ebml" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ebml" "doc/ebml@ebml/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ebml.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ebml.txt"))) (checksum . "2ec0b537cf88dfbcf791f28a3ecd45583ff6295a") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "scribble-lib" "racket-doc")) (description . "A library for reading and writing EBML files.") (implies . ()) (last-checked . 1522414396) (last-edit . 1359851583) (last-updated . 1513624504) (modules . ((lib "ebml/reader.rkt") (lib "ebml/examples/sexp-ebml.rkt") (lib "ebml/ebml.scrbl") (lib "ebml/writer.rkt") (lib "ebml/examples/rust-ebml-parser.rkt") (lib "ebml/main.rkt"))) (name . "ebml") (nix-sha256 . "0928gyblpg34gwvlr0115j0g8rxs7qz5hy8ga59p2rmxyyp41gjs") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (data . #t) (io . #t) (ring:1 . #t))) (source . "github://github.com/jbclements/ebml/master") (tags . ("data" "io")) (versions . #hash((default . #hasheq((checksum . "2ec0b537cf88dfbcf791f28a3ecd45583ff6295a") (source . "github://github.com/jbclements/ebml/master") (source_url . "http://github.com/jbclements/ebml/tree/master"))))))) ("magnolisp" . #hasheq((author . "tero@hasu.is") (authors . ("tero@hasu.is")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "magnolisp" "doc/magnolisp@magnolisp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/magnolisp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/magnolisp.txt"))) (checksum . "191d529486e688e5dda2be677ad8fe3b654e0d4f") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.3") "data-lib" "scribble-lib" "unstable-debug-lib" "at-exp-lib" "racket-doc" "rackunit-lib")) (description . "Magnolisp") (implies . ()) (last-checked . 1522414426) (last-edit . 1459903864) (last-updated . 1502816161) (modules . ((lib "magnolisp/tests/test-run-assign-1.rkt") (lib "magnolisp/app-util.rkt") (lib "magnolisp/tests/test-if-1.rkt") (lib "magnolisp/tests/test-sum2-1.rkt") (lib "magnolisp/tests/test-match-1.rkt") (lib "magnolisp/tests/test-predicate-2.rkt") (lib "magnolisp/tests/test-discard-2.rkt") (lib "magnolisp/tests/test-for-all-3.rkt") (lib "magnolisp/compiler-api.rkt") (lib "magnolisp/util/let.rkt") (lib "magnolisp/tests/test-discard-1.rkt") (lib "magnolisp/tests/test-foreign-3.rkt") (lib "magnolisp/util/racket-5-compat.rkt") (lib "magnolisp/tests/test-sum2-2.rkt") (lib "magnolisp/2014/reader-ext.rkt") (lib "magnolisp/tests/test-if-4.rkt") (lib "magnolisp/tests/test-packages-2.rkt") (lib "magnolisp/tests/test-run-sum3-1.rkt") (lib "magnolisp/backend-build-writer.rkt") (lib "magnolisp/tests/test-pass-2.rkt") (lib "magnolisp/tests/test-struct-1.rkt") (lib "magnolisp/2014/surface.rkt") (lib "magnolisp/tests/test-locals-3.rkt") (lib "magnolisp/tests/test-run-begin0-1.rkt") (lib "magnolisp/util.rkt") (lib "magnolisp/2014.rkt") (lib "magnolisp/ir-ast.rkt") (lib "magnolisp/tests/test-macro-1.rkt") (lib "magnolisp/tests/test-block-expr-3.rkt") (lib "magnolisp/tests/test-pretty-1.rkt") (lib "magnolisp/tests/lib-names-3.rkt") (lib "magnolisp/util/system.rkt") (lib "magnolisp/tests/test-packages-3.rkt") (lib "magnolisp/tests/test-type-infer-3.rkt") (lib "magnolisp/util/field.rkt") (lib "magnolisp/tests/test-modules-3.rkt") (lib "magnolisp/tests/test-foreign-1.rkt") (lib "magnolisp/tests/lib-modules-1.rkt") (lib "magnolisp/lang/reader.rkt") (lib "magnolisp/tests/test-lifts-7.rkt") (lib "magnolisp/tests/test-run-lifts-3.rkt") (lib "magnolisp/tests/test-lifts-5.rkt") (lib "magnolisp/tests/test-for-all-4.rkt") (lib "magnolisp/tests/lib-modules-3.rkt") (lib "magnolisp/tests/test-type-infer-a.rkt") (lib "magnolisp/strategy-term.rkt") (lib "magnolisp/tests/run-repr-tests.rkt") (lib "magnolisp/util/syntax-quote-main.rkt") (lib "magnolisp/tests/test-sum2-5.rkt") (lib "magnolisp/struct.rkt") (lib "magnolisp/tests/test-for-all-1.rkt") (lib "magnolisp/tests/test-for-all-5.rkt") (lib "magnolisp/std/list.rkt") (lib "magnolisp/tests/test-type-infer-1.rkt") (lib "magnolisp/tests/test-literal-2.rkt") (lib "magnolisp/tests/lib-modules-2.rkt") (lib "magnolisp/tests/test-names-2.rkt") (lib "magnolisp/tests/test-type-infer-e.rkt") (lib "magnolisp/ast-repr.rkt") (lib "magnolisp/module-load.rkt") (lib "magnolisp/tests/test-packages-4.rkt") (lib "magnolisp/tests/test-let-expr-1.rkt") (lib "magnolisp/tests/test-surface-1.rkt") (lib "magnolisp/compiler-cli.rkt") (lib "magnolisp/tests/test-type-infer-b.rkt") (lib "magnolisp/tests/test-build-2.rkt") (lib "magnolisp/tests/test-sum2-3.rkt") (lib "magnolisp/tests/test-simple-1.rkt") (lib "magnolisp/tests/lib-surface-provide.rkt") (lib "magnolisp/strategy.rkt") (lib "magnolisp/tests/test-macro-2.rkt") (lib "magnolisp/tests/test-let-expr-2.rkt") (lib "magnolisp/tests/test-lifts-1.rkt") (lib "magnolisp/strategy-list.rkt") (lib "magnolisp/tests/test-locals-2.rkt") (lib "magnolisp/tests/test-type-infer-2.rkt") (lib "magnolisp/tests/test-type-infer-7.rkt") (lib "magnolisp/util/syntax-quote-extras.rkt") (lib "magnolisp/tests/test-macro-3.rkt") (lib "magnolisp/tests/test-type-infer-8.rkt") (lib "magnolisp/tests/test-modules-1.rkt") (lib "magnolisp/tests/test-lifts-2.rkt") (lib "magnolisp/tests/test-struct-2.rkt") (lib "magnolisp/tests/test-anno-1.rkt") (lib "magnolisp/tests/test-declare-2.rkt") (lib "magnolisp/tests/run-ast-tests.rkt") (lib "magnolisp/util/print.rkt") (lib "magnolisp/util/order.rkt") (lib "magnolisp/core.rkt") (lib "magnolisp/2014/base.rkt") (lib "magnolisp/tests/test-literal-3.rkt") (lib "magnolisp/tests/test-sum2-4.rkt") (lib "magnolisp/modbeg.rkt") (lib "magnolisp/tests/test-build-3.rkt") (lib "magnolisp/ast-serialize.rkt") (lib "magnolisp/tests/test-run-simple-1.rkt") (lib "magnolisp/tests/run-view-tests.rkt") (lib "magnolisp/backend-cxx-print.rkt") (lib "magnolisp/tests/run-cc-on-files.rkt") (lib "magnolisp/tests/test-block-expr-2.rkt") (lib "magnolisp/tests/test-for-all-2.rkt") (lib "magnolisp/util/module.rkt") (lib "magnolisp/tests/test-run-compsys-1.rkt") (lib "magnolisp/tests/test-macro-4.rkt") (lib "magnolisp/tests/test-anno-2.rkt") (lib "magnolisp/tests/test-closure-1.rkt") (lib "magnolisp/util/struct.rkt") (lib "magnolisp/tests/test-modules-4.rkt") (lib "magnolisp/backend-mgl-print.rkt") (lib "magnolisp/tests/lib-cxx-runner.rkt") (lib "magnolisp/tests/test-type-infer-c.rkt") (lib "magnolisp/tests/test-type-infer-9.rkt") (lib "magnolisp/tests/test-type-infer-d.rkt") (lib "magnolisp/util/assert.rkt") (lib "magnolisp/ast-view.rkt") (lib "magnolisp/ir-transform.rkt") (lib "magnolisp/surface.rkt") (lib "magnolisp/tests/run-stratego-tests.rkt") (lib "magnolisp/pp-yield.rkt") (lib "magnolisp/tests/test-letrec-1.rkt") (lib "magnolisp/tests/test-literal-1.rkt") (lib "magnolisp/util/debug.rkt") (lib "magnolisp/tests/test-assign-2.rkt") (lib "magnolisp/tests/test-lifts-6.rkt") (lib "magnolisp/tests/test-foreign-6.rkt") (lib "magnolisp/backend-cxx-ast.rkt") (lib "magnolisp/tests/lib-declare-1.rkt") (lib "magnolisp/tests/run-mglc-on-files.rkt") (lib "magnolisp/tests/test-foreign-4.rkt") (lib "magnolisp/tests/test-if-2.rkt") (lib "magnolisp/tests/test-macro-5.rkt") (lib "magnolisp/prelude.rkt") (lib "magnolisp/tests/test-export-1.rkt") (lib "magnolisp/base/main.rkt") (lib "magnolisp/tests/run-misc-tests.rkt") (lib "magnolisp/tests/test-foreign-2.rkt") (lib "magnolisp/tests/test-type-infer-4.rkt") (lib "magnolisp/tests/test-assign-3.rkt") (lib "magnolisp/tests/test-names-3.rkt") (lib "magnolisp/strategy-stratego.rkt") (lib "magnolisp/tests/test-declare-1.rkt") (lib "magnolisp/util/bankers-deque.rkt") (lib "magnolisp/backend-build-main.rkt") (lib "magnolisp/tests/test-locals-1.rkt") (lib "magnolisp/tests/test-build-1.rkt") (lib "magnolisp/tests/test-run-discard-3.rkt") (lib "magnolisp/reader-ext.rkt") (lib "magnolisp/tests/test-foreign-5.rkt") (lib "magnolisp/tests/test-let-expr-3.rkt") (lib "magnolisp/backend-util.rkt") (lib "magnolisp/tests/test-run-target-1.rkt") (lib "magnolisp/util/syntax-quote-macros.rkt") (lib "magnolisp/tests/test-run-letrec-1.rkt") (lib "magnolisp/base/lang/reader.rkt") (lib "magnolisp/tests/test-predicate-1.rkt") (lib "magnolisp/type-infer.rkt") (lib "magnolisp/backend-cxx-main.rkt") (lib "magnolisp/tests/test-run-lifts-4.rkt") (lib "magnolisp/ir-id-coll.rkt") (lib "magnolisp/manual-src/util.rkt") (lib "magnolisp/parse.rkt") (lib "magnolisp/tests/test-lifts-8.rkt") (lib "magnolisp/tests/test-type-infer-6.rkt") (lib "magnolisp/tests/test-pass-1.rkt") (lib "magnolisp/tests/test-modules-2.rkt") (lib "magnolisp/main.rkt") (lib "magnolisp/2014/prelude.rkt") (lib "magnolisp/manual-src/magnolisp.scrbl") (lib "magnolisp/tests/test-if-3.rkt") (lib "magnolisp/tests/test-type-infer-5.rkt") (lib "magnolisp/tests/test-names-1.rkt"))) (name . "magnolisp") (nix-sha256 . "09814h5qqzi0rnm4w5nwiiq63jg0brmfr3kabxpanin8miymdf88") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:tero@hasu.is . #t) (language . #t) (ring:1 . #t))) (source . "git://github.com/bldl/magnolisp") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "191d529486e688e5dda2be677ad8fe3b654e0d4f") (source . "git://github.com/bldl/magnolisp") (source_url . "http://github.com/bldl/magnolisp/tree/master"))))))) ("metapict" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "metapict" "doc/metapict@metapict/index.html"))) (failure-log . "server/built/fail/metapict.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "13c421eb1700174635e22c6277de7f0f36657b54") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "draw-lib" "math-lib" "gui-lib" "parser-tools-lib" "pict-lib" "slideshow-lib" "srfi-lite-lib" "ppict" "htdp-lib" "compatibility-lib" "at-exp-lib" "rackunit-lib" "scribble-lib" "racket-doc" "draw-doc" "pict-doc")) (description . "Create beautiful pictures and diagrams") (implies . ()) (last-checked . 1522414435) (last-edit . 1422737600) (last-updated . 1509199308) (modules . ((lib "metapict/dc-path-to-curve.rkt") (lib "metapict/examples/state-machine.rkt") (lib "metapict/def.rkt") (lib "metapict/hom.rkt") (lib "metapict/device.rkt") (lib "metapict/arrow.rkt") (lib "metapict/scribblings/reference.scrbl") (lib "metapict/scribblings/examples.scrbl") (lib "metapict/examples/pointilism.rkt") (lib "metapict/todo/grammar.rkt") (lib "metapict/scribblings/examples5.scrbl") (lib "metapict/scribblings/utils.rkt") (lib "metapict/box-and-pointer-diagram.rkt") (lib "metapict/examples/vector-diagrams.rkt") (lib "metapict/color.rkt") (lib "metapict/scribblings/pt.scrbl") (lib "metapict/graph.rkt") (lib "metapict/examples/metapost-examples.rkt") (lib "metapict/examples/truncated-cone.rkt") (lib "metapict/pen-and-brush.rkt") (lib "metapict/exp/tex/render-tex-formula.rkt") (lib "metapict/bitmap.rkt") (lib "metapict/polygons.rkt") (lib "metapict/todo/test-grammar-and-lexer.rkt") (lib "metapict/scribblings/pict.scrbl") (lib "metapict/examples/sine-cosine-drawing.rkt") (lib "metapict/scribblings/representation.scrbl") (lib "metapict/parameters.rkt") (lib "metapict/geometry.rkt") (lib "metapict/bez.rkt") (lib "metapict/snake.rkt") (lib "metapict/examples/generate-exercises-to-pdf.rkt") (lib "metapict/examples/arbelos.rkt") (lib "metapict/examples/kmiecik-examples-from-tug-boat.rkt") (lib "metapict/todo/grammar-expressions.rkt") (lib "metapict/examples/metapost-manual.rkt") (lib "metapict/grid.rkt") (lib "metapict/metapict.rkt") (lib "metapict/node.rkt") (lib "metapict/curve.rkt") (lib "metapict/trans.rkt") (lib "metapict/todo/linear-equations.rkt") (lib "metapict/examples/geometry-exercises.rkt") (lib "metapict/exp/font-root-test.rkt") (lib "metapict/scribblings/draw-and-fill.scrbl") (lib "metapict/examples/polygonal-numbers.rkt") (lib "metapict/structs.rkt") (lib "metapict/match-case-lambda.rkt") (lib "metapict/examples/integral-left-sum.rkt") (lib "metapict/line.rkt") (lib "metapict/examples/convex-hull.rkt") (lib "metapict/examples/missing-square-puzzle.rkt") (lib "metapict/scribblings/moonlanding.rkt") (lib "metapict/examples/cuboid.rkt") (lib "metapict/todo/tagged-pict.rkt") (lib "metapict/scribblings/coordinates.scrbl") (lib "metapict/path.rkt") (lib "metapict/examples/triangle-sss.rkt") (lib "metapict/scribblings/colors.scrbl") (lib "metapict/scribblings/curves.scrbl") (lib "metapict/debug.rkt") (lib "metapict/tree.rkt") (lib "metapict/examples/olympic-rings.rkt") (lib "metapict/dc.rkt") (lib "metapict/exp/render-math-using-picts.rkt") (lib "metapict/angles.rkt") (lib "metapict/mat.rkt") (lib "metapict/pict-lite.rkt") (lib "metapict/pict.rkt") (lib "metapict/todo/lexer.rkt") (lib "metapict/window.rkt") (lib "metapict/scribblings/metapict.scrbl") (lib "metapict/examples/pointilism2.rkt") (lib "metapict/examples/asymptote-venn-diagram.rkt") (lib "metapict/examples/reuleaux-triangle.rkt") (lib "metapict/examples/rotating-triangle.rkt") (lib "metapict/examples/gradient-example.rkt") (lib "metapict/scribblings/curve.scrbl") (lib "metapict/draw.rkt") (lib "metapict/examples/asymptote-hobby-control.rkt") (lib "metapict/scribblings/guide.rkt") (lib "metapict/scribblings/guide.scrbl") (lib "metapict/examples/exercises-angles-in-right-triangle.rkt") (lib "metapict/shapes.rkt") (lib "metapict/save-pdf.rkt") (lib "metapict/pt-vec.rkt") (lib "metapict/draw-bezier.rkt") (lib "metapict/exp/framed-table.rkt") (lib "metapict/scribblings/construction-of-bezier-curve.rkt") (lib "metapict/label.rkt") (lib "metapict/examples/metafont-book.rkt") (lib "metapict/extras/function-tables.rkt") (lib "metapict/scribblings/bez.scrbl") (lib "metapict/list3-sequence.rkt") (lib "metapict/examples/root-spiral.rkt") (lib "metapict/examples/glider.rkt") (lib "metapict/main.rkt") (lib "metapict/trig.rkt") (lib "metapict/extras/flags.rkt") (lib "metapict/dc-path.rkt"))) (name . "metapict") (nix-sha256 . "0dcrqjpbx9j6cvdz6fbs4dckic3j18wrm317fp26mqjwds039k1b") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (author:jensaxel@soegaard.net . #t) (graphics . #t) (images . #t) (metapict . #t) (ring:1 . #t))) (source . "git://github.com/soegaard/metapict") (tags . ("graphics" "images" "metapict")) (versions . #hash((default . #hasheq((checksum . "13c421eb1700174635e22c6277de7f0f36657b54") (source . "git://github.com/soegaard/metapict") (source_url . "http://github.com/soegaard/metapict/tree/master"))))))) ("db-win32-x86_64" . #hash((author . "mflatt@racket-lang.org") (checksum . "05a71e8561996a4ecedd64fc6f1c65e1b9eb0500") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "db-win32-x86_64") (source . "https://download.racket-lang.org/releases/6.12/pkgs/db-win32-x86_64.zip") (tags . ()))) ("cs7480-util" . #hasheq((author . "types@ccs.neu.edu davis.mil@husky.neu.edu") (authors . ("types@ccs.neu.edu" "davis.mil@husky.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cs7480-util" "doc/cs7480-util@cs7480-util/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cs7480-util.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cs7480-util.txt"))) (checksum . "cd672fcb1f09354ef37619ddeed6c396286acfa5") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "lang-file" "typed-racket-lib" "drracket-tool-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Static analysis utilities") (implies . ()) (last-checked . 1522414369) (last-edit . 1476383231) (last-updated . 1502815872) (modules . ((lib "cs7480-util/private/find-typedefs.rkt") (lib "cs7480-util/main.rkt") (lib "cs7480-util/docs/cs7480-util.scrbl") (lib "cs7480-util/private/find-defs.rkt") (lib "cs7480-util/private/find-required.rkt"))) (name . "cs7480-util") (nix-sha256 . "11w1q202pfx190z6mpf9hz5x4kg6zwcbpn7n4i614wyq70k9c847") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:davis.mil@husky.neu.edu . #t) (author:types@ccs.neu.edu . #t) (ring:1 . #t) (unstable . #t) (utility . #t))) (source . "git://github.com/MiloDavis/cs7480-util") (tags . ("unstable" "utility")) (versions . #hash((default . #hasheq((checksum . "cd672fcb1f09354ef37619ddeed6c396286acfa5") (source . "git://github.com/MiloDavis/cs7480-util") (source_url . "http://github.com/MiloDavis/cs7480-util/tree/master"))))))) ("elf" . #hasheq((author . "code_man@cybnet.ch ") (authors . ("code_man@cybnet.ch")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/elf.txt") (docs . (("main" "elf" "doc/elf@elf/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/elf.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/elf.txt"))) (checksum . "b4ce29f51fa06b6c283e5acf348f318dec539b16") (checksum-error . #f) (conflicts . ()) (dependencies . ()) (description . "Unix executable and linking format read/writing") (implies . ()) (last-checked . 1522414397) (last-edit . 1440179405) (last-updated . 1502815952) (modules . ((lib "elf/elf-sections.rkt") (lib "elf/elf-constants.rkt") (lib "elf/elf.scrbl") (lib "elf/elf-program-header.rkt") (lib "elf/main.rkt") (lib "elf/elf-header.rkt") (lib "elf/elf.rkt"))) (name . "elf") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:code_man@cybnet.ch . #t) (executable . #t) (linking . #t) (ring:1 . #t))) (source . "http://code_man.cybnet.ch/racket/elf.zip") (tags . ("executable" "linking")) (versions . #hash((default . #hasheq((checksum . "b4ce29f51fa06b6c283e5acf348f318dec539b16") (source . "http://code_man.cybnet.ch/racket/elf.zip") (source_url . "http://code_man.cybnet.ch/racket/elf.zip"))))))) ("unstable-pretty-lib" . #hash((author . "cce@racket-lang.org") (authors . ("cce@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-pretty-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-pretty-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "Experimental libraries for pretty printing") (implies . ()) (last-checked . 1522414698) (last-edit . 1445382797) (last-updated . 1502816515) (modules . ((lib "unstable/pretty.rkt"))) (name . "unstable-pretty-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:cce@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("unstable")) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) (default . #hasheq((checksum . "5d6d24be2b0a9c773ac30a22c870b7817ce9f90a") (source . "git://github.com/racket/unstable-pretty-lib") (source_url . "http://github.com/racket/unstable-pretty-lib/tree/master"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("xmlns" . #hasheq((author . "leo@lwh.jp") (authors . ("leo@lwh.jp")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "xml-ns" "doc/xml-ns@xmlns/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xmlns.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/xmlns.txt"))) (checksum . "b11d0010ceac1dac55b22d5eab51e24025593638") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "XML namespace support") (implies . ()) (last-checked . 1522414703) (last-edit . 1508578700) (last-updated . 1508584231) (modules . ((lib "xml/ns.rkt") (lib "xml/xml-ns.scrbl"))) (name . "xmlns") (nix-sha256 . "1pk2ninnyr2l3nc2q57xqn83rsdd0xj6kx8nai2ygsx3v232vjh1") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:leo@lwh.jp . #t) (ring:1 . #t) (xml . #t))) (source . "git://github.com/lwhjp/racket-xmlns") (tags . ("xml")) (versions . #hash((default . #hasheq((checksum . "b11d0010ceac1dac55b22d5eab51e24025593638") (source . "git://github.com/lwhjp/racket-xmlns") (source_url . "http://github.com/lwhjp/racket-xmlns/tree/master"))))))) ("values-plus" . #hasheq((author . "mflatt@cs.utah.edu jay@racket-lang.org") (authors . ("mflatt@cs.utah.edu" "jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "values+" "doc/values+@values-plus/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/values-plus.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/values-plus.txt"))) (checksum . "75df2e111928317ff61e9b82c2aaac664ddd0d6b") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "eli-tester" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "") (implies . ()) (last-checked . 1522414700) (last-edit . 1461964065) (last-updated . 1502816517) (modules . ((lib "values+/values+.scrbl") (lib "values+/main.rkt"))) (name . "values-plus") (nix-sha256 . "1i0fn5bbkyl13gcim3dm9m8w5rv3fddjrkffza6lgcfrnmi8b4s8") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:jay@racket-lang.org . #t) (author:mflatt@cs.utah.edu . #t) (ring:1 . #t))) (source . "git://github.com/mflatt/values-plus") (tags . ()) (versions . #hash((default . #hasheq((checksum . "75df2e111928317ff61e9b82c2aaac664ddd0d6b") (source . "git://github.com/mflatt/values-plus") (source_url . "http://github.com/mflatt/values-plus/tree/master"))))))) ("cldr-core" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cldr-core" "doc/cldr-core@cldr-core/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cldr-core.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cldr-core.txt"))) (checksum . "8a4d6de47ea572bfcee8d4df498be893906f52de") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "memoize" "racket-doc" "scribble-lib")) (description . "API for cldr-core data set") (implies . ()) (last-checked . 1522414314) (last-edit . 1426995002) (last-updated . 1502812291) (modules . ((lib "cldr/file.rkt") (lib "cldr/core.rkt") (lib "cldr/likely-subtags.rkt") (lib "cldr/scribblings/cldr-core.scrbl"))) (name . "cldr-core") (nix-sha256 . "12ybng7sp57mhw96z3vpsx0zk3dfq87khxadwxril4pmj5jg98pn") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:zeppieri@gmail.com . #t) (cldr . #t) (l10n . #t) (ring:1 . #t))) (source . "git://github.com/97jaz/cldr-core") (tags . ("cldr" "l10n")) (versions . #hash((default . #hasheq((checksum . "8a4d6de47ea572bfcee8d4df498be893906f52de") (source . "git://github.com/97jaz/cldr-core") (source_url . "http://github.com/97jaz/cldr-core/tree/master"))))))) ("web-server-test" . #hash((author . "jay@racket-lang.org") (checksum . "1ae7554795359bbc54ebf128302466b2e0dbcc52") (dependencies . ("base" "compatibility-lib" "eli-tester" "htdp-lib" "rackunit-lib" "web-server-lib" "net-cookies")) (description . "jay@racket-lang.org") (modules . ()) (name . "web-server-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/web-server-test.zip") (tags . ()))) ("tzinfo" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "tzinfo" "doc/tzinfo@tzinfo/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tzinfo.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tzinfo.txt"))) (checksum . "361798b74fa73b11670b840762e576ec563792f1") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "cldr-core" "rackunit-lib" ("tzdata" #:platform windows #:version "0.3") "racket-doc" "scribble-lib")) (description . "API for querying the IANA tz database") (implies . ()) (last-checked . 1522414696) (last-edit . 1427001065) (last-updated . 1502816509) (modules . ((lib "tzinfo/private/tzfile-parser.rkt") (lib "tzinfo/private/zoneinfo.rkt") (lib "tzinfo/private/zoneinfo-search.rkt") (lib "tzinfo/zoneinfo.rkt") (lib "tzinfo/private/os/env.rkt") (lib "tzinfo/private/generics.rkt") (lib "tzinfo/source.rkt") (lib "tzinfo/main.rkt") (lib "tzinfo/scribblings/tzinfo.scrbl") (lib "tzinfo/private/os/windows.rkt") (lib "tzinfo/private/tabfile-parser.rkt") (lib "tzinfo/test/zoneinfo.rkt") (lib "tzinfo/private/os/windows-registry.rkt") (lib "tzinfo/private/os/unix.rkt") (lib "tzinfo/private/structs.rkt"))) (name . "tzinfo") (nix-sha256 . "155zk285qbl2gi87kgbwn4wap0q848bwdg82kjciw4dz0d492fql") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:zeppieri@gmail.com . #t) (ring:1 . #t) (timezone . #t))) (source . "git://github.com/97jaz/tzinfo") (tags . ("timezone")) (versions . #hash((default . #hasheq((checksum . "361798b74fa73b11670b840762e576ec563792f1") (source . "git://github.com/97jaz/tzinfo") (source_url . "http://github.com/97jaz/tzinfo/tree/master"))))))) ("xml-rpc" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "xml-rpc" "doc/xml-rpc@xml-rpc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xml-rpc.txt") (test-failure-log . "server/built/test-fail/xml-rpc.txt") (test-success-log . #f))) (checksum . "1af3dab86c85b708914ab86acf6eecf4dd99c115") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "web-server-lib" "racket-doc" "rackunit-lib" "scribble-lib" "web-server-doc" "net-doc")) (description . "A native Racket XML-RPC client and server library") (implies . ()) (last-checked . 1522414703) (last-edit . 1372734358) (last-updated . 1502816533) (modules . ((lib "tests/net/xml-rpc/serialise-test.rkt") (lib "tests/net/xml-rpc/core-test.rkt") (lib "net/xml-rpc/base.rkt") (lib "tests/net/xml-rpc/util.rkt") (lib "tests/net/xml-rpc/run-tests.rkt") (lib "net/xml-rpc/protocol.rkt") (lib "net/xml-rpc/xml-rpc.scrbl") (lib "net/xml-rpc/xml-rpc.rkt") (lib "tests/net/xml-rpc/all-xml-rpc-tests.rkt") (lib "tests/net/xml-rpc/server-test.rkt") (lib "tests/net/xml-rpc/protocol-test.rkt") (lib "net/xml-rpc/serialise.rkt") (lib "net/xml-rpc/server.rkt") (lib "net/xml-rpc/core.rkt") (lib "net/xml-rpc/client.rkt") (lib "net/xml-rpc/server-core.rkt") (lib "net/xml-rpc.rkt"))) (name . "xml-rpc") (nix-sha256 . "14hpgv2m7ifimm70gjknmqjm85hf8c03g8qln0b82l5j1ycmwdy9") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (net . #t) (ring:1 . #t))) (source . "github://github.com/jeapostrophe/xml-rpc/master") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "1af3dab86c85b708914ab86acf6eecf4dd99c115") (source . "github://github.com/jeapostrophe/xml-rpc/master") (source_url . "http://github.com/jeapostrophe/xml-rpc/tree/master"))))))) ("rx" . #hasheq((author . "vervaeck.sam@skynet.be") (authors . ("vervaeck.sam@skynet.be")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/rx.txt") (docs . (("main" "rx" "doc/rx@rx/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rx.txt"))) (checksum . "562392ae225e112d153860c8aa5555418cf123b7") (checksum-error . #f) (conflicts . ()) (dependencies . ("racket-doc" "gui-doc" "scribble-lib")) (description . "A set of tools and utilities for reactive programming") (implies . ()) (last-checked . 1522414673) (last-edit . 1488525318) (last-updated . 1502816415) (modules . ((lib "rx/main.rkt") (lib "rx/gui.rkt") (lib "rx/event-stream.rkt") (lib "rx/scribblings/rx.scrbl") (lib "rx/event.rkt") (lib "rx/cell.rkt") (lib "rx/event-emitter.rkt"))) (name . "rx") (nix-sha256 . "13zblsd236sd2b8h3yvzkkpg413s4j63sispbhi3fqcgsxymjndz") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:vervaeck.sam@skynet.be . #t) (ring:1 . #t) (rx . #t) (tools . #t))) (source . "git://github.com/samvv/racket-rx") (tags . ("rx" "tools")) (versions . #hash((default . #hasheq((checksum . "562392ae225e112d153860c8aa5555418cf123b7") (source . "git://github.com/samvv/racket-rx") (source_url . "http://github.com/samvv/racket-rx/tree/master"))))))) ("monad" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/monad.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/monad.txt"))) (checksum . "e61a1b940cac3e85a0408d4463c9324bb3615413") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "A generic/polymorphic monad library for Racket.") (implies . ()) (last-checked . 1522414436) (last-edit . 1443058483) (last-updated . 1502816184) (modules . ((lib "monad/state.rkt") (lib "monad/examples/example.rkt") (lib "monad/io.rkt") (lib "monad/main.rkt"))) (name . "monad") (nix-sha256 . "1viw97g2l0faplyky4rql6hsahkhx66gy8h4hz7j05xb7kmki47s") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:tonygarnockjones@gmail.com . #t) (io . #t) (monad . #t) (ring:1 . #t))) (source . "github://github.com/tonyg/racket-monad/master") (tags . ("io" "monad")) (versions . #hash((default . #hasheq((checksum . "e61a1b940cac3e85a0408d4463c9324bb3615413") (source . "github://github.com/tonyg/racket-monad/master") (source_url . "http://github.com/tonyg/racket-monad/tree/master"))))))) ("lang-file" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "read-lang-file" "doc/read-lang-file@lang-file/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lang-file.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lang-file.txt"))) (checksum . "4dc0385056a7e723a788adfd42078d3766f4f5bf") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Functions for dealing with #lang files") (implies . ()) (last-checked . 1522414422) (last-edit . 1464223872) (last-updated . 1502816147) (modules . ((lib "lang-file/scribblings/read-lang-file.scrbl") (lib "lang-file/read-lang-file.rkt"))) (name . "lang-file") (nix-sha256 . "0d1pm5xnz2vs21al6s3vlyqi0l0il683qxrv9qr0z1zk57rm12kj") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (file . #t) (lang . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/lang-file") (tags . ("file" "lang")) (versions . #hash((default . #hasheq((checksum . "4dc0385056a7e723a788adfd42078d3766f4f5bf") (source . "git://github.com/AlexKnauth/lang-file") (source_url . "http://github.com/AlexKnauth/lang-file/tree/master"))))))) ("collections" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/collections.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/collections.txt"))) (checksum . "5b3ec9b3ea3ca493f3fcda4994b81bc804f29870") (checksum-error . #f) (conflicts . ()) (dependencies . ("collections-lib" "collections-doc")) (description . "A generic interface for collections") (implies . ("collections-lib" "collections-doc")) (last-checked . 1522414314) (last-edit . 1475813259) (last-updated . 1502812296) (modules . ()) (name . "collections") (nix-sha256 . "0vh781q0iw0wv1a741qp7s9havc030p5wahz6vcdhfn9azv00znp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-collections?path=collections") (tags . ()) (versions . #hash(("6.2.1" . #hasheq((checksum . "63a829b7766a05b989e9ad18f32e3b1b29d0bb65") (source . "git://github.com/lexi-lambda/racket-collections#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/racket-collections/tree/master#version-exception--6.2"))) (default . #hasheq((checksum . "5b3ec9b3ea3ca493f3fcda4994b81bc804f29870") (source . "git://github.com/lexi-lambda/racket-collections?path=collections") (source_url . "http://github.com/lexi-lambda/racket-collections/tree/master?path=collections"))) ("6.2" . #hasheq((checksum . "63a829b7766a05b989e9ad18f32e3b1b29d0bb65") (source . "git://github.com/lexi-lambda/racket-collections#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/racket-collections/tree/master#version-exception--6.2"))))))) ("bcrypt" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/bcrypt.txt") (success-log . "server/built/install/bcrypt.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bcrypt.txt"))) (checksum . "94c0018da46d64700bfa549c1146801a8a6db87d") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "dynext-lib" "rackunit-lib")) (description . "A Racket interface to the bcrypt key derivation function.") (implies . ()) (last-checked . 1522414305) (last-edit . 1427073315) (last-updated . 1502812278) (modules . ((lib "bcrypt/private/install.rkt") (lib "bcrypt/main.rkt"))) (name . "bcrypt") (nix-sha256 . "0q97qgqpbn5zb5rq959hshrqm63398kwf5s5n9jpiv2pbz9ac6zb") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (crypto . #t) (ring:1 . #t))) (source . "github://github.com/samth/bcrypt.rkt/master/") (tags . ("crypto")) (versions . #hash((default . #hasheq((checksum . "94c0018da46d64700bfa549c1146801a8a6db87d") (source . "github://github.com/samth/bcrypt.rkt/master/") (source_url . "http://github.com/samth/bcrypt.rkt/tree/master/"))))))) ("lindenmayer" . #hasheq((author . "robby@racket-lang.org spencer@florence.io daniel.feltey@eecs.northwestern.edu stamourv@racket-lang.org") (authors . ("robby@racket-lang.org" "spencer@florence.io" "daniel.feltey@eecs.northwestern.edu" "stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "lindenmayer" "doc/lindenmayer@lindenmayer/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lindenmayer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lindenmayer.txt"))) (checksum . "d87c3d536eabbb96e563b127c396a3421127329d") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "data-lib" "drracket-plugin-lib" "gui-lib" ("htdp-lib" #:version "1.5") "parser-tools-lib" "pict-lib" "pict3d" "syntax-color-lib" "typed-racket-lib" "math-lib" "2d-lib" "rackunit-lib" "pict-doc" "racket-doc" "scribble-lib" "htdp-doc" "syntax-color-doc" "typed-racket-doc" "typed-racket-more")) (description . "") (implies . ()) (last-checked . 1522414425) (last-edit . 1488204750) (last-updated . 1504022025) (modules . ((lib "lindenmayer/simple/compile.rkt") (lib "lindenmayer/examples/twisty-trees.rkt") (lib "lindenmayer/main.rkt") (lib "lindenmayer/3d.rkt") (lib "lindenmayer/process-syntax.rkt") (lib "lindenmayer/scribblings/3d-turtle.scrbl") (lib "lindenmayer/examples/abop-page25-f-refactored.rkt") (lib "lindenmayer/examples/leaf-fern.rkt") (lib "lindenmayer/examples/trees.rkt") (lib "lindenmayer/syntax-properties.rkt") (lib "lindenmayer/examples/flowery-bush.rkt") (lib "lindenmayer/lexer.rkt") (lib "lindenmayer/examples/lily-of-the-valley.rkt") (lib "lindenmayer/examples/3d-leaf.rkt") (lib "lindenmayer/scribblings/util.rkt") (lib "lindenmayer/examples/fib.rkt") (lib "lindenmayer/simple/lang/reader.rkt") (lib "lindenmayer/examples/dragon.rkt") (lib "lindenmayer/examples/sunflower.rkt") (lib "lindenmayer/examples/seaweed.rkt") (lib "lindenmayer/structs.rkt") (lib "lindenmayer/examples/leaf-alternating.rkt") (lib "lindenmayer/scribblings/deflsymbol.rkt") (lib "lindenmayer/examples/3d-with-leaves.rkt") (lib "lindenmayer/examples/abop-page25-e.rkt") (lib "lindenmayer/examples/koch.rkt") (lib "lindenmayer/scribblings/simple.scrbl") (lib "lindenmayer/examples/gaols.rkt") (lib "lindenmayer/scribblings/turtles.scrbl") (lib "lindenmayer/examples/abop-page25-f.rkt") (lib "lindenmayer/examples/abop-page-25-d-refactored.rkt") (lib "lindenmayer/examples/abop-page25-d.rkt") (lib "lindenmayer/examples/leaf.rkt") (lib "lindenmayer/examples/abop-page25-a.rkt") (lib "lindenmayer/search.rkt") (lib "lindenmayer/examples/wierd-not-really-tree-looking-thing.rkt") (lib "lindenmayer/3d-turtle.rkt") (lib "lindenmayer/examples/skew-tree.rkt") (lib "lindenmayer/runtime.rkt") (lib "lindenmayer/tool.rkt") (lib "lindenmayer/examples/better-trees.rkt") (lib "lindenmayer/configure-runtime.rkt") (lib "lindenmayer/turtle.rkt") (lib "lindenmayer/simple/structs.rkt") (lib "lindenmayer/private/expression-parse.rkt") (lib "lindenmayer/examples/normal-trees.rkt") (lib "lindenmayer/examples/hilbert.rkt") (lib "lindenmayer/simple/lex.rkt") (lib "lindenmayer/private/define-arity.rkt") (lib "lindenmayer/examples/serp.rkt") (lib "lindenmayer/simple/parse.rkt") (lib "lindenmayer/scribblings/lindenmayer.scrbl") (lib "lindenmayer/lang.rkt") (lib "lindenmayer/examples/abop-page25-c.rkt") (lib "lindenmayer/examples/golden-mean.rkt") (lib "lindenmayer/examples/abop-page25-b.rkt") (lib "lindenmayer/simple/run.rkt"))) (name . "lindenmayer") (nix-sha256 . "0q6g0jhk90i5cqxcb58d70lyv01x71x9hq6xslhsa7kbwkmhl8fy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:daniel.feltey@eecs.northwestern.edu . #t) (author:robby@racket-lang.org . #t) (author:spencer@florence.io . #t) (author:stamourv@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/rfindler/lindenmayer") (tags . ()) (versions . #hash((default . #hasheq((checksum . "d87c3d536eabbb96e563b127c396a3421127329d") (source . "git://github.com/rfindler/lindenmayer") (source_url . "http://github.com/rfindler/lindenmayer/tree/master"))))))) ("r7rs" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/r7rs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/r7rs.txt"))) (checksum . "56832593210ed748569da39c2c2023bc493e614b") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "r7rs-lib")) (description . "An implementation of R7RS as a #lang") (implies . ("r7rs-lib")) (last-checked . 1522414539) (last-edit . 1462746878) (last-updated . 1502816346) (modules . ()) (name . "r7rs") (nix-sha256 . "00imxm7cpd6z30jj2gamm43b9axpgvldal32ddkfh3w4znn5d5zi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-r7rs?path=r7rs") (tags . ()) (versions . #hash((default . #hasheq((checksum . "56832593210ed748569da39c2c2023bc493e614b") (source . "git://github.com/lexi-lambda/racket-r7rs?path=r7rs") (source_url . "http://github.com/lexi-lambda/racket-r7rs/tree/master?path=r7rs"))))))) ("serialize-cstruct-lib" . #hash((author . "tobias.hammer@dlr.de") (checksum . "64ea66070c50624eae78745f975cb9205c39c50e") (dependencies . ("base")) (description . "tobias.hammer@dlr.de") (modules . ()) (name . "serialize-cstruct-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/serialize-cstruct-lib.zip") (tags . ()))) ("draw-doc" . #hash((author . "mflatt@racket-lang.org") (checksum . "1b73386f9deb779115150c2bc8889f272885f066") (dependencies . ("gui-doc" "pict-doc" "at-exp-lib" "base" "gui-lib" "pict-lib" "scribble-lib" "draw-lib" "racket-doc")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "draw-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/draw-doc.zip") (tags . ()))) ("pict3d-die-cut" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pict3d-die-cut" "doc/pict3d-die-cut@pict3d-die-cut/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pict3d-die-cut.txt") (test-failure-log . "server/built/test-fail/pict3d-die-cut.txt") (test-success-log . #f))) (checksum . "29354f8dd2e9f964da834903332318a995d15727") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" ("draw-lib" #:version "1.8") "gui-lib" "pict3d" "glu-tessellate" "draw-doc" "racket-doc" "scribble-lib")) (description . "For Pict3D, generates text and other 2-D shapes from paths") (implies . ()) (last-checked . 1522414512) (last-edit . 1443652999) (last-updated . 1502816255) (modules . ((lib "pict3d-die-cut/pict3d-die-cut.scrbl") (lib "pict3d-die-cut/main.rkt"))) (name . "pict3d-die-cut") (nix-sha256 . "1hw51frdpq8yfh87yp3w80gg5ilx0vbyr8zngdw4v7giw8mp821b") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mflatt@cs.utah.edu . #t) (graphics . #t) (ring:1 . #t))) (source . "git://github.com/mflatt/pict3d-die-cut") (tags . ("graphics")) (versions . #hash((default . #hasheq((checksum . "29354f8dd2e9f964da834903332318a995d15727") (source . "git://github.com/mflatt/pict3d-die-cut") (source_url . "http://github.com/mflatt/pict3d-die-cut/tree/master"))))))) ("bnf" . #hasheq((author . "pcn@cs.umd.edu") (authors . ("pcn@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bnf.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bnf.txt"))) (checksum . "4b335567bd1d9a66fb1530ae5b1d58d7d6cc3914") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "typed-struct-props")) (description . "Concise Typed Racket syntax for declaring recursive data in BNF") (implies . ()) (last-checked . 1522414311) (last-edit . 1492834505) (last-updated . 1522005369) (modules . ((lib "bnf/tests.rkt") (lib "bnf/main.rkt"))) (name . "bnf") (nix-sha256 . "1lqgi345vxakd3yv7y75pgzwjqvlx1ibanmaay5mcldgcqsh6i2r") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:pcn@cs.umd.edu . #t) (bnf . #t) (data . #t) (grammar . #t) (ring:1 . #t) (typed-racket . #t))) (source . "git://github.com/philnguyen/bnf?path=bnf") (tags . ("bnf" "data" "grammar" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "4b335567bd1d9a66fb1530ae5b1d58d7d6cc3914") (source . "git://github.com/philnguyen/bnf?path=bnf") (source_url . "http://github.com/philnguyen/bnf/tree/master?path=bnf"))))))) ("zKanren" . #hasheq((author . "zaomir@outlook.com") (authors . ("zaomir@outlook.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/zKanren.txt") (docs . (("main" "zKanren" "doc/zKanren@zKanren/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zKanren.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/zKanren.txt"))) (checksum . "82c936ed11fa703b3b26895b3a2d7b7f379a8c35") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib" "typed-racket")) (description . "-") (implies . ()) (last-checked . 1522414704) (last-edit . 1521200061) (last-updated . 1521803934) (modules . ((lib "zKanren/scribblings/zKanren.scrbl") (lib "zKanren/main.rkt") (lib "zKanren/zk.rkt"))) (name . "zKanren") (nix-sha256 . "0506aa0l7v95my9dncxblmnp1jdf2d16xbyyvdh8x28r6aimr4m6") (ring . 2) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:zaomir@outlook.com . #t) (logic . #t) (miniKanren . #t) (ring:2 . #t))) (source . "https://github.com/the-language/zKanren2.git") (tags . ("logic" "miniKanren")) (versions . #hash((default . #hasheq((checksum . "82c936ed11fa703b3b26895b3a2d7b7f379a8c35") (source . "https://github.com/the-language/zKanren2.git") (source_url . "https://github.com/the-language/zKanren2.git"))))))) ("scrypt" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/scrypt.txt") (success-log . "server/built/install/scrypt.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scrypt.txt"))) (checksum . "0a37d1cdca43e08c086f0e2e312c7916cb790edb") (checksum-error . #f) (conflicts . ()) (dependencies . ("srfi-lite-lib" "base" "dynext-lib" "rackunit-lib")) (description . "Racket binding to Colin Percival's \"scrypt\" function.") (implies . ()) (last-checked . 1522414677) (last-edit . 1365202290) (last-updated . 1502816423) (modules . ((lib "scrypt/private/install.rkt") (lib "scrypt/wrapper.rkt") (lib "scrypt/main.rkt") (lib "scrypt/test-main.rkt"))) (name . "scrypt") (nix-sha256 . "0xm6apzgilf4g664rw5bzicl30gf534xvf4pvl1g27jnww9lcq27") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:tonygarnockjones@gmail.com . #t) (crypto . #t) (ffi . #t) (ring:1 . #t))) (source . "github://github.com/tonyg/racket-scrypt/master/") (tags . ("crypto" "ffi")) (versions . #hash((default . #hasheq((checksum . "0a37d1cdca43e08c086f0e2e312c7916cb790edb") (source . "github://github.com/tonyg/racket-scrypt/master/") (source_url . "http://github.com/tonyg/racket-scrypt/tree/master/"))))))) ("parser-tools-lib" . #hash((author . "mflatt@racket-lang.org") (checksum . "c979ba6d4e1616ed27e5da85d73726343c44c515") (dependencies . ("scheme-lib" "base" "compatibility-lib" "rackunit-lib")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "parser-tools-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/parser-tools-lib.zip") (tags . ()))) ("doodle" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "doodle" "doc/doodle@doodle/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/doodle.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/doodle.txt"))) (checksum . "a6840bb97bb384b92c612960aca676e31662453c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "pict-lib" "draw-lib" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (last-checked . 1522414381) (last-edit . 1455079653) (last-updated . 1502815907) (modules . ((lib "doodle/private/template/utils.rkt") (lib "doodle/private/template/paper.scrbl") (lib "doodle/scribblings/doodle.scrbl") (lib "doodle/main.rkt"))) (name . "doodle") (nix-sha256 . "1bl775bkckaiplglbsf5bq98mznlm9f2g887lphcb5nn22lmsfgf") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t) (scribble . #t))) (source . "git://github.com/LeifAndersen/doodle") (tags . ("scribble")) (versions . #hash((default . #hasheq((checksum . "a6840bb97bb384b92c612960aca676e31662453c") (source . "git://github.com/LeifAndersen/doodle") (source_url . "http://github.com/LeifAndersen/doodle/tree/master"))))))) ("rsa" . #hasheq((author . "michael.g.bowe@gmail.com") (authors . ("michael.g.bowe@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/rsa.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rsa.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rsa.txt"))) (checksum . "0498189663e984d849ef4f2109cfd32058b247e0") (checksum-error . #f) (conflicts . ()) (dependencies . ()) (description . "An rsa encryption library for racket") (implies . ()) (last-checked . 1522414672) (last-edit . 1475156358) (last-updated . 1475156282) (modules . ((lib "rsa/rsa.rkt"))) (name . "rsa") (nix-sha256 . "0cd9d2nfhaz6c56kykl0d2lksf2qzvhsa87zqmacqlkf5y4w85q9") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:michael.g.bowe@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/mgbowe1/racket-rsa") (tags . ()) (versions . #hash((default . #hasheq((checksum . "0498189663e984d849ef4f2109cfd32058b247e0") (source . "git://github.com/mgbowe1/racket-rsa") (source_url . "http://github.com/mgbowe1/racket-rsa/tree/master"))))))) ("pollen" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pollen" "doc/pollen@pollen/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pollen.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pollen.txt"))) (checksum . "a854e2ed7f549698e721f37bb9d937145ef696cf") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" ("txexpr" #:version "0.2") ("sugar" #:version "0.2") ("markdown" #:version "0.18") "htdp" "at-exp-lib" "html-lib" "rackjure" "web-server-lib" "scribble-lib" "scribble-text-lib" "rackunit-lib" "gui-lib" "string-constants-lib" "plot-gui-lib" "scribble-lib" "racket-doc" "rackunit-doc" "plot-doc" "scribble-doc" "slideshow-doc" "web-server-doc" "drracket")) (description . "Publishing system for web-based books") (implies . ()) (last-checked . 1522414533) (last-edit . 1408927796) (last-updated . 1522302785) (modules . ((lib "pollen/scribblings/core.scrbl") (lib "pollen/scribblings/version-history.scrbl") (lib "pollen/test/test-submodule.rkt") (lib "pollen/test/test-override.rkt") (lib "pollen/test/test-pathup.rkt") (lib "pollen/scribblings/more-help.scrbl") (lib "pollen/unstable/convert.rkt") (lib "pollen/test/test-lang-core.rkt") (lib "pollen/ptree.rkt") (lib "pollen/private/file-utils.rkt") (lib "pollen/test/test-lang-splice.rkt") (lib "pollen/private/split-metas.rkt") (lib "pollen/test/data/override/pollen.rkt") (lib "pollen/scribblings/template.scrbl") (lib "pollen/markup.rkt") (lib "pollen/scribblings/installation.scrbl") (lib "pollen/test/test-current-metas-none.rkt") (lib "pollen/scribblings/decode.scrbl") (lib "pollen/test/test-poly.rkt") (lib "pollen/scribblings/pagetree.scrbl") (lib "pollen/top.rkt") (lib "pollen/scribblings/file.scrbl") (lib "pollen/scribblings/formats.scrbl") (lib "pollen/cache.rkt") (lib "pollen/template/html.rkt") (lib "pollen/scribblings/mb-tools.rkt") (lib "pollen/private/to-string.rkt") (lib "pollen/test/data/poly/pollen.rkt") (lib "pollen/scribblings/quick.scrbl") (lib "pollen/scribblings/tutorial-mini.scrbl") (lib "pollen/template/base.rkt") (lib "pollen/unstable/math.rkt") (lib "pollen/test/data/pollen-mode/pollen.rkt") (lib "pollen/test/test-meta.rkt") (lib "pollen/private/doclang-raw.rkt") (lib "pollen/scribblings/story.scrbl") (lib "pollen/unstable/pygments.rkt") (lib "pollen/private/output.rkt") (lib "pollen/decode.rkt") (lib "pollen/private/project.rkt") (lib "pollen/test/test-subtemplate.rkt") (lib "pollen/mode.rkt") (lib "pollen/private/reader-base.rkt") (lib "pollen/scribblings/top.scrbl") (lib "pollen/private/cache-utils.rkt") (lib "pollen/markdown.rkt") (lib "pollen/setup.rkt") (lib "pollen/pre.rkt") (lib "pollen/file.rkt") (lib "pollen/private/version.rkt") (lib "pollen/scribblings/typography.scrbl") (lib "pollen/unstable/typography.rkt") (lib "pollen/test/data/quick-tour/uptown/pollen.rkt") (lib "pollen/private/drracket-buttons.rkt") (lib "pollen/pagetree.rkt") (lib "pollen/test/test-quick-tour.rkt") (lib "pollen/private/runtime-config.rkt") (lib "pollen/scribblings/acknowledgments.scrbl") (lib "pollen/private/splice.rkt") (lib "pollen/test/test-escape-ext.rkt") (lib "pollen/scribblings/tutorial-second.scrbl") (lib "pollen/tag.rkt") (lib "pollen/private/main-base.rkt") (lib "pollen/scribblings/tag.scrbl") (lib "pollen/private/update-info.rkt") (lib "pollen/private/debug.rkt") (lib "pollen/private/dialect.rkt") (lib "pollen/private/preheat-cache.rkt") (lib "pollen/scribblings/big-picture.scrbl") (lib "pollen/test/data/subtemplate/pollen.rkt") (lib "pollen/scribblings/render.scrbl") (lib "pollen/private/project-server.rkt") (lib "pollen/scribblings/module-reference.scrbl") (lib "pollen/private/mode-indentation.rkt") (lib "pollen/scribblings/cache.scrbl") (lib "pollen/main.rkt") (lib "pollen/test/test-rerequire.rkt") (lib "pollen/scribblings/format-test.scrbl") (lib "pollen/test/data/pathup/pollen.rkt") (lib "pollen/private/project-server-routes.rkt") (lib "pollen/test/data/pathup/subdir/subdir/pollen.rkt") (lib "pollen/scribblings/raco.scrbl") (lib "pollen/scribblings/tutorial-first.scrbl") (lib "pollen/scribblings/tutorial-fourth.scrbl") (lib "pollen/template.rkt") (lib "pollen/scribblings/pygments.scrbl") (lib "pollen/test/pollen.rkt") (lib "pollen/scribblings/programming-pollen.scrbl") (lib "pollen/scribblings/convert.scrbl") (lib "pollen/test/test-third-tutorial-files.rkt") (lib "pollen/scribblings/command.scrbl") (lib "pollen/core.rkt") (lib "pollen/test/data/rerequire/pollen.rkt") (lib "pollen/test/test-current-metas.rkt") (lib "pollen/scribblings/license.scrbl") (lib "pollen/private/manual-history.rkt") (lib "pollen/scribblings/third-tutorial-files/pollen.rkt") (lib "pollen/scribblings/unstable-module-reference.scrbl") (lib "pollen/scribblings/pollen.scrbl") (lib "pollen/unstable/html.rkt") (lib "pollen/test/test-langs.rkt") (lib "pollen/test/test-inline-submodule.rkt") (lib "pollen/scribblings/utils.rkt") (lib "pollen/private/whitespace.rkt") (lib "pollen/scribblings/tutorial-third.scrbl") (lib "pollen/private/include-template.rkt") (lib "pollen/scribblings/setup.scrbl") (lib "pollen/render.rkt") (lib "pollen/test/test-output.rkt") (lib "pollen/test/test-pollen-mode.rkt") (lib "pollen/misc/tutorial.rkt") (lib "pollen/private/command.rkt") (lib "pollen/test/data/escape-ext/pollen.rkt"))) (name . "pollen") (nix-sha256 . "1xk7y8kfy8jlvj4hawpq9avhvw7zilzk88axvhqkyl54x0459d8d") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mb@mbtype.com . #t) (ring:1 . #t))) (source . "git://github.com/mbutterick/pollen") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a854e2ed7f549698e721f37bb9d937145ef696cf") (source . "git://github.com/mbutterick/pollen") (source_url . "http://github.com/mbutterick/pollen/tree/master"))))))) ("chain-module-begin" . #hasheq((author . "georges.duperon@gmail.com") (authors . ("georges.duperon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "chain-module-begin" "doc/chain-module-begin@chain-module-begin/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/chain-module-begin.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/chain-module-begin.txt"))) (checksum . "805a2e1d80555cbb8f4723ce2636cfecd416149c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "debug-scopes" "scribble-lib" "racket-doc")) (description . "Helper to define meta-languages which can chain-call other languages. Status: Experimental (no backwards compatibility).") (implies . ()) (last-checked . 1522414312) (last-edit . 1501079090) (last-updated . 1502812288) (modules . ((lib "chain-module-begin/main.rkt") (lib "chain-module-begin/scribblings/chain-module-begin.scrbl"))) (name . "chain-module-begin") (nix-sha256 . "1j8299kgin2m99c5d4b4c9hpnh8hzfpyr7kvxxv3n85h0jrngwfy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:georges.duperon@gmail.com . #t) (experimental . #t) (lang-extension . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/jsmaniac/chain-module-begin.git") (tags . ("experimental" "lang-extension" "syntax")) (versions . #hash((default . #hasheq((checksum . "805a2e1d80555cbb8f4723ce2636cfecd416149c") (source . "https://github.com/jsmaniac/chain-module-begin.git") (source_url . "https://github.com/jsmaniac/chain-module-begin.git"))))))) ("data-enumerate-lib" . #hash((author . "maxsnew@racket-lang.org jay@racket-lang.org") (checksum . "24b4d198cd73364c4664caa2458c3d076e71fc53") (dependencies . (("base" #:version "6.8.0.2") "data-lib" "math-lib" "rackunit-lib")) (description . "maxsnew@racket-lang.org jay@racket-lang.org") (modules . ()) (name . "data-enumerate-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/data-enumerate-lib.zip") (tags . ()))) ("math" . #hash((author . "ntoronto@racket-lang.org") (checksum . "79054d63cbada868bb1a2cbd8594d588574d7f3b") (dependencies . ("math-lib" "math-doc")) (description . "ntoronto@racket-lang.org") (modules . ()) (name . "math") (source . "https://download.racket-lang.org/releases/6.12/pkgs/math.zip") (tags . ()))) ("persistent-array" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "persistent-array" "doc/persistent-array@persistent-array/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/persistent-array.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/persistent-array.txt"))) (checksum . "9299dd5b6b33a953bdc4bfca3edcb956a86a35e2") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "A semi-persistent array") (implies . ()) (last-checked . 1522414511) (last-edit . 1399935741) (last-updated . 1503067163) (modules . ((lib "data/p-array.scrbl") (lib "data/p-array.rkt"))) (name . "persistent-array") (nix-sha256 . "0816mgqnd10pbyi7s6a2wb83nb22ywpvg03vaff6qd6h9sd219l8") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:samth@ccs.neu.edu . #t) (data . #t) (ring:1 . #t))) (source . "git://github.com/samth/persistent-array") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "9299dd5b6b33a953bdc4bfca3edcb956a86a35e2") (source . "git://github.com/samth/persistent-array") (source_url . "http://github.com/samth/persistent-array/tree/master"))))))) ("match-count" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/match-count.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/match-count.txt"))) (checksum . "99dc72c1dc254602d92d46f12552b95fab6f2ee5") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "Instrumented match") (implies . ()) (last-checked . 1522414428) (last-edit . 1383076503) (last-updated . 1502816164) (modules . ((lib "match-count/main.rkt"))) (name . "match-count") (nix-sha256 . "0918y8wfvyvkmmir7kcjwfhy8j3x1mqmc069ls01cjkmbha288ph") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (match . #t) (profiling . #t) (ring:1 . #t))) (source . "git://github.com/samth/match-count") (tags . ("match" "profiling")) (versions . #hash((default . #hasheq((checksum . "99dc72c1dc254602d92d46f12552b95fab6f2ee5") (source . "git://github.com/samth/match-count") (source_url . "http://github.com/samth/match-count/tree/master"))))))) ("webapi" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "webapi" "doc/webapi@webapi/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/webapi.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/webapi.txt"))) (checksum . "c1a172e360db667be49dcd81eba85f4a35b73a94") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "sxml" "html-writing" "compatibility-lib" "web-server-lib" "racket-doc" "scribble-lib")) (description . "Implementations of a few web APIs, including OAuth2, PicasaWeb, and Blogger.") (implies . ()) (last-checked . 1522414701) (last-edit . 1382383606) (last-updated . 1502816524) (modules . ((lib "webapi/picasa.rkt") (lib "webapi/private/sxml.rkt") (lib "webapi/private/oauth2-web.rkt") (lib "webapi/atom-resource.rkt") (lib "webapi/blogger.rkt") (lib "webapi/atom.rkt") (lib "webapi/private/has-atom.rkt") (lib "webapi/scribblings/blogger.scrbl") (lib "webapi/scribblings/oauth2.scrbl") (lib "webapi/private/unstable-lazy-require.rkt") (lib "webapi/scribblings/picasa.scrbl") (lib "webapi/scribblings/config.rkt") (lib "webapi/oauth2.rkt") (lib "webapi/scribblings/atom.scrbl") (lib "webapi/private/net.rkt") (lib "webapi/private/oauth2.rkt") (lib "webapi/scribblings/webapi.scrbl") (lib "webapi/main.rkt"))) (name . "webapi") (nix-sha256 . "0sxib8fpahn8is4p121a0mwm4dkk6qy8w11fw5wvxfbywll46hcq") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (net . #t) (oauth . #t) (ring:1 . #t))) (source . "git://github.com/rmculpepper/webapi#pkg") (tags . ("net" "oauth")) (versions . #hash((default . #hasheq((checksum . "c1a172e360db667be49dcd81eba85f4a35b73a94") (source . "git://github.com/rmculpepper/webapi#pkg") (source_url . "http://github.com/rmculpepper/webapi/tree/master#pkg"))))))) ("send-exp" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/send-exp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/send-exp.txt"))) (checksum . "94a8101bc410101327b0e65722512e5e8d0b1599") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "Terse syntax for object-oriented message sending") (implies . ()) (last-checked . 1522414677) (last-edit . 1402507661) (last-updated . 1502816424) (modules . ((lib "send-exp/lang.rkt") (lib "send-exp/lang/reader.rkt"))) (name . "send-exp") (nix-sha256 . "0qmp93p0dv22a6zv9gb2zs37ky2j6j0p87qlxwm1c4d9h17sw180") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t) (syntax . #t))) (source . "git://github.com/tonyg/racket-send-exp") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "94a8101bc410101327b0e65722512e5e8d0b1599") (source . "git://github.com/tonyg/racket-send-exp") (source_url . "http://github.com/tonyg/racket-send-exp/tree/master"))))))) ("html-test" . #hash((author . "jay@racket-lang.org mflatt@racket-lang.org") (checksum . "1624e83311cc1b682048ae9ea2b1129af3f1fdf2") (dependencies . ("racket-index" "base" "html-lib" "rackunit-lib")) (description . "jay@racket-lang.org mflatt@racket-lang.org") (modules . ()) (name . "html-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/html-test.zip") (tags . ()))) ("lens-lib" . #hasheq((author . "jackhfirth@gmail.com alexander@knauth.org") (authors . ("jackhfirth@gmail.com" "alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lens-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lens-lib.txt"))) (checksum . "376c286a68ed34ee723cf5c5a76dcba9828db0c1") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "lens-common" "lens-data" "reprovide-lang" "rackunit-lib" "sweet-exp-lib")) (description . "Implementation (no docs) of the lens library, includes lens-data and lens-common") (implies . ("lens-common" "lens-data")) (last-checked . 1522414424) (last-edit . 1500075070) (last-updated . 1514736113) (modules . ((lib "lens/applicable.rkt") (lib "lens/main.rkt"))) (name . "lens-lib") (nix-sha256 . "0x4v6pd5l15wqppxmd2k8jg6g151rbvv7qmyyzr4vsl399mlyljz") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (author:jackhfirth@gmail.com . #t) (data . #t) (functional . #t) (lens . #t) (ring:1 . #t))) (source . "git://github.com/jackfirth/lens?path=lens-lib") (tags . ("data" "functional" "lens")) (versions . #hash((default . #hasheq((checksum . "376c286a68ed34ee723cf5c5a76dcba9828db0c1") (source . "git://github.com/jackfirth/lens?path=lens-lib") (source_url . "http://github.com/jackfirth/lens/tree/master?path=lens-lib"))))))) ("gtp-paper" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gtp-paper" "doc/gtp-paper@gtp-paper/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gtp-paper.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gtp-paper.txt"))) (checksum . "ae7b302c61793b1473167d4abbeb0da4c5e9c1a9") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "pollen" "scribble-abbrevs" "scribble-lib" "rackunit-lib" "racket-doc" "scribble-doc")) (description . "Quick-start for SIGPLAN Scribble papers") (implies . ()) (last-checked . 1522414406) (last-edit . 1503077916) (last-updated . 1521492172) (modules . ((lib "gtp-paper/template/bib.rkt") (lib "gtp-paper/docs/gtp-paper.scrbl") (lib "gtp-paper/template/introduction.scrbl") (lib "gtp-paper/template/parameters.rkt") (lib "gtp-paper/template/paper.scrbl") (lib "gtp-paper/template/reader.rkt") (lib "gtp-paper/main.rkt") (lib "gtp-paper/template/main.rkt") (lib "gtp-paper/template/appendix.scrbl"))) (name . "gtp-paper") (nix-sha256 . "174ckyvgq1ib2f1v4cszm2c4rv7mjc8swy3avq82m5lpkfwc5m72") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (latex . #t) (ring:1 . #t) (scribble . #t) (utility . #t))) (source . "git://github.com/bennn/gtp-paper") (tags . ("latex" "scribble" "utility")) (versions . #hash((default . #hasheq((checksum . "ae7b302c61793b1473167d4abbeb0da4c5e9c1a9") (source . "git://github.com/bennn/gtp-paper") (source_url . "http://github.com/bennn/gtp-paper/tree/master"))))))) ("syntax-classes-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-classes-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-classes-lib.txt"))) (checksum . "fe1e1399b3c68c899f7613589d5f7835a16f370f") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.3"))) (description . "implementation (no documentation) for “syntax-classes”") (implies . ()) (last-checked . 1522414687) (last-edit . 1478370944) (last-updated . 1502816466) (modules . ((lib "syntax/parse/class/struct-id.rkt") (lib "syntax/parse/class/paren-shape.rkt") (lib "syntax/parse/class/local-value.rkt"))) (name . "syntax-classes-lib") (nix-sha256 . "1xmgny6kg955q4w2kilw8wsslr9sq2wh58x2cq8i3q19h0bsicpv") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t) (syntax . #t))) (source . "git://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib") (tags . ("syntax")) (versions . #hash(("6.0" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "git://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/syntax-classes.git/tree/master?path=syntax-classes-lib#version-exception--6.2"))) ("6.1.1" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "git://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/syntax-classes.git/tree/master?path=syntax-classes-lib#version-exception--6.2"))) ("6.2.1" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "git://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/syntax-classes.git/tree/master?path=syntax-classes-lib#version-exception--6.2"))) (default . #hasheq((checksum . "fe1e1399b3c68c899f7613589d5f7835a16f370f") (source . "git://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib") (source_url . "http://github.com/lexi-lambda/syntax-classes.git/tree/master?path=syntax-classes-lib"))) ("6.0.1" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "git://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/syntax-classes.git/tree/master?path=syntax-classes-lib#version-exception--6.2"))) ("6.2" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "git://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/syntax-classes.git/tree/master?path=syntax-classes-lib#version-exception--6.2"))) ("6.1" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "git://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/syntax-classes.git/tree/master?path=syntax-classes-lib#version-exception--6.2"))))))) ("midi-readwrite" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "midi" "doc/midi@midi-readwrite/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/midi-readwrite.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/midi-readwrite.txt"))) (checksum . "92953cfef013e2c654e8f972b5d55f0da220fae4") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc")) (description . "simple functions to read MIDI (.mid) files") (implies . ()) (last-checked . 1522414435) (last-edit . 1383343365) (last-updated . 1502816180) (modules . ((lib "midi-readwrite/notestream.rkt") (lib "midi-readwrite/sort-helper.rkt") (lib "midi-readwrite/main.rkt") (lib "midi-readwrite/midi.scrbl") (lib "midi-readwrite/test/example-read.rkt") (lib "midi-readwrite/midi-read.rkt") (lib "midi-readwrite/midi-write.rkt") (lib "midi-readwrite/midi-to-notes.rkt") (lib "midi-readwrite/midi-structs.rkt") (lib "midi-readwrite/controller-name.rkt"))) (name . "midi-readwrite") (nix-sha256 . "0y3frsdyb3r8i2f7pbkmrk2r1k01samrfz3s4vymwwr13yqsqby0") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audio . #t) (author:clements@racket-lang.org . #t) (io . #t) (midi . #t) (ring:1 . #t))) (source . "github://github.com/jbclements/midi-readwrite/master") (tags . ("audio" "io" "midi")) (versions . #hash((default . #hasheq((checksum . "92953cfef013e2c654e8f972b5d55f0da220fae4") (source . "github://github.com/jbclements/midi-readwrite/master") (source_url . "http://github.com/jbclements/midi-readwrite/tree/master"))))))) ("typeset-rewriter" . #hasheq((author . "sgtamk@gmail.com") (authors . ("sgtamk@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typeset-rewriter.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typeset-rewriter.txt"))) (checksum . "9737f385b57a74564221ebd719c01f4180fbf6f8") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "redex-pict-lib")) (description . "Simple, low-level rewriter tools for typesetting PLT Redex models") (implies . ()) (last-checked . 1522414696) (last-edit . 1476382398) (last-updated . 1502816508) (modules . ((lib "typeset-rewriter/main.rkt"))) (name . "typeset-rewriter") (nix-sha256 . "13zzdpr913whkhzrq4qrniv6h6l09r7fyh264nj5b5l1j2j5jqha") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:sgtamk@gmail.com . #t) (redex . #t) (ring:1 . #t))) (source . "git://github.com/pnwamk/typeset-rewriter#master") (tags . ("redex")) (versions . #hash((default . #hasheq((checksum . "9737f385b57a74564221ebd719c01f4180fbf6f8") (source . "git://github.com/pnwamk/typeset-rewriter#master") (source_url . "http://github.com/pnwamk/typeset-rewriter/tree/master#master"))))))) ("scgi" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scgi" "doc/scgi@scgi/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scgi.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scgi.txt"))) (checksum . "07cc9ba2713cb0d947931cdf1011a84d5ccfb4da") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib")) (description . "Web Server HTTP SCGI and CGI") (implies . ()) (last-checked . 1522414674) (last-edit . 1456463446) (last-updated . 1502816418) (modules . ((lib "scgi/main.rkt") (lib "scgi/stress1-server.rkt") (lib "scgi/scgi.scrbl") (lib "scgi/sample-1.rkt"))) (name . "scgi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (ring:1 . #t) (web . #t))) (source . "http://www.neilvandyke.org/racket/scgi.zip") (tags . ("web")) (versions . #hash((default . #hasheq((checksum . "07cc9ba2713cb0d947931cdf1011a84d5ccfb4da") (source . "http://www.neilvandyke.org/racket/scgi.zip") (source_url . "http://www.neilvandyke.org/racket/scgi.zip"))))))) ("phc-adt-doc" . #hasheq((author . "georges.duperon@gmail.com") (authors . ("georges.duperon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "phc-adt" "doc/phc-adt@phc-adt-doc/index.html") ("main" "phc-adt-implementation" "doc/phc-adt-implementation@phc-adt-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/phc-adt-doc.txt") (test-failure-log . "server/built/test-fail/phc-adt-doc.txt") (test-success-log . #f))) (checksum . "e2fe727b4ff84f0bb0212a6c103f0e0e2c955a4c") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "hyper-literate" "phc-adt-lib" "racket-doc" "typed-racket-doc" "typed-racket-lib" "scribble-enhanced" "scribble-math" "type-expander" "xlist" "alexis-util" "extensible-parser-specifications" "multi-id" "phc-toolkit" "remember" "threading" "trivial" "typed-struct-props" "datatype")) (description . "Documentation for phc-adt (and rendering of the literate programming)") (implies . ()) (last-checked . 1522414511) (last-edit . 1501077462) (last-updated . 1502816247) (modules . ((lib "phc-adt/scribblings/phc-adt-implementation.scrbl") (lib "phc-adt/scribblings/phc-adt-variant.scrbl") (lib "phc-adt/scribblings/phc-adt-tagged.scrbl") (lib "phc-adt/scribblings/phc-adt-constructor.scrbl") (lib "phc-adt/scribblings/phc-adt-structure.scrbl") (lib "phc-adt/scribblings/phc-adt.scrbl") (lib "phc-adt/scribblings/phc-adt-choices.scrbl"))) (name . "phc-adt-doc") (nix-sha256 . "18md2hanbx8812b2b3678zg5pblci409j2h6nkk8nhjkmvny1hzp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:georges.duperon@gmail.com . #t) (docs . #t) (phc-adt . #t) (ring:1 . #t))) (source . "git://github.com/jsmaniac/phc-adt?path=phc-adt-doc") (tags . ("docs" "phc-adt")) (versions . #hash((default . #hasheq((checksum . "e2fe727b4ff84f0bb0212a6c103f0e0e2c955a4c") (source . "git://github.com/jsmaniac/phc-adt?path=phc-adt-doc") (source_url . "http://github.com/jsmaniac/phc-adt/tree/master?path=phc-adt-doc"))))))) ("gls" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gls" "doc/gls@gls/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gls.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gls.txt"))) (checksum . "8c8225b54bd84b2517ef80a9cf6100a74af82050") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "srfi-lite-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Generic Little (Object, Type, Anything, ...) System - multiple dispatch on types") (implies . ()) (last-checked . 1522414405) (last-edit . 1391532833) (last-updated . 1502816083) (modules . ((lib "gls/test.rkt") (lib "gls/utils.rkt") (lib "gls/callables.rkt") (lib "gls/main.rkt") (lib "gls/types.rkt") (lib "gls/util-macros.rkt") (lib "gls/gls.scrbl") (lib "gls/callable-macros.rkt"))) (name . "gls") (nix-sha256 . "1mk7xnvswwg5rgal4mlvrqkq075b4314nrrmaj6k0ca14w5cgx75") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (data . #t) (ring:1 . #t))) (source . "github://github.com/Kalimehtar/gls/master") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "8c8225b54bd84b2517ef80a9cf6100a74af82050") (source . "github://github.com/Kalimehtar/gls/master") (source_url . "http://github.com/Kalimehtar/gls/tree/master"))))))) ("cow-repl" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cow-repl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cow-repl.txt"))) (checksum . "19b38c35a868d3e3fe02d4f5fcc59e8212c37228") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "Cowsay in your REPL") (implies . ()) (last-checked . 1522414368) (last-edit . 1382475611) (last-updated . 1502815870) (modules . ((lib "cow-repl/main.rkt"))) (name . "cow-repl") (nix-sha256 . "1xziyrwbjbjhljbqmrlx73zpsi6vqsyj1xmjglfiwaf46sdrijcs") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:asumu@ccs.neu.edu . #t) (ring:1 . #t))) (source . "github://github.com/takikawa/racket-cow-repl/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "19b38c35a868d3e3fe02d4f5fcc59e8212c37228") (source . "github://github.com/takikawa/racket-cow-repl/master") (source_url . "http://github.com/takikawa/racket-cow-repl/tree/master"))))))) ("rackunit-typed" . #hash((author . "jackhfirth@gmail.com") (checksum . "727116fbff8ae1979ab6d6e39dc5469e18443009") (dependencies . ("racket-index" "rackunit-gui" "rackunit-lib" "typed-racket-lib" "base" "testing-util-lib")) (description . "jackhfirth@gmail.com") (modules . ()) (name . "rackunit-typed") (source . "https://download.racket-lang.org/releases/6.12/pkgs/rackunit-typed.zip") (tags . ()))) ("slideshow-text-style" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "slideshow-text-style" "doc/slideshow-text-style@slideshow-text-style/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/slideshow-text-style.txt") (test-failure-log . "server/built/test-fail/slideshow-text-style.txt") (test-success-log . #f))) (checksum . "35dbe13943310720f80f54652aed98c65a08875b") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "pict-lib" "slideshow-lib" "scribble-text-lib" "scribble-lib" "at-exp-lib" "pict-doc" "slideshow-doc" "racket-doc" "scribble-doc")) (description . "Small library that helps with formatting text in a slideshow") (implies . ()) (last-checked . 1522414680) (last-edit . 1504725053) (last-updated . 1504906254) (modules . ((lib "slideshow-text-style/example.rkt") (lib "slideshow-text-style/main.rkt") (lib "slideshow-text-style/slideshow-text-style.scrbl"))) (name . "slideshow-text-style") (nix-sha256 . "06dm94499rg810rw2npk4k1c6lkgji8p0dnigkdv0aprs4928dgf") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (ring:1 . #t) (slideshow . #t))) (source . "git://github.com/takikawa/slideshow-text-style") (tags . ("slideshow")) (versions . #hash((default . #hasheq((checksum . "35dbe13943310720f80f54652aed98c65a08875b") (source . "git://github.com/takikawa/slideshow-text-style") (source_url . "http://github.com/takikawa/slideshow-text-style/tree/master"))))))) ("unstable-lib" . #hash((author . "jay@racket-lang.org samth@racket-lang.org cce@racket-lang.org ryanc@racket-lang.org") (authors . ("jay@racket-lang.org" "samth@racket-lang.org" "cce@racket-lang.org" "ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . ("automata-lib" ("base" #:version "6.2.900.6") ("draw-lib" #:version "1.7") ("gui-lib" #:version "1.18") "markparam-lib" ("pict-lib" #:version "1.4") "ppict" "scribble-lib" ("slideshow-lib" #:version "1.2") "temp-c-lib" "unstable-macro-testing-lib" "unix-socket-lib" "staged-slide" "rackunit-lib")) (description . "implementation (no documentation) part of \"unstable\"") (implies . ("unstable-macro-testing-lib")) (last-checked . 1522414698) (last-edit . 1445382797) (last-updated . 1502816514) (modules . ((lib "unstable/gui/slideshow.rkt") (lib "unstable/string.rkt") (lib "unstable/sequence.rkt") (lib "unstable/syntax.rkt") (lib "unstable/struct.rkt") (lib "unstable/automata/nfa.rkt") (lib "unstable/temp-c/monitor.rkt") (lib "unstable/automata/re.rkt") (lib "unstable/markparam.rkt") (lib "unstable/gui/prefs.rkt") (lib "unstable/recontract.rkt") (lib "unstable/logging.rkt") (lib "unstable/gui/pict/plt-logo.rkt") (lib "unstable/gui/pict.rkt") (lib "unstable/custom-write.rkt") (lib "unstable/temp-c/dsl.rkt") (lib "unstable/gui/ppict.rkt") (lib "unstable/automata/nfa-ep.rkt") (lib "unstable/sandbox.rkt") (lib "unstable/gui/snip.rkt") (lib "unstable/match.rkt") (lib "unstable/automata/re-ext.rkt") (lib "unstable/gui/scribble.rkt") (lib "unstable/lazy-require.rkt") (lib "unstable/future.rkt") (lib "unstable/gui/pslide.rkt") (lib "unstable/error.rkt") (lib "unstable/socket.rkt") (lib "unstable/arrow.rkt") (lib "unstable/find.rkt") (lib "unstable/open-place.rkt") (lib "unstable/wrapc.rkt") (lib "unstable/gui/pict/align.rkt") (lib "unstable/automata/dfa.rkt") (lib "unstable/time.rkt") (lib "unstable/define.rkt") (lib "unstable/gui/notify.rkt") (lib "unstable/automata/machine.rkt"))) (name . "unstable-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:cce@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (author:ryanc@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("unstable")) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) (default . #hasheq((checksum . "6d2564bf725be9d56320cfa5bf438e8d3dafdb6e") (source . "git://github.com/racket/unstable/?path=unstable-lib") (source_url . "git://github.com/racket/unstable/?path=unstable-lib"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("srfi-lib-nonfree" . #hash((author . "mflatt@racket-lang.org noel@racket-lang.org chongkai@racket-lang.org jay@racket-lang.org") (authors . ("mflatt@racket-lang.org" "noel@racket-lang.org" "chongkai@racket-lang.org" "jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/srfi-lib-nonfree.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "7c1fd604cac07fb4f4a7480f4f45e1aefa78e69b") (checksum-error . #f) (conflicts . ()) (dependencies . ("scheme-lib" "base" "r6rs-lib" "srfi-lib" "compatibility-lib")) (description . "parts of \"srfi\" implementation that are licensed restrictively") (implies . ()) (last-checked . 1522414683) (last-edit . 1517366412) (last-updated . 1517367001) (modules . ((lib "srfi/5/let.rkt") (lib "srfi/%3a5/let.rkt") (lib "srfi/%3a5.rkt") (lib "srfi/5.rkt"))) (name . "srfi-lib-nonfree") (nix-sha256 . "0hz33lr7va5yw3k6zid6y4w8nbqr0v298s3kj26qx35mdhckx0g0") (ring . 2) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:chongkai@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:noel@racket-lang.org . #t) (ring:2 . #t))) (source . "https://github.com/racket/srfi.git?path=srfi-lib-nonfree") (tags . ()) (versions . #hash((default . #hasheq((checksum . "7c1fd604cac07fb4f4a7480f4f45e1aefa78e69b") (source . "https://github.com/racket/srfi.git?path=srfi-lib-nonfree") (source_url . "https://github.com/racket/srfi.git?path=srfi-lib-nonfree"))))))) ("wrap" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "wrap-aws"))) (failure-log . "server/built/fail/wrap.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "df42a596ca8ab0777101d00370f518f17f6afbe9") (checksum-error . #f) (conflicts . ()) (dependencies . ("grip" "base" "grommet" "gut" "srfi-lite-lib" "typed-racket-lib" "scribble-lib")) (description . "AWS API in Typed Racket.  Generally, AWS responses are parsed as structures.") (implies . ()) (last-checked . 1522414702) (last-edit . 1370447682) (last-updated . 1502816529) (modules . ((lib "wrap/wrap/aws/dynamodb/config.rkt") (lib "wrap/wrap/aws/iam/iam.rkt") (lib "wrap/wrap/aws/dynamodb/invoke.rkt") (lib "wrap/wrap/aws/dynamodb/query.rkt") (lib "wrap/wrap/aws/dynamodb/scan.rkt") (lib "wrap/wrap/aws/dynamodb/test.rkt") (lib "wrap/wrap/aws/sts/config.rkt") (lib "wrap/wrap/aws/swf/task.rkt") (lib "wrap/wrap/aws/dynamodb/types.rkt") (lib "wrap/wrap/aws/auth/authv2.rkt") (lib "wrap/wrap/aws/credential.rkt") (lib "wrap/wrap/aws/dynamodb/dynamodb.rkt") (lib "wrap/wrap/aws/scribblings/wrap-aws.scrbl") (lib "wrap/wrap/aws/swf/attrs.rkt") (lib "wrap/wrap/aws/iam/actions.rkt") (lib "wrap/wrap/aws/configuration.rkt") (lib "wrap/wrap/aws/sts/sts.rkt") (lib "wrap/wrap/aws/dynamodb/deletetable.rkt") (lib "wrap/wrap/aws/sqs/private/listqueues.rkt") (lib "wrap/wrap/aws/s3/types.rkt") (lib "wrap/wrap/aws/auth/authv3.rkt") (lib "wrap/wrap/aws/sqs/config.rkt") (lib "wrap/wrap/aws/a2s/a2s.rkt") (lib "wrap/wrap/aws/dynamodb/putitem.rkt") (lib "wrap/wrap/aws/dynamodb/deleteitem.rkt") (lib "wrap/wrap/aws/dynamodb/action.rkt") (lib "wrap/wrap/aws/swf/logging.rkt") (lib "wrap/wrap/aws/sqs/private/invoke.rkt") (lib "wrap/wrap/aws/dynamodb/parse.rkt") (lib "wrap/wrap/aws/dynamodb/error.rkt") (lib "wrap/wrap/aws/sqs/sqs.rkt") (lib "wrap/wrap/aws/s3/invoke.rkt") (lib "wrap/wrap/aws/s3/response.rkt") (lib "wrap/wrap/aws/swf/workflow.rkt") (lib "wrap/wrap/aws/sts/session.rkt") (lib "wrap/wrap/aws/swf/decision.rkt") (lib "wrap/wrap/aws/swf/domain.rkt") (lib "wrap/wrap/aws/sqs/private/sendmsg.rkt") (lib "wrap/wrap/aws/dynamodb/describetable.rkt") (lib "wrap/wrap/aws/swf/activity.rkt") (lib "wrap/wrap/aws/dynamodb/updateitem.rkt") (lib "wrap/wrap/aws/dynamodb/createtable.rkt") (lib "wrap/wrap/aws/sqs/private/deletemsg.rkt") (lib "wrap/wrap/aws/sqs/private/receivemsg.rkt") (lib "wrap/wrap/aws/s3/objects.rkt") (lib "wrap/wrap/aws/dynamodb/request.rkt") (lib "wrap/wrap/aws/swf/types.rkt") (lib "wrap/wrap/aws/s3/s3-uri.rkt") (lib "wrap/wrap/aws/s3/configuration.rkt") (lib "wrap/wrap/aws/misc.rkt") (lib "wrap/wrap/aws/sts/error.rkt") (lib "wrap/wrap/aws/a2s/search.rkt") (lib "wrap/wrap/aws/dynamodb/listtable.rkt") (lib "wrap/wrap/aws/simpledb/simpledb.rkt") (lib "wrap/wrap/aws/swf/history.rkt") (lib "wrap/wrap/aws/s3/buckets.rkt") (lib "wrap/wrap/aws/dynamodb/response.rkt") (lib "wrap/wrap/aws/auth.rkt") (lib "wrap/wrap/aws/sts/response.rkt") (lib "wrap/wrap/aws/simpledb/dberror.rkt") (lib "wrap/wrap/aws/simpledb/config.rkt") (lib "wrap/wrap/aws/dynamodb/getitem.rkt"))) (name . "wrap") (nix-sha256 . "11c4amidghbhj141wf2276bgj0i1pxnhl4wq7xdp1gfngf36g7hj") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (API . #t) (AWS . #t) (author:ray.racine@gmail.com . #t) (ring:1 . #t))) (source . "https://gitlab.com/RayRacine/wrap.git") (tags . ("API" "AWS")) (versions . #hash((default . #hasheq((checksum . "df42a596ca8ab0777101d00370f518f17f6afbe9") (source . "https://gitlab.com/RayRacine/wrap.git") (source_url . "http://gitlab.com/RayRacine/wrap/tree/master"))))))) ("split-by" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/split-by.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/split-by.txt"))) (checksum . "87fc10bda5e0394f78455a78183c3f3a16bc60df") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "The `split-by` function from Mathematica") (implies . ()) (last-checked . 1522414681) (last-edit . 1503521884) (last-updated . 1502816444) (modules . ((lib "data/split-by.rkt"))) (name . "split-by") (nix-sha256 . "1n7fs2q7ij4bllv4vwssfm26n1f3z8b51r040fk1wwfp9k3qccya") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (lists . #t) (ring:1 . #t))) (source . "git://github.com/samth/split-by") (tags . ("lists")) (versions . #hash((default . #hasheq((checksum . "87fc10bda5e0394f78455a78183c3f3a16bc60df") (source . "git://github.com/samth/split-by") (source_url . "http://github.com/samth/split-by/tree/master"))))))) ("dynext-lib" . #hash((author . "mflatt@racket-lang.org") (checksum . "d2acaedddcce36897f00ffa05545d512f89a0f51") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "dynext-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/dynext-lib.zip") (tags . ()))) ("measures-with-dimensions" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "measures-with-dimensions" "doc/measures-with-dimensions@measures-with-dimensions/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/measures-with-dimensions.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/measures-with-dimensions.txt"))) (checksum . "78d370684a430a673a96c24dbd5f112651bc5f2b") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "rackjure" "math-lib" "htdp-lib" "unstable-lib" "sweet-exp" "reprovide-lang" "predicates" "colon-match" "scribble-lib" "rackunit-lib" "scribble-lib" "sandbox-lib" "racket-doc" "typed-racket-doc" "at-exp-lib")) (description . "based on measures, but with dimensions and types") (implies . ()) (last-checked . 1522414434) (last-edit . 1420328908) (last-updated . 1502816174) (modules . ((lib "typed/measures-with-dimensions/relativity/beta-gamma.rkt") (lib "measures-with-dimensions/temperature.rkt") (lib "typed/measures-with-dimensions/measures/measure-struct.rkt") (lib "typed/measures-with-dimensions/docs/temperature.scrbl") (lib "measures-with-dimensions/main.rkt") (lib "typed/measures-with-dimensions/chemistry/misc.rkt") (lib "typed/measures-with-dimensions/units.rkt") (lib "typed/measures-with-dimensions/vector-operations.rkt") (lib "typed/measures-with-dimensions/dimensions/dimensions.rkt") (lib "typed/measures-with-dimensions/chemistry/element-struct.rkt") (lib "measures-with-dimensions/chemistry.rkt") (lib "typed/measures-with-dimensions/chemistry/elements.rkt") (lib "typed/measures-with-dimensions/docs/short-names.scrbl") (lib "typed/measures-with-dimensions/measures/typed-operations.rkt") (lib "typed/measures-with-dimensions/measures/measure-types.rkt") (lib "typed/measures-with-dimensions/docs/measures-with-dimensions.scrbl") (lib "typed/measures-with-dimensions/docs/operations-types-structs.scrbl") (lib "typed/measures-with-dimensions/exact-tau-pi-eta.rkt") (lib "typed/measures-with-dimensions/temperature.rkt") (lib "typed/measures-with-dimensions/units/unit-struct.rkt") (lib "typed/measures-with-dimensions/measures/untyped-operations.rkt") (lib "typed/measures-with-dimensions/docs/short/SI.scrbl") (lib "typed/measures-with-dimensions/measures.rkt") (lib "typed/measures-with-dimensions/units/unit-operations.rkt") (lib "typed/measures-with-dimensions/docs/deftype.rkt") (lib "typed/measures-with-dimensions/measures/typed-operations-1.rkt") (lib "typed/measures-with-dimensions/chemistry/molar-mass.rkt") (lib "typed/measures-with-dimensions/units/units.rkt") (lib "typed/measures-with-dimensions/dimensions/dimension-operations.rkt") (lib "typed/measures-with-dimensions/temperature/match-expanders.rkt") (lib "typed/measures-with-dimensions/docs/chemistry/compounds.scrbl") (lib "typed/measures-with-dimensions/measures/0-1-measures.rkt") (lib "typed/measures-with-dimensions/untyped-utils.rkt") (lib "typed/measures-with-dimensions/temperature/temperature-functions.rkt") (lib "typed/measures-with-dimensions/docs/units-and-dimensions.scrbl") (lib "typed/measures-with-dimensions/measures/physical-constants.rkt") (lib "typed/measures-with-dimensions/short/US.rkt") (lib "typed/measures-with-dimensions/chemistry.rkt") (lib "typed/measures-with-dimensions/docs/short/US.scrbl") (lib "typed/measures-with-dimensions/docs/chemistry.scrbl") (lib "typed/measures-with-dimensions/defmulti.rkt") (lib "typed/measures-with-dimensions/short/SI.rkt") (lib "typed/measures-with-dimensions/docs/physical-constants.scrbl") (lib "typed/measures-with-dimensions/dimensions/dimension-struct.rkt") (lib "typed/measures-with-dimensions/docs/chemistry/elements.scrbl") (lib "typed/measures-with-dimensions/dimensions.rkt") (lib "typed/measures-with-dimensions/preds.rkt") (lib "typed/measures-with-dimensions/chemistry/compound-struct.rkt") (lib "typed/measures-with-dimensions/old/main.rkt") (lib "typed/measures-with-dimensions.rkt") (lib "typed/measures-with-dimensions/chemistry/compound.rkt") (lib "typed/measures-with-dimensions/relativity/lorentz-transform.rkt") (lib "typed/measures-with-dimensions/docs/chemistry/molar-mass.scrbl"))) (name . "measures-with-dimensions") (nix-sha256 . "08n96r2gqvh0pnrbqr7kc2wd3w7avq30n70jw6p91ln24421scr6") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (dimensional-analysis . #t) (math . #t) (ring:1 . #t) (units . #t))) (source . "git://github.com/AlexKnauth/measures-with-dimensions") (tags . ("dimensional-analysis" "math" "units")) (versions . #hash((default . #hasheq((checksum . "78d370684a430a673a96c24dbd5f112651bc5f2b") (source . "git://github.com/AlexKnauth/measures-with-dimensions") (source_url . "http://github.com/AlexKnauth/measures-with-dimensions/tree/master"))))))) ("trace" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (checksum . "6e4c7bd2c9caefecbb2a468507520e88525f40f7") (dependencies . ("scheme-lib" "base" "compatibility-lib" "scribble-lib" "racket-doc")) (description . "mflatt@racket-lang.org robby@racket-lang.org") (modules . ()) (name . "trace") (source . "https://download.racket-lang.org/releases/6.12/pkgs/trace.zip") (tags . ()))) ("control" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "control-manual" "doc/control-manual@control/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/control.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/control.txt"))) (checksum . "51bc2319c07a06b1275a231c8ccfc433a8f34258") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Control structures") (implies . ()) (last-checked . 1522414367) (last-edit . 1429997690) (last-updated . 1502815869) (modules . ((lib "control/tagged-begin.rkt") (lib "control/dotimes.rkt") (lib "control/scribblings/control-manual.scrbl") (lib "control/main.rkt") (lib "control/until.rkt") (lib "control/begin-with-goto.rkt") (lib "control/while.rkt"))) (name . "control") (nix-sha256 . "007lmdzzi630l7z166hrc9pna5rd64bycswz9q5q6m3v8hf585a1") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jensaxel@soegaard.net . #t) (goto . #t) (ring:1 . #t) (tagbody . #t) (until . #t) (while . #t))) (source . "git://github.com/soegaard/control") (tags . ("goto" "tagbody" "until" "while")) (versions . #hash((default . #hasheq((checksum . "51bc2319c07a06b1275a231c8ccfc433a8f34258") (source . "git://github.com/soegaard/control") (source_url . "http://github.com/soegaard/control/tree/master"))))))) ("slatex" . #hash((author . "sstrickl@racket-lang.org") (checksum . "2c2541e0c700efba5a68ec2a4b2e17923ae0057b") (dependencies . ("scheme-lib" "base" "compatibility-lib" "racket-index" "eli-tester" "racket-doc" "scribble-lib")) (description . "sstrickl@racket-lang.org") (modules . ()) (name . "slatex") (source . "https://download.racket-lang.org/releases/6.12/pkgs/slatex.zip") (tags . ()))) ("towers" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/towers.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/towers.txt"))) (checksum . "e1224228b5b5b514c7063b44810c1bdd5f8d5d14") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "gui-lib" "net-lib" "bazaar" "towers-lib")) (description . "The GUI client interface for the Towers game.") (implies . ()) (last-checked . 1522414693) (last-edit . 1516442594) (last-updated . 1516476620) (modules . ((lib "towers/replay.rkt") (lib "towers/main.rkt") (lib "towers/frame.rkt") (lib "towers/controller.rkt") (lib "towers/player-alpha-beta-gui.rkt") (lib "towers/base.rkt") (lib "towers/gui.rkt") (lib "towers/graphics.rkt"))) (name . "towers") (nix-sha256 . "1ip1sr61415zfg3pkcdx18zsxaknb1r8hna90f2ypcvag3wvbp0w") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (app . #t) (author:laurent.orseau@gmail.com . #t) (games . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/Metaxal/towers.git?path=towers") (tags . ("app" "games" "gui")) (versions . #hash((default . #hasheq((checksum . "e1224228b5b5b514c7063b44810c1bdd5f8d5d14") (source . "https://github.com/Metaxal/towers.git?path=towers") (source_url . "https://github.com/Metaxal/towers.git?path=towers"))))))) ("tmemoize" . #hasheq((author . "soura.jagat@gmail.com") (authors . ("soura.jagat@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "tmemoize" "doc/tmemoize@tmemoize/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tmemoize.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tmemoize.txt"))) (checksum . "aa72d69cd3ee176cfeda159ac077d55b626caa23") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "rackunit-lib" "scribble-lib" "racket-doc" "typed-racket-doc")) (description . "A basic memoize utility for typed racket") (implies . ()) (last-checked . 1522414692) (last-edit . 1485781465) (last-updated . 1502816484) (modules . ((lib "tmemoize/scribblings/tmemoize.scrbl") (lib "tmemoize/main.rkt"))) (name . "tmemoize") (nix-sha256 . "0dxsnc1fgqahwx5kqrv2k97cwd707vs1pncnsqb0da61gd8xpqqz") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:soura.jagat@gmail.com . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/souravdatta/tmemoize.git") (tags . ("typed-racket")) (versions . #hash((default . #hasheq((checksum . "aa72d69cd3ee176cfeda159ac077d55b626caa23") (source . "https://github.com/souravdatta/tmemoize.git") (source_url . "https://github.com/souravdatta/tmemoize.git"))))))) ("syntax-macro-lang" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-macro-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-macro-lang.txt"))) (checksum . "91555f7a2ad0fc5d76af12c776bba6f6ee1bd819") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "experimental racket module language for creating languages, inspired by syntax-lang") (implies . ()) (last-checked . 1522414689) (last-edit . 1443624472) (last-updated . 1502816469) (modules . ((lib "tests/syntax/macro-lang/the-lang.rkt") (lib "syntax/macro-lang.rkt") (lib "tests/syntax/macro-lang/test.rkt"))) (name . "syntax-macro-lang") (nix-sha256 . "0z86g30y4kb73lgaqix5qkrcak7n2q8vcny8qwfj8n29dr5pc6f2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (lang . #t) (ring:1 . #t) (syntax . #t))) (source . "git://github.com/AlexKnauth/syntax-macro-lang") (tags . ("lang" "syntax")) (versions . #hash((default . #hasheq((checksum . "91555f7a2ad0fc5d76af12c776bba6f6ee1bd819") (source . "git://github.com/AlexKnauth/syntax-macro-lang") (source_url . "http://github.com/AlexKnauth/syntax-macro-lang/tree/master"))))))) ("gnucash" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gnucash" "doc/gnucash@gnucash/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gnucash.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gnucash.txt"))) (checksum . "27c9e457efdda896f54f3642e7b6c0330e352468") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "sxml" "srfi-lib" "srfi-lite-lib" "memoize" "rackunit-lib" "typed-racket-lib" "racket-doc" "scribble-lib")) (description . "parses gnucash XML files") (implies . ()) (last-checked . 1522414405) (last-edit . 1426613240) (last-updated . 1502816084) (modules . ((lib "gnucash/scribblings/gnucash.scrbl") (lib "gnucash/main.rkt") (lib "gnucash/libs.rkt") (lib "gnucash/examples/example.rkt") (lib "gnucash/typed-libs.rkt") (lib "gnucash/parse.rkt"))) (name . "gnucash") (nix-sha256 . "0cjmqy2lpwks3s64skl2g14vf96ka0f07japr1dm237vgpr0824w") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (io . #t) (ring:1 . #t))) (source . "git://github.com/jbclements/gnucash") (tags . ("io")) (versions . #hash((default . #hasheq((checksum . "27c9e457efdda896f54f3642e7b6c0330e352468") (source . "git://github.com/jbclements/gnucash") (source_url . "http://github.com/jbclements/gnucash/tree/master"))))))) ("seq-no-order" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "seq-no-order" "doc/seq-no-order@seq-no-order/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/seq-no-order.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/seq-no-order.txt"))) (checksum . "dd9bc6956a2431f986d0b02aabcf61f5c91dc82f") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.1.1") "rackunit-lib" "scribble-lib" "racket-doc")) (description . "~seq-no-order and ~no-order as pattern-expanders that work with syntax/parse.") (implies . ()) (last-checked . 1522414677) (last-edit . 1415186905) (last-updated . 1502816424) (modules . ((lib "seq-no-order/seq-no-order.rkt") (lib "seq-no-order/main.rkt") (lib "seq-no-order/groups-no-order.rkt") (lib "seq-no-order/docs/seq-no-order.scrbl"))) (name . "seq-no-order") (nix-sha256 . "1242qsh9z55ydks51p23q775xspxzdhxnkk6lgrhqgd34h4xff0g") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (ring:1 . #t) (syntax-parse . #t))) (source . "git://github.com/AlexKnauth/seq-no-order") (tags . ("syntax-parse")) (versions . #hash((default . #hasheq((checksum . "dd9bc6956a2431f986d0b02aabcf61f5c91dc82f") (source . "git://github.com/AlexKnauth/seq-no-order") (source_url . "http://github.com/AlexKnauth/seq-no-order/tree/master"))) ("6.1" . #hasheq((checksum . "09633cc6e9c1d98630e45098692cb907d545035f") (source . "git://github.com/AlexKnauth/seq-no-order#for-v-up-to-6.1") (source_url . "http://github.com/AlexKnauth/seq-no-order/tree/master#for-v-up-to-6.1"))))))) ("digimon" . #hasheq((author . "juzhenliang@gmail.com") (authors . ("juzhenliang@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "digimon" "doc/digimon@digimon/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/digimon.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/digimon.txt"))) (checksum . "fa77e90695eaa304f5518c56847292b17a947ce9") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "make" "cext-lib" "dynext-lib" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc")) (description . "The (typed) core to construct the digital world") (implies . ()) (last-checked . 1522414380) (last-edit . 1481635750) (last-updated . 1502815898) (modules . ((lib "digimon/digitama/main.rkt") (lib "digimon/debug.rkt") (lib "digimon/digitama/ffi.rkt") (lib "digimon/digitama/sugar.rkt") (lib "digimon/tamer/gui-no-check.rkt") (lib "digimon/language-info.rkt") (lib "digimon/tongue.rkt") (lib "digimon/cheat.rkt") (lib "digimon/network.rkt") (lib "digimon/digitama/cheat.rkt") (lib "digimon/gui/no-check.rkt") (lib "digimon/echo.rkt") (lib "digimon/tamer/ffi.rkt") (lib "digimon/uuid.rkt") (lib "digimon/system.rkt") (lib "digimon/openssl.rkt") (lib "digimon/main.rkt") (lib "digimon/format.rkt") (lib "digimon/tamer/echo.rkt") (lib "digimon/tamer/uuid.rkt") (lib "digimon/no-check.rkt") (lib "digimon/gui/sugar.rkt") (lib "digimon/tamer/digimon.scrbl") (lib "digimon/gui.rkt") (lib "digimon/ffi.rkt") (lib "digimon/digitama/system.rkt") (lib "digimon/digivice/wisemon.rkt") (lib "digimon/digitama/plural.rkt") (lib "digimon/digitama/openssl.rkt") (lib "digimon/sugar.rkt") (lib "digimon/tamer/syntax.rkt"))) (name . "digimon") (nix-sha256 . "1829pf4dwxhsjkq6r7aws9vrxcdsw2fjp2vp55901zh48kbbls5v") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:juzhenliang@gmail.com . #t) (ring:1 . #t) (typed-racket . #t) (unstable . #t) (utility . #t))) (source . "git://github.com/wargrey/digimon.git") (tags . ("typed-racket" "unstable" "utility")) (versions . #hash((default . #hasheq((checksum . "fa77e90695eaa304f5518c56847292b17a947ce9") (source . "git://github.com/wargrey/digimon.git") (source_url . "http://github.com/wargrey/digimon.git/tree/master"))))))) ("lens-unstable" . #hasheq((author . "jackhfirth@gmail.com alexander@knauth.org") (authors . ("jackhfirth@gmail.com" "alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lens-unstable.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lens-unstable.txt"))) (checksum . "376c286a68ed34ee723cf5c5a76dcba9828db0c1") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "lens-lib" "reprovide-lang" "sweet-exp-lib")) (description . "Unstable and experimental features for lenses") (implies . ()) (last-checked . 1522414424) (last-edit . 1500075095) (last-updated . 1514736114) (modules . ((lib "unstable/lens/string-split.rkt") (lib "unstable/lens/set-member.rkt") (lib "unstable/lens/struct-join.rkt") (lib "unstable/lens/struct-list.rkt") (lib "unstable/lens/if.rkt") (lib "unstable/lens/syntax/stx.rkt") (lib "unstable/lens/dict-nested.rkt") (lib "unstable/lens/zoom.rkt") (lib "unstable/lens/define-nested.rkt") (lib "unstable/lens/struct-provide.rkt") (lib "unstable/lens/map.rkt") (lib "unstable/lens/arrow.rkt") (lib "unstable/lens/hash-filterer.rkt") (lib "unstable/lens/struct-nested.rkt") (lib "unstable/lens/syntax.rkt") (lib "unstable/lens/isomorphism.rkt") (lib "unstable/lens.rkt") (lib "unstable/lens/join-assoc.rkt") (lib "unstable/lens/sublist.rkt") (lib "unstable/lens/substring.rkt") (lib "unstable/lens/lazy.rkt") (lib "unstable/lens/match.rkt") (lib "unstable/lens/reverse.rkt") (lib "unstable/lens/main.rkt") (lib "unstable/lens/syntax/srcloc.rkt") (lib "unstable/lens/flatten.rkt") (lib "unstable/lens/set-all.rkt") (lib "unstable/lens/set-filterer.rkt"))) (name . "lens-unstable") (nix-sha256 . "0x4v6pd5l15wqppxmd2k8jg6g151rbvv7qmyyzr4vsl399mlyljz") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (author:jackhfirth@gmail.com . #t) (data . #t) (functional . #t) (lens . #t) (ring:1 . #t) (unstable . #t))) (source . "git://github.com/jackfirth/lens?path=lens-unstable") (tags . ("data" "functional" "lens" "unstable")) (versions . #hash((default . #hasheq((checksum . "376c286a68ed34ee723cf5c5a76dcba9828db0c1") (source . "git://github.com/jackfirth/lens?path=lens-unstable") (source_url . "http://github.com/jackfirth/lens/tree/master?path=lens-unstable"))))))) ("frtime" . #hash((author . "jay@racket-lang.org gcooper@racket-lang.org") (checksum . "e017337f79a65338a71a2afbf159bf28cd736e76") (dependencies . ("srfi-lite-lib" "base" "compatibility-lib" "drracket" "gui-lib" "pict-lib" "string-constants-lib" "draw-doc" "gui-doc" "racket-doc" "scribble-lib")) (description . "jay@racket-lang.org gcooper@racket-lang.org") (modules . ()) (name . "frtime") (source . "https://download.racket-lang.org/releases/6.12/pkgs/frtime.zip") (tags . ()))) ("exact-decimal-lang" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "exact-decimal-lang" "doc/exact-decimal-lang@exact-decimal-lang/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/exact-decimal-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/exact-decimal-lang.txt"))) (checksum . "0aae96ff741748e3a7da4239ad748e56c5f49470") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit" "scribble-lib" "racket-doc" "scribble-doc")) (description . "a lang-extension that reads decimals as exact rationals") (implies . ()) (last-checked . 1522414399) (last-edit . 1466340939) (last-updated . 1502815957) (modules . ((lib "exact-decimal/lang/runtime-config.rkt") (lib "exact-decimal/tests/test.rkt") (lib "exact-decimal/docs/exact-decimal-lang.scrbl") (lib "exact-decimal/lang/language-info.rkt") (lib "exact-decimal/lang/reader.rkt"))) (name . "exact-decimal-lang") (nix-sha256 . "0f6v4rps9nx9qlxnwrnygjchk23myji41bh3rbcz6rmx3c9qvg0v") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (lang-extension . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/exact-decimal-lang") (tags . ("lang-extension")) (versions . #hash((default . #hasheq((checksum . "0aae96ff741748e3a7da4239ad748e56c5f49470") (source . "git://github.com/AlexKnauth/exact-decimal-lang") (source_url . "http://github.com/AlexKnauth/exact-decimal-lang/tree/master"))))))) ("sweet-exp-test" . #hasheq((author . "alexander@knauth.org asumu@ccs.neu.edu") (authors . ("alexander@knauth.org" "asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sweet-exp-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sweet-exp-test.txt"))) (checksum . "2084656a266131cd589be727102d9ea26ed7a65b") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "sweet-exp-lib" "rackunit-lib" "lazy" "typed-racket-lib")) (description . "Tests for sweet-exp") (implies . ()) (last-checked . 1522414686) (last-edit . 1469718032) (last-updated . 1502816462) (modules . ((lib "sweet-exp/tests/hash.rkt") (lib "sweet-exp/tests/bad-close-error.rkt") (lib "sweet-exp/tests/strip-context/use-m.rkt") (lib "sweet-exp/tests/fib.rkt") (lib "sweet-exp/tests/typed.rkt") (lib "sweet-exp/tests/sweet.rkt") (lib "sweet-exp/tests/2htdp.rkt") (lib "sweet-exp/tests/srcloc-helper.rkt") (lib "sweet-exp/run-tests.rkt") (lib "sweet-exp/tests/kw.rkt") (lib "sweet-exp/tests/srcloc.rkt") (lib "sweet-exp/tests/335.rkt") (lib "sweet-exp/tests/case-lambda.rkt") (lib "sweet-exp/tests/whitespace.rkt") (lib "sweet-exp/tests/lazy.rkt") (lib "sweet-exp/tests/paren-shape.rkt") (lib "sweet-exp/tests/rest-arg.rkt") (lib "sweet-exp/tests/strip-context/m.rkt") (lib "sweet-exp/tests/typed2.rkt") (lib "sweet-exp/tests/define-syntax-rule.rkt") (lib "sweet-exp/tests/modern.rkt") (lib "sweet-exp/tests/sweet-test-run.rkt") (lib "sweet-exp/tests/return.rkt"))) (name . "sweet-exp-test") (nix-sha256 . "11z04fd7w48ar4g2zf62pi9x24hmxjvl762cap13n0mi3kyj216b") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (author:asumu@ccs.neu.edu . #t) (ring:1 . #t) (syntax . #t))) (source . "git://github.com/takikawa/sweet-racket?path=sweet-exp-test") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "2084656a266131cd589be727102d9ea26ed7a65b") (source . "git://github.com/takikawa/sweet-racket?path=sweet-exp-test") (source_url . "http://github.com/takikawa/sweet-racket/tree/master?path=sweet-exp-test"))))))) ("srfi-test" . #hash((author . "mflatt@racket-lang.org noel@racket-lang.org chongkai@racket-lang.org jay@racket-lang.org") (checksum . "eecf943c96da8eb3d4a5cf9f0fd9437a18c93bbc") (dependencies . ("scheme-lib" "base" "compatibility-lib" "rackunit-lib" "srfi-lib")) (description . "mflatt@racket-lang.org noel@racket-lang.org chongkai@racket-lang.org jay@racket-lang.org") (modules . ()) (name . "srfi-test") (source . "https://download.racket-lang.org/releases/6.12/pkgs/srfi-test.zip") (tags . ()))) ("r5rs" . #hash((author . "mflatt@racket-lang.org") (checksum . "5dda556b4101bf6bebd85f962c05c296db7f0e5b") (dependencies . ("r5rs-lib" "r5rs-doc")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "r5rs") (source . "https://download.racket-lang.org/releases/6.12/pkgs/r5rs.zip") (tags . ()))) ("hackett-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "hackett" "doc/hackett@hackett-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hackett-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hackett-doc.txt"))) (checksum . "dfe5aa3442e1fa0a0dd0ceb75b78470212f0a97a") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "hackett-lib" ("scribble-lib" #:version "1.16") "at-exp-lib" "racket-doc" "sandbox-lib")) (description . "") (implies . ()) (last-checked . 1522414415) (last-edit . 1502403474) (last-updated . 1518650696) (modules . ((lib "scribblings/hackett/private/util.rkt") (lib "scribblings/hackett/guide.scrbl") (lib "scribble/manual/hackett.rkt") (lib "scribblings/hackett/reference.scrbl") (lib "scribblings/hackett/main.scrbl") (lib "scribble/manual/hackett/private/manual-bind.rkt"))) (name . "hackett-doc") (nix-sha256 . "06psy883j4kqyz42jybfyh8zcyki64wzyiw53dya8zwkxdx4g0n3") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/hackett?path=hackett-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "dfe5aa3442e1fa0a0dd0ceb75b78470212f0a97a") (source . "git://github.com/lexi-lambda/hackett?path=hackett-doc") (source_url . "http://github.com/lexi-lambda/hackett/tree/master?path=hackett-doc"))))))) ("raco-bug" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raco-bug.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raco-bug.txt"))) (checksum . "21d5b6aa30e8efa33bf7110482dea48541399edb") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "drracket")) (description . "Submit bug reports") (implies . ()) (last-checked . 1522414664) (last-edit . 1393967131) (last-updated . 1502816378) (modules . ((lib "raco-bug/main.rkt"))) (name . "raco-bug") (nix-sha256 . "0k3dhls7910ynzr27llx8xzn3xkbbf1pviqkqbfxk7dx9zi9qfy9") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (bug . #t) (ring:1 . #t))) (source . "git://github.com/samth/raco-bug") (tags . ("bug")) (versions . #hash((default . #hasheq((checksum . "21d5b6aa30e8efa33bf7110482dea48541399edb") (source . "git://github.com/samth/raco-bug") (source_url . "http://github.com/samth/raco-bug/tree/master"))))))) ("taskibble" . #hasheq((author . "hi@that.world") (authors . ("hi@that.world")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/taskibble.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/taskibble.txt"))) (checksum . "c333907e04ab23b0a79cd7c763f691dd743897ac") (checksum-error . #f) (conflicts . ()) (dependencies . ("scheme-lib" "base" "compatibility-lib" "planet-lib" "net-lib" "at-exp-lib" "draw-lib" "syntax-color-lib" "sandbox-lib" "typed-racket-lib" "datalog" "rackunit-lib")) (description . "Fork of Scribble for task management") (implies . ()) (last-checked . 1522414690) (last-edit . 1487386684) (last-updated . 1502816473) (modules . ((lib "taskibble/base-render.rkt") (lib "taskibble/decode-struct.rkt") (lib "taskibble/private/indirect-renderer.rkt") (lib "taskibble/core.rkt") (lib "taskibble/private/literal-anchor.rkt") (lib "taskibble/base.rkt") (lib "taskibble/private/render-utils.rkt") (lib "taskibble/html-properties.rkt") (lib "taskibble/extract.rkt") (lib "taskibble/private/qsloc.rkt") (lib "taskibble/private/run-pdflatex.rkt") (lib "taskibble/tag.rkt") (lib "taskibble/doclang.rkt") (lib "taskibble/private/provide-structs.rkt") (lib "taskibble/render-struct.rkt") (lib "taskibble/basic.rkt") (lib "taskibble/doc/main.rkt") (lib "taskibble/private/on-demand.rkt") (lib "taskibble/struct.rkt") (lib "taskibble/doclang2.rkt") (lib "taskibble/latex-properties.rkt") (lib "taskibble/private/defaults.rkt") (lib "taskibble/pdf-render.rkt") (lib "taskibble/xref.rkt") (lib "taskibble/search.rkt") (lib "taskibble/render.rkt") (lib "taskibble/doc/lang/reader.rkt") (lib "taskibble/run.rkt") (lib "taskibble/private/serialize.rkt") (lib "taskibble/decode.rkt") (lib "taskibble/config.rkt") (lib "taskibble/latex-prefix.rkt") (lib "taskibble/latex-render.rkt"))) (name . "taskibble") (nix-sha256 . "1qrdf3yn0lxkqd50kq5brnn1f8p6s0hf7h4zbiq5cfgbhrpsyj56") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:hi@that.world . #t) (ring:1 . #t))) (source . "git://github.com/sorpaas/taskibble") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c333907e04ab23b0a79cd7c763f691dd743897ac") (source . "git://github.com/sorpaas/taskibble") (source_url . "http://github.com/sorpaas/taskibble/tree/master"))))))) ("org-mode" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/org-mode.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/org-mode.txt"))) (checksum . "49b1f46aaccc02fa1cedde36b8eda3ffa6a772ec") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "A native Racket reader and writer for org-mode files.") (implies . ()) (last-checked . 1522414508) (last-edit . 1354315195) (last-updated . 1502816239) (modules . ((lib "file/org-mode.rkt"))) (name . "org-mode") (nix-sha256 . "10al372q0xbkxpl1955l4s58spsx382d7jq36xrcq4d9n3dzi50g") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (file . #t) (ring:1 . #t))) (source . "github://github.com/jeapostrophe/org-mode/master") (tags . ("file")) (versions . #hash((default . #hasheq((checksum . "49b1f46aaccc02fa1cedde36b8eda3ffa6a772ec") (source . "github://github.com/jeapostrophe/org-mode/master") (source_url . "http://github.com/jeapostrophe/org-mode/tree/master"))))))) ("sinbad" . #hasheq((author . "nadeem@acm.org") (authors . ("nadeem@acm.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sinbad.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sinbad.txt"))) (checksum . "38e7f2106e1a8e3fadba3c1350c2943d25d42770") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "net-lib" "htdp-lib" "csv-reading" "sxml" "srfi-lite-lib" "racket-doc" "scribble-lib" "rackunit-lib")) (description . "Sinbad is a software library that makes it very easy to uniformly access online data sources provided in standard formats (CSV, JSON, XML).") (implies . ()) (last-checked . 1522414679) (last-edit . 1509118293) (last-updated . 1511410116) (modules . ((lib "sinbad/cacher.rkt") (lib "sinbad/dot-printer.rkt") (lib "sinbad/util.rkt") (lib "sinbad/main.rkt") (lib "sinbad/plugin.rkt") (lib "sinbad/sinbad-syntax.rkt") (lib "sinbad/extras.rkt") (lib "sinbad/data-source.rkt"))) (name . "sinbad") (nix-sha256 . "0ja43fg785fs6n5k7jmxq6kijgsxp3qia4cc8dwplxlf5a1il4s1") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (author:nadeem@acm.org . #t) (beginners . #t) (data . #t) (ring:2 . #t) (teaching . #t) (web . #t))) (source . "git://github.com/berry-cs/sinbad-rkt?path=sinbad") (tags . ("beginners" "data" "teaching" "web")) (versions . #hash((default . #hasheq((checksum . "38e7f2106e1a8e3fadba3c1350c2943d25d42770") (source . "git://github.com/berry-cs/sinbad-rkt?path=sinbad") (source_url . "http://github.com/berry-cs/sinbad-rkt/tree/master?path=sinbad"))))))) ("canonicalize-path" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "canonicalize-path" "doc/canonicalize-path@canonicalize-path/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/canonicalize-path.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/canonicalize-path.txt"))) (checksum . "87391a22ed5dfa80e5cac219a241a162e85fa3a1") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "mcfly" "overeasy")) (description . "") (implies . ()) (last-checked . 1522414312) (last-edit . 1456531517) (last-updated . 1502812287) (modules . ((lib "canonicalize-path/canonicalize-path.scrbl") (lib "canonicalize-path/main.rkt"))) (name . "canonicalize-path") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (author:neil@neilvandyke.org . #t) (filesystem . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/canonicalize-path.zip") (tags . ("filesystem")) (versions . #hash((default . #hasheq((checksum . "87391a22ed5dfa80e5cac219a241a162e85fa3a1") (source . "http://www.neilvandyke.org/racket/canonicalize-path.zip") (source_url . "http://www.neilvandyke.org/racket/canonicalize-path.zip"))))))) ("main-distribution" . #hash((author . "eli@racket-lang.org jay@racket-lang.org matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org") (checksum . "fd230051d9990fa5298338f9b56351d987147acf") (dependencies . ("2d" "algol60" "at-exp-lib" "compatibility" "contract-profile" "compiler" "data" "datalog" "db" "deinprogramm" "draw" "draw-doc" "draw-lib" "drracket" "drracket-tool" "eopl" "errortrace" "future-visualizer" "future-visualizer-typed" "frtime" "games" "gui" "htdp" "html" "icons" "images" "lazy" "macro-debugger" "macro-debugger-text-lib" "make" "math" "mysterx" "mzcom" "mzscheme" "net" "net-cookies" "optimization-coach" "option-contract" "parser-tools" "pconvert-lib" "pict" "pict-snip" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket-doc" "distributed-places" "racket-cheat" "racket-index" "racket-lib" "racklog" "rackunit" "rackunit-typed" "readline" "realm" "redex" "sandbox-lib" "sasl" "schemeunit" "scribble" "serialize-cstruct-lib" "sgl" "shell-completion" "slatex" "slideshow" "snip" "srfi" "string-constants" "swindle" "syntax-color" "trace" "typed-racket" "typed-racket-more" "unix-socket" "web-server" "wxme" "xrepl" "ds-store")) (description . "eli@racket-lang.org jay@racket-lang.org matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org") (modules . ()) (name . "main-distribution") (source . "https://download.racket-lang.org/releases/6.12/pkgs/main-distribution.zip") (tags . ()))) ("jack-ease" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ease" "doc/ease@jack-ease/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/jack-ease.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/jack-ease.txt"))) (checksum . "3a7149ded68be348611e346742feac85fca6d74f") (checksum-error . #f) (conflicts . ()) (dependencies . ("scribble-lib" "base" "sweet-exp" "lens" "fancy-app" "rackunit-lib" "cover" "racket-doc" "scribble-lib" "doc-coverage")) (description . "Library for easing things between start and stop values fluidly") (implies . ()) (last-checked . 1522414421) (last-edit . 1500074753) (last-updated . 1502816141) (modules . ((lib "ease/main.scrbl") (lib "ease/private/lens.rkt") (lib "ease/private/base.rkt") (lib "ease/private/invert.rkt") (lib "ease/main.rkt") (lib "ease/private/main.rkt") (lib "ease/private/polynomial.rkt") (lib "ease/private/util/doc.rkt") (lib "ease/private/lens.scrbl") (lib "ease/private/util/scribble-include-no-subsection.rkt") (lib "ease/private/polynomial.scrbl") (lib "ease/private/tests/doc-coverage.rkt") (lib "ease/private/base.scrbl") (lib "ease/private/invert.scrbl"))) (name . "jack-ease") (nix-sha256 . "1cq697hfsmq755d759j3lnz72596vz5zhgvl0ydzg5cf01jp8mls") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (experimental . #t) (graphics . #t) (personal . #t) (ring:1 . #t))) (source . "git://github.com/jackfirth/racket-ease") (tags . ("experimental" "graphics" "personal")) (versions . #hash((default . #hasheq((checksum . "3a7149ded68be348611e346742feac85fca6d74f") (source . "git://github.com/jackfirth/racket-ease") (source_url . "http://github.com/jackfirth/racket-ease/tree/master"))))))) ("lathe" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lathe.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lathe.txt"))) (checksum . "36ce91fa11a41c3c12d586524228fc609e8ade8d") (checksum-error . #f) (conflicts . ()) (dependencies . ("lathe-lib")) (description . "A personal collection of utilities.") (implies . ("lathe-lib")) (last-checked . 1522414423) (last-edit . 1493588862) (last-updated . 1512000431) (modules . ()) (name . "lathe") (nix-sha256 . "0sa741n2k99s9pwyc8dvj8ny1m0cazg06sp0pfcyspp4f1nwk3k3") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (ring:1 . #t) (unstable . #t) (util . #t) (utility . #t))) (source . "git://github.com/rocketnia/lathe?path=racket%2Flathe") (tags . ("unstable" "util" "utility")) (versions . #hash((default . #hasheq((checksum . "36ce91fa11a41c3c12d586524228fc609e8ade8d") (source . "git://github.com/rocketnia/lathe?path=racket%2Flathe") (source_url . "http://github.com/rocketnia/lathe/tree/master?path=racket%2Flathe"))))))) ("avl" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "avl" "doc/avl@avl/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/avl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/avl.txt"))) (checksum . "e981880a7d4c202368cdd74c94cf11cbac42a29e") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "AVL Trees for Racket") (implies . ()) (last-checked . 1522414288) (last-edit . 1409755055) (last-updated . 1515366974) (modules . ((lib "avl/main.rkt") (lib "avl/avl.scrbl"))) (name . "avl") (nix-sha256 . "1pmpv988kgki68vr3q6ylpb8495vswmq3n6g8jymyjx2bhj99p39") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t))) (source . "github://github.com/mordae/racket-avl/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e981880a7d4c202368cdd74c94cf11cbac42a29e") (source . "github://github.com/mordae/racket-avl/master") (source_url . "http://github.com/mordae/racket-avl/tree/master"))))))) ("tomato-timer" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "tomato-timer" "doc/tomato-timer@tomato-timer/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tomato-timer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tomato-timer.txt"))) (checksum . "960f50a70b242f637bba67c7226cc65c333317fa") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Command-line timer") (implies . ()) (last-checked . 1522414693) (last-edit . 1487903930) (last-updated . 1516774746) (modules . ((lib "tomato-timer/docs/tomato-timer.scrbl") (lib "tomato-timer/main.rkt"))) (name . "tomato-timer") (nix-sha256 . "1ycpdc6wbm6iml0jaicjalbcn02skgbljwfaw5p3ql57q2qy8cf7") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (ring:1 . #t) (utility . #t))) (source . "git://github.com/bennn/tomato-timer") (tags . ("utility")) (versions . #hash((default . #hasheq((checksum . "960f50a70b242f637bba67c7226cc65c333317fa") (source . "git://github.com/bennn/tomato-timer") (source_url . "http://github.com/bennn/tomato-timer/tree/master"))))))) ("request" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "request" "doc/request@request/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/request.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/request.txt"))) (checksum . "49936b297d43021cb3b67c009fcbf950ef32f61d") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "fancy-app" "rackunit-lib" "scribble-lib" "typed-racket-lib" "typed-racket-more" "net-doc" "rackunit-lib" "rackunit-doc" "racket-doc")) (description . "A package for constructing HTTP and REST-ful requesters and integration tests. Currently unstable.") (implies . ()) (last-checked . 1522414671) (last-edit . 1500077087) (last-updated . 1502816400) (modules . ((lib "request/private/call-response.rkt") (lib "request/private/exn.scrbl") (lib "request/check.scrbl") (lib "request/private/exn.rkt") (lib "request/doc-utils/def.rkt") (lib "request/doc-utils/examples.rkt") (lib "request/private/wrap.rkt") (lib "request/private/struct.scrbl") (lib "request/private/http-location.scrbl") (lib "request/private/http-location.rkt") (lib "request/main.scrbl") (lib "request/private/struct.rkt") (lib "request/param.rkt") (lib "request/main.rkt") (lib "request/private/wrap.scrbl") (lib "request/check.rkt") (lib "request/param.scrbl") (lib "request/private/base.scrbl") (lib "request/private/base.rkt"))) (name . "request") (nix-sha256 . "159npbp3mwwcbs8drig4xdihk52y4ahlvm48lqyrcljz8vnsgr2v") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (experimental . #t) (http . #t) (rest . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/jackfirth/racket-request") (tags . ("experimental" "http" "rest" "testing")) (versions . #hash((default . #hasheq((checksum . "49936b297d43021cb3b67c009fcbf950ef32f61d") (source . "git://github.com/jackfirth/racket-request") (source_url . "http://github.com/jackfirth/racket-request/tree/master"))))))) ("tandem" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "tandem" "doc/tandem@tandem/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tandem.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tandem.txt"))) (checksum . "fa6bae480f6f4a3ae411ca5c3bad7ae5f8d106ac") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1" "racket-doc")) (description . "Cooperative Communication Framework for Racket") (implies . ()) (last-checked . 1522414690) (last-edit . 1384508973) (last-updated . 1502816472) (modules . ((lib "tandem/tandem.scrbl") (lib "tandem/main.rkt"))) (name . "tandem") (nix-sha256 . "06vdfigil34svqjh3qqq4cniws3818nin1r6ym5l8wqxw7xac4xk") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t))) (source . "github://github.com/mordae/racket-tandem/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "fa6bae480f6f4a3ae411ca5c3bad7ae5f8d106ac") (source . "github://github.com/mordae/racket-tandem/master") (source_url . "http://github.com/mordae/racket-tandem/tree/master"))))))) ("planet-lib" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (checksum . "189b13b192b346dd2d9b8a641b1b2f45b144599e") (dependencies . ("srfi-lite-lib" ("base" #:version "6.2.900.6"))) (description . "mflatt@racket-lang.org robby@racket-lang.org") (modules . ()) (name . "planet-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/planet-lib.zip") (tags . ()))) ("cldr-bcp47" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cldr-bcp47-timezone" "doc/cldr-bcp47-timezone@cldr-bcp47/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cldr-bcp47.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cldr-bcp47.txt"))) (checksum . "823fc1a530f1a0ec4de59f5454c1a17f20c5a5d6") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "cldr-core" "scribble-lib" "racket-doc")) (description . "API for BCP47 extensions to CLDR") (implies . ()) (last-checked . 1522414314) (last-edit . 1427073088) (last-updated . 1502812291) (modules . ((lib "cldr/bcp47/timezone.rkt") (lib "cldr/bcp47/scribblings/cldr-bcp47-timezone.scrbl"))) (name . "cldr-bcp47") (nix-sha256 . "0l06a7nv7hylwsjw9i5yzjyswggvq7g64g09wdbw7m8hhbinm3k1") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:zeppieri@gmail.com . #t) (cldr . #t) (l10n . #t) (ring:1 . #t))) (source . "git://github.com/97jaz/cldr-bcp47") (tags . ("cldr" "l10n")) (versions . #hash((default . #hasheq((checksum . "823fc1a530f1a0ec4de59f5454c1a17f20c5a5d6") (source . "git://github.com/97jaz/cldr-bcp47") (source_url . "http://github.com/97jaz/cldr-bcp47/tree/master"))))))) ("dotlambda" . #hasheq((author . "georges.duperon@gmail.com") (authors . ("georges.duperon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dotlambda" "doc/dotlambda@dotlambda/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dotlambda.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dotlambda.txt"))) (checksum . "41552949a1e7976416beed98868c544d790a0aec") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "typed-map-lib" "typed-racket-lib" "typed-racket-more" "chain-module-begin" "debug-scopes" "scribble-lib" "racket-doc" "typed-racket-doc")) (description . "Splits dotted identifiers like a.b.c, also supports λ<arg>.(code) syntax. Experimental (i.e. there may be small breaking changes in later versions).") (implies . ()) (last-checked . 1522414381) (last-edit . 1501079076) (last-updated . 1502815907) (modules . ((lib "dotlambda/lang/reader.rkt") (lib "dotlambda/unhygienic.rkt") (lib "dotlambda/implementation.rkt") (lib "dotlambda/test/test-typed-racket-chain.rkt") (lib "dotlambda/scribblings/dotlambda.scrbl") (lib "dotlambda/unhygienic-implementation.rkt") (lib "dotlambda/test/test-typed-dotlambda.rkt") (lib "typed/dotlambda.rkt") (lib "typed/dotlambda/main.rkt") (lib "dotlambda/test/typed-dotlambda-phase1.rkt") (lib "dotlambda/main.rkt") (lib "dotlambda/scribblings/typed-dotlambda.scrbl") (lib "dotlambda/literals.rkt") (lib "dotlambda/unhygienic/lang/reader.rkt") (lib "dotlambda/private/fold.rkt") (lib "dotlambda/test/test-dotlambda.rkt") (lib "typed/dotlambda/lang/reader.rkt"))) (name . "dotlambda") (nix-sha256 . "0qh4g7ivbska67r552bag29hn7jfv637lxbc4npng6jv0b65sri0") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:georges.duperon@gmail.com . #t) (experimental . #t) (lang-extension . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/jsmaniac/dotlambda.git") (tags . ("experimental" "lang-extension" "syntax")) (versions . #hash((default . #hasheq((checksum . "41552949a1e7976416beed98868c544d790a0aec") (source . "https://github.com/jsmaniac/dotlambda.git") (source_url . "https://github.com/jsmaniac/dotlambda.git"))))))) ("sirmail" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sirmail.txt") (test-failure-log . "server/built/test-fail/sirmail.txt") (test-success-log . #f))) (checksum . "065b58e70c1ac4126c54b5373678a8f1d2e9eabe") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "drracket" "gui-lib" "net-lib" "parser-tools-lib" "scheme-lib" "syntax-color-lib" "sandbox-lib" "pict-lib" "pict-snip-lib")) (description . "An IMAP mail client") (implies . ()) (last-checked . 1522414679) (last-edit . 1353352399) (last-updated . 1502816431) (modules . ((lib "sirmail/sendr.rkt") (lib "sirmail/pref.rkt") (lib "sirmail/sirmail.rkt") (lib "sirmail/main.rkt") (lib "sirmail/sirmailr.rkt") (lib "sirmail/readr.rkt") (lib "sirmail/folderr.rkt") (lib "sirmail/utilr.rkt") (lib "sirmail/optionr.rkt") (lib "sirmail/recover.rkt") (lib "sirmail/repl.rkt") (lib "sirmail/spell.rkt") (lib "sirmail/sirmails.rkt"))) (name . "sirmail") (nix-sha256 . "0f5cixa9ml5bzwnax0nr0jykqa6xi230s0mdd7rwpf9lsz205y35") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (app . #t) (author:mflatt@cs.utah.edu . #t) (mail . #t) (net . #t) (ring:1 . #t))) (source . "github://github.com/mflatt/sirmail/master") (tags . ("app" "mail" "net")) (versions . #hash((default . #hasheq((checksum . "065b58e70c1ac4126c54b5373678a8f1d2e9eabe") (source . "github://github.com/mflatt/sirmail/master") (source_url . "http://github.com/mflatt/sirmail/tree/master"))))))) ("roman-numeral" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "roman-numeral" "doc/roman-numeral@roman-numeral/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/roman-numeral.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/roman-numeral.txt"))) (checksum . "1ff2e4830a398d483f92ad60b0904c5630278a05") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Utilities for parsing and writing Roman numerals") (implies . ()) (last-checked . 1522414672) (last-edit . 1501020510) (last-updated . 1502816404) (modules . ((lib "roman-numeral/scribblings/roman-numeral.scrbl") (lib "roman-numeral/main.rkt"))) (name . "roman-numeral") (nix-sha256 . "16b4m1ikkwr5yqfa7i9ksr2p26i06ppswzd7qj9m7nfyh8fnlnw3") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:philip@philipmcgrath.com . #t) (parser . #t) (parsing . #t) (ring:1 . #t) (util . #t) (utility . #t))) (source . "git://github.com/LiberalArtist/roman-numeral") (tags . ("parser" "parsing" "util" "utility")) (versions . #hash((default . #hasheq((checksum . "1ff2e4830a398d483f92ad60b0904c5630278a05") (source . "git://github.com/LiberalArtist/roman-numeral") (source_url . "http://github.com/LiberalArtist/roman-numeral/tree/master"))))))) ("video-v0-0" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (("extract" "video" "doc/video@video-v0-0/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/video-v0-0.txt") (test-failure-log . "server/built/test-fail/video-v0-0.txt") (test-success-log . #f))) (checksum . "39112ec3b7fbc6b611a67cc5f9ac3c988c50f16d") (checksum-error . #f) (conflicts . ("video")) (dependencies . ("base" "rackunit-lib" "gui-lib" "images-lib" "scribble-lib" "racket-doc")) (description . "v0.0 of #lang video") (implies . ()) (last-checked . 1522414700) (last-edit . 1503001736) (last-updated . 1502816519) (modules . ((lib "video/render.rkt") (lib "video/core.rkt") (lib "video/private/init-mlt.rkt") (lib "video/private/mlt.rkt") (lib "video/private/examples.rkt") (lib "video/player.rkt") (lib "video/tag.rkt") (lib "video/scribblings/video.scrbl") (lib "video/init.rkt") (lib "video/private/once.rkt") (lib "video/private/video.rkt") (lib "video/lib.rkt"))) (name . "video-v0-0") (nix-sha256 . "1rnx43r7acx10395843dja64kvx1hd42y5s4qvvkhinsr8jb8558") (ring . 2) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:conflicts: . #t) (:docs-error: . #t) (:docs: . #t) (author:leif@leifandersen.net . #t) (ring:2 . #t) (video . #t) (vidlang . #t))) (source . "git://github.com/videolang/video#v0.0") (tags . ("video" "vidlang")) (versions . #hash((default . #hasheq((checksum . "39112ec3b7fbc6b611a67cc5f9ac3c988c50f16d") (source . "git://github.com/videolang/video#v0.0") (source_url . "http://github.com/videolang/video/tree/master#v0.0"))))))) ("tulip-test" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tulip-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tulip-test.txt"))) (checksum . "1613cfd4d7e8dbc8ceb86cf33479375147f42b2f") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "tulip-lib")) (description . "") (implies . ()) (last-checked . 1522414694) (last-edit . 1466529328) (last-updated . 1502816489) (modules . ((lib "tests/tulip/id-namespace.rkt") (lib "tests/tulip/list.rkt") (lib "tests/tulip/corecur.rkt") (lib "tests/tulip/import.rkt") (lib "tests/tulip/assert.rkt") (lib "tests/tulip/chain.rkt"))) (name . "tulip-test") (nix-sha256 . "1lzj7skc9b78cj2k2scp5ydxdgympbrj9jh9w10nld4fycba3rc1") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-tulip?path=tulip-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "1613cfd4d7e8dbc8ceb86cf33479375147f42b2f") (source . "git://github.com/lexi-lambda/racket-tulip?path=tulip-test") (source_url . "http://github.com/lexi-lambda/racket-tulip/tree/master?path=tulip-test"))))))) ("mock-rackunit" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mock-rackunit" "doc/mock-rackunit@mock-rackunit/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mock-rackunit.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mock-rackunit.txt"))) (checksum . "1a27bb7a1444effc034bf8b2df4ba1845f51478f") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.4") ("mock" #:version "2.0") "rackunit-lib" "racket-doc" "rackunit-doc" "scribble-lib" "sweet-exp")) (description . "RackUnit checks for testing with mocks from the mock package") (implies . ()) (last-checked . 1522414435) (last-edit . 1469662289) (last-updated . 1508918527) (modules . ((lib "mock/rackunit.rkt") (lib "mock/rackunit.scrbl"))) (name . "mock-rackunit") (nix-sha256 . "1d7y7f08ys0lg3m89zy66whkzpd7vdn4xhkp5nv99vg0pdl2zilm") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (mock . #t) (rackunit . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/jackfirth/racket-mock?path=mock-rackunit") (tags . ("mock" "rackunit" "testing")) (versions . #hash((default . #hasheq((checksum . "1a27bb7a1444effc034bf8b2df4ba1845f51478f") (source . "git://github.com/jackfirth/racket-mock?path=mock-rackunit") (source_url . "http://github.com/jackfirth/racket-mock/tree/master?path=mock-rackunit"))))))) ("ffmpeg-i386-win32" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ffmpeg-i386-win32.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ffmpeg-i386-win32.txt"))) (checksum . "e8fb290d38e90800ffa1d105dbb540d28f931807") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1522414401) (last-edit . 1497318984) (last-updated . 1521584144) (modules . ()) (name . "ffmpeg-i386-win32") (nix-sha256 . "1h5nrhdlb9z89vx4irrzxcpc7zgpyjk1vy6yc598yfq1hskmwjvl") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (ffmpeg . #t) (ring:1 . #t) (video . #t))) (source . "git://github.com/videolang/native-pkgs?path=ffmpeg-i386-win32") (tags . ("ffmpeg" "video")) (versions . #hash((default . #hasheq((checksum . "e8fb290d38e90800ffa1d105dbb540d28f931807") (source . "git://github.com/videolang/native-pkgs?path=ffmpeg-i386-win32") (source_url . "http://github.com/videolang/native-pkgs/tree/master?path=ffmpeg-i386-win32"))))))) ("syntax-warn" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-warn.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-warn.txt"))) (checksum . "f00b27f92656f60d32853831ee905ceeb00693d9") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "syntax-warn-base" "syntax-warn-cli" "syntax-warn-doc" "syntax-warn-lang")) (description . "Define and attach syntax warnings to code, with automated fixes and built in warnings. Implies -base, -lang, -cli, and -doc packages.") (implies . ("syntax-warn-base" "syntax-warn-cli" "syntax-warn-doc" "syntax-warn-lang")) (last-checked . 1522414689) (last-edit . 1500077527) (last-updated . 1502920413) (modules . ()) (name . "syntax-warn") (nix-sha256 . "0py8h9yxlxfnqlppcy1rwjj8bmnxymkavhpgcd68m1bj6ng4dhfn") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jackhfirth@gmail.com . #t) (lang . #t) (raco . #t) (ring:1 . #t) (syntax . #t) (syntax-warn . #t))) (source . "git://github.com/jackfirth/syntax-warn?path=syntax-warn") (tags . ("lang" "raco" "syntax" "syntax-warn")) (versions . #hash((default . #hasheq((checksum . "f00b27f92656f60d32853831ee905ceeb00693d9") (source . "git://github.com/jackfirth/syntax-warn?path=syntax-warn") (source_url . "http://github.com/jackfirth/syntax-warn/tree/master?path=syntax-warn"))))))) ("unstable-parameter-group-lib" . #hash((author . "mflatt@racket-lang.org ntoronto@racket-lang.org") (authors . ("mflatt@racket-lang.org" "ntoronto@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-parameter-group-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-parameter-group-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" ("images-lib" #:version "1.2"))) (description . "Experimental libraries for parameter groups") (implies . ()) (last-checked . 1522414698) (last-edit . 1445382797) (last-updated . 1502816515) (modules . ((lib "unstable/parameter-group.rkt"))) (name . "unstable-parameter-group-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:mflatt@racket-lang.org . #t) (author:ntoronto@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("unstable")) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) (default . #hasheq((checksum . "30de3acb3487c9c3ed4e8ef664ca18bb9667be09") (source . "git://github.com/racket/unstable-parameter-group-lib") (source_url . "http://github.com/racket/unstable-parameter-group-lib/tree/master"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("rackunit-doc" . #hash((author . "noel@racket-lang.org ryanc@racket-lang.org") (checksum . "12420b761edbd1ad63adf22b919f216094018f10") (dependencies . ("base" "racket-index" "racket-doc" "rackunit-gui" "rackunit-lib" "scribble-lib")) (description . "noel@racket-lang.org ryanc@racket-lang.org") (modules . ()) (name . "rackunit-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/rackunit-doc.zip") (tags . ()))) ("frog" . #hasheq((author . "greghendershott@gmail.com") (authors . ("greghendershott@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "frog" "doc/frog@frog/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/frog.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/frog.txt"))) (checksum . "31b48b5d95d50f1f5984dbb084ac03f6438dc1dc") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.1") "find-parent-dir" "html-lib" ("markdown" #:version "0.25") "racket-index" ("rackjure" #:version "0.9") "reprovide-lang" "scribble-lib" "scribble-text-lib" "srfi-lite-lib" "web-server-lib" "at-exp-lib" "net-doc" "racket-doc" "rackunit-lib" "scribble-doc" "scribble-text-lib" "web-server-doc")) (description . "Static blog generator application. Supports Twitter Bootstrap, Pygments, more.") (implies . ()) (last-checked . 1522414402) (last-edit . 1491742817) (last-updated . 1520553348) (modules . ((lib "frog/scribble.rkt") (lib "frog/private/html.rkt") (lib "frog/widgets.rkt") (lib "frog/config/private/load.rkt") (lib "frog/private/xexpr-map.rkt") (lib "frog/private/main.rkt") (lib "frog/private/enhance-body/add-doc-links/doc-uri.rkt") (lib "frog/private/util.rkt") (lib "frog/private/verbosity.rkt") (lib "frog/private/xexpr2text.rkt") (lib "frog/private/author.rkt") (lib "example/frog.rkt") (lib "frog/private/upgrade/template-frog.rkt") (lib "frog/private/serialize-posts.rkt") (lib "frog/private/new-post.rkt") (lib "frog/private/non-posts.rkt") (lib "frog/frog.scrbl") (lib "frog/private/params.rkt") (lib "frog/private/bodies-page.rkt") (lib "frog/private/enhance-body/syntax-highlight/pygments.rkt") (lib "frog/verbosity.rkt") (lib "frog/private/read-scribble.rkt") (lib "frog/config/private/test.rkt") (lib "frog/private/tags.rkt") (lib "frog/private/posts.rkt") (lib "example/_src/A-Non-Post-Scribble-Page.scrbl") (lib "frog/paths.rkt") (lib "example/_src/posts/2013-06-19-a-scribble-post.scrbl") (lib "frog/main.rkt") (lib "frog/private/watch-dir.rkt") (lib "frog/params.rkt") (lib "frog/private/template.rkt") (lib "frog/config/main.rkt") (lib "frog/private/post-struct.rkt") (lib "frog/private/upgrade/old-config.rkt") (lib "frog/private/paths.rkt") (lib "frog/private/feeds.rkt") (lib "frog/config/lang/reader.rkt") (lib "frog/private/define-doc.rkt") (lib "frog/enhance-body.rkt") (lib "frog/private/stale.rkt"))) (name . "frog") (nix-sha256 . "16l5m8l9jq7xlhr3plb2rzj5afiqdv8fs4mnb3545xiq77alrv19") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (app . #t) (author:greghendershott@gmail.com . #t) (blog . #t) (markdown . #t) (ring:1 . #t) (scribble . #t) (web . #t))) (source . "git://github.com/greghendershott/frog") (tags . ("app" "blog" "markdown" "scribble" "web")) (versions . #hash((default . #hasheq((checksum . "31b48b5d95d50f1f5984dbb084ac03f6438dc1dc") (source . "git://github.com/greghendershott/frog") (source_url . "http://github.com/greghendershott/frog/tree/master"))))))) ("cKanren" . #hasheq((author . "claire.alvis@gmail.com") (authors . ("claire.alvis@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cKanren.txt") (test-failure-log . "server/built/test-fail/cKanren.txt") (test-success-log . #f))) (checksum . "8714bdd442ca03dbf5b1d6250904cbc5fd275e68") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "Constraint programming language") (implies . ()) (last-checked . 1522414313) (last-edit . 1388959832) (last-updated . 1502812289) (modules . ((lib "cKanren/unstable/finite-domain.rkt") (lib "cKanren/src/errors.rkt") (lib "cKanren/tests/nominal/alphaleantap.rkt") (lib "cKanren/src/running.rkt") (lib "cKanren/tests/numbero.rkt") (lib "cKanren/src/constraint-store.rkt") (lib "cKanren/src/infs.rkt") (lib "cKanren/src/triggers.rkt") (lib "cKanren/miniKanren.rkt") (lib "cKanren/src/macros.rkt") (lib "cKanren/main.rkt") (lib "cKanren/tests/ak.rkt") (lib "cKanren/src/mk-structs.rkt") (lib "cKanren/unstable/interval-domain.rkt") (lib "cKanren/tests/fd.rkt") (lib "cKanren/neq.rkt") (lib "cKanren/tests/lazy-appendo.rkt") (lib "cKanren/tests/sets.rkt") (lib "cKanren/unstable/doc/manual.scrbl") (lib "cKanren/src/helpers.rkt") (lib "cKanren/tests/mk-struct.rkt") (lib "cKanren/src/syntax-classes.rkt") (lib "cKanren/testall.rkt") (lib "cKanren/tests/quines.rkt") (lib "cKanren/matche.rkt") (lib "cKanren/tests/interp.rkt") (lib "cKanren/src/operators.rkt") (lib "cKanren/tree-unify.rkt") (lib "cKanren/tests/nominal/nnf.rkt") (lib "cKanren/absento.rkt") (lib "cKanren/ck.rkt") (lib "cKanren/lang/reader.rkt") (lib "cKanren/src/constraints.rkt") (lib "cKanren/src/queue.rkt") (lib "cKanren/src/events.rkt") (lib "cKanren/src/base.rkt") (lib "cKanren/tests/mk.rkt") (lib "cKanren/tests/framework.rkt") (lib "cKanren/tests/neq.rkt") (lib "cKanren/tests/absento.rkt") (lib "cKanren/unstable/fd.rkt") (lib "cKanren/src/package.rkt") (lib "cKanren/unstable/ak.rkt") (lib "cKanren/src/variables.rkt") (lib "cKanren/unstable/sets.rkt") (lib "cKanren/src/framework.rkt") (lib "cKanren/tester.rkt") (lib "cKanren/src/debugging.rkt") (lib "cKanren/src/lex.rkt") (lib "cKanren/tests/symbolo-numbero.rkt") (lib "cKanren/tests/comp.rkt") (lib "cKanren/tests/no-closure.rkt") (lib "cKanren/src/substitution.rkt") (lib "cKanren/tests/tree-unify.rkt") (lib "cKanren/attributes.rkt") (lib "cKanren/tests/infer.rkt") (lib "cKanren/eigen.rkt") (lib "cKanren/tests/symbolo.rkt") (lib "cKanren/copy.rkt"))) (name . "cKanren") (nix-sha256 . "0fm3gmg6wfnqdkcrc7yl9y1bz6db4m6m2zlj9miyby3mcndkhw5k") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:claire.alvis@gmail.com . #t) (ring:1 . #t))) (source . "github://github.com/calvis/cKanren/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8714bdd442ca03dbf5b1d6250904cbc5fd275e68") (source . "github://github.com/calvis/cKanren/master") (source_url . "http://github.com/calvis/cKanren/tree/master"))))))) ("rash" . #hasheq((author . "willghatch@gmail.com") (authors . ("willghatch@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rash" "doc/rash@rash/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rash.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rash.txt"))) (checksum . "bc28ec4489ac4847adf711b82bb313133d8b7dd7") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.12") "basedir" "shell-pipeline" "udelim" "scribble-lib" "scribble-doc" "racket-doc" "rackunit-lib" "readline-lib" "text-table")) (description . "(unstable) Line-based shell library/language/repl.") (implies . ()) (last-checked . 1522414666) (last-edit . 1471567764) (last-updated . 1522266786) (modules . ((lib "rash/private/cd.rkt") (lib "rash/private/rashrc-git-stuff.rkt") (lib "rash/private/linea/line-macro.rkt") (lib "rash/private/linea/private/line-macro-detect.rkt") (lib "rash/private/basic-module-begin.rkt") (lib "rash/demo/rc17.rkt") (lib "rash/demo/ps-wrapper.rkt") (lib "rash/private/linea/line-macro-prop.rkt") (lib "rash/private/rashrc-lib.rkt") (lib "rash/demo/demo-rc.rkt") (lib "rash/experimental.rkt") (lib "rash/private/escapable-template.rkt") (lib "rash/private/template-escape-detect.rkt") (lib "rash/private/linea/read.rkt") (lib "rash/scribblings/rash.scrbl") (lib "rash/main.rkt") (lib "rash/private/lang-funcs.rkt") (lib "rash/demo/setup.rkt") (lib "rash/demo/rc17-demo-modbeg.rkt") (lib "rash/private/or-exn.rkt") (lib "rash/repl.rkt") (lib "rash/private/syntax-walk.rkt") (lib "rash/private/option-app.rkt") (lib "rash/private/hash-lang-sanity-test.rkt") (lib "rash/private/repl-namespace.rkt"))) (name . "rash") (nix-sha256 . "06mb7rbqvcc91gf2a9whyrhz6660w3nafpdynahawj7pdppl3mr4") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:willghatch@gmail.com . #t) (ring:1 . #t) (shell . #t) (unix . #t) (unstable . #t))) (source . "git://github.com/willghatch/racket-rash") (tags . ("shell" "unix" "unstable")) (versions . #hash((default . #hasheq((checksum . "bc28ec4489ac4847adf711b82bb313133d8b7dd7") (source . "git://github.com/willghatch/racket-rash") (source_url . "http://github.com/willghatch/racket-rash/tree/master"))))))) ("pipe" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pipe" "doc/pipe@pipe/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pipe.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pipe.txt"))) (checksum . "179b8f8ad92ced86ea8dacec607deb24aefc15aa") (checksum-error . #f) (conflicts . ()) (dependencies . ("typed-racket-lib" "base" "racket-doc" "typed-racket-doc" "scribble-lib")) (description . "Iteratees in Typed Racket.") (implies . ()) (last-checked . 1522414513) (last-edit . 1371342346) (last-updated . 1502816260) (modules . ((lib "pipe/pumps.rkt") (lib "pipe/types.rkt") (lib "pipe/filetank.rkt") (lib "pipe/main.rkt") (lib "pipe/pipes.rkt") (lib "pipe/tanks.rkt") (lib "pipe/scribblings/pipe.scrbl"))) (name . "pipe") (nix-sha256 . "0hsw7gd57n43pdx61l8lbfv9y07jby4r4c4k8m9yjb8hy7fsl3w4") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ray.racine@gmail.com . #t) (control . #t) (iteratee . #t) (ring:1 . #t))) (source . "https://gitlab.com/RayRacine/pipe.git") (tags . ("control" "iteratee")) (versions . #hash((default . #hasheq((checksum . "179b8f8ad92ced86ea8dacec607deb24aefc15aa") (source . "https://gitlab.com/RayRacine/pipe.git") (source_url . "http://gitlab.com/RayRacine/pipe/tree/master"))))))) ("quickscript" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "quickscript" "doc/quickscript@quickscript/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/quickscript.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/quickscript.txt"))) (checksum . "7584c3f87b9e212bd92c298a3147992cea31efbd") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "at-exp-lib" "drracket" "drracket-plugin-lib" "gui-lib" "html-lib" "net-lib" "slideshow-lib" "srfi-lite-lib" "gui-doc" "racket-doc" "racket-index" "scribble-lib" "draw-doc" "rackunit-lib")) (description . "Extends DrRacket with scripting capabilities and menu items. The package quickscript-extra contains sample scripts. Successor to script-plugin.") (implies . ()) (last-checked . 1522414538) (last-edit . 1518256700) (last-updated . 1518684398) (modules . ((lib "quickscript/library-gui.rkt") (lib "quickscript/library.rkt") (lib "quickscript/scribblings/quickscript.scrbl") (lib "quickscript/script.rkt") (lib "quickscript/shadow-script.rkt") (lib "quickscript/tool.rkt") (lib "quickscript/tests/test-library.rkt") (lib "quickscript/base.rkt"))) (name . "quickscript") (nix-sha256 . "00fl1s1n2jbfi17lw1r7x15fyx8filgc4z93m39c4c8vgmsnsmds") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:laurent.orseau@gmail.com . #t) (drracket . #t) (gui . #t) (ring:2 . #t))) (source . "https://github.com/Metaxal/quickscript.git") (tags . ("drracket" "gui")) (versions . #hash((default . #hasheq((checksum . "7584c3f87b9e212bd92c298a3147992cea31efbd") (source . "https://github.com/Metaxal/quickscript.git") (source_url . "https://github.com/Metaxal/quickscript.git"))))))) ("scribble-math" . #hasheq((author . "georges.duperon@gmail.com jensaxel@soegaard.net") (authors . ("georges.duperon@gmail.com" "jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scribble-math" "doc/scribble-math@scribble-math/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scribble-math.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scribble-math.txt"))) (checksum . "063604d4a2b38d25cc7fd68a2172206ac895a594") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "scribble-lib" "racket-doc" "at-exp-lib" "scribble-doc")) (description . "Typesetting math in scribble (uses MathJax and/or KaTeX). Also supports figures with Asymptote.") (implies . ()) (last-checked . 1522414676) (last-edit . 1498225731) (last-updated . 1503568976) (modules . ((lib "scribble-math/dollar.rkt") (lib "scribble-math/asymptote.rkt") (lib "scribble-math/main.rkt") (lib "scribble-math/mathjax-convert-unicode.rkt") (lib "scribble-math/scribblings/scribble-math.scrbl") (lib "scribble-math/katex-convert-unicode.rkt"))) (name . "scribble-math") (nix-sha256 . "1mmvryk8hp691phljmagpr0ncvf946sy3z22ki0z60yh31c80ssc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (LaTeX . #t) (Math . #t) (author:georges.duperon@gmail.com . #t) (author:jensaxel@soegaard.net . #t) (documentation . #t) (math . #t) (ring:1 . #t) (scribble . #t))) (source . "https://github.com/jsmaniac/scribble-math.git") (tags . ("documentation" "LaTeX" "math" "Math" "scribble")) (versions . #hash((default . #hasheq((checksum . "063604d4a2b38d25cc7fd68a2172206ac895a594") (source . "https://github.com/jsmaniac/scribble-math.git") (source_url . "https://github.com/jsmaniac/scribble-math.git"))))))) ("bitsyntax" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "bitsyntax" "doc/bitsyntax@bitsyntax/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bitsyntax.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bitsyntax.txt"))) (checksum . "2016fc9a002b6b704257ba758ab9ea04787a1880") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc")) (description . "Erlang-like binary pattern-matching and bit string manipulation for Racket.") (implies . ()) (last-checked . 1522414311) (last-edit . 1401490586) (last-updated . 1502812283) (modules . ((lib "bitsyntax/bitstx.rkt") (lib "bitsyntax/test-bitmatch-bitstitch.rkt") (lib "bitsyntax/bitmatch.rkt") (lib "bitsyntax/scribblings/bitsyntax.scrbl") (lib "bitsyntax/bitstitch.rkt") (lib "bitsyntax/test-typed.rkt") (lib "bitsyntax/bitstring.rkt") (lib "bitsyntax/main.rkt"))) (name . "bitsyntax") (nix-sha256 . "17hfaz9jdivsndh312nz4iy2g8ksy8s44v2lkmr8iiq7p69ywvvf") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:tonygarnockjones@gmail.com . #t) (net . #t) (ring:1 . #t))) (source . "git://github.com/tonyg/racket-bitsyntax") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "2016fc9a002b6b704257ba758ab9ea04787a1880") (source . "git://github.com/tonyg/racket-bitsyntax") (source_url . "http://github.com/tonyg/racket-bitsyntax/tree/master"))))))) ("ipoe" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ipoe" "doc/ipoe@ipoe/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ipoe.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ipoe.txt"))) (checksum . "4cd2729899e0e9c83488a0799bca48a06d853895") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "basedir" "db-lib" "html-lib" "html-parsing" "levenshtein" "rackunit-lib" "readline-lib" "reprovide-lang" "sxml" "basedir" "net-doc" "racket-doc" "rackunit-abbrevs" "rackunit-lib" "scribble-doc" "scribble-lib")) (description . "interactive poetry editor") (implies . ()) (last-checked . 1522414420) (last-edit . 1483520067) (last-updated . 1522034233) (modules . ((lib "ipoe/cinquain/lang/reader.rkt") (lib "ipoe/docs/ipoe-define.scrbl") (lib "ipoe/main.rkt") (lib "ipoe/tanaga/lang/reader.rkt") (lib "ipoe/private/poem.rkt") (lib "ipoe/scrape.rkt") (lib "ipoe/private/util/check-os.rkt") (lib "ipoe/private/command/update.rkt") (lib "ipoe/private/ui.rkt") (lib "ipoe/private/parameters.rkt") (lib "ipoe/villanelle/lang/reader.rkt") (lib "ipoe/lang/reader.rkt") (lib "ipoe/free-verse/lang/reader.rkt") (lib "ipoe/english.rkt") (lib "ipoe/docs/ipoe-use.scrbl") (lib "ipoe/private/command/common.rkt") (lib "ipoe/docs/ipoe-externals.scrbl") (lib "ipoe/sextilla/lang/reader.rkt") (lib "ipoe/private/poem/poetic-license.rkt") (lib "ipoe/private/command.rkt") (lib "ipoe/private/scrape/scrape-words.rkt") (lib "ipoe/private/command/show.rkt") (lib "ipoe/private/nlp/number.rkt") (lib "ipoe/private/db.rkt") (lib "ipoe/private/command/dbshell.rkt") (lib "ipoe/limerick/lang/reader.rkt") (lib "ipoe/docs/ipoe.scrbl") (lib "ipoe/italian-sonnet/lang/reader.rkt") (lib "ipoe/private/util/sequence.rkt") (lib "ipoe/private/suggest/spelling.rkt") (lib "ipoe/english-sonnet/lang/reader.rkt") (lib "ipoe/private/scrape.rkt") (lib "ipoe/poetic-form.rkt") (lib "ipoe/private/suggest.rkt") (lib "ipoe/private/scrape/scrape-util.rkt") (lib "ipoe/private/util/windows-readline.rkt") (lib "ipoe/docs/ipoe-api.scrbl") (lib "ipoe/haiku/lang/reader.rkt") (lib "ipoe/private/command/remove.rkt") (lib "ipoe/private/util/logging.rkt") (lib "ipoe/private/poem/spellcheck.rkt") (lib "ipoe/private/command/init.rkt") (lib "ipoe/private/util/string.rkt") (lib "ipoe/private/nlp/infer.rkt") (lib "ipoe/private/poem/rhymecheck.rkt") (lib "ipoe/sestina/lang/reader.rkt") (lib "ipoe/couplet/lang/reader.rkt") (lib "ipoe/private/scrape/scrape-rhymes.rkt") (lib "ipoe/private/nlp/parse.rkt") (lib "ipoe/private/poem/form.rkt") (lib "ipoe/private/command/check.rkt") (lib "ipoe/quaternion/lang/reader.rkt") (lib "ipoe/private/util/check-print.rkt") (lib "ipoe/private/db/migrate.rkt") (lib "ipoe/clerihew/lang/reader.rkt") (lib "ipoe/rondelet/lang/reader.rkt") (lib "ipoe/private/command/new.rkt") (lib "ipoe/tercet/lang/reader.rkt"))) (name . "ipoe") (nix-sha256 . "0bni35ysx5dk2xmg9x4xw7qizhbl710rbj5hg6cxs7wx7d9nsljq") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (lang . #t) (language . #t) (poetry . #t) (ring:1 . #t))) (source . "git://github.com/bennn/ipoe?path=ipoe") (tags . ("lang" "language" "poetry")) (versions . #hash((default . #hasheq((checksum . "4cd2729899e0e9c83488a0799bca48a06d853895") (source . "git://github.com/bennn/ipoe?path=ipoe") (source_url . "http://github.com/bennn/ipoe/tree/master?path=ipoe"))))))) ("draw-win32-x86_64" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for \"draw\" package") (implies . ()) (last-checked . 1522414388) (last-edit . 1452304685) (last-updated . 1502815921) (modules . ()) (name . "draw-win32-x86_64") (ring . 0) (search-terms . #hasheq((:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ()) (versions . #hash(("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) (default . #hasheq((checksum . "d5769e02a39715de02b3c91c55a4d366dbbcb7fd") (source . "https://pkg-sources.racket-lang.org/pkgs/d5769e02a39715de02b3c91c55a4d366dbbcb7fd/draw-win32-x86_64.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/d5769e02a39715de02b3c91c55a4d366dbbcb7fd/draw-win32-x86_64.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("struct-defaults" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/struct-defaults.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/struct-defaults.txt"))) (checksum . "97fb427ab2210ba145486604b2095704c51da6a9") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . " Default values in struct ctors and patterns.") (implies . ()) (last-checked . 1522414685) (last-edit . 1467565988) (last-updated . 1502816459) (modules . ((lib "struct-defaults/test-provide.rkt") (lib "struct-defaults/main.rkt") (lib "struct-defaults/test-computed-defaults.rkt"))) (name . "struct-defaults") (nix-sha256 . "0c8igcgx9h5pp5497gny385kldrcjsy5pnxyhl5nknfy5aqfgfbp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t) (structs . #t))) (source . "git://github.com/tonyg/racket-struct-defaults") (tags . ("structs")) (versions . #hash((default . #hasheq((checksum . "97fb427ab2210ba145486604b2095704c51da6a9") (source . "git://github.com/tonyg/racket-struct-defaults") (source_url . "http://github.com/tonyg/racket-struct-defaults/tree/master"))))))) ("poppler-ppc-macosx" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/poppler-ppc-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/poppler-ppc-macosx.txt"))) (checksum . "e063f0463664e0fe4943135020826ff5bbbd3ce9") (checksum-error . #f) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for \"racket-poppler\" package") (implies . ()) (last-checked . 1522414534) (last-edit . 1409089859) (last-updated . 1502816305) (modules . ()) (name . "poppler-ppc-macosx") (nix-sha256 . "1wq635670nyzh5y46bd2hkv8vmizxxqfk30469flm8fvijrzb465") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jensaxel@soegaard.net . #t) (poppler . #t) (ring:1 . #t))) (source . "git://github.com/soegaard/poppler-libs?path=poppler-ppc-macosx") (tags . ("poppler")) (versions . #hash((default . #hasheq((checksum . "e063f0463664e0fe4943135020826ff5bbbd3ce9") (source . "git://github.com/soegaard/poppler-libs?path=poppler-ppc-macosx") (source_url . "http://github.com/soegaard/poppler-libs/tree/master?path=poppler-ppc-macosx"))))))) ("debug-scopes" . #hasheq((author . "georges.duperon@gmail.com") (authors . ("georges.duperon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "debug-scopes" "doc/debug-scopes@debug-scopes/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/debug-scopes.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/debug-scopes.txt"))) (checksum . "59754c3569973705587a3738edd90aa4608bb4e0") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "reprovide-lang" "scribble-lib" "racket-doc" "scribble-enhanced")) (description . "Some utilities which help debugging scope-related issues for unhygienic macros") (implies . ()) (last-checked . 1522414378) (last-edit . 1481748871) (last-updated . 1517055395) (modules . ((lib "debug-scopes/test/named-scopes-test-def.rkt") (lib "debug-scopes/superscripts.rkt") (lib "debug-scopes/named-scopes/override.rkt") (lib "debug-scopes/named-scopes-sli-parameter.rkt") (lib "debug-scopes/scribblings/debug-scopes.scrbl") (lib "debug-scopes/test/named-scopes-test-use.rkt") (lib "debug-scopes/named-scopes/exptime.rkt") (lib "debug-scopes/main.rkt") (lib "debug-scopes/named-scopes/dummy-lang.rkt") (lib "debug-scopes/named-scopes.rkt"))) (name . "debug-scopes") (nix-sha256 . "1wxy19a4ay6hy9rigb8zdcplgrs7sjx9w1d069n1klgr1mbp52kw") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:georges.duperon@gmail.com . #t) (debug . #t) (debugging . #t) (ring:1 . #t) (scopes . #t) (syntax . #t))) (source . "https://github.com/jsmaniac/debug-scopes.git") (tags . ("debug" "debugging" "scopes" "syntax")) (versions . #hash((default . #hasheq((checksum . "59754c3569973705587a3738edd90aa4608bb4e0") (source . "https://github.com/jsmaniac/debug-scopes.git") (source_url . "https://github.com/jsmaniac/debug-scopes.git"))))))) ("db" . #hash((author . "ryanc@racket-lang.org") (checksum . "7c46f82b61019ff099443319c62d875f2cf88fdf") (dependencies . ("db-lib" "db-doc" "base")) (description . "ryanc@racket-lang.org") (modules . ()) (name . "db") (source . "https://download.racket-lang.org/releases/6.12/pkgs/db.zip") (tags . ()))) ("todo-list" . #hasheq((author . "david@davidchristiansen.dk") (authors . ("david@davidchristiansen.dk")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "todo-list" "doc/todo-list@todo-list/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/todo-list.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/todo-list.txt"))) (checksum . "8616f466e644697c8e2d8f427b7aaf190aac3535") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "data-lib" "drracket-plugin-lib" "gui-lib" "scribble-lib" "racket-doc")) (description . "A list of goals + interactive commands for solving them in DrRacket") (implies . ()) (last-checked . 1522414693) (last-edit . 1511371944) (last-updated . 1515169136) (modules . ((lib "todo-list/test-command.rkt") (lib "todo-list/private/expansion-handler.rkt") (lib "todo-list/tool.rkt") (lib "todo-list/main.rkt") (lib "todo-list/private/syntax-info.rkt") (lib "todo-list/scribblings/todo-list.scrbl") (lib "todo-list/demo.rkt") (lib "todo-list/private/goal-info.rkt"))) (name . "todo-list") (nix-sha256 . "1h74llnxb3bhqs47spd2jl1plcixdr16spl8dvya49z42r345p95") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:david@davidchristiansen.dk . #t) (drracket . #t) (editing . #t) (ring:2 . #t))) (source . "https://github.com/david-christiansen/todo-list.git") (tags . ("drracket" "editing")) (versions . #hash((default . #hasheq((checksum . "8616f466e644697c8e2d8f427b7aaf190aac3535") (source . "https://github.com/david-christiansen/todo-list.git") (source_url . "https://github.com/david-christiansen/todo-list.git"))))))) ("games" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (checksum . "0714494b7e16407072ad0048163e8477af2d675a") (dependencies . ("base" "draw-lib" "drracket" ("gui-lib" #:version "1.16") "net-lib" "htdp-lib" "math-lib" "scribble-lib" "racket-index" "sgl" "srfi-lib" "string-constants-lib" ("data-enumerate-lib" #:version "1.2") "typed-racket-lib" "typed-racket-more" "draw-doc" "gui-doc" "racket-doc" "pict-lib" "rackunit-lib" "htdp-doc")) (description . "mflatt@racket-lang.org robby@racket-lang.org") (modules . ()) (name . "games") (source . "https://download.racket-lang.org/releases/6.12/pkgs/games.zip") (tags . ()))) ("mic1" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mic1" "doc/mic1@mic1/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mic1.txt") (test-failure-log . "server/built/test-fail/mic1.txt") (test-success-log . #f))) (checksum . "be4ab7639a65a38013366ddc1e28abaebc3d1a75") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "parser-tools-lib" "readline-lib" "racket-doc" "scribble-lib" "chk")) (description . "tools for MIC-1 CPU architecture") (implies . ()) (last-checked . 1522414435) (last-edit . 1495592344) (last-updated . 1512418047) (modules . ((lib "mic1/mic1-test.rkt") (lib "mic1/mcc.rkt") (lib "mic1/low-level.rkt") (lib "mic1/high-level.rkt") (lib "mic1/mic1.rkt") (lib "mic1/masm.rkt") (lib "mic1/mic1.scrbl") (lib "mic1/lib.rkt") (lib "mic1/hdl.rkt") (lib "mic1/simulator.rkt"))) (name . "mic1") (nix-sha256 . "0kqyp3dwph23n976pqlccxibds0ivr6fjclknnb410a93zhkyaql") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (hardware . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/mic1?path=rkt") (tags . ("hardware")) (versions . #hash((default . #hasheq((checksum . "be4ab7639a65a38013366ddc1e28abaebc3d1a75") (source . "git://github.com/jeapostrophe/mic1?path=rkt") (source_url . "http://github.com/jeapostrophe/mic1/tree/master?path=rkt"))))))) ("asn1-test" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/asn1-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/asn1-test.txt"))) (checksum . "34802b6cc4f0f2200a2feb2aa724833fc17b157a") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "asn1-lib")) (description . "ASN.1 library") (implies . ()) (last-checked . 1522417872) (last-edit . 1518435118) (last-updated . 1518435118) (modules . ((lib "asn1/examples/crypto.rkt") (lib "asn1/basic.rkt") (lib "asn1/examples/sec1.rkt") (lib "asn1/examples/crypto-test.rkt") (lib "asn1/examples/pkcs1.rkt"))) (name . "asn1-test") (nix-sha256 . "1w8h4q0s82898961qsn4mf24fmbsszznvjhrcw1w4xigwdivw4y0") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (io . #t) (net . #t) (parser . #t) (parsing . #t) (ring:2 . #t))) (source . "https://github.com/rmculpepper/asn1.git?path=asn1-test") (tags . ("io" "net" "parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "34802b6cc4f0f2200a2feb2aa724833fc17b157a") (source . "https://github.com/rmculpepper/asn1.git?path=asn1-test") (source_url . "https://github.com/rmculpepper/asn1.git?path=asn1-test"))))))) ("levenshtein" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "levenshtein" "doc/levenshtein@levenshtein/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/levenshtein.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/levenshtein.txt"))) (checksum . "47882e819e941121e4c1873f907502120ebb4382") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "overeasy")) (description . "Levenshtein Distance Metric") (implies . ()) (last-checked . 1522414424) (last-edit . 1456707768) (last-updated . 1502816152) (modules . ((lib "levenshtein/main.rkt") (lib "levenshtein/levenshtein.scrbl"))) (name . "levenshtein") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:neil@neilvandyke.org . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/levenshtein.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "47882e819e941121e4c1873f907502120ebb4382") (source . "http://www.neilvandyke.org/racket/levenshtein.zip") (source_url . "http://www.neilvandyke.org/racket/levenshtein.zip"))))))) ("json-parsing" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "json-parsing" "doc/json-parsing@json-parsing/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/json-parsing.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/json-parsing.txt"))) (checksum . "28a5d163d4785990b265ff5d3499e8ce594c672d") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "overeasy")) (description . "JSON Parsing, Folding, and Conversion") (implies . ()) (last-checked . 1522414422) (last-edit . 1456463303) (last-updated . 1502816143) (modules . ((lib "json-parsing/main.rkt") (lib "json-parsing/json-parsing.scrbl"))) (name . "json-parsing") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (json . #t) (ring:1 . #t) (sxml . #t))) (source . "http://www.neilvandyke.org/racket/json-parsing.zip") (tags . ("json" "sxml")) (versions . #hash((default . #hasheq((checksum . "28a5d163d4785990b265ff5d3499e8ce594c672d") (source . "http://www.neilvandyke.org/racket/json-parsing.zip") (source_url . "http://www.neilvandyke.org/racket/json-parsing.zip"))))))) ("mred-designer" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mred-designer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mred-designer.txt"))) (checksum . "2a8ac34473f8bbb44f8ecb3add97c0039bb926f1") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "gui-lib" "net-lib" "planet-lib" "rackunit-lib")) (description . "A WYSIWYG GUI generator for Racket") (implies . ()) (last-checked . 1522414436) (last-edit . 1506853991) (last-updated . 1516441134) (modules . ((lib "mred-designer/widgets/text-field/widget.rkt") (lib "mred-designer/template-load.rkt") (lib "mred-designer/widgets.rkt") (lib "mred-designer/widgets/menu-bar/widget.rkt") (lib "mred-designer/widgets/tab-panel/widget.rkt") (lib "mred-designer/main.rkt") (lib "mred-designer/edit-list.rkt") (lib "mred-designer/help.rkt") (lib "mred-designer/widgets/panel/widget.rkt") (lib "mred-designer/preview-widgets.rkt") (lib "mred-designer/property-widgets.rkt") (lib "mred-designer/toolbox-frame.rkt") (lib "mred-designer/widgets/menu-item/widget.rkt") (lib "mred-designer/code-write.rkt") (lib "mred-designer/property-frame.rkt") (lib "mred-designer/widgets/editor-canvas/widget.rkt") (lib "mred-designer/widgets/project/widget.rkt") (lib "mred-designer/tests/mred-designer.rkt") (lib "mred-designer/widgets/frame/widget.rkt") (lib "mred-designer/widgets/button/widget.rkt") (lib "mred-designer/mred-id.rkt") (lib "mred-designer/widgets/group-box-panel/widget.rkt") (lib "mred-designer/mred-plugin.rkt") (lib "mred-designer/hierarchy-frame.rkt") (lib "mred-designer/widgets/choice/widget.rkt") (lib "mred-designer/default-values.rkt") (lib "mred-designer/templates.rkt") (lib "mred-designer/widgets/tab/widget.rkt") (lib "mred-designer/widgets/frame/preview.rkt") (lib "mred-designer/widgets/vertical-pane/widget.rkt") (lib "mred-designer/code-generation.rkt") (lib "mred-designer/controller.rkt") (lib "mred-designer/widgets/check-box/widget.rkt") (lib "mred-designer/widgets/separator-menu-item/widget.rkt") (lib "mred-designer/plugin.rkt") (lib "mred-designer/widgets/project/preview.rkt") (lib "mred-designer/tooltip.rkt") (lib "mred-designer/project-manager.rkt") (lib "mred-designer/widgets/canvas/widget.rkt") (lib "mred-designer/widgets/gauge/widget.rkt") (lib "mred-designer/properties.rkt") (lib "mred-designer/widgets/combo-field/widget.rkt") (lib "mred-designer/widgets/slider/widget.rkt") (lib "mred-designer/widgets/menu/widget.rkt") (lib "mred-designer/widgets/dialog/widget.rkt") (lib "mred-designer/widgets/horizontal-pane/widget.rkt") (lib "mred-designer/widgets/radio-box/widget.rkt") (lib "mred-designer/widgets/list-box/widget.rkt") (lib "mred-designer/widgets/pane/widget.rkt") (lib "mred-designer/widgets/grow-box-spacer-pane/widget.rkt") (lib "mred-designer/misc.rkt") (lib "mred-designer/widgets/message/widget.rkt") (lib "mred-designer/widgets/vertical-panel/widget.rkt") (lib "mred-designer/widgets/horizontal-panel/widget.rkt"))) (name . "mred-designer") (nix-sha256 . "1vm2a8m08nmxjww2bzzn43j1i94hksfvx5c34z6dbz50hhz4qz6s") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:laurent.orseau@gmail.com . #t) (dev . #t) (gui . #t) (ring:1 . #t))) (source . "git://github.com/Metaxal/MrEd-Designer") (tags . ("dev" "gui")) (versions . #hash(("3.12" . #hasheq((checksum . "89e001c524d2d54cf636be2a77fc128c63ed8e19") (source . "git://github.com/Metaxal/MrEd-Designer#v3.12") (source_url . "http://github.com/Metaxal/MrEd-Designer/tree/master#v3.12"))) ("3.16" . #hasheq((checksum . "34ed02e70f9a757c56c3ae24b83164c34d477565") (source . "git://github.com/Metaxal/MrEd-Designer#v3.16") (source_url . "http://github.com/Metaxal/MrEd-Designer/tree/master#v3.16"))) (default . #hasheq((checksum . "2a8ac34473f8bbb44f8ecb3add97c0039bb926f1") (source . "git://github.com/Metaxal/MrEd-Designer") (source_url . "http://github.com/Metaxal/MrEd-Designer/tree/master"))))))) ("unicode-properties" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "unicode" "doc/unicode@unicode-properties/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unicode-properties.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unicode-properties.txt"))) (checksum . "c72c6c7678e44257bde7a8a4973196b064a9237f") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "This package provides definitions for several unicode properties, and also an auto-update mechanism that can extract additional ones.") (implies . ()) (last-checked . 1522414696) (last-edit . 1367965731) (last-updated . 1513624646) (modules . ((lib "unicode-props/unicode.scrbl") (lib "unicode-props/test.rkt") (lib "unicode-props/derived-core-properties.rkt") (lib "unicode-props/compute-prop.rkt") (lib "unicode-props/main.rkt") (lib "unicode-props/derived-binary-properties.rkt") (lib "unicode-props/fn-and-ranges.rkt"))) (name . "unicode-properties") (nix-sha256 . "1680a8wyw9y7zbk0zbxr7axw7fkh9zb719iy0p4jzy8q5p54f30x") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (io . #t) (ring:1 . #t) (unicode . #t))) (source . "github://github.com/jbclements/unicode-props/master") (tags . ("io" "unicode")) (versions . #hash((default . #hasheq((checksum . "c72c6c7678e44257bde7a8a4973196b064a9237f") (source . "github://github.com/jbclements/unicode-props/master") (source_url . "http://github.com/jbclements/unicode-props/tree/master"))))))) ("pie-a-let-mode" . #hasheq((author . "pnwamk@gmail.com") (authors . ("pnwamk@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pie-a-let-mode" "doc/pie-a-let-mode@pie-a-let-mode/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pie-a-let-mode.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pie-a-let-mode.txt"))) (checksum . "c36e5ef7dbaf1835357744f6350c1312a0a0a90e") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.5") "data-lib" "gui-lib" "slideshow-lib" "pict-lib" "typed-racket-lib" "typed-racket-more" "parser-tools-lib" "syntax-color-lib" "todo-list" "scribble-lib" "racket-doc" "sandbox-lib")) (description . "A little fork of the Pie language (adds `let` and `equal`).") (implies . ()) (last-checked . 1522414513) (last-edit . 1520729012) (last-updated . 1520775588) (modules . ((lib "pie-a-let-mode/fresh.rkt") (lib "pie-a-let-mode/parser.rkt") (lib "pie-a-let-mode/tooltip.rkt") (lib "pie-a-let-mode/resugar.rkt") (lib "pie-a-let-mode/gui/main.rkt") (lib "pie-a-let-mode/locations.rkt") (lib "pie-a-let-mode/pie-info.rkt") (lib "pie-a-let-mode/basics.rkt") (lib "pie-a-let-mode/slideshow.rkt") (lib "pie-a-let-mode/normalize.rkt") (lib "pie-a-let-mode/interactive-editing.rkt") (lib "pie-a-let-mode/tests.rkt") (lib "pie-a-let-mode/pie-a-let-mode.scrbl") (lib "pie-a-let-mode/gui/pie-lexer.rkt") (lib "pie-a-let-mode/main.rkt") (lib "pie-a-let-mode/gui/print-gui.rkt") (lib "pie-a-let-mode/rep.rkt") (lib "pie-a-let-mode/serialization.rkt") (lib "pie-a-let-mode/gui/pie-styles.rkt") (lib "pie-a-let-mode/alpha.rkt") (lib "pie-a-let-mode/pie-err.rkt") (lib "pie-a-let-mode/pretty.rkt") (lib "pie-a-let-mode/typechecker.rkt"))) (name . "pie-a-let-mode") (nix-sha256 . "1pn59wzh70dp27syxbr2dc2hrbxa9l0qclhlqv3vc78d4013rykh") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:pnwamk@gmail.com . #t) (lang . #t) (language . #t) (ring:2 . #t) (types . #t))) (source . "https://github.com/pnwamk/pie.git#a-let-mode") (tags . ("lang" "language" "types")) (versions . #hash((default . #hasheq((checksum . "c36e5ef7dbaf1835357744f6350c1312a0a0a90e") (source . "https://github.com/pnwamk/pie.git#a-let-mode") (source_url . "https://github.com/pnwamk/pie.git#a-let-mode"))))))) ("2d" . #hash((author . "robby@racket-lang.org") (checksum . "60d96aad8b1d5f799a3f410884e1f8a50df9e8ee") (dependencies . ("2d-lib" "2d-doc")) (description . "robby@racket-lang.org") (modules . ()) (name . "2d") (source . "https://download.racket-lang.org/releases/6.12/pkgs/2d.zip") (tags . ()))) ("typed-racket-hacks" . #hasheq((author . "pcn@cs.umd.edu") (authors . ("pcn@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/typed-racket-hacks.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-racket-hacks.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-racket-hacks.txt"))) (checksum . "c5aa87dd343470578b73e0004c06bcb94d1c95c0") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "set-extras")) (description . "Various workarounds for Typed Racket, most of which are expected to be eventually obsolete") (implies . ()) (last-checked . 1522414695) (last-edit . 1520300277) (last-updated . 1521865426) (modules . ((lib "typed-racket-hacks/tests.rkt") (lib "typed-racket-hacks/main.rkt"))) (name . "typed-racket-hacks") (nix-sha256 . "1dazc3fb8wnmwlbsd7i0kdah9w469d8vi802iqm1yrkw1qp2fqhv") (ring . 2) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:pcn@cs.umd.edu . #t) (hacks . #t) (ring:2 . #t) (typed-racket . #t))) (source . "https://github.com/philnguyen/typed-racket-hacks.git?path=typed-racket-hacks") (tags . ("hacks" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "c5aa87dd343470578b73e0004c06bcb94d1c95c0") (source . "https://github.com/philnguyen/typed-racket-hacks.git?path=typed-racket-hacks") (source_url . "https://github.com/philnguyen/typed-racket-hacks.git?path=typed-racket-hacks"))))))) ("basedir" . #hasheq((author . "willghatch@gmail.com") (authors . ("willghatch@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "basedir" "doc/basedir@basedir/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/basedir.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/basedir.txt"))) (checksum . "b38d20610a8c5ec1d63a58544b16472c23013069") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "XDG Basedir Spec library") (implies . ()) (last-checked . 1522414305) (last-edit . 1459792631) (last-updated . 1502812277) (modules . ((lib "basedir/basedir.scrbl") (lib "basedir/main.rkt"))) (name . "basedir") (nix-sha256 . "1dmyg5kw4lhpp0zmqg0pizvyk9a3vcybb699h903y5c5g37qk2h2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:willghatch@gmail.com . #t) (configuration . #t) (ring:1 . #t))) (source . "git://github.com/willghatch/racket-basedir.git") (tags . ("configuration")) (versions . #hash((default . #hasheq((checksum . "b38d20610a8c5ec1d63a58544b16472c23013069") (source . "git://github.com/willghatch/racket-basedir.git") (source_url . "http://github.com/willghatch/racket-basedir.git/tree/master"))))))) ("shootout" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "shootout" "doc/shootout@shootout/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/shootout.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/shootout.txt"))) (checksum . "8d4454844112861f4baeb72d8ed6b22e53c28448") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib")) (description . "Expression Performance Comparison") (implies . ()) (last-checked . 1522414678) (last-edit . 1456797982) (last-updated . 1502816427) (modules . ((lib "shootout/shootout.scrbl") (lib "shootout/main.rkt"))) (name . "shootout") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:neil@neilvandyke.org . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/shootout.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8d4454844112861f4baeb72d8ed6b22e53c28448") (source . "http://www.neilvandyke.org/racket/shootout.zip") (source_url . "http://www.neilvandyke.org/racket/shootout.zip"))))))) ("profile-lib" . #hash((author . "eli@racket-lang.org stamourv@racket-lang.org") (checksum . "d5002b06076eb5ae1613a1db1955973a501a879a") (dependencies . ("base" "errortrace-lib" "at-exp-lib" "rackunit-lib")) (description . "eli@racket-lang.org stamourv@racket-lang.org") (modules . ()) (name . "profile-lib") (source . "https://download.racket-lang.org/releases/6.12/pkgs/profile-lib.zip") (tags . ()))) ("curly-fn-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/curly-fn-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/curly-fn-lib.txt"))) (checksum . "d64cd71d5b386be85f5979edae6f6b6469a4df86") (checksum-error . #f) (conflicts . ()) (dependencies . (("base" #:version "6.3") "namespaced-transformer-lib")) (description . "") (implies . ()) (last-checked . 1522414372) (last-edit . 1473377629) (last-updated . 1502815878) (modules . ((lib "curly-fn/lang/runtime-config.rkt") (lib "curly-fn/lang/reader.rkt") (lib "curly-fn/main.rkt") (lib "curly-fn/private/make-extension-reader.rkt") (lib "curly-fn/private/curly-fn-transformer.rkt") (lib "curly-fn/lang/language-info.rkt"))) (name . "curly-fn-lib") (nix-sha256 . "1llxaykp1sbbqnm89ay6lcswfwjn594xsx491hw70l9g83yyivl1") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-curly-fn?path=curly-fn-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "d64cd71d5b386be85f5979edae6f6b6469a4df86") (source . "git://github.com/lexi-lambda/racket-curly-fn?path=curly-fn-lib") (source_url . "http://github.com/lexi-lambda/racket-curly-fn/tree/master?path=curly-fn-lib"))))))) ("math-ppc-macosx" . #hash((author . "mflatt@racket-lang.org") (checksum . "80abd242c071dc1ed188455931b6b7165940690c") (dependencies . ("base")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "math-ppc-macosx") (source . "https://download.racket-lang.org/releases/6.12/pkgs/math-ppc-macosx.zip") (tags . ()))) ("stardate" . #hasheq((author . "dyoo@hashcollision.org") (authors . ("dyoo@hashcollision.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "stardate" "doc/stardate@stardate/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/stardate.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/stardate.txt"))) (checksum . "580558886983d73916c355e21400310a59729be5") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "Compute the current TNG stardate.") (implies . ()) (last-checked . 1522414684) (last-edit . 1352401914) (last-updated . 1502816454) (modules . ((lib "stardate/stardate.scrbl") (lib "stardate/main.rkt"))) (name . "stardate") (nix-sha256 . "0kh2p28npj93z7c41byzxq2pkc36nj0hpskyb11j0dhzrz0vb3yy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dyoo@hashcollision.org . #t) (date . #t) (ring:1 . #t))) (source . "github://github.com/dyoo/stardate/master") (tags . ("date")) (versions . #hash((default . #hasheq((checksum . "580558886983d73916c355e21400310a59729be5") (source . "github://github.com/dyoo/stardate/master") (source_url . "http://github.com/dyoo/stardate/tree/master"))))))) ("algol60" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (checksum . "18268cdcb837f207492231fd6765467f66aa6bd8") (dependencies . ("base" "compatibility-lib" "drracket-plugin-lib" "errortrace-lib" "gui-lib" "parser-tools-lib" "string-constants-lib" "at-exp-lib" "rackunit-lib" "racket-doc" "scribble-doc" "scribble-lib" "drracket-tool-lib" "drracket-plugin-lib")) (description . "mflatt@racket-lang.org robby@racket-lang.org") (modules . ()) (name . "algol60") (source . "https://download.racket-lang.org/releases/6.12/pkgs/algol60.zip") (tags . ()))) ("readline-doc" . #hash((author . "mflatt@racket-lang.org") (checksum . "72d3478368cd0ba54a18611f8712b6f2a5f69233") (dependencies . ("base" "scribble-lib" "readline-lib" "racket-doc")) (description . "mflatt@racket-lang.org") (modules . ()) (name . "readline-doc") (source . "https://download.racket-lang.org/releases/6.12/pkgs/readline-doc.zip") (tags . ()))) ("unix-signals" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "unix-signals" "doc/unix-signals@unix-signals/index.html"))) (failure-log . #f) (min-failure-log . "server/built/min-fail/unix-signals.txt") (success-log . "server/built/install/unix-signals.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unix-signals.txt"))) (checksum . "7231d17617a013da8f0b057f479f3c189d56daf6") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "make" "racket-doc" "scribble-lib")) (description . "Sending and handling Unix signals from Racket") (implies . ()) (last-checked . 1522414696) (last-edit . 1473801462) (last-updated . 1502816510) (modules . ((lib "unix-signals/private/install.rkt") (lib "unix-signals/main.rkt") (lib "unix-signals/unix-signals.scrbl"))) (name . "unix-signals") (nix-sha256 . "03yy3dq1rnibsg1xg7c6cjpk37d7rnrrk0ipbvrwx8s3r6hdvai2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t) (unix . #t))) (source . "git://github.com/tonyg/racket-unix-signals") (tags . ("unix")) (versions . #hash((default . #hasheq((checksum . "7231d17617a013da8f0b057f479f3c189d56daf6") (source . "git://github.com/tonyg/racket-unix-signals") (source_url . "http://github.com/tonyg/racket-unix-signals/tree/master"))))))) ("wffi" . #hasheq((author . "greghendershott@gmail.com") (authors . ("greghendershott@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/wffi.txt") (test-failure-log . "server/built/test-fail/wffi.txt") (test-success-log . #f))) (checksum . "03bd59bea2aa6e0a855de28fb5bb18769ed04b3b") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "http" "parser-tools-lib" "rackunit-lib")) (description . "Wrap web APIs using a \"literate programming\" style where documentation-is-specification.") (implies . ()) (last-checked . 1522414702) (last-edit . 1396443586) (last-updated . 1502816526) (modules . ((lib "wffi/split.rkt") (lib "wffi/examples/app.net.rkt") (lib "wffi/json.rkt") (lib "wffi/server.rkt") (lib "wffi/api.rkt") (lib "wffi/key-value.rkt") (lib "wffi/client.rkt") (lib "wffi/examples/last.fm.rkt") (lib "wffi/markdown.rkt") (lib "wffi/main.rkt") (lib "wffi/parse-response.rkt") (lib "wffi/examples/server-example.rkt") (lib "wffi/examples/horseebooks.rkt") (lib "wffi/examples/google-plus.rkt") (lib "wffi/parse-markdown.rkt") (lib "wffi/parse-request.rkt") (lib "wffi/dict-merge.rkt") (lib "wffi/examples/imgur.rkt"))) (name . "wffi") (nix-sha256 . "0rblpn1q74znb0a17danjjb7j6zqyx13ql4qljhmb5qga7mh0wl2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:greghendershott@gmail.com . #t) (ring:1 . #t) (web . #t))) (source . "github://github.com/greghendershott/wffi/master") (tags . ("web")) (versions . #hash((default . #hasheq((checksum . "03bd59bea2aa6e0a855de28fb5bb18769ed04b3b") (source . "github://github.com/greghendershott/wffi/master") (source_url . "http://github.com/greghendershott/wffi/tree/master"))))))) ("xrepl" . #hash((author . "eli@racket-lang.org") (checksum . "c337926fd43d1ecbfbe6c86bfacfd156a47af79b") (dependencies . ("xrepl-lib" "xrepl-doc")) (description . "eli@racket-lang.org") (modules . ()) (name . "xrepl") (source . "https://download.racket-lang.org/releases/6.12/pkgs/xrepl.zip") (tags . ()))) ("datalog" . #hash((author . "jay@racket-lang.org") (checksum . "6d15c446619360eab34598f525d4c645faee1113") (dependencies . ("base" "parser-tools-lib" "racket-doc" "scribble-lib" "rackunit-lib")) (description . "jay@racket-lang.org") (modules . ()) (name . "datalog") (source . "https://download.racket-lang.org/releases/6.12/pkgs/datalog.zip") (tags . ()))) ("urlang" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/urlang.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "e20497ca4a6dd0345196d6f856b1bf315bacbbfd") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "nanopass" "at-exp-lib" "rackunit-lib" "scribble-lib" "racket-doc" "html-writing")) (description . "Write JavaScript with Racket syntax. Bonus: Use Racket to define macros for JavaScript constructs.") (implies . ()) (last-checked . 1522414700) (last-edit . 1457827621) (last-updated . 1502816517) (modules . ((lib "urlang-examples/demo-fact.rkt") (lib "urlang-examples/parabola/parabola.rkt") (lib "compiler-rjs/compiler3.rkt") (lib "urlang-examples/ractive/ractive-original.rkt") (lib "urlang-examples/space-invaders/space-invaders.rkt") (lib "urlang/globals.rkt") (lib "urlang/html/to-at-exp.rkt") (lib "urlang-examples/quiz/quiz.rkt") (lib "compiler-rjs/htdp/ffi.rkt") (lib "compiler-rjs/compiler2.rkt") (lib "urlang-examples/ractive/ractive-bootstrap-example.rkt") (lib "compiler-rjs/compiler.rkt") (lib "compiler-rjs/runtime.rkt") (lib "urlang/main.rkt") (lib "urlang/tests/test-extra.rkt") (lib "urlang/html.rkt") (lib "urlang-examples/raphael/browser.rkt") (lib "urlang/tests/test-for.rkt") (lib "urlang/html/all.rkt") (lib "urlang/extra.rkt") (lib "urlang/html/at-html.rkt") (lib "urlang/for.rkt") (lib "urlang-examples/ractive/ractive.rkt") (lib "urlang-test/urlang-tests.rkt") (lib "urlang-test/test-extra.rkt") (lib "compiler-test/test-suite-compiler.rkt") (lib "compiler-rjs/htdp/colors.rkt"))) (name . "urlang") (nix-sha256 . "0grafaw5nhzlfwgbv9z61qmczyfpjh0sa31lirxvlg7acg3192yl") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:jensaxel@soegaard.net . #t) (javascript . #t) (ring:1 . #t) (web . #t))) (source . "git://github.com/soegaard/urlang") (tags . ("javascript" "web")) (versions . #hash((default . #hasheq((checksum . "e20497ca4a6dd0345196d6f856b1bf315bacbbfd") (source . "git://github.com/soegaard/urlang") (source_url . "http://github.com/soegaard/urlang/tree/master"))))))) ("popl-2012-ryr-talk" . #hasheq((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/popl-2012-ryr-talk.txt") (test-failure-log . "server/built/test-fail/popl-2012-ryr-talk.txt") (test-success-log . #f))) (checksum . "9da05129de004cc1df0ccfbd821e8542a9155021") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "gui-lib" "htdp-lib" "redex-gui-lib" "redex-lib" "slideshow-lib")) (description . "") (implies . ()) (last-checked . 1522414534) (last-edit . 1440407946) (last-updated . 1502816300) (modules . ((lib "popl-2012-ryr-talk/fable-words.rkt") (lib "popl-2012-ryr-talk/amb.rkt") (lib "popl-2012-ryr-talk/lifecycle.rkt") (lib "popl-2012-ryr-talk/amb-test.rkt") (lib "popl-2012-ryr-talk/color.rkt") (lib "popl-2012-ryr-talk/main.rkt") (lib "popl-2012-ryr-talk/title.rkt") (lib "popl-2012-ryr-talk/fable/fable.rkt") (lib "popl-2012-ryr-talk/typeset-amb.rkt") (lib "popl-2012-ryr-talk/subst.rkt") (lib "popl-2012-ryr-talk/subst-test.rkt") (lib "popl-2012-ryr-talk/util.rkt") (lib "popl-2012-ryr-talk/study.rkt"))) (name . "popl-2012-ryr-talk") (nix-sha256 . "1fybgxk720n3kq82pzvms00bzyn0xascxc780mk5y00vncigwnaw") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:robby@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/rfindler/popl-2012-ryr-talk") (tags . ()) (versions . #hash((default . #hasheq((checksum . "9da05129de004cc1df0ccfbd821e8542a9155021") (source . "git://github.com/rfindler/popl-2012-ryr-talk") (source_url . "http://github.com/rfindler/popl-2012-ryr-talk/tree/master"))))))) ("lens" . #hasheq((author . "jackhfirth@gmail.com alexander@knauth.org") (authors . ("jackhfirth@gmail.com" "alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lens.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lens.txt"))) (checksum . "376c286a68ed34ee723cf5c5a76dcba9828db0c1") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "lens-common" "lens-data" "lens-lib" "lens-unstable" "lens-doc")) (description . "Composable, functional lenses") (implies . ("lens-common" "lens-data" "lens-lib" "lens-unstable" "lens-doc")) (last-checked . 1522414423) (last-edit . 1500074979) (last-updated . 1514736112) (modules . ()) (name . "lens") (nix-sha256 . "0x4v6pd5l15wqppxmd2k8jg6g151rbvv7qmyyzr4vsl399mlyljz") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (author:jackhfirth@gmail.com . #t) (data . #t) (functional . #t) (lens . #t) (ring:1 . #t))) (source . "git://github.com/jackfirth/lens?path=lens") (tags . ("data" "functional" "lens")) (versions . #hash((default . #hasheq((checksum . "376c286a68ed34ee723cf5c5a76dcba9828db0c1") (source . "git://github.com/jackfirth/lens?path=lens") (source_url . "http://github.com/jackfirth/lens/tree/master?path=lens"))))))) ("asn1" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/asn1.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/asn1.txt"))) (checksum . "34802b6cc4f0f2200a2feb2aa724833fc17b157a") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "asn1-lib" "asn1-doc")) (description . "ASN.1 library") (implies . ("asn1-lib" "asn1-doc")) (last-checked . 1522417871) (last-edit . 1518435156) (last-updated . 1518435156) (modules . ()) (name . "asn1") (nix-sha256 . "1w8h4q0s82898961qsn4mf24fmbsszznvjhrcw1w4xigwdivw4y0") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (io . #t) (net . #t) (parser . #t) (parsing . #t) (ring:2 . #t))) (source . "https://github.com/rmculpepper/asn1.git?path=asn1") (tags . ("io" "net" "parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "34802b6cc4f0f2200a2feb2aa724833fc17b157a") (source . "https://github.com/rmculpepper/asn1.git?path=asn1") (source_url . "https://github.com/rmculpepper/asn1.git?path=asn1"))))))) ("sasl" . #hash((author . "ryanc@racket-lang.org") (checksum . "988c36604be3ca860b26801c45a01dd4aad8628b") (dependencies . (("base" #:version "6.10"))) (description . "ryanc@racket-lang.org") (modules . ()) (name . "sasl") (source . "https://download.racket-lang.org/releases/6.12/pkgs/sasl.zip") (tags . ()))) ("match-plus" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "match-plus" "doc/match-plus@match-plus/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/match-plus.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/match-plus.txt"))) (checksum . "cd72471c582f5c20ec35a96fa08936f4f3fd6c47") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "") (implies . ()) (last-checked . 1522414428) (last-edit . 1449952359) (last-updated . 1502816164) (modules . ((lib "match-plus/scribblings/match-plus.scrbl") (lib "match-plus/main.rkt"))) (name . "match-plus") (nix-sha256 . "05hwcpjh8ybd86izsq5fx292nm842c1gb5zlrlpxj3y3s6hg618d") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-match-plus.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "cd72471c582f5c20ec35a96fa08936f4f3fd6c47") (source . "git://github.com/lexi-lambda/racket-match-plus.git") (source_url . "http://github.com/lexi-lambda/racket-match-plus.git/tree/master"))))))) ("abnf" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/abnf.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/abnf.txt"))) (checksum . "71bc4739a0b2aa22aa42ad905ba7de5c3e2c7f79") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "at-exp-lib")) (description . "Attributed BNFs for Scribble") (implies . ()) (last-checked . 1522417868) (last-edit . 1380725571) (last-updated . 1502812264) (modules . ((lib "scribble/abnf.rkt"))) (name . "abnf") (nix-sha256 . "11ji0kkdcgmz8790rbrjx5s4a0gnbqbfay2gqv8svjw1g8c2886j") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (bnf . #t) (ring:1 . #t) (scribble . #t))) (source . "git://github.com/samth/abnf") (tags . ("bnf" "scribble")) (versions . #hash((default . #hasheq((checksum . "71bc4739a0b2aa22aa42ad905ba7de5c3e2c7f79") (source . "git://github.com/samth/abnf") (source_url . "http://github.com/samth/abnf/tree/master"))))))) ("pcf" . #hasheq((author . "dvanhorn@racket-lang.org") (authors . ("dvanhorn@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "redex-to-lang" "doc/redex-to-lang@pcf/index.html") ("none" "pcf"))) (failure-log . "server/built/fail/pcf.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "f04e2ff7f34b89a3dc6c2a70a6a3283f954d3a67") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "redex-lib" "redex-pict-lib" "unstable-lib" "scribble-lib" "racket-doc" "sandbox-lib" "redex-doc" "scribble-doc")) (description . "PCF with Contracts and Symbolic Values") (implies . ()) (last-checked . 1522414510) (last-edit . 1354677836) (last-updated . 1502816244) (modules . ((lib "scpcf/heap/examples.rkt") (lib "pcf/heap/lang.rkt") (lib "scpcf/lang/reader.rkt") (lib "spcf/redex.rkt") (lib "pcf/semantics.rkt") (lib "tests/pcf/redex.rkt") (lib "tests/spcf/redex.rkt") (lib "scpcf/semantics.rkt") (lib "pcf/types.rkt") (lib "scpcf/lang.rkt") (lib "scpcf/syntax.rkt") (lib "cpcf/types.rkt") (lib "pcf/source/lang/reader.rkt") (lib "pcf/syntax.rkt") (lib "pcf/heap/test.rkt") (lib "pcf/test.rkt") (lib "spcf/semantics.rkt") (lib "scribblings/pcf/pcf.scrbl") (lib "spcf/lang.rkt") (lib "cpcf/examples.rkt") (lib "scpcf/heap/test.rkt") (lib "cpcf/lang/reader.rkt") (lib "scribblings/redex-to-lang/redex-to-lang.scrbl") (lib "pcf/private/racket-pcf.rkt") (lib "pcf/private/make-lang.rkt") (lib "tests/spcf/make-tests.rkt") (lib "tests/scpcf/redex.rkt") (lib "scpcf/heap/lang/reader.rkt") (lib "spcf/syntax.rkt") (lib "pcf/private/lexical.rkt") (lib "tests/cpcf/redex.rkt") (lib "cpcf/test.rkt") (lib "cpcf/heap/syntax.rkt") (lib "scpcf/examples.rkt") (lib "pcf/lang/reader.rkt") (lib "pcf/source/lang.rkt") (lib "pcf/redex.rkt") (lib "cpcf/syntax.rkt") (lib "pcf/source.rkt") (lib "cpcf/heap/lang/reader.rkt") (lib "cpcf/heap/semantics.rkt") (lib "spcf/types.rkt") (lib "cpcf/heap/test.rkt") (lib "pcf/heap/syntax.rkt") (lib "scpcf/redex.rkt") (lib "spcf/heap/semantics.rkt") (lib "cpcf/semantics.rkt") (lib "tests/pcf/make-tests.rkt") (lib "cpcf/heap/lang.rkt") (lib "spcf/heap/lang.rkt") (lib "tests/scpcf/make-tests.rkt") (lib "cpcf/redex.rkt") (lib "pcf/private/subst.rkt") (lib "scpcf/types.rkt") (lib "scpcf/heap/syntax.rkt") (lib "spcf/examples.rkt") (lib "spcf/heap/lang/reader.rkt") (lib "spcf/heap/test.rkt") (lib "spcf/lang/reader.rkt") (lib "pcf/private/return.rkt") (lib "scpcf/heap/semantics.rkt") (lib "pcf/examples.rkt") (lib "pcf/private/prover.rkt") (lib "pcf/heap/examples/fact5.rkt") (lib "scpcf/heap/lang.rkt") (lib "pcf/heap/semantics.rkt") (lib "spcf/heap/syntax.rkt") (lib "pcf/private/label.rkt") (lib "pcf/lang.rkt") (lib "pcf/heap/lang/reader.rkt") (lib "tests/cpcf/make-tests.rkt") (lib "cpcf/lang.rkt"))) (name . "pcf") (nix-sha256 . "0f279rbzrcy0hxrx5cmyyhfbsmh38ym06d289sjjqh3bdk6wlzkh") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:dvanhorn@racket-lang.org . #t) (language . #t) (ring:1 . #t))) (source . "github://github.com/dvanhorn/pcf/master/") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "f04e2ff7f34b89a3dc6c2a70a6a3283f954d3a67") (source . "github://github.com/dvanhorn/pcf/master/") (source_url . "http://github.com/dvanhorn/pcf/tree/master/"))))))) ("ragg" . #hasheq((author . "dyoo@hashcollision.org clements@racket-lang.org mb@mbtype.com") (authors . ("dyoo@hashcollision.org" "clements@racket-lang.org" "mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ragg" "doc/ragg@ragg/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ragg.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ragg.txt"))) (checksum . "726b009ebbae874ada49a5579a13e062bf154203") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "parser-tools-lib" "rackunit-lib" "python-tokenizer" "at-exp-lib" "parser-tools-doc" "racket-doc" "scribble-lib")) (description . "ragg is a Racket AST Generator Generator.  A design goal is to be easy for beginners to use.  Given a grammar in EBNF, ragg produces a parser that generates Racket's native syntax objects with full source location.") (implies . ()) (last-checked . 1522414664) (last-edit . 1399601164) (last-updated . 1502816380) (modules . ((lib "ragg/test/test-flatten.rkt") (lib "ragg/test/exercise-python-grammar.rkt") (lib "ragg/examples/simple-line-drawing/lexer.rkt") (lib "ragg/test/test-baby-json.rkt") (lib "ragg/examples/statlist-grammar.rkt") (lib "ragg/codegen/sexp-based-lang.rkt") (lib "ragg/examples/01-equal.rkt") (lib "ragg/ragg.scrbl") (lib "ragg/examples/simple-arithmetic-grammar.rkt") (lib "ragg/rules/lexer.rkt") (lib "ragg/examples/simple-line-drawing/lang/reader.rkt") (lib "ragg/rules/stx.rkt") (lib "ragg/test/test-simple-arithmetic-grammar.rkt") (lib "ragg/cfg-parser/cfg-parser.rkt") (lib "ragg/codegen/runtime.rkt") (lib "ragg/test/test-01-equal.rkt") (lib "ragg/test/test-0n1.rkt") (lib "ragg/rules/rule-structs.rkt") (lib "ragg/test/test-lexer.rkt") (lib "ragg/examples/simple-line-drawing/grammar.rkt") (lib "ragg/examples/bnf.rkt") (lib "ragg/examples/python-grammar.rkt") (lib "ragg/test/test-weird-grammar.rkt") (lib "ragg/codegen/codegen.rkt") (lib "ragg/test/test-0n1n.rkt") (lib "ragg/examples/simple-line-drawing/interpret.rkt") (lib "ragg/examples/lua-parser.rkt") (lib "ragg/support.rkt") (lib "ragg/codegen/satisfaction.rkt") (lib "ragg/test/test-wordy.rkt") (lib "ragg/codegen/lang/reader.rkt") (lib "ragg/rules/stx-types.rkt") (lib "ragg/test/test-simple-line-drawing.rkt") (lib "ragg/test/test-errors.rkt") (lib "ragg/examples/0n1.rkt") (lib "ragg/test/weird-grammar.rkt") (lib "ragg/lang/reader.rkt") (lib "ragg/examples/wordy.rkt") (lib "ragg/private/internal-support.rkt") (lib "ragg/test/test-parser.rkt") (lib "ragg/examples/baby-json.rkt") (lib "ragg/codegen/flatten.rkt") (lib "ragg/test/test-all.rkt") (lib "ragg/examples/simple-line-drawing/semantics.rkt") (lib "ragg/examples/0n1n.rkt") (lib "ragg/examples/simple-line-drawing.rkt") (lib "ragg/rules/parser.rkt") (lib "ragg/examples/nested-word-list.rkt") (lib "ragg/test/test-old-token.rkt") (lib "ragg/examples/simple-line-drawing/examples/letter-i.rkt") (lib "ragg/rules/runtime.rkt"))) (name . "ragg") (nix-sha256 . "05xkyby8s1a87mz29a2h93fikc06inrazgyy7s9hwnwmnzmh75fq") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (author:dyoo@hashcollision.org . #t) (author:mb@mbtype.com . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "github://github.com/jbclements/ragg/master") (tags . ("parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "726b009ebbae874ada49a5579a13e062bf154203") (source . "github://github.com/jbclements/ragg/master") (source_url . "http://github.com/jbclements/ragg/tree/master"))))))) ("HoLy" . #hasheq((author . "anihirash@gmail.com") (authors . ("anihirash@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/HoLy.txt") (docs . (("main" "HoLy" "doc/HoLy@HoLy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/HoLy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/HoLy.txt"))) (checksum . "e6574beb88937357cb73e834dacf10ceb1805495") (checksum-error . #f) (conflicts . ()) (dependencies . ("web-server" "scribble-lib" "racket-doc")) (description . "HoLy is simple http library for creating your web-applications and rest api's easier.\r\n\r\nThis library covers only http-server layer(url-dispatching, cookies, parameters). \r\n\r\nLibrary in aplha state - api unstable. \r\nPull requests are welcome!") (implies . ()) (last-checked . 1522414416) (last-edit . 1510304428) (last-updated . 1509616900) (modules . ((lib "HoLy/scribblings/HoLy.scrbl") (lib "HoLy/main.rkt"))) (name . "HoLy") (nix-sha256 . "0xk9dxwslqg371k0xh6my557vzskgcsi8zv543hk0bzpivn6b8yx") (ring . 2) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (api . #t) (author:anihirash@gmail.com . #t) (framework . #t) (http . #t) (rest . #t) (ring:2 . #t) (web . #t))) (source . "https://github.com/nihirash/holy.git") (tags . ("api" "framework" "http" "rest" "web")) (versions . #hash((default . #hasheq((checksum . "e6574beb88937357cb73e834dacf10ceb1805495") (source . "https://github.com/nihirash/holy.git") (source_url . "https://github.com/nihirash/holy.git"))))))) ("xfunctions" . #hasheq((author . "wesley.bitomski@gmail.com") (authors . ("wesley.bitomski@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/xfunctions.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xfunctions.txt") (test-failure-log . "server/built/test-fail/xfunctions.txt") (test-success-log . #f))) (checksum . "a8c545d55ee1d9df715ccc44fb22eec463e0f206") (checksum-error . #f) (conflicts . ()) (dependencies . (("base") ("racket") ("xfunctions-lib") ("xfunctions-doc"))) (description . "Extended Functional Combinators") (implies . ()) (last-checked . 1522414703) (last-edit . 1515413167) (last-updated . 1515417539) (modules . ((lib "xfunctions/xfunctions-lib/xfunctions.rkt") (lib "xfunctions/main.rkt") (lib "xfunctions/xfunctions-doc/xfunctions.scrbl"))) (name . "xfunctions") (nix-sha256 . "03h570a9dzlz0hb0vhlqhbr6lbgcjq3v4s9ydk53ba7wgxw3jyz3") (ring . 2) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:wesley.bitomski@gmail.com . #t) (other . #t) (ring:2 . #t))) (source . "https://github.com/wesleybits/xfunctions.git") (tags . ("other")) (versions . #hash((default . #hasheq((checksum . "a8c545d55ee1d9df715ccc44fb22eec463e0f206") (source . "https://github.com/wesleybits/xfunctions.git") (source_url . "https://github.com/wesleybits/xfunctions.git"))))))) ("staged-slide" . #hasheq((author . "stamourv@racket-lang.org cce@racket-lang.org") (authors . ("stamourv@racket-lang.org" "cce@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "staged-slide" "doc/staged-slide@staged-slide/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/staged-slide.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/staged-slide.txt"))) (checksum . "28b9389ea83984306dd50b634cb795c3bd86ca41") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "pict-lib" "slideshow-lib" "scribble-lib" "pict-doc" "racket-doc" "slideshow-doc")) (description . "Helpers for building staged slides in Slideshow") (implies . ()) (last-checked . 1522414684) (last-edit . 1441219803) (last-updated . 1502816454) (modules . ((lib "slideshow/staged-slide.rkt") (lib "slideshow/scribblings/staged-slide.scrbl"))) (name . "staged-slide") (nix-sha256 . "0czkq90ywrplnqkxk2xfx0c21cj1kdf6ksqn447fccrnllzgn7xz") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:cce@racket-lang.org . #t) (author:stamourv@racket-lang.org . #t) (ring:1 . #t) (slideshow . #t))) (source . "git://github.com/stamourv/staged-slide") (tags . ("slideshow")) (versions . #hash(("6.3" . #hasheq((checksum . "79e4932c0d877b8aaafce5947bf1634c1ecfa26b") (source . "github://github.com/stamourv/staged-slide/racket-6.3") (source_url . "http://github.com/stamourv/staged-slide/tree/racket-6.3"))) ("6.2.1" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) (default . #hasheq((checksum . "28b9389ea83984306dd50b634cb795c3bd86ca41") (source . "git://github.com/stamourv/staged-slide") (source_url . "http://github.com/stamourv/staged-slide/tree/master"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("punctaffy-lib" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/punctaffy-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/punctaffy-lib.txt"))) (checksum . "7165a2fa50ae3d631753652671cb4a19df1f02c4") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "lathe" "parendown")) (description . "A library for manipulating higher-degree notions of brackets, such as quasiquotation syntax. (lib)") (implies . ()) (last-checked . 1522414537) (last-edit . 1509266795) (last-updated . 1520926808) (modules . ((lib "punctaffy/multi-phase/private/monad.rkt") (lib "punctaffy/single-phase/private/qq.rkt") (lib "punctaffy/multi-phase/private/monoid.rkt") (lib "punctaffy/single-phase/private/expanders.rkt") (lib "punctaffy/private/util.rkt") (lib "punctaffy/single-phase/private/trees.rkt") (lib "punctaffy/main.rkt") (lib "punctaffy/multi-phase/private/hypermonad.rkt") (lib "punctaffy/multi-phase/private/trees.rkt") (lib "punctaffy/multi-phase/private/trees2.rkt"))) (name . "punctaffy-lib") (nix-sha256 . "0gmnwwxc1aigfgpv2p59apg1g93r2acgx9x2za5i6nk22f1ydw0h") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (experimental . #t) (extensible . #t) (macro . #t) (quasiquotation . #t) (ring:2 . #t) (syntax . #t) (unstable . #t))) (source . "git://github.com/rocketnia/punctaffy?path=punctaffy-lib") (tags . ("experimental" "extensible" "macro" "quasiquotation" "syntax" "unstable")) (versions . #hash((default . #hasheq((checksum . "7165a2fa50ae3d631753652671cb4a19df1f02c4") (source . "git://github.com/rocketnia/punctaffy?path=punctaffy-lib") (source_url . "http://github.com/rocketnia/punctaffy/tree/master?path=punctaffy-lib"))))))) ("impl-excl" . #hasheq((author . "pcn@cs.umd.edu") (authors . ("pcn@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/impl-excl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/impl-excl.txt"))) (checksum . "2be491f8acb71ec6115d96070382e1f5f2d3a2a0") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "set-extras")) (description . "Pre-compute procedures for fast checking of transitive implication and exclusion between simple predicates") (implies . ()) (last-checked . 1522414420) (last-edit . 1509647973) (last-updated . 1509652940) (modules . ((lib "impl-excl/main.rkt") (lib "impl-excl/tests.rkt"))) (name . "impl-excl") (nix-sha256 . "11dd1y491ibwhxz9hbn0xrnmfpjsy12dj4p9gw36hd3w8bws56my") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (author:pcn@cs.umd.edu . #t) (logic . #t) (ring:2 . #t))) (source . "https://github.com/philnguyen/impl-excl.git?path=impl-excl") (tags . ("logic")) (versions . #hash((default . #hasheq((checksum . "2be491f8acb71ec6115d96070382e1f5f2d3a2a0") (source . "https://github.com/philnguyen/impl-excl.git?path=impl-excl") (source_url . "https://github.com/philnguyen/impl-excl.git?path=impl-excl"))))))) ("fra" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "fra" "doc/fra@fra/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fra.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fra.txt"))) (checksum . "151ca5afbb8e732e0da89198cf0b982625233b87") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "eli-tester" "racket-doc" "scribble-lib")) (description . "Purely functional implementation of relational algebra") (implies . ()) (last-checked . 1522414402) (last-edit . 1352492579) (last-updated . 1513192004) (modules . ((lib "fra/query.rkt") (lib "fra/schema.rkt") (lib "fra/relation.rkt") (lib "fra/optimize.rkt") (lib "fra/test.rkt") (lib "fra/prop.rkt") (lib "fra/optimize-tests.rkt") (lib "fra/tuple.rkt") (lib "fra/fra.scrbl") (lib "fra/database.rkt") (lib "fra/main.rkt") (lib "fra/ivector.rkt"))) (name . "fra") (nix-sha256 . "0zrsmy70xab1m6m5x36pd6yaq9ifxyxcn7ih75c2m80a3j045wrk") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (db . #t) (ring:1 . #t))) (source . "github://github.com/jeapostrophe/fra/master") (tags . ("db")) (versions . #hash((default . #hasheq((checksum . "151ca5afbb8e732e0da89198cf0b982625233b87") (source . "github://github.com/jeapostrophe/fra/master") (source_url . "http://github.com/jeapostrophe/fra/tree/master"))))))) ("furtle" . #hasheq((author . "soura.jagat@gmail.com") (authors . ("soura.jagat@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "furtle" "doc/furtle@furtle/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/furtle.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/furtle.txt"))) (checksum . "4102eebc2f140cfb88a1b418286094e393720239") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "draw-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "A library for drawing turtle geometry logo style") (implies . ()) (last-checked . 1522414403) (last-edit . 1492116902) (last-updated . 1512922010) (modules . ((lib "furtle/turtle-drawings.rkt") (lib "furtle/turtle-main.rkt") (lib "furtle/main.rkt") (lib "furtle/when.rkt") (lib "furtle/scribblings/furtle.scrbl") (lib "furtle/examples/examples.rkt"))) (name . "furtle") (nix-sha256 . "0jwp6bdpbl3yxjlxi15h3x7vfrm7rfni395jq8smky3a348rr0vi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:soura.jagat@gmail.com . #t) (geometry . #t) (ring:1 . #t) (turtle . #t))) (source . "git://github.com/souravdatta/furtle") (tags . ("geometry" "turtle")) (versions . #hash((default . #hasheq((checksum . "4102eebc2f140cfb88a1b418286094e393720239") (source . "git://github.com/souravdatta/furtle") (source_url . "http://github.com/souravdatta/furtle/tree/master"))))))) ("alexis-collections" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "alexis-collections" "doc/alexis-collections@alexis-collections/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/alexis-collections.txt") (test-failure-log . "server/built/test-fail/alexis-collections.txt") (test-success-log . #f))) (checksum . "997c8642d9b2adb28728d609202618bc8ffbd750") (checksum-error . #f) (conflicts . ()) (dependencies . ("alexis-util" "base" "collections" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Deprecated. Use the collections package instead.") (implies . ("collections")) (last-checked . 1522417869) (last-edit . 1449345408) (last-updated . 1502812268) (modules . ((lib "alexis/collection/private/test/dict.rkt") (lib "alexis/collection.rkt") (lib "alexis/collection/private/test/sequence-lib.rkt") (lib "alexis/scribblings/alexis-collections.scrbl") (lib "alexis/collection/private/test/match.rkt") (lib "alexis/collection/private/test/contract.rkt") (lib "alexis/collection/private/test/collection.rkt") (lib "alexis/collection/private/test/sequence.rkt"))) (name . "alexis-collections") (nix-sha256 . "0ix48pb0i72a5p1cniyp7g7h8v8c1zhpdm9lrrcjwwvvsb8rz2l3") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (deprecated . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-alexis-collections") (tags . ("deprecated")) (versions . #hash(("6.1.1" . #hasheq((checksum . "7f1f4283abfb728ba2e53b37badef8c678711665") (source . "git://github.com/lexi-lambda/racket-alexis-collections#v6.1.1") (source_url . "http://github.com/lexi-lambda/racket-alexis-collections/tree/master#v6.1.1"))) ("6.2.1" . #hasheq((checksum . "6ad999385c1251e727baa667d3fbba601d924c8b") (source . "git://github.com/lexi-lambda/racket-alexis-collections#v6.2") (source_url . "http://github.com/lexi-lambda/racket-alexis-collections/tree/master#v6.2"))) (default . #hasheq((checksum . "997c8642d9b2adb28728d609202618bc8ffbd750") (source . "git://github.com/lexi-lambda/racket-alexis-collections") (source_url . "http://github.com/lexi-lambda/racket-alexis-collections/tree/master"))) ("6.2" . #hasheq((checksum . "6ad999385c1251e727baa667d3fbba601d924c8b") (source . "git://github.com/lexi-lambda/racket-alexis-collections#v6.2") (source_url . "http://github.com/lexi-lambda/racket-alexis-collections/tree/master#v6.2"))))))) ("type-conventions" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/type-conventions.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/type-conventions.txt"))) (checksum . "550d9045206bd1c0a05713fa866a9cc2a0b48d99") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "rackunit-lib")) (description . "Forms for giving specific argument names implicit types") (implies . ()) (last-checked . 1522414694) (last-edit . 1412969219) (last-updated . 1502816494) (modules . ((lib "type-conventions/main.rkt") (lib "type-conventions/conventions-data.rkt") (lib "type-conventions/default-conventions.rkt") (lib "type-conventions/example.rkt") (lib "type-conventions/stx-helpers.rkt") (lib "type-conventions/type-args.rkt") (lib "type-conventions/stx-test-helpers.rkt") (lib "type-conventions/formals-class.rkt"))) (name . "type-conventions") (nix-sha256 . "08rgqm9ydqmw5r05pgl61cil61pl0yfiyvd7g9yybnnaqb6k9ggz") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jackhfirth@gmail.com . #t) (ring:1 . #t) (shorthand . #t) (syntax . #t) (typed-racket . #t))) (source . "git://github.com/jackfirth/type-conventions") (tags . ("shorthand" "syntax" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "550d9045206bd1c0a05713fa866a9cc2a0b48d99") (source . "git://github.com/jackfirth/type-conventions") (source_url . "http://github.com/jackfirth/type-conventions/tree/master"))))))) ("beautiful-racket-lib" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "br" "doc/br@beautiful-racket-lib/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/beautiful-racket-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/beautiful-racket-lib.txt"))) (checksum . "3a6f7c407a3a2735f8112b47a696c086915c6eb6") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "sugar" "gui-lib" "draw-lib" "racket-doc" "gui-doc" "rackunit-lib" "scribble-lib")) (description . "support library for `beautiful-racket`") (implies . ()) (last-checked . 1522414305) (last-edit . 1483021056) (last-updated . 1521832568) (modules . ((lib "br/scribblings/br.scrbl") (lib "br/define.rkt") (lib "br/private/generate-literals.rkt") (lib "br/private/syntax-flatten.rkt") (lib "br/list.rkt") (lib "br/syntax.rkt") (lib "br/main.rkt") (lib "br/indent.rkt") (lib "br/cond.rkt") (lib "br/reader-utils.rkt") (lib "br/datum.rkt") (lib "br/quicklang.rkt") (lib "br/test.rkt") (lib "br/verbose-app.rkt") (lib "br/get-info.rkt") (lib "br/debug.rkt"))) (name . "beautiful-racket-lib") (nix-sha256 . "07z0vj3qzc37ywx12rik0zx6vk09bp1jk6g29kwrixqrqjg1fcc0") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mb@mbtype.com . #t) (ring:1 . #t))) (source . "git://github.com/mbutterick/beautiful-racket/?path=beautiful-racket-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "3a6f7c407a3a2735f8112b47a696c086915c6eb6") (source . "git://github.com/mbutterick/beautiful-racket/?path=beautiful-racket-lib") (source_url . "git://github.com/mbutterick/beautiful-racket/?path=beautiful-racket-lib"))))))) ("syntax-sloc" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "syntax-sloc" "doc/syntax-sloc@syntax-sloc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-sloc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-sloc.txt"))) (checksum . "ea9bfa06a207ba63b481dcc794c55475eb6bcc33") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "lang-file" "rackunit-lib" "scribble-lib" "scribble-code-examples" "racket-doc" "typed-racket-more")) (description . "counts the number of source lines of code in a racket syntax object") (implies . ()) (last-checked . 1522414689) (last-edit . 1462284326) (last-updated . 1503978849) (modules . ((lib "syntax-sloc/pkg-sloc.rkt") (lib "syntax-sloc/syntax-sloc.rkt") (lib "typed/syntax-sloc/main.rkt") (lib "syntax-sloc/read-lang-file.rkt") (lib "syntax-sloc/private/accumulate-stx.rkt") (lib "syntax-sloc/raco-sloc.rkt") (lib "typed/syntax-sloc/directory-sloc.rkt") (lib "syntax-sloc/scribblings/syntax-sloc.scrbl") (lib "syntax-sloc/directory-sloc.rkt") (lib "typed/syntax-sloc/read-lang-file.rkt") (lib "typed/syntax-sloc/syntax-sloc.rkt") (lib "typed/syntax-sloc/lang-file-sloc.rkt") (lib "syntax-sloc/private/pkg-module-paths.rkt") (lib "typed/syntax-sloc.rkt") (lib "syntax-sloc/lang-file-sloc.rkt") (lib "syntax-sloc/main.rkt"))) (name . "syntax-sloc") (nix-sha256 . "156rmzywjld6lf0cj8lwskgrn49ij45h1jhcj4dhrzqbyws4acgv") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:alexander@knauth.org . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/syntax-sloc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "ea9bfa06a207ba63b481dcc794c55475eb6bcc33") (source . "git://github.com/AlexKnauth/syntax-sloc") (source_url . "http://github.com/AlexKnauth/syntax-sloc/tree/master"))))))) ("Drrackgit" . #hasheq((author . "bradley.busching@gmail.com") (authors . ("bradley.busching@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/Drrackgit.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/Drrackgit.txt") (test-failure-log . "server/built/test-fail/Drrackgit.txt") (test-success-log . #f))) (checksum . "7c2836bf5a08858eca7d32959d8ae3fd90a5defe") (checksum-error . #f) (conflicts . ()) (dependencies . ("libgit2")) (description . "A git plugin for DrRacket.") (implies . ()) (last-checked . 1522414395) (last-edit . 1497302902) (last-updated . 1513894499) (modules . ((lib "Drrackgit/drrackgit.rkt"))) (name . "Drrackgit") (nix-sha256 . "0590q06amx6slxmnfzban64q4x98vpnsr8fr023fkhs0rs97cfn6") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:bradley.busching@gmail.com . #t) (git . #t) (github . #t) (ring:1 . #t))) (source . "git://github.com/bbusching/drrackgit") (tags . ("git" "github")) (versions . #hash((default . #hasheq((checksum . "7c2836bf5a08858eca7d32959d8ae3fd90a5defe") (source . "git://github.com/bbusching/drrackgit") (source_url . "http://github.com/bbusching/drrackgit/tree/master"))))))) ("superv" . #hasheq((author . "steven.leibrock@gmail.com") (authors . ("steven.leibrock@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "superv" "doc/superv@superv/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/superv.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/superv.txt"))) (checksum . "23a7132484f293c3ca407db5b3e86a9e0a7a9708") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Supervise your subprocesses with Racket") (implies . ()) (last-checked . 1522414686) (last-edit . 1490382344) (last-updated . 1502816461) (modules . ((lib "superv/supervisor/config.rkt") (lib "superv/supervisor/data.rkt") (lib "superv/supervisor/superv.rkt") (lib "superv/supervisor/main.rkt") (lib "superv/supervisor/subprocess.rkt") (lib "superv/supervisor/program.rkt") (lib "superv/scribblings/superv.scrbl"))) (name . "superv") (nix-sha256 . "19x4gk6wv75gfv49cg59rkwdj2x1gf1m3lk9kyb3ggvjsqbpgl2b") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:steven.leibrock@gmail.com . #t) (ring:1 . #t) (supervisor . #t))) (source . "git://github.com/sleibrock/superv.git") (tags . ("supervisor")) (versions . #hash((default . #hasheq((checksum . "23a7132484f293c3ca407db5b3e86a9e0a7a9708") (source . "git://github.com/sleibrock/superv.git") (source_url . "http://github.com/sleibrock/superv.git/tree/master"))))))) ("ccnum" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ccnum" "doc/ccnum@ccnum/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ccnum.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ccnum.txt"))) (checksum . "6a9e1802743086bb53c086d9e2b093849cd11e3b") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "overeasy")) (description . "Credit Card Number Utilities") (implies . ()) (last-checked . 1522414312) (last-edit . 1456636390) (last-updated . 1502812287) (modules . ((lib "ccnum/main.rkt") (lib "ccnum/ccnum.scrbl"))) (name . "ccnum") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (finance . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/ccnum.zip") (tags . ("finance")) (versions . #hash((default . #hasheq((checksum . "6a9e1802743086bb53c086d9e2b093849cd11e3b") (source . "http://www.neilvandyke.org/racket/ccnum.zip") (source_url . "http://www.neilvandyke.org/racket/ccnum.zip"))))))) ("port-match" . #hasheq((author . "leo@lwh.jp") (authors . ("leo@lwh.jp")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "port-match" "doc/port-match@port-match/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/port-match.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/port-match.txt"))) (checksum . "71fd3e9ed4f5766c46182923b08ff6d514e838a2") (checksum-error . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "Pattern Matching for Ports") (implies . ()) (last-checked . 1522414535) (last-edit . 1507535112) (last-updated . 1507548594) (modules . ((lib "port-match/private/pattern.rkt") (lib "port-match/private/expander.rkt") (lib "port-match/private/forms.rkt") (lib "port-match/test.rkt") (lib "port-match/private/template.rkt") (lib "port-match/main.rkt") (lib "port-match/port-match.scrbl") (lib "port-match/private/compile.rkt") (lib "port-match/base.rkt"))) (name . "port-match") (nix-sha256 . "1w3fawiva1zzll9adkpxazzi78va43dpjpscw65lhnj9i6s605il") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:leo@lwh.jp . #t) (binary . #t) (match . #t) (port . #t) (ring:2 . #t))) (source . "git://github.com/lwhjp/port-match") (tags . ("binary" "match" "port")) (versions . #hash((default . #hasheq((checksum . "71fd3e9ed4f5766c46182923b08ff6d514e838a2") (source . "git://github.com/lwhjp/port-match") (source_url . "http://github.com/lwhjp/port-match/tree/master"))))))))